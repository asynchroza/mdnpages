.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Notification.requestPermission_static" "JS" "July 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Notification.requestPermission_static \- Notification:
requestPermission() static method
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]requestPermission()\f[B]\f[R] static method of the
\f[CR]Notification\f[R] interface requests permission from the user for
the current origin to display notifications.
.SH SYNTAX
.IP
.EX
// The latest spec has updated this method to a promise\-based syntax that works like this:
Notification.requestPermission()

// Previously, the syntax was based on a simple callback; this version is now deprecated:
Notification.requestPermission(callback)
.EE
.SS Parameters
.TP
\f[B]callback\f[R] \f[I](optional)\f[R] \f[I](deprecated)\f[R]
An optional callback function that is called with the permission value.
Deprecated in favor of the promise return value.
.SS Return value
A \f[CR]Promise\f[R] that resolves to a string with the permission
picked by the user.
Possible values for this string are:
.IP \[bu] 2
\f[CR]granted\f[R]
.IP \[bu] 2
\f[CR]denied\f[R]
.SH EXAMPLES
Assume this basic HTML:
.IP
.EX
<button onclick=\[dq]notifyMe()\[dq]>Notify me!</button>
.EE
.PP
It\[cq]s possible to send a notification as follows \[em] here we
present a fairly verbose and complete set of code you could use if you
wanted to first check whether notifications are supported, then check if
permission has been granted for the current origin to send
notifications, then request permission if required, before then sending
a notification.
.IP
.EX
function notifyMe() {
  if (!(\[dq]Notification\[dq] in window)) {
    // Check if the browser supports notifications
    alert(\[dq]This browser does not support desktop notification\[dq]);
  } else if (Notification.permission === \[dq]granted\[dq]) {
    // Check whether notification permissions have already been granted;
    // if so, create a notification
    const notification = new Notification(\[dq]Hi there!\[dq]);
    // \&...
  } else if (Notification.permission !== \[dq]denied\[dq]) {
    // We need to ask the user for permission
    Notification.requestPermission().then((permission) => {
      // If the user accepts, let\[aq]s create a notification
      if (permission === \[dq]granted\[dq]) {
        const notification = new Notification(\[dq]Hi there!\[dq]);
        // \&...
      }
    });
  }

  // At last, if the user has denied notifications, and you
  // want to be respectful there is no need to bother them anymore.
}
.EE
.PP
We no longer show a live sample on this page, as Chrome and Firefox no
longer allow notification permissions to be requested from cross\-origin
\f[CR]<iframe>\f[R]s, with other browsers to follow.
To see an example in action, check out our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do list example
.UE \c
\ (also see \c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
the app running live
.UE \c
).
.RS
.PP
\f[B]Note:\f[R] In the above example we spawn notifications in response
to a user gesture (clicking a button).
This is not only best practice \[em] you should not be spamming users
with notifications they didn\[cq]t agree to \[em] but going forward
browsers will explicitly disallow notifications not triggered in
response to a user gesture.
Firefox is already doing this from version 72, for example.
.RE
.SH SEE ALSO
.IP \[bu] 2
Using the Notifications API
