.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.isInteger" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Number.isInteger()\f[B]\f[R] static method determines
whether the passed value is an integer.
.SH Syntax
.IP
.nf
\f[C]
Number.isInteger(value)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
The value to be tested for being an integer.
.RE
.SS Return value
.PP
The boolean value \f[V]true\f[R] if the given value is an integer.
Otherwise \f[V]false\f[R].
.SH Description
.PP
If the target value is an integer, return \f[V]true\f[R], otherwise
return \f[V]false\f[R].
If the value is \f[V]NaN\f[R] or \f[V]Infinity\f[R], return
\f[V]false\f[R].
The method will also return \f[V]true\f[R] for floating point numbers
that can be represented as integer.
It will always return \f[V]false\f[R] if the value is not a number.
.PP
Note that some number literals, while looking like non-integers,
actually represent integers \[em] due to the precision limit of
ECMAScript floating-point number encoding (IEEE-754).
For example, \f[V]5.0000000000000001\f[R] only differs from \f[V]5\f[R]
by \f[V]1e-16\f[R], which is too small to be represented.
(For reference, \f[V]Number.EPSILON\f[R] stores the distance between 1
and the next representable floating-point number greater than 1, and
that is about \f[V]2.22e-16\f[R].)
Therefore, \f[V]5.0000000000000001\f[R] will be represented with the
same encoding as \f[V]5\f[R], thus making
\f[V]Number.isInteger(5.0000000000000001)\f[R] return \f[V]true\f[R].
.PP
In a similar sense, numbers around the magnitude of
\f[V]Number.MAX_SAFE_INTEGER\f[R] will suffer from loss of precision and
make \f[V]Number.isInteger\f[R] return \f[V]true\f[R] even when it\[cq]s
not an integer.
(The actual threshold varies based on how many bits are needed to
represent the decimal \[em] for example,
\f[V]Number.isInteger(4500000000000000.1)\f[R] is \f[V]true\f[R], but
\f[V]Number.isInteger(4500000000000000.5)\f[R] is \f[V]false\f[R].)
.SH Examples
.SS Using isInteger
.IP
.nf
\f[C]
Number.isInteger(0); // true
Number.isInteger(1); // true
Number.isInteger(-100000); // true
Number.isInteger(99999999999999999999999); // true

Number.isInteger(0.1); // false
Number.isInteger(Math.PI); // false

Number.isInteger(NaN); // false
Number.isInteger(Infinity); // false
Number.isInteger(-Infinity); // false
Number.isInteger(\[dq]10\[dq]); // false
Number.isInteger(true); // false
Number.isInteger(false); // false
Number.isInteger([1]); // false

Number.isInteger(5.0); // true
Number.isInteger(5.000000000000001); // false
Number.isInteger(5.0000000000000001); // true, because of loss of precision
Number.isInteger(4500000000000000.1); // true, because of loss of precision
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Number.isInteger\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-number)
.IP \[bu] 2
The \f[V]Number\f[R] object it belongs to.
