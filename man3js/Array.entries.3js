.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.entries" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.entries - Array.prototype.entries()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]entries()\f[B]\f[R] method returns a new \f[I]array
iterator\f[R] object that contains the key/value pairs for each index in
the array.
.SH SYNTAX
.IP
.nf
\f[C]
entries()
\f[R]
.fi
.SS Return value
.PP
A new iterable iterator object.
.SH DESCRIPTION
.PP
When used on sparse arrays, the \f[V]entries()\f[R] method iterates
empty slots as if they have the value \f[V]undefined\f[R].
.PP
The \f[V]entries()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Iterating with index and element
.IP
.nf
\f[C]
const a = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];

for (const [index, element] of a.entries()) {
  console.log(index, element);
}

// 0 \[aq]a\[aq]
// 1 \[aq]b\[aq]
// 2 \[aq]c\[aq]
\f[R]
.fi
.SS Using a for\&...of loop
.IP
.nf
\f[C]
const array = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
const arrayEntries = array.entries();

for (const element of arrayEntries) {
  console.log(element);
}

// [0, \[aq]a\[aq]]
// [1, \[aq]b\[aq]]
// [2, \[aq]c\[aq]]
\f[R]
.fi
.SS Iterating sparse arrays
.PP
\f[V]entries()\f[R] will visit empty slots as if they are
\f[V]undefined\f[R].
.IP
.nf
\f[C]
for (const element of [, \[dq]a\[dq]].entries()) {
  console.log(element);
}
// [0, undefined]
// [1, \[aq]a\[aq]]
\f[R]
.fi
.SS Calling entries() on non-array objects
.PP
The \f[V]entries()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and then accesses each integer index.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
};
for (const entry of Array.prototype.entries.call(arrayLike)) {
  console.log(entry);
}
// [ 0, \[aq]a\[aq] ]
// [ 1, \[aq]b\[aq] ]
// [ 2, \[aq]c\[aq] ]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.entries\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.keys()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.values()\f[R]
.IP \[bu] 2
\f[V]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.entries()\f[R]
.IP \[bu] 2
Iteration protocols
