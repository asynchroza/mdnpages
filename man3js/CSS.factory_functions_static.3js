.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CSS.factory_functions_static" "JS" "May 6, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSS.factory_functions_static \- CSS numeric factory functions
.SH SYNOPSIS
The \f[B]CSS numeric factory functions\f[R], such as \f[CR]CSS.em()\f[R]
and \f[CR]CSS.turn()\f[R] are methods that return CSSUnitValues with the
value being the numeric argument and the unit being the name of the
method used.
These functions create new numeric values less verbosely than using the
\f[CR]CSSUnitValue()\f[R] constructor.
.SH SYNTAX
.IP
.EX
CSS.number(number)
CSS.percent(number)

// <length>
CSS.em(number)
CSS.ex(number)
CSS.ch(number)
CSS.ic(number)
CSS.rem(number)
CSS.lh(number)
CSS.rlh(number)
CSS.vw(number)
CSS.vh(number)
CSS.vi(number)
CSS.vb(number)
CSS.vmin(number)
CSS.vmax(number)
CSS.cm(number)
CSS.mm(number)
CSS.Q(number)
CSS.in(number)
CSS.pt(number)
CSS.pc(number)
CSS.px(number)

// <angle>
CSS.deg(number)
CSS.grad(number)
CSS.rad(number)
CSS.turn(number)

// <time>
CSS.s(number)
CSS.ms(number)

// <frequency>
CSS.Hz(number)
CSS.kHz(number)

// <resolution>
CSS.dpi(number)
CSS.dpcm(number)
CSS.dppx(number)

// <flex>
CSS.fr(number)
.EE
.SH EXAMPLES
We use the \f[CR]CSS.vmax()\f[R] numeric factory function to create a
\f[CR]CSSUnitValue\f[R]:
.IP
.EX
const height = CSS.vmax(50);

console.log(height); // CSSUnitValue {value: 50, unit: \[dq]vmax\[dq]}
console.log(height.value); // 50
console.log(height.unit); // vmax
.EE
.PP
In this example, we set the margin on our element using the
\f[CR]CSS.px()\f[R] factory function:
.IP
.EX
myElement.attributeStyleMap.set(\[dq]margin\[dq], CSS.px(40));
const currentMargin = myElement.attributeStyleMap.get(\[dq]margin\[dq]);
console.log(currentMargin.value, currentMargin.unit); // 40, \[aq]px\[aq]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]CSSUnitValue()\f[R]
