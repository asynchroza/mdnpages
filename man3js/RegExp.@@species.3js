.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "RegExp.\[at]\[at]species" "JS" "April 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.\[at]\[at]species \- RegExp[\[at]\[at]species]
.SH SYNOPSIS
The \f[B]\f[CB]RegExp[\[at]\[at]species]\f[B]\f[R] static accessor
property returns the constructor used to construct copied regular
expressions in certain \f[CR]RegExp\f[R] methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[CR]\[at]\[at]species\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are \c
.UR https://github.com/tc39/proposal-rm-builtin-subclassing
investigating whether to remove this feature
.UE \c
\&.
Avoid relying on it if possible.
.RE
.SH SYNTAX
.IP
.EX
RegExp[Symbol.species]
.EE
.SS Return value
The value of the constructor (\f[CR]this\f[R]) on which
\f[CR]get \[at]\[at]species\f[R] was called.
The return value is used to construct copied \f[CR]RegExp\f[R]
instances.
.SH DESCRIPTION
The \f[CR]\[at]\[at]species\f[R] accessor property returns the default
constructor for \f[CR]RegExp\f[R] objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.EX
// Hypothetical underlying implementation for illustration
class RegExp {
  static get [Symbol.species]() {
    return this;
  }
}
.EE
.PP
Because of this polymorphic implementation, \f[CR]\[at]\[at]species\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.EX
class SubRegExp extends SubRegExp {}
SubRegExp[Symbol.species] === SubRegExp; // true
.EE
.PP
Some \f[CR]RegExp\f[R] methods create a copy of the current regex
instance before running \f[CR]exec()\f[R], so that side effects such as
changes to \f[CR]lastIndex\f[R] are not retained.
The \f[CR]\[at]\[at]species\f[R] property is used to determine the
constructor of the new instance.
The methods that copy the current regex instance are:
.IP \[bu] 2
\f[CR][\[at]\[at]matchAll]()\f[R]
.IP \[bu] 2
\f[CR][\[at]\[at]split]()\f[R]
.SH EXAMPLES
.SS Species in ordinary objects
The \f[CR]\[at]\[at]species\f[R] property returns the default
constructor function, which is the \f[CR]RegExp\f[R] constructor for
\f[CR]RegExp\f[R] objects:
.IP
.EX
RegExp[Symbol.species]; // function RegExp()
.EE
.SS Species in derived objects
In an instance of a custom \f[CR]RegExp\f[R] subclass, such as
\f[CR]MyRegExp\f[R], the \f[CR]MyRegExp\f[R] species is the
\f[CR]MyRegExp\f[R] constructor.
However, you might want to overwrite this, in order to return parent
\f[CR]RegExp\f[R] objects in your derived class methods:
.IP
.EX
class MyRegExp extends RegExp {
  // Overwrite MyRegExp species to the parent RegExp constructor
  static get [Symbol.species]() {
    return RegExp;
  }
}
.EE
.PP
Or you can use this to observe the copying process:
.IP
.EX
class MyRegExp extends RegExp {
  constructor(...args) {
    console.log(\[dq]Creating a new MyRegExp instance with args:\[dq], args);
    super(...args);
  }
  static get [Symbol.species]() {
    console.log(\[dq]Copying MyRegExp\[dq]);
    return this;
  }
  exec(value) {
    console.log(\[dq]Executing with lastIndex:\[dq], this.lastIndex);
    return super.exec(value);
  }
}

Array.from(\[dq]aabbccdd\[dq].matchAll(new MyRegExp(\[dq][ac]\[dq], \[dq]g\[dq])));
// Creating a new MyRegExp instance with args: [ \[aq][ac]\[aq], \[aq]g\[aq] ]
// Copying MyRegExp
// Creating a new MyRegExp instance with args: [ MyRegExp /[ac]/g, \[aq]g\[aq] ]
// Executing with lastIndex: 0
// Executing with lastIndex: 1
// Executing with lastIndex: 2
// Executing with lastIndex: 5
// Executing with lastIndex: 6
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RegExp\f[R]
.IP \[bu] 2
\f[CR]Symbol.species\f[R]
