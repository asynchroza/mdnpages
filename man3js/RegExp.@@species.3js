.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.\[at]\[at]species" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
RegExp.\[at]\[at]species - RegExp[\[at]\[at]species]
.SH SYNOPSIS
.PP
The \f[B]\f[VB]RegExp[\[at]\[at]species]\f[B]\f[R] static accessor
property returns the constructor used to construct copied regular
expressions in certain \f[V]RegExp\f[R] methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[V]\[at]\[at]species\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are investigating whether to remove this
feature (https://github.com/tc39/proposal-rm-builtin-subclassing).
Avoid relying on it if possible.
.RE
.SH SYNTAX
.IP
.nf
\f[C]
RegExp[Symbol.species]
\f[R]
.fi
.SS Return value
.PP
The value of the constructor (\f[V]this\f[R]) on which
\f[V]get \[at]\[at]species\f[R] was called.
The return value is used to construct copied \f[V]RegExp\f[R] instances.
.SH DESCRIPTION
.PP
The \f[V]\[at]\[at]species\f[R] accessor property returns the default
constructor for \f[V]RegExp\f[R] objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.nf
\f[C]
// Hypothetical underlying implementation for illustration
class RegExp {
  static get [Symbol.species]() {
    return this;
  }
}
\f[R]
.fi
.PP
Because of this polymorphic implementation, \f[V]\[at]\[at]species\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.nf
\f[C]
class SubRegExp extends SubRegExp {}
SubRegExp[Symbol.species] === SubRegExp; // true
\f[R]
.fi
.PP
Some \f[V]RegExp\f[R] methods create a copy of the current regex
instance before running \f[V]exec()\f[R], so that side effects such as
changes to \f[V]lastIndex\f[R] are not retained.
The \f[V]\[at]\[at]species\f[R] property is used to determine the
constructor of the new instance.
The methods that copy the current regex instance are:
.IP \[bu] 2
\f[V][\[at]\[at]matchAll]()\f[R]
.IP \[bu] 2
\f[V][\[at]\[at]split]()\f[R]
.SH EXAMPLES
.SS Species in ordinary objects
.PP
The \f[V]\[at]\[at]species\f[R] property returns the default constructor
function, which is the \f[V]RegExp\f[R] constructor for \f[V]RegExp\f[R]
objects:
.IP
.nf
\f[C]
RegExp[Symbol.species]; // function RegExp()
\f[R]
.fi
.SS Species in derived objects
.PP
In an instance of a custom \f[V]RegExp\f[R] subclass, such as
\f[V]MyRegExp\f[R], the \f[V]MyRegExp\f[R] species is the
\f[V]MyRegExp\f[R] constructor.
However, you might want to overwrite this, in order to return parent
\f[V]RegExp\f[R] objects in your derived class methods:
.IP
.nf
\f[C]
class MyRegExp extends RegExp {
  // Overwrite MyRegExp species to the parent RegExp constructor
  static get [Symbol.species]() {
    return RegExp;
  }
}
\f[R]
.fi
.PP
Or you can use this to observe the copying process:
.IP
.nf
\f[C]
class MyRegExp extends RegExp {
  constructor(...args) {
    console.log(\[dq]Creating a new MyRegExp instance with args:\[dq], args);
    super(...args);
  }
  static get [Symbol.species]() {
    console.log(\[dq]Copying MyRegExp\[dq]);
    return this;
  }
  exec(value) {
    console.log(\[dq]Executing with lastIndex:\[dq], this.lastIndex);
    return super.exec(value);
  }
}

Array.from(\[dq]aabbccdd\[dq].matchAll(new MyRegExp(\[dq][ac]\[dq], \[dq]g\[dq])));
// Creating a new MyRegExp instance with args: [ \[aq][ac]\[aq], \[aq]g\[aq] ]
// Copying MyRegExp
// Creating a new MyRegExp instance with args: [ MyRegExp /[ac]/g, \[aq]g\[aq] ]
// Executing with lastIndex: 0
// Executing with lastIndex: 1
// Executing with lastIndex: 2
// Executing with lastIndex: 5
// Executing with lastIndex: 6
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]RegExp\f[R]
.IP \[bu] 2
\f[V]Symbol.species\f[R]
