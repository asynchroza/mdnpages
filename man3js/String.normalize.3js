.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.normalize" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]normalize()\f[B]\f[R] method returns the Unicode
Normalization Form of the string.
.SH Syntax
.IP
.nf
\f[C]
normalize()
normalize(form)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]form\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
One of \f[V]\[dq]NFC\[dq]\f[R], \f[V]\[dq]NFD\[dq]\f[R],
\f[V]\[dq]NFKC\[dq]\f[R], or \f[V]\[dq]NFKD\[dq]\f[R], specifying the
Unicode Normalization Form.
If omitted or \f[V]undefined\f[R], \f[V]\[dq]NFC\[dq]\f[R] is used.
.RS 2
.PP
These values have the following meanings:
.IP \[bu] 2
\f[V]\[dq]NFC\[dq]\f[R]
.RS 2
.IP \[bu] 2
Canonical Decomposition, followed by Canonical Composition.
.RE
.IP \[bu] 2
\f[V]\[dq]NFD\[dq]\f[R]
.RS 2
.IP \[bu] 2
Canonical Decomposition.
.RE
.IP \[bu] 2
\f[V]\[dq]NFKC\[dq]\f[R]
.RS 2
.IP \[bu] 2
Compatibility Decomposition, followed by Canonical Composition.
.RE
.IP \[bu] 2
\f[V]\[dq]NFKD\[dq]\f[R]
.RS 2
.IP \[bu] 2
Compatibility Decomposition.
.RE
.RE
.RE
.SS Return value
.PP
A string containing the Unicode Normalization Form of the given string.
.SS Errors thrown
.IP \[bu] 2
\f[V]RangeError\f[R]
.RS 2
.IP \[bu] 2
A \f[V]RangeError\f[R] is thrown if \f[V]form\f[R] isn\[cq]t one of the
values specified above.
.RE
.SH Description
.PP
Unicode assigns a unique numerical value, called a \f[I]code point\f[R],
to each character.
For example, the code point for \f[V]\[dq]A\[dq]\f[R] is given as
U+0041.
However, sometimes more than one code point, or sequence of code points,
can represent the same abstract character \[em] the character
\f[V]\[dq]ñ\[dq]\f[R] for example can be represented by either of:
.IP \[bu] 2
The single code point U+00F1.
.IP \[bu] 2
The code point for \f[V]\[dq]n\[dq]\f[R] (U+006E) followed by the code
point for the combining tilde (U+0303).
.IP
.nf
\f[C]
const string1 = \[dq]\[rs]u00F1\[dq];
const string2 = \[dq]\[rs]u006E\[rs]u0303\[dq];

console.log(string1); // ñ
console.log(string2); // ñ
\f[R]
.fi
.PP
However, since the code points are different, string comparison will not
treat them as equal.
And since the number of code points in each version is different, they
even have different lengths.
.IP
.nf
\f[C]
const string1 = \[dq]\[rs]u00F1\[dq]; // ñ
const string2 = \[dq]\[rs]u006E\[rs]u0303\[dq]; // ñ

console.log(string1 === string2); // false
console.log(string1.length); // 1
console.log(string2.length); // 2
\f[R]
.fi
.PP
The \f[V]normalize()\f[R] method helps solve this problem by converting
a string into a normalized form common for all sequences of code points
that represent the same characters.
There are two main normalization forms, one based on \f[B]canonical
equivalence\f[R] and the other based on \f[B]compatibility\f[R].
.SS Canonical equivalence normalization
.PP
In Unicode, two sequences of code points have canonical equivalence if
they represent the same abstract characters, and should always have the
same visual appearance and behavior (for example, they should always be
sorted in the same way).
.PP
You can use \f[V]normalize()\f[R] using the \f[V]\[dq]NFD\[dq]\f[R] or
\f[V]\[dq]NFC\[dq]\f[R] arguments to produce a form of the string that
will be the same for all canonically equivalent strings.
In the example below we normalize two representations of the character
\f[V]\[dq]ñ\[dq]\f[R]:
.IP
.nf
\f[C]
let string1 = \[dq]\[rs]u00F1\[dq]; // ñ
let string2 = \[dq]\[rs]u006E\[rs]u0303\[dq]; // ñ

string1 = string1.normalize(\[dq]NFD\[dq]);
string2 = string2.normalize(\[dq]NFD\[dq]);

console.log(string1 === string2); // true
console.log(string1.length); // 2
console.log(string2.length); // 2
\f[R]
.fi
.SS Composed and decomposed forms
.PP
Note that the length of the normalized form under
\f[V]\[dq]NFD\[dq]\f[R] is \f[V]2\f[R].
That\[cq]s because \f[V]\[dq]NFD\[dq]\f[R] gives you the
\f[B]decomposed\f[R] version of the canonical form, in which single code
points are split into multiple combining ones.
The decomposed canonical form for \f[V]\[dq]ñ\[dq]\f[R] is
\f[V]\[dq]\[rs]u006E\[rs]u0303\[dq]\f[R].
.PP
You can specify \f[V]\[dq]NFC\[dq]\f[R] to get the \f[B]composed\f[R]
canonical form, in which multiple code points are replaced with single
code points where possible.
The composed canonical form for \f[V]\[dq]ñ\[dq]\f[R] is
\f[V]\[dq]\[rs]u00F1\[dq]\f[R]:
.IP
.nf
\f[C]
let string1 = \[dq]\[rs]u00F1\[dq]; // ñ
let string2 = \[dq]\[rs]u006E\[rs]u0303\[dq]; // ñ

string1 = string1.normalize(\[dq]NFC\[dq]);
string2 = string2.normalize(\[dq]NFC\[dq]);

console.log(string1 === string2); // true
console.log(string1.length); // 1
console.log(string2.length); // 1
console.log(string2.codePointAt(0).toString(16)); // f1
\f[R]
.fi
.SS Compatibility normalization
.PP
In Unicode, two sequences of code points are compatible if they
represent the same abstract characters, and should be treated alike in
some \[em] but not necessarily all \[em] applications.
.PP
All canonically equivalent sequences are also compatible, but not vice
versa.
.PP
For example:
.IP \[bu] 2
the code point U+FB00 represents the ligature \f[V]\[dq]ﬀ\[dq]\f[R].
It is compatible with two consecutive U+0066 code points
(\f[V]\[dq]ff\[dq]\f[R]).
.IP \[bu] 2
the code point U+24B9 represents the symbol \f[V]\[dq]Ⓓ\[dq]\f[R].
It is compatible with the U+0044 code point (\f[V]\[dq]D\[dq]\f[R]).
.PP
In some respects (such as sorting) they should be treated as
equivalent\[em]and in some (such as visual appearance) they should not,
so they are not canonically equivalent.
.PP
You can use \f[V]normalize()\f[R] using the \f[V]\[dq]NFKD\[dq]\f[R] or
\f[V]\[dq]NFKC\[dq]\f[R] arguments to produce a form of the string that
will be the same for all compatible strings:
.IP
.nf
\f[C]
let string1 = \[dq]\[rs]uFB00\[dq];
let string2 = \[dq]\[rs]u0066\[rs]u0066\[dq];

console.log(string1); // ﬀ
console.log(string2); // ff
console.log(string1 === string2); // false
console.log(string1.length); // 1
console.log(string2.length); // 2

string1 = string1.normalize(\[dq]NFKD\[dq]);
string2 = string2.normalize(\[dq]NFKD\[dq]);

console.log(string1); // ff <- visual appearance changed
console.log(string2); // ff
console.log(string1 === string2); // true
console.log(string1.length); // 2
console.log(string2.length); // 2
\f[R]
.fi
.PP
When applying compatibility normalization it\[cq]s important to consider
what you intend to do with the strings, since the normalized form may
not be appropriate for all applications.
In the example above the normalization is appropriate for search,
because it enables a user to find the string by searching for
\f[V]\[dq]f\[dq]\f[R].
But it may not be appropriate for display, because the visual
representation is different.
.PP
As with canonical normalization, you can ask for decomposed or composed
compatible forms by passing \f[V]\[dq]NFKD\[dq]\f[R] or
\f[V]\[dq]NFKC\[dq]\f[R], respectively.
.SH Examples
.SS Using normalize()
.IP
.nf
\f[C]
// Initial string

// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE
// U+0323: COMBINING DOT BELOW
const str = \[dq]\[rs]u1E9B\[rs]u0323\[dq];

// Canonically-composed form (NFC)

// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE
// U+0323: COMBINING DOT BELOW
str.normalize(\[dq]NFC\[dq]); // \[aq]\[rs]u1E9B\[rs]u0323\[aq]
str.normalize(); // same as above

// Canonically-decomposed form (NFD)

// U+017F: LATIN SMALL LETTER LONG S
// U+0323: COMBINING DOT BELOW
// U+0307: COMBINING DOT ABOVE
str.normalize(\[dq]NFD\[dq]); // \[aq]\[rs]u017F\[rs]u0323\[rs]u0307\[aq]

// Compatibly-composed (NFKC)

// U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE
str.normalize(\[dq]NFKC\[dq]); // \[aq]\[rs]u1E69\[aq]

// Compatibly-decomposed (NFKD)

// U+0073: LATIN SMALL LETTER S
// U+0323: COMBINING DOT BELOW
// U+0307: COMBINING DOT ABOVE
str.normalize(\[dq]NFKD\[dq]); // \[aq]\[rs]u0073\[rs]u0323\[rs]u0307\[aq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Unicode Standard Annex #15, Unicode Normalization
Forms (https://www.unicode.org/reports/tr15/)
.IP \[bu] 2
Unicode equivalence (https://en.wikipedia.org/wiki/Unicode_equivalence)
