.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WakeLockSentinel" "JS" "December 17, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WakeLockSentinel \- WakeLockSentinel
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]WakeLockSentinel\f[B]\f[R] interface of the Screen Wake
Lock API provides a handle to the underlying platform wake lock and can
be manually released and reacquired.
An \f[CR]Object\f[R] representing the wake lock is returned via the
\f[CR]navigator.wakeLock.request()\f[R] method.
.PP
An acquired \f[CR]WakeLockSentinel\f[R] can be released manually via the
\f[CR]release()\f[R] method, or automatically via the platform wake
lock.
This can happen if the document becomes inactive or looses visibility,
if the device is low on power or the user turns on a power save mode.
Releasing all \f[CR]WakeLockSentinel\f[R] instances of a given wake lock
type will cause the underlying platform wake lock to be released.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]released\f[R] \f[I](read\-only)\f[R]
Returns a boolean indicating whether the \f[CR]WakeLockSentinel\f[R] has
been released.
.TP
\f[B]type\f[R] \f[I](read\-only)\f[R]
Returns a string representation of the currently acquired
\f[CR]WakeLockSentinel\f[R] type.
Return values are:
.RS
.IP \[bu] 2
\f[CR]screen\f[R]: A screen wake lock.
Prevents devices from dimming or locking the screen.
.RE
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]release()\f[R]
Releases the \f[CR]WakeLockSentinel\f[R], returning a \f[CR]Promise\f[R]
that is resolved once the sentinel has been successfully released.
.SH EVENTS
.TP
\f[B]release\f[R]
Fired when the \f[CR]release()\f[R] method is called or the wake lock is
released by the user agent.
.SH EXAMPLES
In this example we create an asynchronous function which requests a
\f[CR]WakeLockSentinel\f[R].
Once acquired we listen for the \f[CR]release\f[R] event which can be
used to give appropriate UI feedback.
The sentinel can be acquired or released via appropriate interactions.
.IP
.EX
// create a reference for the wake lock
let wakeLock = null;

// create an async function to request a wake lock
const requestWakeLock = async () => {
  try {
    wakeLock = await navigator.wakeLock.request(\[dq]screen\[dq]);

    // listen for our release event
    wakeLock.addEventListener(\[dq]release\[dq], () => {
      // if wake lock is released alter the UI accordingly
    });
  } catch (err) {
    // if wake lock request fails \- usually system related, such as battery
  }
};

wakeLockOnButton.addEventListener(\[dq]click\[dq], () => {
  requestWakeLock();
});

wakeLockOffButton.addEventListener(\[dq]click\[dq], () => {
  if (wakeLock !== null) {
    wakeLock.release().then(() => {
      wakeLock = null;
    });
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/wake-lock/
Stay awake with the Screen Wake Lock API
.UE \c
