.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WritableStream.close" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStream.close \- WritableStream: close() method
.SH SYNOPSIS
The \f[B]\f[CB]close()\f[B]\f[R] method of the \f[CR]WritableStream\f[R]
interface closes the associated stream.
All chunks written before this method is called are sent before the
returned promise is fulfilled.
.PP
This is equivalent to getting a \f[CR]WritableStreamDefaultWriter\f[R]
with \f[CR]getWriter()\f[R], calling \f[CR]close()\f[R] on it.
.SH SYNTAX
.IP
.EX
close()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] which fulfills with the \f[CR]undefined\f[R] when
all remaining chunks were successfully written before the close, or
rejects with an error if a problem was encountered during the process.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The stream you are trying to close is locked.
.SH EXAMPLES
The following example illustrates several features of the
\f[CR]WritableStream\f[R].
It shows the creation of the \f[CR]WritableStream\f[R] with a custom
sink and an API\-supplied queuing strategy.
It then calls a function called \f[CR]sendMessage()\f[R], passing the
newly created stream and a string.
Inside this function it calls the stream\[cq]s \f[CR]getWriter()\f[R]
method, which returns an instance of
\f[CR]WritableStreamDefaultWriter\f[R].
A \f[CR]forEach()\f[R] call is used to write each chunk of the string to
the stream.
Finally, \f[CR]write()\f[R] and \f[CR]close()\f[R] return promises that
are processed to deal with success or failure of chunks and streams.
Note that in order to be able to call \f[CR]close()\f[R] on the stream
itself, the writer must be disconnected using
\f[CR]defaultWriter.releaseLock();\f[R].
.PP
\f[CR]html hidden <ul id=\[dq]log\[dq]></ul>\f[R]
.PP
\f[CR]js hidden const list = document.getElementById(\[dq]log\[dq]); function log(message) {   const listItem = document.createElement(\[dq]li\[dq]);   listItem.textContent = message;   list.appendChild(listItem); }\f[R]
.IP
.EX
function sendMessage(message, writableStream) {
  // defaultWriter is of type WritableStreamDefaultWriter
  const defaultWriter = writableStream.getWriter();
  const encoder = new TextEncoder();
  const encoded = encoder.encode(message, { stream: true });
  encoded.forEach((chunk) => {
    defaultWriter.ready
      .then(() => {
        defaultWriter.write(chunk);
      })
      .catch((err) => {
        log(\[dq]Chunk error:\[dq], err);
      });
  });

  // Call ready again to ensure that all chunks are written
  //   before closing the writer.
  defaultWriter.ready
    .then(() => {
      defaultWriter.releaseLock();
      writableStream.close();
    })
    .then(() => {
      log(\[dq]All chunks written / stream closed.\[dq]);
    })
    .catch((err) => {
      log(\[dq]Stream error:\[dq], err);
    });
}

const decoder = new TextDecoder(\[dq]utf\-8\[dq]);
const queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });
let result = \[dq]\[dq];
const writableStream = new WritableStream(
  {
    // Implement the sink
    write(chunk) {
      return new Promise((resolve, reject) => {
        const buffer = new ArrayBuffer(1);
        const view = new Uint8Array(buffer);
        view[0] = chunk;
        const decoded = decoder.decode(view, { stream: true });
        const listItem = document.createElement(\[dq]li\[dq]);
        result += decoded;
        resolve();
      });
    },
    close() {
      const listItem = document.createElement(\[dq]li\[dq]);
      log(\[ga][MESSAGE RECEIVED] ${result}\[ga]);
    },
    abort(err) {
      log(\[dq]Sink error:\[dq], err);
    },
  },
  queuingStrategy,
);

log(\[dq]Sending \[aq]Hello, world.\[aq] message.\[dq]);
sendMessage(\[dq]Hello, world.\[dq], writableStream);
.EE
