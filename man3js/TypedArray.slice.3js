.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.slice" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.slice - TypedArray.prototype.slice()
.SH SYNOPSIS
The \f[B]\f[CB]slice()\f[B]\f[R] method returns a new typed array (with
a new underlying buffer), that contains a copy of a portion of the
original typed array.
This method has the same algorithm as
\f[CR]Array.prototype.slice()\f[R].
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH SYNTAX
.IP
.EX
slice()
slice(start)
slice(start, end)
.EE
.SS Parameters
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Zero-based index at which to begin extraction.
.RS
.PP
A negative index can be used, indicating an offset from the end of the
sequence.
\f[CR]slice(-2)\f[R] extracts the last two elements in the sequence.
.PP
If \f[CR]start\f[R] is undefined, \f[CR]slice\f[R] begins from index
\f[CR]0\f[R].
.RE
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Zero-based index \f[I]before\f[R] which to end extraction.
\f[CR]slice\f[R] extracts up to but not including \f[CR]end\f[R].
.RS
.PP
For example, \f[CR]slice(1,4)\f[R] extracts the second element through
the fourth element (elements indexed 1, 2, and 3).
.PP
A negative index can be used, indicating an offset from the end of the
sequence.
\f[CR]slice(2,-1)\f[R] extracts the third element through the
second-to-last element in the sequence.
.PP
If \f[CR]end\f[R] is omitted, \f[CR]slice\f[R] extracts through the end
of the sequence (\f[CR]typedarray.length\f[R]).
.RE
.SS Return value
A new typed array containing the extracted elements.
.SH DESCRIPTION
The \f[CR]slice\f[R] method does not alter the original typed array, but
instead returns a copy of a portion of the original typed array.
As typed arrays only store primitive values, the copy the
\f[CR]slice\f[R] method returns is always a deep copy.
.PP
If an element is changed in either typed array, the other typed array is
not affected.
.SH EXAMPLES
.SS Return a portion of an existing typed array
.IP
.EX
const uint8 = new Uint8Array([1, 2, 3]);
uint8.slice(1); // Uint8Array [ 2, 3 ]
uint8.slice(2); // Uint8Array [ 3 ]
uint8.slice(-2); // Uint8Array [ 2, 3 ]
uint8.slice(0, 1); // Uint8Array [ 1 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.slice\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[CR]Array.prototype.slice()\f[R]
