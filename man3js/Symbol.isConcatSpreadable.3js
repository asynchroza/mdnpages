'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.isConcatSpreadable" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Symbol.isConcatSpreadable\f[B]\f[R] static data property
represents the well-known symbol \f[V]\[at]\[at]isConcatSpreadable\f[R].
The \f[V]Array.prototype.concat()\f[R] method looks up this symbol on
each object being concatenated to determine if it should be treated as
an array-like object and flattened to its array elements.
.SH Value
.PP
The well-known symbol \f[V]\[at]\[at]isConcatSpreadable\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH Description
.PP
The \f[V]\[at]\[at]isConcatSpreadable\f[R] symbol
(\f[V]Symbol.isConcatSpreadable\f[R]) can be defined as an own or
inherited property and its value is a boolean.
It can control behavior for arrays and array-like objects:
.IP \[bu] 2
For array objects, the default behavior is to spread (flatten) elements.
\f[V]Symbol.isConcatSpreadable\f[R] can avoid flattening in these cases.
.IP \[bu] 2
For array-like objects, the default behavior is no spreading or
flattening.
\f[V]Symbol.isConcatSpreadable\f[R] can force flattening in these cases.
.SH Examples
.SS Arrays
.PP
By default, \f[V]Array.prototype.concat()\f[R] spreads (flattens) arrays
into its result:
.IP
.nf
\f[C]
const alpha = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
const numeric = [1, 2, 3];

const alphaNumeric = alpha.concat(numeric);

console.log(alphaNumeric); // Result: [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], 1, 2, 3]
\f[R]
.fi
.PP
When setting \f[V]Symbol.isConcatSpreadable\f[R] to \f[V]false\f[R], you
can disable the default behavior:
.IP
.nf
\f[C]
const alpha = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
const numeric = [1, 2, 3];

numeric[Symbol.isConcatSpreadable] = false;
const alphaNumeric = alpha.concat(numeric);

console.log(alphaNumeric); // Result: [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], [1, 2, 3] ]
\f[R]
.fi
.SS Array-like objects
.PP
For array-like objects, the default is to not spread.
\f[V]Symbol.isConcatSpreadable\f[R] needs to be set to \f[V]true\f[R] in
order to get a flattened array:
.IP
.nf
\f[C]
const x = [1, 2, 3];

const fakeArray = {
  [Symbol.isConcatSpreadable]: true,
  length: 2,
  0: \[dq]hello\[dq],
  1: \[dq]world\[dq],
};

x.concat(fakeArray); // [1, 2, 3, \[dq]hello\[dq], \[dq]world\[dq]]
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] The \f[V]length\f[R] property is used to control the
number of object properties to be added.
In the above example, \f[V]length:2\f[R] indicates two properties has to
be added.
.RE
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Symbol.isConcatSpreadable\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-symbol)
.IP \[bu] 2
\f[V]Array.prototype.concat()\f[R]
