.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Promise.allSettled" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Promise.allSettled()\f[B]\f[R] static method takes an
iterable of promises as input and returns a single \f[V]Promise\f[R].
This returned promise fulfills when all of the input\[cq]s promises
settle (including when an empty iterable is passed), with an array of
objects that describe the outcome of each promise.
.SH Syntax
.IP
.nf
\f[C]
Promise.allSettled(iterable)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]iterable\f[R]
.RS 2
.IP \[bu] 2
An iterable (such as an \f[V]Array\f[R]) of promises.
.RE
.SS Return value
.PP
A \f[V]Promise\f[R] that is:
.IP \[bu] 2
\f[B]Already fulfilled\f[R], if the \f[V]iterable\f[R] passed is empty.
.IP \[bu] 2
\f[B]Asynchronously fulfilled\f[R], when all promises in the given
\f[V]iterable\f[R] have settled (either fulfilled or rejected).
The fulfillment value is an array of objects, each describing the
outcome of one promise in the \f[V]iterable\f[R], in the order of the
promises passed, regardless of completion order.
Each outcome object has the following properties:
.RS 2
.IP \[bu] 2
\f[V]status\f[R]
.RS 2
.IP \[bu] 2
A string, either \f[V]\[dq]fulfilled\[dq]\f[R] or
\f[V]\[dq]rejected\[dq]\f[R], indicating the eventual state of the
promise.
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
Only present if \f[V]status\f[R] is \f[V]\[dq]fulfilled\[dq]\f[R].
The value that the promise was fulfilled with.
.RE
.IP \[bu] 2
\f[V]reason\f[R]
.RS 2
.IP \[bu] 2
Only present if \f[V]status\f[R] is \f[V]\[dq]rejected\[dq]\f[R].
The reason that the promise was rejected with.
.RE
.PP
If the \f[V]iterable\f[R] passed is non-empty but contains no pending
promises, the returned promise is still asynchronously (instead of
synchronously) fulfilled.
.RE
.SH Description
.PP
The \f[V]Promise.allSettled()\f[R] method is one of the promise
concurrency methods.
\f[V]Promise.allSettled()\f[R] is typically used when you have multiple
asynchronous tasks that are not dependent on one another to complete
successfully, or you\[cq]d always like to know the result of each
promise.
.PP
In comparison, the Promise returned by \f[V]Promise.all()\f[R] may be
more appropriate if the tasks are dependent on each other, or if
you\[cq]d like to immediately reject upon any of them rejecting.
.SH Examples
.SS Using Promise.allSettled()
.IP
.nf
\f[C]
Promise.allSettled([
  Promise.resolve(33),
  new Promise((resolve) => setTimeout(() => resolve(66), 0)),
  99,
  Promise.reject(new Error(\[dq]an error\[dq])),
]).then((values) => console.log(values));

// [
//   { status: \[aq]fulfilled\[aq], value: 33 },
//   { status: \[aq]fulfilled\[aq], value: 66 },
//   { status: \[aq]fulfilled\[aq], value: 99 },
//   { status: \[aq]rejected\[aq], reason: Error: an error }
// ]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Promise.allSettled\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-promise)
.IP \[bu] 2
Using promises
.IP \[bu] 2
Graceful asynchronous programming with promises
.IP \[bu] 2
\f[V]Promise\f[R]
.IP \[bu] 2
\f[V]Promise.all()\f[R]
.IP \[bu] 2
\f[V]Promise.any()\f[R]
.IP \[bu] 2
\f[V]Promise.race()\f[R]
