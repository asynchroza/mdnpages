.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WritableStreamDefaultController.signal" "JS" "July 19, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStreamDefaultController.signal \-
WritableStreamDefaultController: signal property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]signal\f[B]\f[R] property of the
\f[CR]WritableStreamDefaultController\f[R] interface returns the
\f[CR]AbortSignal\f[R] associated with the controller.
.SH VALUE
An \f[CR]AbortSignal\f[R] object.
.SH EXAMPLES
.SS Aborting a long write operation
In this example, we simulate a slow operation using a local sink: We do
nothing when some data is written but to wait for a second.
This gives us enough time to call the \f[CR]writer.abort()\f[R] method
and to immediately reject the promise.
.IP
.EX
const writingStream = new WritableStream({
  // Define the slow local sink to simulate a long operation
  write(controller) {
    return new Promise((resolve, reject) => {
      controller.signal.addEventListener(\[dq]abort\[dq], () =>
        reject(controller.signal.reason),
      );

      // Do nothing but wait with the data: it is a local sink
      setTimeout(resolve, 1000); // Timeout to simulate a slow operation
    });
  },
});

// Perform the write
const writer = writingStream.getWriter();
writer.write(\[dq]Lorem ipsum test data\[dq]);

// Abort the write manually
await writer.abort(\[dq]Manual abort!\[dq]);
.EE
.SS Transferring the \f[CR]AbortSignal\f[R] to the underlying layer
In this example, we use the Fetch API to actually send the message to a
server.
The Fetch API also support \f[CR]AbortSignal\f[R]: It is possible to use
the same object for both the \f[CR]fetch\f[R] method and the
\f[CR]WritableStreamDefaultController\f[R].
.IP
.EX
const endpoint = \[dq]https://www.example.com/api\[dq]; // Fake URL for example purpose
const writingStream = new WritableStream({
  async write(chunk, controller) {
    // Write to the server using the Fetch API
    const response = await fetch(endpoint, {
      signal: controller.signal, // We use the same object for both fetch and controller
      method: \[dq]POST\[dq],
      body: chunk,
    });
    await response.text();
  },
});

// Perform the write
const writer = writingStream.getWriter();
writer.write(\[dq]Lorem ipsum test data\[dq]);

// Abort the write manually
await writer.abort(\[dq]Manual abort!\[dq]);
.EE
