'\" t
.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Array.length" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.length \- Array: length
.SH SYNOPSIS
The \f[B]\f[CB]length\f[B]\f[R] data property of an \f[CR]Array\f[R]
instance represents the number of elements in that array.
The value is an unsigned, 32\-bit integer that is always numerically
greater than the highest index in the array.
.SH VALUE
A nonnegative integer less than 2\[ha]32.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
yes
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
The value of the \f[CR]length\f[R] property is a nonnegative integer
with a value less than 2\[ha]32.
.IP
.EX
const listA = [1, 2, 3];
const listB = new Array(6);

console.log(listA.length);
// 3

console.log(listB.length);
// 6

listB.length = 2 ** 32; // 4294967296
// RangeError: Invalid array length

const listC = new Array(\-100); // Negative numbers are not allowed
// RangeError: Invalid array length
.EE
.PP
The array object observes the \f[CR]length\f[R] property, and
automatically syncs the \f[CR]length\f[R] value with the array\[cq]s
content.
This means:
.IP \[bu] 2
Setting \f[CR]length\f[R] to a value smaller than the current length
truncates the array \[em] elements beyond the new \f[CR]length\f[R] are
deleted.
.IP \[bu] 2
Setting any array index (a nonnegative integer smaller than 2\[ha]32)
beyond the current \f[CR]length\f[R] extends the array \[em] the
\f[CR]length\f[R] property is increased to reflect the new highest
index.
.IP \[bu] 2
Setting \f[CR]length\f[R] to an invalid value (e.g.\ a negative number
or a non\-integer) throws a \f[CR]RangeError\f[R] exception.
.PP
When \f[CR]length\f[R] is set to a bigger value than the current length,
the array is extended by adding empty slots, not actual
\f[CR]undefined\f[R] values.
Empty slots have some special interactions with array methods; see array
methods and empty slots.
.IP
.EX
const arr = [1, 2];
console.log(arr);
// [ 1, 2 ]

arr.length = 5; // set array length to 5 while currently 2.
console.log(arr);
// [ 1, 2, <3 empty items> ]

arr.forEach((element) => console.log(element));
// 1
// 2
.EE
.PP
See also Relationship between \f[CR]length\f[R] and numerical
properties.
.SH EXAMPLES
.SS Iterating over an array
In the following example, the array \f[CR]numbers\f[R] is iterated
through by looking at the \f[CR]length\f[R] property.
The value in each element is then doubled.
.IP
.EX
const numbers = [1, 2, 3, 4, 5];
const length = numbers.length;
for (let i = 0; i < length; i++) {
  numbers[i] *= 2;
}
// numbers is now [2, 4, 6, 8, 10]
.EE
.SS Shortening an array
The following example shortens the array \f[CR]numbers\f[R] to a length
of 3 if the current length is greater than 3.
.IP
.EX
const numbers = [1, 2, 3, 4, 5];

if (numbers.length > 3) {
  numbers.length = 3;
}

console.log(numbers); // [1, 2, 3]
console.log(numbers.length); // 3
console.log(numbers[3]); // undefined; the extra elements are deleted
.EE
.SS Create empty array of fixed length
Setting \f[CR]length\f[R] to a value greater than the current length
creates a sparse array.
.IP
.EX
const numbers = [];
numbers.length = 3;
console.log(numbers); // [empty x 3]
.EE
.SS Array with non\-writable length
The \f[CR]length\f[R] property is automatically updated by the array
when elements are added beyond the current length.
If the \f[CR]length\f[R] property is made non\-writable, the array will
not be able to update it.
This causes an error in strict mode.
.IP
.EX
\[dq]use strict\[dq];

const numbers = [1, 2, 3, 4, 5];
Object.defineProperty(numbers, \[dq]length\[dq], { writable: false });
numbers[5] = 6; // TypeError: Cannot assign to read only property \[aq]length\[aq] of object \[aq][object Array]\[aq]
numbers.push(5); // // TypeError: Cannot assign to read only property \[aq]length\[aq] of object \[aq][object Array]\[aq]
.EE
.SH SEE ALSO
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.length\f[R]
.IP \[bu] 2
\f[CR]String\f[R]: \f[CR]length\f[R]
.IP \[bu] 2
RangeError: invalid array length
