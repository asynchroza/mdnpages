.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "HTMLImageElement.crossOrigin" "JS" "December 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLImageElement.crossOrigin \- HTMLImageElement: crossOrigin property
.SH SYNOPSIS
The \f[CR]HTMLImageElement\f[R] interface\[cq]s
\f[B]\f[CB]crossOrigin\f[B]\f[R] attribute is a string which specifies
the Cross\-Origin Resource Sharing (CORS) setting to use when retrieving
the image.
.SH VALUE
A string of a keyword specifying the CORS mode to use when fetching the
image resource.
If you don\[cq]t specify \f[CR]crossOrigin\f[R], the image is fetched
without CORS (the fetch \f[CR]no\-cors\f[R] mode).
.PP
Permitted values are:
.TP
\f[B]anonymous\f[R]
Requests by the \f[CR]<img>\f[R] element have their \f[CR]mode\f[R] set
to \f[CR]cors\f[R] and their \f[CR]credentials\f[R] mode set to
\f[CR]same\-origin\f[R].
This means that CORS is enabled and credentials are sent \f[I]if\f[R]
the image is fetched from the same origin from which the document was
loaded.
.TP
\f[B]use\-credentials\f[R]
Requests by the \f[CR]HTMLImageElement\f[R] will use the \f[CR]cors\f[R]
mode and the \f[CR]include\f[R] credentials mode; all image requests by
the element will use CORS, regardless of what domain the fetch is from.
.PP
If \f[CR]crossOrigin\f[R] is an empty string (\f[CR]\[dq]\[dq]\f[R]),
the \f[CR]anonymous\f[R] mode is selected.
.SH EXAMPLES
In this example, a new \f[CR]<img>\f[R] element is created and added to
the document, loading the image with the Anonymous state; the image will
be loaded using CORS and credentials will be used for all cross\-origin
loads.
.SS JavaScript
The code below demonstrates setting the \f[CR]crossOrigin\f[R] property
on an \f[CR]<img>\f[R] element to configure CORS access for the fetch of
a newly\-created image.
.IP
.EX
const imageUrl = \[dq]clock\-demo\-400px.png\[dq];
const container = document.querySelector(\[dq].container\[dq]);

function loadImage(url) {
  const image = new Image(200, 200);
  image.addEventListener(\[dq]load\[dq], () => container.prepend(image));

  image.addEventListener(\[dq]error\[dq], () => {
    const errMsg = document.createElement(\[dq]output\[dq]);
    errMsg.value = \[ga]Error loading image at ${url}\[ga];
    container.append(errMsg);
  });

  image.crossOrigin = \[dq]anonymous\[dq];
  image.alt = \[dq]\[dq];
  image.src = url;
}

loadImage(imageUrl);
.EE
.SS HTML
.IP
.EX
<div class=\[dq]container\[dq]>
  <p>
    Here\[aq]s a paragraph. It\[aq]s a very interesting paragraph. You are captivated by
    this paragraph. Keep reading this paragraph. Okay, now you can stop reading
    this paragraph. Thanks for reading me.
  </p>
</div>
.EE
.SS CSS
.IP
.EX
body {
  font:
    1.125rem/1.5,
    Helvetica,
    sans\-serif;
}

\&.container {
  display: flow\-root;
  width: 37.5em;
  border: 1px solid #d2d2d2;
}

img {
  float: left;
  padding\-right: 1.5em;
}

output {
  background: rgba(100, 100, 100, 0.1);
  font\-family: Courier, monospace;
  width: 95%;
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLLinkElement.crossOrigin\f[R]
.IP \[bu] 2
\f[CR]HTMLMediaElement.crossOrigin\f[R]
