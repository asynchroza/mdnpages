.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "RegExp.input" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.input - RegExp.input ($_)
.SH SYNOPSIS
\f[I](deprecated)\f[R]
.RS
.PP
\f[B]Note:\f[R] All \f[CR]RegExp\f[R] static properties that expose the
last match state globally are deprecated.
See deprecated RegExp features for more information.
.RE
.PP
The \f[B]\f[CB]RegExp.input\f[B]\f[R] static accessor property returns
the string against which a regular expression is matched.
\f[CR]RegExp.$_\f[R] is an alias for this property.
.SH DESCRIPTION
Because \f[CR]input\f[R] is a static property of \f[CR]RegExp\f[R], you
always use it as \f[CR]RegExp.input\f[R] or \f[CR]RegExp.$_\f[R], rather
than as a property of a \f[CR]RegExp\f[R] object you created.
.PP
The value of \f[CR]input\f[R] updates whenever a \f[CR]RegExp\f[R] (but
not a \f[CR]RegExp\f[R] subclass) instance makes a successful match.
If no matches have been made, \f[CR]input\f[R] is an empty string.
You can set the value of \f[CR]input\f[R], but this does not affect
other behaviors of the regex, and the value will be overwritten again
when the next successful match is made.
.SH EXAMPLES
.SS Using input and $_
.IP
.EX
const re = /hi/g;
re.test(\[dq]hi there!\[dq]);
RegExp.input; // \[dq]hi there!\[dq]
re.test(\[dq]foo\[dq]); // new test, non-matching
RegExp.$_; // \[dq]hi there!\[dq]
re.test(\[dq]hi world!\[dq]); // new test, matching
RegExp.$_; // \[dq]hi world!\[dq]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RegExp.lastMatch ($&amp;)\f[R]
.IP \[bu] 2
\f[CR]RegExp.lastParen ($+)\f[R]
.IP \[bu] 2
\f[CR]RegExp.leftContext ($\f[R])\[ga]
.IP \[bu] 2
\f[CR]RegExp.rightContext ($\[aq])\f[R]
.IP \[bu] 2
\f[CR]RegExp.$1, \&..., RegExp.$9\f[R]
