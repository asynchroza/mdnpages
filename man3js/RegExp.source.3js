.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.source" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]source\f[B]\f[R] accessor property of \f[V]RegExp\f[R]
instances returns a string containing the source text of this regular
expression, without the two forward slashes on both sides or any flags.
.SH Description
.PP
Conceptually, the \f[V]source\f[R] property is the text between the two
forward slashes in the regular expression literal.
The language requires the returned string to be properly escaped, so
that when the \f[V]source\f[R] is concatenated with a forward slash on
both ends, it would form a parsable regex literal.
For example, for \f[V]new RegExp(\[dq]/\[dq])\f[R], the \f[V]source\f[R]
is \f[V]\[rs]\[rs]/\f[R], because if it generates \f[V]/\f[R], the
resulting literal becomes \f[V]///\f[R], which is a line comment.
Similarly, all line terminators will be escaped because line terminator
\f[I]characters\f[R] would break up the regex literal.
There\[cq]s no requirement for other characters, as long as the result
is parsable.
For empty regular expressions, the string \f[V](?:)\f[R] is returned.
.SH Examples
.SS Using source
.IP
.nf
\f[C]
const regex = /fooBar/gi;

console.log(regex.source); // \[dq]fooBar\[dq], doesn\[aq]t contain /.../ and \[dq]gi\[dq].
\f[R]
.fi
.SS Empty regular expressions and escaping
.IP
.nf
\f[C]
new RegExp().source; // \[dq](?:)\[dq]

new RegExp(\[dq]\[rs]n\[dq]).source === \[dq]\[rs]\[rs]n\[dq]; // true, starting with ES5
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]RegExp.prototype.flags\f[R]
