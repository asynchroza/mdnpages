.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.random" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Math.random()\f[B]\f[R] static method returns a
floating-point, pseudo-random number that\[cq]s greater than or equal to
0 and less than 1, with approximately uniform distribution over that
range \[em] which you can then scale to your desired range.
The implementation selects the initial seed to the random number
generation algorithm; it cannot be chosen or reset by the user.
.RS
.PP
\f[B]Note:\f[R] \f[V]Math.random()\f[R] \f[I]does not\f[R] provide
cryptographically secure random numbers.
Do not use them for anything related to security.
Use the Web Crypto API instead, and more precisely the
\f[V]window.crypto.getRandomValues()\f[R] method.
.RE
.SH Syntax
.IP
.nf
\f[C]
Math.random()
\f[R]
.fi
.SS Return value
.PP
A floating-point, pseudo-random number between 0 (inclusive) and 1
(exclusive).
.SH Examples
.PP
Note that as numbers in JavaScript are IEEE 754 floating point numbers
with round-to-nearest-even behavior, the ranges claimed for the
functions below (excluding the one for \f[V]Math.random()\f[R] itself)
aren\[cq]t exact.
If extremely large bounds are chosen (253 or higher), it\[cq]s possible
in \f[I]extremely\f[R] rare cases to reach the usually-excluded upper
bound.
.SS Getting a random number between 0 (inclusive) and 1 (exclusive)
.IP
.nf
\f[C]
function getRandom() {
  return Math.random();
}
\f[R]
.fi
.SS Getting a random number between two values
.PP
This example returns a random number between the specified values.
The returned value is no lower than (and may possibly equal)
\f[V]min\f[R], and is less than (and not equal) \f[V]max\f[R].
.IP
.nf
\f[C]
function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}
\f[R]
.fi
.SS Getting a random integer between two values
.PP
This example returns a random \f[I]integer\f[R] between the specified
values.
The value is no lower than \f[V]min\f[R] (or the next integer greater
than \f[V]min\f[R] if \f[V]min\f[R] isn\[cq]t an integer), and is less
than (but not equal to) \f[V]max\f[R].
.IP
.nf
\f[C]
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive
}
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] It might be tempting to use \f[V]Math.round()\f[R] to
accomplish that, but doing so would cause your random numbers to follow
a non-uniform distribution, which may not be acceptable for your needs.
.RE
.SS Getting a random integer between two values, inclusive
.PP
While the \f[V]getRandomInt()\f[R] function above is inclusive at the
minimum, it\[cq]s exclusive at the maximum.
What if you need the results to be inclusive at both the minimum and the
maximum?
The \f[V]getRandomIntInclusive()\f[R] function below accomplishes that.
.IP
.nf
\f[C]
function getRandomIntInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1) + min); // The maximum is inclusive and the minimum is inclusive
}
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]window.crypto.getRandomValues()\f[R]
