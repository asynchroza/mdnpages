.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WritableStreamDefaultWriter.WritableStreamDefaultWriter" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStreamDefaultWriter.WritableStreamDefaultWriter \-
WritableStreamDefaultWriter: WritableStreamDefaultWriter() constructor
.SH SYNOPSIS
The \f[B]\f[CB]WritableStreamDefaultWriter()\f[B]\f[R] constructor
creates a new \f[CR]WritableStreamDefaultWriter\f[R] object instance.
.RS
.PP
\f[B]Note:\f[R] You generally wouldn\[cq]t use this constructor
manually; instead, you\[cq]d use the
\f[CR]WritableStream.getWriter()\f[R] method.
.RE
.SH SYNTAX
.IP
.EX
new WritableStreamDefaultWriter(stream)
.EE
.SS Parameters
.TP
\f[B]stream\f[R]
The \f[CR]WritableStream\f[R] to be written to.
.SS Return value
An instance of the \f[CR]WritableStreamDefaultWriter\f[R] object.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The provided \f[CR]stream\f[R] value is not a \f[CR]WritableStream\f[R],
or it is locked to another writer already.
.SH EXAMPLES
The following example shows the creation of a \f[CR]WritableStream\f[R]
with a custom sink and an API\-supplied queuing strategy.
It then calls a function called \f[CR]sendMessage()\f[R], passing the
newly created stream and a string.
Inside this function it calls the stream\[cq]s \f[CR]getWriter()\f[R]
method, which returns an instance of
\f[CR]WritableStreamDefaultWriter\f[R].
A \f[CR]forEach()\f[R] call is used to write each chunk of the string to
the stream.
Finally, \f[CR]write()\f[R] and \f[CR]close()\f[R] return promises that
are processed to deal with success or failure of chunks and streams.
.IP
.EX
const list = document.querySelector(\[dq]ul\[dq]);

function sendMessage(message, writableStream) {
  // defaultWriter is of type WritableStreamDefaultWriter
  const defaultWriter = writableStream.getWriter();
  const encoder = new TextEncoder();
  const encoded = encoder.encode(message, { stream: true });
  encoded.forEach((chunk) => {
    defaultWriter.ready
      .then(() => defaultWriter.write(chunk))
      .then(() => {
        console.log(\[dq]Chunk written to sink.\[dq]);
      })
      .catch((err) => {
        console.log(\[dq]Chunk error:\[dq], err);
      });
  });
  // Call ready again to ensure that all chunks are written
  //   before closing the writer.
  defaultWriter.ready
    .then(() => {
      defaultWriter.close();
    })
    .then(() => {
      console.log(\[dq]All chunks written\[dq]);
    })
    .catch((err) => {
      console.log(\[dq]Stream error:\[dq], err);
    });
}

const decoder = new TextDecoder(\[dq]utf\-8\[dq]);
const queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });
let result = \[dq]\[dq];
const writableStream = new WritableStream(
  {
    // Implement the sink
    write(chunk) {
      return new Promise((resolve, reject) => {
        const buffer = new ArrayBuffer(1);
        const view = new Uint8Array(buffer);
        view[0] = chunk;
        const decoded = decoder.decode(view, { stream: true });
        const listItem = document.createElement(\[dq]li\[dq]);
        listItem.textContent = \[ga]Chunk decoded: ${decoded}\[ga];
        list.appendChild(listItem);
        result += decoded;
        resolve();
      });
    },
    close() {
      const listItem = document.createElement(\[dq]li\[dq]);
      listItem.textContent = \[ga][MESSAGE RECEIVED] ${result}\[ga];
      list.appendChild(listItem);
    },
    abort(err) {
      console.log(\[dq]Sink error:\[dq], err);
    },
  },
  queuingStrategy,
);

sendMessage(\[dq]Hello, world.\[dq], writableStream);
.EE
.PP
You can find the full code in our \c
.UR https://mdn.github.io/dom-examples/streams/simple-writer/
Simple writer example
.UE \c
\&.
