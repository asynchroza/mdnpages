.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AbortController" "JS" "September 5, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AbortController \- AbortController
.SH SYNOPSIS
The \f[B]\f[CB]AbortController\f[B]\f[R] interface represents a
controller object that allows you to abort one or more Web requests as
and when desired.
.PP
You can create a new \f[CR]AbortController\f[R] object using the
\f[CR]AbortController()\f[R] constructor.
Communicating with a DOM request is done using an \f[CR]AbortSignal\f[R]
object.
.SH CONSTRUCTOR
.TP
\f[B]AbortController()\f[R]
Creates a new \f[CR]AbortController\f[R] object instance.
.SH INSTANCE PROPERTIES
.TP
\f[B]AbortController.signal\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]AbortSignal\f[R] object instance, which can be used to
communicate with, or to abort, a DOM request.
.SH INSTANCE METHODS
.TP
\f[B]AbortController.abort()\f[R]
Aborts a DOM request before it has completed.
This is able to abort fetch requests, consumption of any response
bodies, and streams.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] There are additional examples in the
\f[CR]AbortSignal\f[R] reference.
.RE
.PP
In the following snippet, we aim to download a video using the Fetch
API.
.PP
We first create a controller using the \f[CR]AbortController()\f[R]
constructor, then grab a reference to its associated
\f[CR]AbortSignal\f[R] object using the
\f[CR]AbortController.signal\f[R] property.
.PP
When the fetch request is initiated, we pass in the
\f[CR]AbortSignal\f[R] as an option inside the request\[cq]s options
object (the \f[CR]{signal}\f[R] below).
This associates the signal and controller with the fetch request and
allows us to abort it by calling \f[CR]AbortController.abort()\f[R], as
seen below in the second event listener.
.IP
.EX
let controller;
const url = \[dq]video.mp4\[dq];

const downloadBtn = document.querySelector(\[dq].download\[dq]);
const abortBtn = document.querySelector(\[dq].abort\[dq]);

downloadBtn.addEventListener(\[dq]click\[dq], fetchVideo);

abortBtn.addEventListener(\[dq]click\[dq], () => {
  if (controller) {
    controller.abort();
    console.log(\[dq]Download aborted\[dq]);
  }
});

function fetchVideo() {
  controller = new AbortController();
  const signal = controller.signal;
  fetch(url, { signal })
    .then((response) => {
      console.log(\[dq]Download complete\[dq], response);
    })
    .catch((err) => {
      console.error(\[ga]Download error: ${err.message}\[ga]);
    });
}
.EE
.RS
.PP
\f[B]Note:\f[R] When \f[CR]abort()\f[R] is called, the
\f[CR]fetch()\f[R] promise rejects with a \f[CR]DOMException\f[R] named
\f[CR]AbortError\f[R].
.RE
.PP
You can find a \c
.UR https://github.com/mdn/dom-examples/tree/main/abort-api
full working example on GitHub
.UE \c
; you can also see it \c
.UR https://mdn.github.io/dom-examples/abort-api/
running live
.UE \c
\&.
.SH SEE ALSO
.IP \[bu] 2
Fetch API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/blog/abortable-fetch/
Abortable Fetch
.UE \c
\ by Jake Archibald
