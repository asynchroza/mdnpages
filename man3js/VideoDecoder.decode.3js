.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "VideoDecoder.decode" "JS" "August 1, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoDecoder.decode \- VideoDecoder: decode() method
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]decode()\f[B]\f[R] method of the \f[CR]VideoDecoder\f[R]
interface enqueues a control message to decode a given chunk of video.
.SH SYNTAX
.IP
.EX
decode(chunk)
.EE
.SS Parameters
.TP
\f[B]chunk\f[R]
An \f[CR]EncodedVideoChunk\f[R] object representing a chunk of encoded
video.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]state\f[R] is not \f[CR]configured\f[R].
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]chunk\f[R] is unable to be decoded due to relying on
other frames for decoding.
.SH EXAMPLES
The following example demonstrates how to use the \f[CR]decode()\f[R]
method to decode \f[CR]EncodedVideoChunk\f[R] objects created from
encoded video data.
.IP
.EX
const responses = await downloadVideoChunksFromServer(timestamp);
for (const response of responses) {
  const chunk = new EncodedVideoChunk({
    timestamp: response.timestamp,
    type: response.key ? \[dq]key\[dq] : \[dq]delta\[dq],
    data: new Uint8Array(response.body),
  });
  decoder.decode(chunk);
}
.EE
