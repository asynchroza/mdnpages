.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransferItemList.remove" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.remove \- DataTransferItemList: remove() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransferItemList.remove()\f[B]\f[R] method removes
the \f[CR]DataTransferItem\f[R] at the specified index from the list.
If the index is less than zero or greater than one less than the length
of the list, the list will not be changed.
.SH SYNTAX
.IP
.EX
remove(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
The zero\-based index number of the item in the drag data list to
remove.
If the \f[CR]index\f[R] doesn\[cq]t correspond to an existing item in
the list, the list is left unchanged.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the drag data store is not in read/write mode and so the item
cannot be removed.
.SH EXAMPLES
.SS Dragging and dropping an element
This example shows the use of the \f[CR]remove()\f[R] method.
.SS HTML
.IP
.EX
<div>
  <p id=\[dq]source\[dq] draggable=\[dq]true\[dq]>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </p>
</div>
<div id=\[dq]target\[dq]>Drop Zone</div>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0em;
  padding: 2em;
}

source {
  color: blue;
  border: 1px solid black;
}

target {
  border: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
function dragstart_handler(ev) {
  console.log(\[dq]dragStart\[dq]);
  // Add this element\[aq]s id to the drag payload so the drop handler will
  // know which element to add to its tree
  const dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \[dq]text/plain\[dq]);
  // Add some other items to the drag payload
  dataList.add(\[dq]<p>Paragraph\&...</p>\[dq], \[dq]text/html\[dq]);
  dataList.add(\[dq]http://www.example.org\[dq], \[dq]text/uri\-list\[dq]);
}

function drop_handler(ev) {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();
  const data = event.dataTransfer.items;
  // Loop through the dropped items and log their data
  for (const item of data) {
    if (item.kind === \[dq]string\[dq] && item.type.match(\[dq]\[ha]text/plain\[dq])) {
      // This item is the target node
      item.getAsString((s) => {
        ev.target.appendChild(document.getElementById(s));
      });
    } else if (item.kind === \[dq]string\[dq] && item.type.match(\[dq]\[ha]text/html\[dq])) {
      // Drag data item is HTML
      item.getAsString((s) => {
        console.log(\[ga]\&... Drop: HTML = ${s}\[ga]);
      });
    } else if (item.kind === \[dq]string\[dq] && item.type.match(\[dq]\[ha]text/uri\-list\[dq])) {
      // Drag data item is URI
      item.getAsString((s) => {
        console.log(\[ga]\&... Drop: URI = ${s}\[ga]);
      });
    }
  }
}

function dragover_handler(ev) {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();
  // Set the dropEffect to move
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

function dragend_handler(ev) {
  console.log(\[dq]dragEnd\[dq]);
  const dataList = ev.dataTransfer.items;
  // Clear all the files. Iterate in reverse order to safely remove.
  for (let i = dataList.length \- 1; i >= 0; i\-\-) {
    if (dataList[i].kind === \[dq]file\[dq]) {
      dataList.remove(i);
    }
  }
  // Clear any remaining drag data
  dataList.clear();
}

const source = document.querySelector(\[dq]#source\[dq]);
source.addEventListener(\[dq]dragstart\[dq], dragstart_handler);
source.addEventListener(\[dq]dragend\[dq], dragend_handler);

const target = document.querySelector(\[dq]#target\[dq]);
target.addEventListener(\[dq]drop\[dq], drop_handler);
target.addEventListener(\[dq]dragover\[dq], dragover_handler);
.EE
.SS Result
