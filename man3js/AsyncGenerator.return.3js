.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "AsyncGenerator.return" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
AsyncGenerator.return - AsyncGenerator.prototype.return()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]return()\f[B]\f[R] method of \f[V]AsyncGenerator\f[R]
instances acts as if a \f[V]return\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which finishes
the generator and allows the generator to perform any cleanup tasks when
combined with a \f[V]try...finally\f[R] block.
.SH SYNTAX
.IP
.nf
\f[C]
asyncGeneratorObject.return(value)
\f[R]
.fi
.SS Parameters
.TP
\f[B]value\f[R]
The value to return.
.SS Return value
.PP
A \f[V]Promise\f[R] which resolves with an \f[V]Object\f[R] with two
properties:
.TP
\f[B]done\f[R]
A boolean value:
.RS
.IP \[bu] 2
\f[V]true\f[R] if the generator function\[cq]s control flow has reached
the end.
.IP \[bu] 2
\f[V]false\f[R] if the generator function\[cq]s control flow hasn\[cq]t
reached the end and can produce more values.
This can only happen if the \f[V]return\f[R] is captured in a
\f[V]try...finally\f[R] and there are more \f[V]yield\f[R] expressions
in the \f[V]finally\f[R] block.
.RE
.TP
\f[B]value\f[R]
The value that is given as an argument, or, if the \f[V]yield\f[R]
expression is wrapped in a \f[V]try...finally\f[R], the value
yielded/returned from the \f[V]finally\f[R] block.
.SH DESCRIPTION
.PP
The \f[V]return()\f[R] method, when called, can be seen as if a
\f[V]return value;\f[R] statement is inserted in the generator\[cq]s
body at the current suspended position, where \f[V]value\f[R] is the
value passed to the \f[V]return()\f[R] method.
Therefore, in a typical flow, calling \f[V]return(value)\f[R] will
return \f[V]{ done: true, value: value }\f[R].
However, if the \f[V]yield\f[R] expression is wrapped in a
\f[V]try...finally\f[R] block, the control flow doesn\[cq]t exit the
function body, but proceeds to the \f[V]finally\f[R] block instead.
In this case, the value returned may be different, and \f[V]done\f[R]
may even be \f[V]false\f[R], if there are more \f[V]yield\f[R]
expressions within the \f[V]finally\f[R] block.
.SH EXAMPLES
.SS Using return()
.PP
The following example shows a simple async generator and the
\f[V]return\f[R] method.
.IP
.nf
\f[C]
// An async task. Pretend it\[aq]s doing something more useful
// in practice.
function delayedValue(time, value) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(value), time);
  });
}

async function* createAsyncGenerator() {
  yield delayedValue(500, 1);
  yield delayedValue(500, 2);
  yield delayedValue(500, 3);
}

const asyncGen = createAsyncGenerator();
asyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }
asyncGen.return(\[dq]foo\[dq]).then((res) => console.log(res)); // { value: \[dq]foo\[dq], done: true }
asyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true }
\f[R]
.fi
.SS Using return() once a generator is complete
.PP
If no \f[V]value\f[R] argument is passed into the \f[V]return()\f[R]
method, the promise will resolve as if the next() method has been
called.
In this example the generator has completed, so the value returned is
\f[V]undefined\f[R].
.PP
\f[V]return()\f[R] can still be called after the generator is in a
\[lq]completed\[rq] state, however the generator will stay in this
state.
.IP
.nf
\f[C]
async function* createAsyncGenerator() {
  yield await Promise.resolve(1);
  yield await Promise.resolve(2);
  yield await Promise.resolve(3);
}
const asyncGen = createAsyncGenerator();
asyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }
asyncGen.next().then((res) => console.log(res)); // { value: 2, done: false }
asyncGen.next().then((res) => console.log(res)); // { value: 3, done: false }
// value is returned undefined, as no value is passed and generator is \[aq]done\[aq]
asyncGen.return().then((res) => console.log(res)); // { value: undefined, done: true }
// we can still return a value once the generator is complete
asyncGen.return(1).then((res) => console.log(res)); // { value: 1, done: true }
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]async function*\f[R]
.IP \[bu] 2
Iterators and generators
