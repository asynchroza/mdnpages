.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.deleteProperty" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Reflect.deleteProperty()\f[B]\f[R] static method is like
the \f[V]delete\f[R] operator, but as a function.
It deletes a property from an object.
.SH Syntax
.IP
.nf
\f[C]
Reflect.deleteProperty(target, propertyKey)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
The target object on which to delete the property.
.RE
.IP \[bu] 2
\f[V]propertyKey\f[R]
.RS 2
.IP \[bu] 2
The name of the property to be deleted.
.RE
.SS Return value
.PP
A boolean indicating whether or not the property was successfully
deleted.
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]target\f[R] is not an object.
.RE
.SH Description
.PP
\f[V]Reflect.deleteProperty()\f[R] provides the reflective semantic of
the \f[V]delete\f[R] operator.
That is, \f[V]Reflect.deleteProperty(target, propertyKey)\f[R] is
semantically equivalent to:
.IP
.nf
\f[C]
delete target.propertyKey;
\f[R]
.fi
.PP
At the very low level, deleting a property returns a boolean (as is the
case with the proxy handler).
\f[V]Reflect.deleteProperty()\f[R] directly returns the status, while
\f[V]delete\f[R] would throw a \f[V]TypeError\f[R] in strict mode if the
status is \f[V]false\f[R].
In non-strict mode, \f[V]delete\f[R] and
\f[V]Reflect.deleteProperty()\f[R] have the same behavior.
.PP
\f[V]Reflect.deleteProperty()\f[R] invokes the \f[V][[Delete]]\f[R]
object internal method of \f[V]target\f[R].
.SH Examples
.SS Using Reflect.deleteProperty()
.IP
.nf
\f[C]
const obj = { x: 1, y: 2 };
Reflect.deleteProperty(obj, \[dq]x\[dq]); // true
console.log(obj); // { y: 2 }

const arr = [1, 2, 3, 4, 5];
Reflect.deleteProperty(arr, \[dq]3\[dq]); // true
console.log(arr); // [1, 2, 3, undefined, 5]

// Returns true if no such property exists
Reflect.deleteProperty({}, \[dq]foo\[dq]); // true

// Returns false if a property is unconfigurable
Reflect.deleteProperty(Object.freeze({ foo: 1 }), \[dq]foo\[dq]); // false
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Reflect.deleteProperty\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]delete\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]deleteProperty\f[R] handler
