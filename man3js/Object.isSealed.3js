.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Object.isSealed" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.isSealed - Object.isSealed()
.SH SYNOPSIS
The \f[B]\f[CB]Object.isSealed()\f[B]\f[R] static method determines if
an object is sealed.
.SH SYNTAX
.IP
.EX
Object.isSealed(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object which should be checked.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the given object is
sealed.
.SH DESCRIPTION
Returns \f[CR]true\f[R] if the object is sealed, otherwise
\f[CR]false\f[R].
An object is sealed if it is not \f[CR]extensible\f[R] and if all its
properties are non-configurable and therefore not removable (but not
necessarily non-writable).
.SH EXAMPLES
.SS Using Object.isSealed
.IP
.EX
// Objects aren\[aq]t sealed by default.
const empty = {};
Object.isSealed(empty); // false

// If you make an empty object non-extensible,
// it is vacuously sealed.
Object.preventExtensions(empty);
Object.isSealed(empty); // true

// The same is not true of a non-empty object,
// unless its properties are all non-configurable.
const hasProp = { fee: \[dq]fie foe fum\[dq] };
Object.preventExtensions(hasProp);
Object.isSealed(hasProp); // false

// But make them all non-configurable
// and the object becomes sealed.
Object.defineProperty(hasProp, \[dq]fee\[dq], {
  configurable: false,
});
Object.isSealed(hasProp); // true

// The easiest way to seal an object, of course,
// is Object.seal.
const sealed = {};
Object.seal(sealed);
Object.isSealed(sealed); // true

// A sealed object is, by definition, non-extensible.
Object.isExtensible(sealed); // false

// A sealed object might be frozen,
// but it doesn\[aq]t have to be.
Object.isFrozen(sealed); // true
// (all properties also non-writable)

const s2 = Object.seal({ p: 3 });
Object.isFrozen(s2); // false
// (\[aq]p\[aq] is still writable)

const s3 = Object.seal({
  get p() {
    return 0;
  },
});
Object.isFrozen(s3); // true
// (only configurability matters for accessor properties)
.EE
.SS Non-object argument
In ES5, if the argument to this method is not an object (a primitive),
then it will cause a \f[CR]TypeError\f[R].
In ES2015, it will return \f[CR]true\f[R] without any errors if a
non-object argument is passed, since primitives are, by definition,
immutable.
.IP
.EX
Object.isSealed(1);
// TypeError: 1 is not an object (ES5 code)

Object.isSealed(1);
// true                          (ES2015 code)
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.seal()\f[R]
.IP \[bu] 2
\f[CR]Object.preventExtensions()\f[R]
.IP \[bu] 2
\f[CR]Object.isExtensible()\f[R]
.IP \[bu] 2
\f[CR]Object.freeze()\f[R]
.IP \[bu] 2
\f[CR]Object.isFrozen()\f[R]
