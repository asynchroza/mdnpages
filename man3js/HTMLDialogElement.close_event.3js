.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "HTMLDialogElement.close_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLDialogElement.close_event \- HTMLDialogElement: close event
.SH SYNOPSIS
The \f[CR]close\f[R] event is fired on an \f[CR]HTMLDialogElement\f[R]
object when the \f[CR]<dialog>\f[R] it represents has been closed.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]close\[dq], (event) => {});

onclose = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
.SS Live example
.SS HTML
.IP
.EX
<dialog class=\[dq]example\-dialog\[dq]>
  <form method=\[dq]dialog\[dq]>
    <button>Close via method=\[dq]dialog\[dq]</button>
  </form>
  <button class=\[dq]close\[dq]>Close via .close() method</button>
  <p>Or hit the <kbd>Esc</kbd> key</p>
</dialog>

<button class=\[dq]open\-dialog\[dq]>Open dialog</button>

<div class=\[dq]result\[dq]></div>
.EE
.SS JavaScript
.IP
.EX
const result = document.querySelector(\[dq].result\[dq]);

const dialog = document.querySelector(\[dq].example\-dialog\[dq]);
dialog.addEventListener(\[dq]close\[dq], (event) => {
  result.textContent = \[dq]dialog was closed\[dq];
});

const openDialog = document.querySelector(\[dq].open\-dialog\[dq]);
openDialog.addEventListener(\[dq]click\[dq], () => {
  dialog.showModal();
  result.textContent = \[dq]\[dq];
});

const closeButton = document.querySelector(\[dq].close\[dq]);
closeButton.addEventListener(\[dq]click\[dq], () => {
  dialog.close();
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
HTML \f[CR]<dialog>\f[R] element
