.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Animation.commitStyles" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Animation.commitStyles \- Animation: commitStyles() method
.SH SYNOPSIS
The \f[CR]commitStyles()\f[R] method of the Web Animations API\[cq]s
\f[CR]Animation\f[R] interface writes the computed values of the
animation\[cq]s current styles into its target element\[cq]s
\f[CR]style\f[R] attribute.
\f[CR]commitStyles()\f[R] works even if the animation has been
automatically removed.
.PP
\f[CR]commitStyles()\f[R] can be used in combination with
\f[CR]fill\f[R] to cause the final state of an animation to persist
after the animation ends.
The same effect could be achieved with \f[CR]fill\f[R] alone, but \c
.UR https://drafts.csswg.org/web-animations-1/#fill-behavior
using indefinitely filling animations is discouraged
.UE \c
\&.
Animations take precedence over all static styles, so an indefinite
filling animation can prevent the target element from ever being styled
normally.
.PP
Using \f[CR]commitStyles()\f[R] writes the styling state into the
element\[cq]s \f[CR]style\f[R] attribute, where they can be modified and
replaced as normal.
.SH SYNTAX
.IP
.EX
commitStyles()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Committing the final state of an animation
In this example we have two buttons, labeled \[lq]Commit styles\[rq] and
\[lq]Fill forwards\[rq].
Both buttons animate when you click them, and both buttons persist the
final state of the animation.
.PP
The difference, though, is that \[lq]Fill forwards\[rq] only uses
\f[CR]fill: \[dq]forwards\[dq]\f[R] to persist the animation\[cq]s final
state: this means that the browser has to maintain the animation\[cq]s
state indefinitely, or until it can be automatically removed.
.PP
However, the \[lq]Commit styles\[rq] button waits for the animation to
finish, then calls \f[CR]commitStyles()\f[R], then cancels the
animation, so the finished style is captured as the value of the
\f[CR]style\f[R] attribute, rather than as the animation state.
.SS HTML
.IP
.EX
<button class=\[dq]commit\-styles\[dq]>Commit styles</button>
<br />
<button class=\[dq]fill\-forwards\[dq]>Fill forwards</button>
.EE
.SS JavaScript
.IP
.EX
const commitStyles = document.querySelector(\[dq].commit\-styles\[dq]);
let offset1 = 0;

commitStyles.addEventListener(\[dq]click\[dq], async (event) => {
  // Start the animation
  offset1 = 100 \- offset1;
  const animation = commitStyles.animate(
    { transform: \[ga]translate(${offset1}px)\[ga] },
    { duration: 500, fill: \[dq]forwards\[dq] },
  );

  // Wait for the animation to finish
  await animation.finished;
  // Commit animation state to style attribute
  animation.commitStyles();
  // Cancel the animation
  animation.cancel();
});

const fillForwards = document.querySelector(\[dq].fill\-forwards\[dq]);
let offset2 = 0;

fillForwards.addEventListener(\[dq]click\[dq], async (event) => {
  // Start the animation
  offset2 = 100 \- offset2;
  const animation = fillForwards.animate(
    { transform: \[ga]translate(${offset2}px)\[ga] },
    { duration: 500, fill: \[dq]forwards\[dq] },
  );
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Web Animations API
.IP \[bu] 2
\f[CR]Animation\f[R] for other methods and properties you can use to
control web page animation.
