.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Promise.then" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]then()\f[B]\f[R] method of \f[V]Promise\f[R] instances
takes up to two arguments: callback functions for the fulfilled and
rejected cases of the \f[V]Promise\f[R].
It immediately returns an equivalent \f[V]Promise\f[R] object, allowing
you to chain calls to other promise methods.
.SH Syntax
.IP
.nf
\f[C]
then(onFulfilled)
then(onFulfilled, onRejected)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]onFulfilled\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A function to asynchronously execute when this promise becomes
fulfilled.
Its return value becomes the fulfillment value of the promise returned
by \f[V]then()\f[R].
The function is called with the following arguments:
.RS 2
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
The value that the promise was fulfilled with.
.RE
.PP
If it is not a function, it is internally replaced with an
\f[I]identity\f[R] function (\f[V](x) => x\f[R]) which simply passes the
fulfillment value forward.
.RE
.RE
.IP \[bu] 2
\f[V]onRejected\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A function to asynchronously execute when this promise becomes rejected.
Its return value becomes the fulfillment value of the promise returned
by \f[V]catch()\f[R].
The function is called with the following arguments:
.RS 2
.IP \[bu] 2
\f[V]reason\f[R]
.RS 2
.IP \[bu] 2
The value that the promise was rejected with.
.RE
.PP
If it is not a function, it is internally replaced with a
\f[I]thrower\f[R] function (\f[V](x) => { throw x; }\f[R]) which throws
the rejection reason it received.
.RE
.RE
.SS Return value
.PP
Returns a new \f[V]Promise\f[R] immediately.
This new promise is always pending when returned, regardless of the
current promise\[cq]s status.
.PP
One of the \f[V]onFulfilled\f[R] and \f[V]onRejected\f[R] handlers will
be executed to handle the current promise\[cq]s fulfillment or
rejection.
The call always happens asynchronously, even when the current promise is
already settled.
The behavior of the returned promise (call it \f[V]p\f[R]) depends on
the handler\[cq]s execution result, following a specific set of rules.
If the handler function:
.IP \[bu] 2
returns a value: \f[V]p\f[R] gets fulfilled with the returned value as
its value.
.IP \[bu] 2
doesn\[cq]t return anything: \f[V]p\f[R] gets fulfilled with
\f[V]undefined\f[R] as its value.
.IP \[bu] 2
throws an error: \f[V]p\f[R] gets rejected with the thrown error as its
value.
.IP \[bu] 2
returns an already fulfilled promise: \f[V]p\f[R] gets fulfilled with
that promise\[cq]s value as its value.
.IP \[bu] 2
returns an already rejected promise: \f[V]p\f[R] gets rejected with that
promise\[cq]s value as its value.
.IP \[bu] 2
returns another pending promise: \f[V]p\f[R] is pending and becomes
fulfilled/rejected with that promise\[cq]s value as its value
immediately after that promise becomes fulfilled/rejected.
.SH Description
.PP
The \f[V]then()\f[R] method schedules callback functions for the
eventual completion of a Promise \[em] either fulfillment or rejection.
It is the primitive method of promises: the thenable protocol expects
all promise-like objects to expose a \f[V]then()\f[R] method, and the
\f[V]catch()\f[R] and \f[V]finally()\f[R] methods both work by invoking
the object\[cq]s \f[V]then()\f[R] method.
.PP
For more information about the \f[V]onRejected\f[R] handler, see the
\f[V]catch()\f[R] reference.
.PP
\f[V]then()\f[R] returns a new promise object.
If you call the \f[V]then()\f[R] method twice on the same promise object
(instead of chaining), then this promise object will have two pairs of
settlement handlers.
All handlers attached to the same promise object are always called in
the order they were added.
Moreover, the two promises returned by each call of \f[V]then()\f[R]
start separate chains and do not wait for each other\[cq]s settlement.
.PP
Thenable objects that arise along the \f[V]then()\f[R] chain are always
resolved \[em] the \f[V]onFulfilled\f[R] handler never receives a
thenable object, and any thenable returned by either handler are always
resolved before being passed to the next handler.
This is because when constructing the new promise, the \f[V]resolve\f[R]
and \f[V]reject\f[R] functions passed by the \f[V]executor\f[R] are
saved, and when the current promise settles, the respective function
will be called with the fulfillment value or rejection reason.
The resolving logic comes from the resolver function passed by the
\f[V]Promise()\f[R] constructor.
.PP
\f[V]then()\f[R] supports subclassing, which means it can be called on
instances of subclasses of \f[V]Promise\f[R], and the result will be a
promise of the subclass type.
You can customize the type of the return value through the
\f[V]\[at]\[at]species\f[R] property.
.SH Examples
.SS Using the then() method
.IP
.nf
\f[C]
const p1 = new Promise((resolve, reject) => {
  resolve(\[dq]Success!\[dq]);
  // or
  // reject(new Error(\[dq]Error!\[dq]));
});

p1.then(
  (value) => {
    console.log(value); // Success!
  },
  (reason) => {
    console.error(reason); // Error!
  },
);
\f[R]
.fi
.SS Having a non-function as either parameter
.IP
.nf
\f[C]
Promise.resolve(1).then(2).then(console.log); // 1
Promise.reject(1).then(2, 2).then(console.log, console.log); // 1
\f[R]
.fi
.SS Chaining
.PP
The \f[V]then\f[R] method returns a new \f[V]Promise\f[R], which allows
for method chaining.
.PP
If the function passed as handler to \f[V]then\f[R] returns a
\f[V]Promise\f[R], an equivalent \f[V]Promise\f[R] will be exposed to
the subsequent \f[V]then\f[R] in the method chain.
The below snippet simulates asynchronous code with the
\f[V]setTimeout\f[R] function.
.IP
.nf
\f[C]
Promise.resolve(\[dq]foo\[dq])
  // 1. Receive \[dq]foo\[dq], concatenate \[dq]bar\[dq] to it, and resolve that to the next then
  .then(
    (string) =>
      new Promise((resolve, reject) => {
        setTimeout(() => {
          string += \[dq]bar\[dq];
          resolve(string);
        }, 1);
      }),
  )
  // 2. receive \[dq]foobar\[dq], register a callback function to work on that string
  // and print it to the console, but not before returning the unworked on
  // string to the next then
  .then((string) => {
    setTimeout(() => {
      string += \[dq]baz\[dq];
      console.log(string); // foobarbaz
    }, 1);
    return string;
  })
  // 3. print helpful messages about how the code in this section will be run
  // before the string is actually processed by the mocked asynchronous code in the
  // previous then block.
  .then((string) => {
    console.log(
      \[dq]Last Then: oops... didn\[aq]t bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising\[dq],
    );

    // Note that \[ga]string\[ga] will not have the \[aq]baz\[aq] bit of it at this point. This
    // is because we mocked that to happen asynchronously with a setTimeout function
    console.log(string); // foobar
  });

// Logs, in order:
// Last Then: oops... didn\[aq]t bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising
// foobar
// foobarbaz
\f[R]
.fi
.PP
The value returned from \f[V]then()\f[R] is resolved in the same way as
\f[V]Promise.resolve()\f[R].
This means thenable objects are supported, and if the return value is
not a promise, it\[cq]s implicitly wrapped in a \f[V]Promise\f[R] and
then resolved.
.IP
.nf
\f[C]
const p2 = new Promise((resolve, reject) => {
  resolve(1);
});

p2.then((value) => {
  console.log(value); // 1
  return value + 1;
}).then((value) => {
  console.log(value, \[dq]- A synchronous value works\[dq]); // 2 - A synchronous value works
});

p2.then((value) => {
  console.log(value); // 1
});
\f[R]
.fi
.PP
A \f[V]then\f[R] call returns a promise that eventually rejects if the
function throws an error or returns a rejected Promise.
.IP
.nf
\f[C]
Promise.resolve()
  .then(() => {
    // Makes .then() return a rejected promise
    throw new Error(\[dq]Oh no!\[dq]);
  })
  .then(
    () => {
      console.log(\[dq]Not called.\[dq]);
    },
    (error) => {
      console.error(\[ga]onRejected function called: ${error.message}\[ga]);
    },
  );
\f[R]
.fi
.PP
In practice, it is often desirable to \f[V]catch()\f[R] rejected
promises rather than \f[V]then()\f[R]\[cq]s two-case syntax, as
demonstrated below.
.IP
.nf
\f[C]
Promise.resolve()
  .then(() => {
    // Makes .then() return a rejected promise
    throw new Error(\[dq]Oh no!\[dq]);
  })
  .catch((error) => {
    console.error(\[ga]onRejected function called: ${error.message}\[ga]);
  })
  .then(() => {
    console.log(\[dq]I am always called even if the prior then\[aq]s promise rejects\[dq]);
  });
\f[R]
.fi
.PP
In all other cases, the returned promise eventually fulfills.
In the following example, the first \f[V]then()\f[R] returns
\f[V]42\f[R] wrapped in a fulfilled Promise, even though the previous
Promise in the chain was rejected.
.IP
.nf
\f[C]
Promise.reject()
  .then(
    () => 99,
    () => 42,
  ) // onRejected returns 42 which is wrapped in a fulfilled Promise
  .then((solution) => console.log(\[ga]Resolved with ${solution}\[ga])); // Fulfilled with 42
\f[R]
.fi
.PP
If \f[V]onFulfilled\f[R] returns a promise, the return value of
\f[V]then\f[R] will be fulfilled/rejected based on the eventual state of
that promise.
.IP
.nf
\f[C]
function resolveLater(resolve, reject) {
  setTimeout(() => {
    resolve(10);
  }, 1000);
}
function rejectLater(resolve, reject) {
  setTimeout(() => {
    reject(new Error(\[dq]Error\[dq]));
  }, 1000);
}

const p1 = Promise.resolve(\[dq]foo\[dq]);
const p2 = p1.then(() => {
  // Return promise here, that will be resolved to 10 after 1 second
  return new Promise(resolveLater);
});
p2.then(
  (v) => {
    console.log(\[dq]resolved\[dq], v); // \[dq]resolved\[dq], 10
  },
  (e) => {
    // not called
    console.error(\[dq]rejected\[dq], e);
  },
);

const p3 = p1.then(() => {
  // Return promise here, that will be rejected with \[aq]Error\[aq] after 1 second
  return new Promise(rejectLater);
});
p3.then(
  (v) => {
    // not called
    console.log(\[dq]resolved\[dq], v);
  },
  (e) => {
    console.error(\[dq]rejected\[dq], e); // \[dq]rejected\[dq], \[aq]Error\[aq]
  },
);
\f[R]
.fi
.PP
You can use chaining to implement one function with a Promise-based API
on top of another such function.
.IP
.nf
\f[C]
function fetchCurrentData() {
  // The fetch() API returns a Promise. This function
  // exposes a similar API, except the fulfillment
  // value of this function\[aq]s Promise has had more
  // work done on it.
  return fetch(\[dq]current-data.json\[dq]).then((response) => {
    if (response.headers.get(\[dq]content-type\[dq]) !== \[dq]application/json\[dq]) {
      throw new TypeError();
    }
    const j = response.json();
    // maybe do something with j

    // fulfillment value given to user of
    // fetchCurrentData().then()
    return j;
  });
}
\f[R]
.fi
.SS Asynchronicity of then()
.PP
The following is an example to demonstrate the asynchronicity of the
\f[V]then\f[R] method.
.IP
.nf
\f[C]
// Using a resolved promise \[aq]resolvedProm\[aq] for example,
// the function call \[aq]resolvedProm.then(...)\[aq] returns a new promise immediately,
// but its handler \[aq](value) => {...}\[aq] will get called asynchronously as demonstrated by the console.logs.
// the new promise is assigned to \[aq]thenProm\[aq],
// and thenProm will be resolved with the value returned by handler
const resolvedProm = Promise.resolve(33);
console.log(resolvedProm);

const thenProm = resolvedProm.then((value) => {
  console.log(
    \[ga]this gets called after the end of the main stack. the value received is: ${value}, the value returned is: ${
      value + 1
    }\[ga],
  );
  return value + 1;
});
console.log(thenProm);

// Using setTimeout, we can postpone the execution of a function to the moment the stack is empty
setTimeout(() => {
  console.log(thenProm);
});

// Logs, in order:
// Promise {[[PromiseStatus]]: \[dq]resolved\[dq], [[PromiseResult]]: 33}
// Promise {[[PromiseStatus]]: \[dq]pending\[dq], [[PromiseResult]]: undefined}
// \[dq]this gets called after the end of the main stack. the value received is: 33, the value returned is: 34\[dq]
// Promise {[[PromiseStatus]]: \[dq]resolved\[dq], [[PromiseResult]]: 34}
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Promise\f[R]
.IP \[bu] 2
\f[V]Promise.prototype.catch()\f[R]
