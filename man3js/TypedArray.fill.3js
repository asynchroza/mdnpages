.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.fill" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.fill - TypedArray.prototype.fill()
.SH SYNOPSIS
The \f[B]\f[CB]fill()\f[B]\f[R] method fills all the elements of a typed
array from a start index to an end index with a static value.
This method has the same algorithm as \f[CR]Array.prototype.fill()\f[R].
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH SYNTAX
.IP
.EX
fill(value)
fill(value, start)
fill(value, start, end)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
Value to fill the typed array with.
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Start index.
Defaults to 0.
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
End index (not included).
Defaults to \f[CR]this.length\f[R].
.SS Return value
The modified array.
.SH DESCRIPTION
The elements interval to fill is [\f[CR]start\f[R], \f[CR]end\f[R]).
.PP
The \f[B]\f[CB]fill()\f[B]\f[R] method takes up to three arguments
\f[CR]value\f[R], \f[CR]start\f[R] and \f[CR]end\f[R].
The \f[CR]start\f[R] and \f[CR]end\f[R] arguments are optional with
default values of \f[CR]0\f[R] and the \f[CR]length\f[R] of the
\f[CR]this\f[R] object.
.PP
If \f[CR]start\f[R] is negative, it is treated as
\f[CR]length+start\f[R] where \f[CR]length\f[R] is the length of the
array.
If \f[CR]end\f[R] is negative, it is treated as \f[CR]length+end\f[R].
.SH EXAMPLES
.SS Using fill()
.IP
.EX
new Uint8Array([1, 2, 3]).fill(4); // Uint8Array [4, 4, 4]
new Uint8Array([1, 2, 3]).fill(4, 1); // Uint8Array [1, 4, 4]
new Uint8Array([1, 2, 3]).fill(4, 1, 2); // Uint8Array [1, 4, 3]
new Uint8Array([1, 2, 3]).fill(4, 1, 1); // Uint8Array [1, 2, 3]
new Uint8Array([1, 2, 3]).fill(4, -3, -2); // Uint8Array [4, 2, 3]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.fill\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[CR]Array.prototype.fill()\f[R]
