.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WebTransport.createBidirectionalStream" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebTransport.createBidirectionalStream \- WebTransport:
createBidirectionalStream() method
.SH SYNOPSIS
The \f[B]\f[CB]createBidirectionalStream()\f[B]\f[R] method of the
\f[CR]WebTransport\f[R] interface asynchronously opens and returns a
bidirectional stream.
.PP
The method returns a \f[CR]Promise\f[R] that resolves to a
\f[CR]WebTransportBidirectionalStream\f[R] object, which has
\f[CR]readable\f[R] and \f[CR]writable\f[R] properties that can be used
to reliably read from and write to the server.
\[lq]Reliable\[rq] means that transmission and order of data are
guaranteed.
This provides slower delivery (albeit faster than with WebSockets) than
\f[CR]datagrams\f[R], but is needed in situations where reliability and
ordering are important, like chat applications.
.PP
The relative order in which queued bytes are emptied from created
streams can be specified using the \f[CR]sendOrder\f[R] option.
If set, queued bytes in streams with a higher send order are guaranteed
to be sent before queued bytes for streams with a lower send order.
If the order number is not set then the order in which bytes are sent is
implementation dependent.
Note however that even though bytes from higher send\-order streams are
sent first, they may not arrive first.
.PP
This feature is available in Web Workers.
.SH SYNTAX
.IP
.EX
createBidirectionalStream()
createBidirectionalStream(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that may have the following properties:
.RS
.TP
\f[B]sendOrder\f[R] \f[I](optional)\f[R]
A integer value specifying the send priority of this stream relative to
other streams for which the value has been set.
Queued bytes are sent first for streams that have a higher value.
If not set, the send order depends on the implementation.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves to a
\f[CR]WebTransportBidirectionalStream\f[R] object.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]createBidirectionalStream()\f[R] is invoked while the
\f[CR]WebTransport\f[R] is closed or failed.
.SH EXAMPLES
An initial function is used to get references to the
\f[CR]WebTransportBidirectionalStream.readable\f[R] and
\f[CR]WebTransportBidirectionalStream.writable\f[R] properties.
These are references to \f[CR]WebTransportReceiveStream\f[R] and
\f[CR]WebTransportSendStream\f[R] instances, which are readable and
writable streams that can be used to read from and write to the server.
.IP
.EX
async function setUpBidirectional() {
  const stream = await transport.createBidirectionalStream({
    sendOrder: \[dq]596996858\[dq],
  });
  // stream is a WebTransportBidirectionalStream
  // stream.readable is a ReadableStream
  const readable = stream.readable;
  // stream.writable is a WritableStream
  const writable = stream.writable;

  // ...
}
.EE
.PP
Reading from the \f[CR]WebTransportReceiveStream\f[R] can then be done
as follows:
.IP
.EX
async function readData(readable) {
  const reader = readable.getReader();
  while (true) {
    const { value, done } = await reader.read();
    if (done) {
      break;
    }
    // value is a Uint8Array.
    console.log(value);
  }
}
.EE
.PP
And writing to the \f[CR]WebTransportSendStream\f[R] can be done like
this:
.IP
.EX
async function writeData(writable) {
  const writer = writable.getWriter();
  const data1 = new Uint8Array([65, 66, 67]);
  const data2 = new Uint8Array([68, 69, 70]);
  writer.write(data1);
  writer.write(data2);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/webtransport
Using WebTransport
.UE \c
.IP \[bu] 2
\f[CR]WebTransport.createUnidirectionalStream()\f[R]
.IP \[bu] 2
WebSockets API
.IP \[bu] 2
Streams API
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/
WebTransport over HTTP/3
.UE \c
