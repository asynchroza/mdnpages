.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Promise.finally" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Promise.finally - Promise.prototype.finally()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]finally()\f[B]\f[R] method of \f[V]Promise\f[R] instances
schedules a function to be called when the promise is settled (either
fulfilled or rejected).
It immediately returns an equivalent \f[V]Promise\f[R] object, allowing
you to chain calls to other promise methods.
.PP
This lets you avoid duplicating code in both the promise\[cq]s
\f[V]then()\f[R] and \f[V]catch()\f[R] handlers.
.SH SYNTAX
.IP
.nf
\f[C]
finally(onFinally)
\f[R]
.fi
.SS Parameters
.TP
\f[B]onFinally\f[R]
A function to asynchronously execute when this promise becomes settled.
Its return value is ignored unless the returned value is a rejected
promise.
The function is called with no arguments.
.SS Return value
.PP
Returns an equivalent \f[V]Promise\f[R].
If the handler throws an error or returns a rejected promise, the
promise returned by \f[V]finally()\f[R] will be rejected with that value
instead.
Otherwise, the return value of the handler does not affect the state of
the original promise.
.SH DESCRIPTION
.PP
The \f[V]finally()\f[R] method can be useful if you want to do some
processing or cleanup once the promise is settled, regardless of its
outcome.
.PP
The \f[V]finally()\f[R] method is very similar to calling
\f[V]then(onFinally, onFinally)\f[R].
However, there are a couple of differences:
.IP \[bu] 2
When creating a function inline, you can pass it once, instead of being
forced to either declare it twice, or create a variable for it.
.IP \[bu] 2
The \f[V]onFinally\f[R] callback does not receive any argument.
This use case is for precisely when you \f[I]do not care\f[R] about the
rejection reason or the fulfillment value, and so there\[cq]s no need to
provide it.
.IP \[bu] 2
A \f[V]finally()\f[R] call is usually transparent and does not change
the eventual state of the original promise.
So for example:
.RS 2
.IP \[bu] 2
Unlike \f[V]Promise.resolve(2).then(() => 77, () => {})\f[R], which
returns a promise eventually fulfilled with the value \f[V]77\f[R],
\f[V]Promise.resolve(2).finally(() => 77)\f[R] returns a promise
eventually fulfilled with the value \f[V]2\f[R].
.IP \[bu] 2
Similarly, unlike \f[V]Promise.reject(3).then(() => {}, () => 88)\f[R],
which returns a promise eventually fulfilled with the value
\f[V]88\f[R], \f[V]Promise.reject(3).finally(() => 88)\f[R] returns a
promise eventually rejected with the reason \f[V]3\f[R].
.RE
.RS
.PP
\f[B]Note:\f[R] A \f[V]throw\f[R] (or returning a rejected promise) in
the \f[V]finally\f[R] callback still rejects the returned promise.
For example, both
\f[V]Promise.reject(3).finally(() => { throw 99; })\f[R] and
\f[V]Promise.reject(3).finally(() => Promise.reject(99))\f[R] reject the
returned promise with the reason \f[V]99\f[R].
.RE
.PP
Like \f[V]catch()\f[R], \f[V]finally()\f[R] internally calls the
\f[V]then\f[R] method on the object upon which it was called.
If \f[V]onFinally\f[R] is not a function, \f[V]then()\f[R] is called
with \f[V]onFinally\f[R] as both arguments \[em] which, for
\f[V]Promise.prototype.then()\f[R], means that no useful handler is
attached.
Otherwise, \f[V]then()\f[R] is called with two internally created
functions, which behave like the following:
.RS
.PP
\f[B]Warning:\f[R] This is only for demonstration purposes and is not a
polyfill.
.RE
.IP
.nf
\f[C]
promise.then(
  (value) => Promise.resolve(onFinally()).then(() => value),
  (reason) =>
    Promise.resolve(onFinally()).then(() => {
      throw reason;
    }),
);
\f[R]
.fi
.PP
Because \f[V]finally()\f[R] calls \f[V]then()\f[R], it supports
subclassing.
Moreover, notice the \f[V]Promise.resolve()\f[R] call above \[em] in
reality, \f[V]onFinally()\f[R]\[cq]s return value is resolved using the
same algorithm as \f[V]Promise.resolve()\f[R], but the actual
constructor used to construct the resolved promise will be the subclass.
\f[V]finally()\f[R] gets this constructor through
\f[V]promise.constructor[\[at]\[at]species]\f[R].
.SH EXAMPLES
.SS Using finally()
.IP
.nf
\f[C]
let isLoading = true;

fetch(myRequest)
  .then((response) => {
    const contentType = response.headers.get(\[dq]content-type\[dq]);
    if (contentType && contentType.includes(\[dq]application/json\[dq])) {
      return response.json();
    }
    throw new TypeError(\[dq]Oops, we haven\[aq]t got JSON!\[dq]);
  })
  .then((json) => {
    /* process your JSON further */
  })
  .catch((error) => {
    console.error(error); // this line can also throw, e.g. when console = {}
  })
  .finally(() => {
    isLoading = false;
  });
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Promise.prototype.finally\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-promise)
.IP \[bu] 2
\f[V]Promise\f[R]
.IP \[bu] 2
\f[V]Promise.prototype.then()\f[R]
.IP \[bu] 2
\f[V]Promise.prototype.catch()\f[R]
