.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.findLastIndex" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.findLastIndex - Array.prototype.findLastIndex()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]findLastIndex()\f[B]\f[R] method iterates the array in
reverse order and returns the index of the first element that satisfies
the provided testing function.
If no elements satisfy the testing function, -1 is returned.
.PP
See also the \f[V]findLast()\f[R] method, which returns the value of
last element that satisfies the testing function (rather than its
index).
.SH SYNTAX
.IP
.nf
\f[C]
findLastIndex(callbackFn)
findLastIndex(callbackFn, thisArg)
\f[R]
.fi
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[V]findLastIndex()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[V]this\f[R] when executing \f[V]callbackFn\f[R].
See iterative methods.
.SS Return value
.PP
The index of the last (highest-index) element in the array that passes
the test.
Otherwise -1 if no matching element is found.
.SH DESCRIPTION
.PP
The \f[V]findLastIndex()\f[R] method is an iterative method.
It calls a provided \f[V]callbackFn\f[R] function once for each element
in an array in descending-index order, until \f[V]callbackFn\f[R]
returns a truthy value.
\f[V]findLastIndex()\f[R] then returns the index of that element and
stops iterating through the array.
If \f[V]callbackFn\f[R] never returns a truthy value,
\f[V]findLastIndex()\f[R] returns \f[V]-1\f[R].
.PP
\f[V]callbackFn\f[R] is invoked for \f[I]every\f[R] index of the array,
not just those with assigned values.
Empty slots in sparse arrays behave the same as \f[V]undefined\f[R].
.PP
\f[V]findLastIndex()\f[R] does not mutate the array on which it is
called, but the function provided as \f[V]callbackFn\f[R] can.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[V]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[V]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[V]findLastIndex()\f[R]
began.
.IP \[bu] 2
Changes to already-visited indexes do not cause \f[V]callbackFn\f[R] to
be invoked on them again.
.IP \[bu] 2
If an existing, yet-unvisited element of the array is changed by
\f[V]callbackFn\f[R], its value passed to the \f[V]callbackFn\f[R] will
be the value at the time that element gets visited.
Deleted elements are visited as if they were \f[V]undefined\f[R].
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard-to-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The \f[V]findLastIndex()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Find the index of the last prime number in an array
.PP
The following example returns the index of the last element in the array
that is a prime number, or \f[V]-1\f[R] if there is no prime number.
.IP
.nf
\f[C]
function isPrime(element) {
  if (element % 2 === 0 || element < 2) {
    return false;
  }
  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {
    if (element % factor === 0) {
      return false;
    }
  }
  return true;
}

console.log([4, 6, 8, 12].findLastIndex(isPrime)); // -1, not found
console.log([4, 5, 7, 8, 9, 11, 12].findLastIndex(isPrime)); // 5
\f[R]
.fi
.SS Using findLastIndex() on sparse arrays
.PP
You can search for \f[V]undefined\f[R] in a sparse array and get the
index of an empty slot.
.IP
.nf
\f[C]
console.log([1, , 3].findLastIndex((x) => x === undefined)); // 1
\f[R]
.fi
.SS Calling findLastIndex() on non-array objects
.PP
The \f[V]findLastIndex()\f[R] method reads the \f[V]length\f[R] property
of \f[V]this\f[R] and then accesses each integer index.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: 2,
  1: 7.3,
  2: 4,
};
console.log(
  Array.prototype.findLastIndex.call(arrayLike, (x) => Number.isInteger(x)),
); // 2
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.findIndex\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findLast()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.findLastIndex()\f[R]
