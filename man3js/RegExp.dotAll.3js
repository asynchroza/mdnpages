.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "RegExp.dotAll" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.dotAll - RegExp.prototype.dotAll
.SH SYNOPSIS
The \f[B]\f[CB]dotAll\f[B]\f[R] accessor property of \f[CR]RegExp\f[R]
instances returns whether or not the \f[CR]s\f[R] flag is used with this
regular expression.
.SH DESCRIPTION
\f[CR]RegExp.prototype.dotAll\f[R] has the value \f[CR]true\f[R] if the
\f[CR]s\f[R] flag was used; otherwise, \f[CR]false\f[R].
The \f[CR]s\f[R] flag indicates that the dot special character
(\f[CR].\f[R]) should additionally match the following line terminator
(\[lq]newline\[rq]) characters in a string, which it would not match
otherwise:
.IP \[bu] 2
U+000A LINE FEED (LF) (\f[CR]\[rs]n\f[R])
.IP \[bu] 2
U+000D CARRIAGE RETURN (CR) (\f[CR]\[rs]r\f[R])
.IP \[bu] 2
U+2028 LINE SEPARATOR
.IP \[bu] 2
U+2029 PARAGRAPH SEPARATOR
.PP
This effectively means the dot will match any character on the Unicode
Basic Multilingual Plane (BMP).
To allow it to match astral characters, the \f[CR]u\f[R] (unicode) flag
should be used.
Using both flags in conjunction allows the dot to match any Unicode
character, without exceptions.
.PP
The set accessor of \f[CR]dotAll\f[R] is \f[CR]undefined\f[R].
You cannot change this property directly.
.SH EXAMPLES
.SS Using dotAll
.IP
.EX
const str1 = \[dq]bar\[rs]nexample foo example\[dq];

const regex1 = /bar.example/s;

console.log(regex1.dotAll); // true

console.log(str1.replace(regex1, \[dq]\[dq])); // foo example

const str2 = \[dq]bar\[rs]nexample foo example\[dq];

const regex2 = /bar.example/;

console.log(regex2.dotAll); // false

console.log(str2.replace(regex2, \[dq]\[dq]));
// bar
// example foo example
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of the \f[CR]dotAll\f[R] flag in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[CR]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.hasIndices\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.ignoreCase\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.unicode\f[R]
