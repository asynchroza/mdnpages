.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.defineProperty" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Reflect.defineProperty - Reflect.defineProperty()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Reflect.defineProperty()\f[B]\f[R] static method is like
\f[V]Object.defineProperty()\f[R] but returns a \f[V]Boolean\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
Reflect.defineProperty(target, propertyKey, attributes)
\f[R]
.fi
.SS Parameters
.TP
\f[B]target\f[R]
The target object on which to define the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to be defined or modified.
.TP
\f[B]attributes\f[R]
The attributes for the property being defined or modified.
.SS Return value
.PP
A boolean indicating whether or not the property was successfully
defined.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[V]target\f[R] or \f[V]attributes\f[R] is not an object.
.SH DESCRIPTION
.PP
\f[V]Reflect.defineProperty()\f[R] provides the reflective semantic of
defining an own property on an object.
At the very low level, defining a property returns a boolean (as is the
case with the proxy handler).
\f[V]Object.defineProperty()\f[R] provides nearly the same semantic, but
it throws a \f[V]TypeError\f[R] if the status is \f[V]false\f[R] (the
operation was unsuccessful), while \f[V]Reflect.defineProperty()\f[R]
directly returns the status.
.PP
Many built-in operations would also define own properties on objects.
The most significant difference between defining properties and setting
them is that setters aren\[cq]t invoked.
For example, class fields directly define properties on the instance
without invoking setters.
.IP
.nf
\f[C]
class B extends class A {
  set a(v) {
    console.log(\[dq]Setter called\[dq]);
  }
} {
  a = 1; // Nothing logged
}
\f[R]
.fi
.PP
\f[V]Reflect.defineProperty()\f[R] invokes the
\f[V][[DefineOwnProperty]]\f[R] object internal method of
\f[V]target\f[R].
.SH EXAMPLES
.SS Using Reflect.defineProperty()
.IP
.nf
\f[C]
const obj = {};
Reflect.defineProperty(obj, \[dq]x\[dq], { value: 7 }); // true
console.log(obj.x); // 7
\f[R]
.fi
.SS Checking if property definition has been successful
.PP
With \f[V]Object.defineProperty()\f[R], which returns an object if
successful, or throws a \f[V]TypeError\f[R] otherwise, you would use a
\f[V]try...catch\f[R] block to catch any error that occurred while
defining a property.
.PP
Because \f[V]Reflect.defineProperty()\f[R] returns a Boolean success
status, you can just use an \f[V]if...else\f[R] block here:
.IP
.nf
\f[C]
if (Reflect.defineProperty(target, property, attributes)) {
  // success
} else {
  // failure
}
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Reflect.defineProperty\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]Object.defineProperty()\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]defineProperty\f[R] handler
