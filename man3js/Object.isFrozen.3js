.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Object.isFrozen" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.isFrozen - Object.isFrozen()
.SH SYNOPSIS
The \f[B]\f[CB]Object.isFrozen()\f[B]\f[R] static method determines if
an object is \f[CR]frozen\f[R].
.SH SYNTAX
.IP
.EX
Object.isFrozen(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object which should be checked.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the given object is
frozen.
.SH DESCRIPTION
An object is frozen if and only if it is not \f[CR]extensible\f[R], all
its properties are non-configurable, and all its data properties (that
is, properties which are not accessor properties with getter or setter
components) are non-writable.
.SH EXAMPLES
.SS Using Object.isFrozen
.IP
.EX
// A new object is extensible, so it is not frozen.
Object.isFrozen({}); // false

// An empty object which is not extensible
// is vacuously frozen.
const vacuouslyFrozen = Object.preventExtensions({});
Object.isFrozen(vacuouslyFrozen); // true

// A new object with one property is also extensible,
// ergo not frozen.
const oneProp = { p: 42 };
Object.isFrozen(oneProp); // false

// Preventing extensions to the object still doesn\[aq]t
// make it frozen, because the property is still
// configurable (and writable).
Object.preventExtensions(oneProp);
Object.isFrozen(oneProp); // false

// Deleting that property makes the object vacuously frozen.
delete oneProp.p;
Object.isFrozen(oneProp); // true

// A non-extensible object with a non-writable
// but still configurable property is not frozen.
const nonWritable = { e: \[dq]plep\[dq] };
Object.preventExtensions(nonWritable);
Object.defineProperty(nonWritable, \[dq]e\[dq], {
  writable: false,
}); // make non-writable
Object.isFrozen(nonWritable); // false

// Changing that property to non-configurable
// then makes the object frozen.
Object.defineProperty(nonWritable, \[dq]e\[dq], {
  configurable: false,
}); // make non-configurable
Object.isFrozen(nonWritable); // true

// A non-extensible object with a non-configurable
// but still writable property also isn\[aq]t frozen.
const nonConfigurable = { release: \[dq]the kraken!\[dq] };
Object.preventExtensions(nonConfigurable);
Object.defineProperty(nonConfigurable, \[dq]release\[dq], {
  configurable: false,
});
Object.isFrozen(nonConfigurable); // false

// Changing that property to non-writable
// then makes the object frozen.
Object.defineProperty(nonConfigurable, \[dq]release\[dq], {
  writable: false,
});
Object.isFrozen(nonConfigurable); // true

// A non-extensible object with a configurable
// accessor property isn\[aq]t frozen.
const accessor = {
  get food() {
    return \[dq]yum\[dq];
  },
};
Object.preventExtensions(accessor);
Object.isFrozen(accessor); // false

// When we make that property non-configurable it becomes frozen.
Object.defineProperty(accessor, \[dq]food\[dq], {
  configurable: false,
});
Object.isFrozen(accessor); // true

// But the easiest way for an object to be frozen
// is if Object.freeze has been called on it.
const frozen = { 1: 81 };
Object.isFrozen(frozen); // false
Object.freeze(frozen);
Object.isFrozen(frozen); // true

// By definition, a frozen object is non-extensible.
Object.isExtensible(frozen); // false

// Also by definition, a frozen object is sealed.
Object.isSealed(frozen); // true
.EE
.SS Non-object argument
In ES5, if the argument to this method is not an object (a primitive),
then it will cause a \f[CR]TypeError\f[R].
In ES2015, it will return \f[CR]true\f[R] without any errors if a
non-object argument is passed, since primitives are, by definition,
immutable.
.IP
.EX
Object.isFrozen(1);
// TypeError: 1 is not an object (ES5 code)

Object.isFrozen(1);
// true                          (ES2015 code)
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.freeze()\f[R]
.IP \[bu] 2
\f[CR]Object.preventExtensions()\f[R]
.IP \[bu] 2
\f[CR]Object.isExtensible()\f[R]
.IP \[bu] 2
\f[CR]Object.seal()\f[R]
.IP \[bu] 2
\f[CR]Object.isSealed()\f[R]
