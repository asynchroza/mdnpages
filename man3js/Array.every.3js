.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Array.every" "JS" "November 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.every \- Array.prototype.every()
.SH SYNOPSIS
The \f[B]\f[CB]every()\f[B]\f[R] method of \f[CR]Array\f[R] instances
tests whether all elements in the array pass the test implemented by the
provided function.
It returns a Boolean value.
.SH SYNTAX
.IP
.EX
every(callbackFn)
every(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate the element passes the test,
and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]every()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
\f[CR]true\f[R] unless \f[CR]callbackFn\f[R] returns a falsy value for
an array element, in which case \f[CR]false\f[R] is immediately
returned.
.SH DESCRIPTION
The \f[CR]every()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array, until the \f[CR]callbackFn\f[R] returns a falsy value.
If such an element is found, \f[CR]every()\f[R] immediately returns
\f[CR]false\f[R] and stops iterating through the array.
Otherwise, if \f[CR]callbackFn\f[R] returns a truthy value for all
elements, \f[CR]every()\f[R] returns \f[CR]true\f[R].
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]every\f[R] acts like the \[lq]for all\[rq] quantifier in
mathematics.
In particular, for an empty array, it returns \f[CR]true\f[R].
(It is \c
.UR https://en.wikipedia.org/wiki/Vacuous_truth
vacuously true
.UE \c
\ that all elements of the \c
.UR https://en.wikipedia.org/wiki/Empty_set#Properties
empty set
.UE \c
\ satisfy any given condition.)
.PP
\f[CR]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
The \f[CR]every()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Testing size of all array elements
The following example tests whether all elements in the array are 10 or
bigger.
.IP
.EX
function isBigEnough(element, index, array) {
  return element >= 10;
}
[12, 5, 8, 130, 44].every(isBigEnough); // false
[12, 54, 18, 130, 44].every(isBigEnough); // true
.EE
.SS Check if one array is a subset of another array
The following example tests if all the elements of an array are present
in another array.
.IP
.EX
const isSubset = (array1, array2) =>
  array2.every((element) => array1.includes(element));

console.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 7, 6])); // true
console.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 8, 7])); // false
.EE
.SS Using the third argument of callbackFn
The \f[CR]array\f[R] argument is useful if you want to access another
element in the array.
The following example first uses \f[CR]filter()\f[R] to extract the
positive values and then uses \f[CR]every()\f[R] to check whether the
array is strictly increasing.
.IP
.EX
const numbers = [\-2, 4, \-8, 16, \-32];
const isIncreasing = numbers
  .filter((num) => num > 0)
  .every((num, idx, arr) => {
    // Without the arr argument, there\[aq]s no way to easily access the
    // intermediate array without saving it to a variable.
    if (idx === 0) return true;
    return num > arr[idx \- 1];
  });
console.log(isIncreasing); // true
.EE
.SS Using every() on sparse arrays
\f[CR]every()\f[R] will not run its predicate on empty slots.
.IP
.EX
console.log([1, , 3].every((x) => x !== undefined)); // true
console.log([2, , 2].every((x) => x === 2)); // true
.EE
.SS Calling every() on non\-array objects
The \f[CR]every()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property with a nonnegative
integer key less than \f[CR]length\f[R] until they all have been
accessed or \f[CR]callbackFn\f[R] returns \f[CR]false\f[R].
.IP
.EX
const arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
  3: 345, // ignored by every() since length is 3
};
console.log(
  Array.prototype.every.call(arrayLike, (x) => typeof x === \[dq]string\[dq]),
); // true
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.every\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.every()\f[R]
