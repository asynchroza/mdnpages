.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "AggregateError.AggregateError" "JS" "April 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AggregateError.AggregateError - AggregateError() constructor
.SH SYNOPSIS
The \f[B]\f[CB]AggregateError()\f[B]\f[R] constructor creates
\f[CR]AggregateError\f[R] objects.
.SH SYNTAX
.IP
.EX
new AggregateError(errors)
new AggregateError(errors, message)
new AggregateError(errors, message, options)

AggregateError(errors)
AggregateError(errors, message)
AggregateError(errors, message, options)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]AggregateError()\f[R] can be called with or
without \f[CR]new\f[R].
Both create a new \f[CR]AggregateError\f[R] instance.
.RE
.SS Parameters
.TP
\f[B]errors\f[R]
An iterable of errors, may not actually be \f[CR]Error\f[R] instances.
.TP
\f[B]message\f[R] \f[I](optional)\f[R]
An optional human-readable description of the aggregate error.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that has the following properties:
.RS
.TP
\f[B]cause\f[R] \f[I](optional)\f[R]
A property indicating the specific cause of the error.
When catching and re-throwing an error with a more-specific or useful
error message, this property can be used to pass the original error.
.RE
.SH EXAMPLES
.SS Creating an AggregateError
.IP
.EX
try {
  throw new AggregateError([new Error(\[dq]some error\[dq])], \[dq]Hello\[dq]);
} catch (e) {
  console.log(e instanceof AggregateError); // true
  console.log(e.message); // \[dq]Hello\[dq]
  console.log(e.name); // \[dq]AggregateError\[dq]
  console.log(e.errors); // [ Error: \[dq]some error\[dq] ]
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]AggregateError\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-promise)
.IP \[bu] 2
\f[CR]Promise.any\f[R]
