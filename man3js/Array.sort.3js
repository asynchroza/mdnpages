'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.sort" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.sort - Array.prototype.sort()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]sort()\f[B]\f[R] method sorts the elements of an array
\f[I]in place (https://en.wikipedia.org/wiki/In-place_algorithm)\f[R]
and returns the reference to the same array, now sorted.
The default sort order is ascending, built upon converting the elements
into strings, then comparing their sequences of UTF-16 code units
values.
.PP
The time and space complexity of the sort cannot be guaranteed as it
depends on the implementation.
.PP
To sort the elements in an array without mutating the original array,
use \f[V]toSorted()\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
sort()
sort(compareFn)
\f[R]
.fi
.SS Parameters
.TP
\f[B]compareFn\f[R] \f[I](optional)\f[R]
A function that defines the sort order.
The return value should be a number whose positivity indicates the
relative order of the two elements.
The function is called with the following arguments:
.RS
.TP
\f[B]a\f[R]
The first element for comparison.
Will never be \f[V]undefined\f[R].
.TP
\f[B]b\f[R]
The second element for comparison.
Will never be \f[V]undefined\f[R].
.PP
If omitted, the array elements are converted to strings, then sorted
according to each character\[cq]s Unicode code point value.
.RE
.SS Return value
.PP
The reference to the original array, now sorted.
Note that the array is sorted \f[I]in
place (https://en.wikipedia.org/wiki/In-place_algorithm)\f[R], and no
copy is made.
.SH DESCRIPTION
.PP
If \f[V]compareFn\f[R] is not supplied, all non-\f[V]undefined\f[R]
array elements are sorted by converting them to strings and comparing
strings in UTF-16 code units order.
For example, \[lq]banana\[rq] comes before \[lq]cherry\[rq].
In a numeric sort, 9 comes before 80, but because numbers are converted
to strings, \[lq]80\[rq] comes before \[lq]9\[rq] in the Unicode order.
All \f[V]undefined\f[R] elements are sorted to the end of the array.
.PP
The \f[V]sort()\f[R] method preserves empty slots.
If the source array is sparse, the empty slots are moved to the end of
the array, and always come after all the \f[V]undefined\f[R].
.RS
.PP
\f[B]Note:\f[R] In UTF-16, Unicode characters above \f[V]\[rs]uFFFF\f[R]
are encoded as two surrogate code units, of the range
\f[V]\[rs]uD800\f[R] - \f[V]\[rs]uDFFF\f[R].
The value of each code unit is taken separately into account for the
comparison.
Thus the character formed by the surrogate pair
\f[V]\[rs]uD855\[rs]uDE51\f[R] will be sorted before the character
\f[V]\[rs]uFF3A\f[R].
.RE
.PP
If \f[V]compareFn\f[R] is supplied, all non-\f[V]undefined\f[R] array
elements are sorted according to the return value of the compare
function (all \f[V]undefined\f[R] elements are sorted to the end of the
array, with no call to \f[V]compareFn\f[R]).
.PP
.TS
tab(@);
l l.
T{
\f[V]compareFn(a, b)\f[R] return value
T}@T{
sort order
T}
_
T{
> 0
T}@T{
sort \f[V]a\f[R] after \f[V]b\f[R], e.g.\ \f[V][b, a]\f[R]
T}
T{
< 0
T}@T{
sort \f[V]a\f[R] before \f[V]b\f[R], e.g.\ \f[V][a, b]\f[R]
T}
T{
=== 0
T}@T{
keep original order of \f[V]a\f[R] and \f[V]b\f[R]
T}
.TE
.PP
So, the compare function has the following form:
.IP
.nf
\f[C]
function compareFn(a, b) {
  if (a is less than b by some ordering criterion) {
    return -1;
  }
  if (a is greater than b by the ordering criterion) {
    return 1;
  }
  // a must be equal to b
  return 0;
}
\f[R]
.fi
.PP
More formally, the comparator is expected to have the following
properties, in order to ensure proper sort behavior:
.IP \[bu] 2
\f[I]Pure\f[R]: The comparator does not mutate the objects being
compared or any external state.
(This is important because there\[cq]s no guarantee \f[I]when\f[R] and
\f[I]how\f[R] the comparator will be called, so any particular call
should not produce visible effects to the outside.)
.IP \[bu] 2
\f[I]Stable\f[R]: The comparator returns the same result with the same
pair of input.
.IP \[bu] 2
\f[I]Reflexive\f[R]: \f[V]compareFn(a, a) === 0\f[R].
.IP \[bu] 2
\f[I]Anti-symmetric\f[R]: \f[V]compareFn(a, b)\f[R] and
\f[V]compareFn(b, a)\f[R] must both be \f[V]0\f[R] or have opposite
signs.
.IP \[bu] 2
\f[I]Transitive\f[R]: If \f[V]compareFn(a, b)\f[R] and
\f[V]compareFn(b, c)\f[R] are both positive, zero, or negative, then
\f[V]compareFn(a, c)\f[R] has the same positivity as the previous two.
.PP
A comparator conforming to the constraints above will always be able to
return all of \f[V]1\f[R], \f[V]0\f[R], and \f[V]-1\f[R], or
consistently return \f[V]0\f[R].
For example, if a comparator only returns \f[V]1\f[R] and \f[V]0\f[R],
or only returns \f[V]0\f[R] and \f[V]-1\f[R], it will not be able to
sort reliably because \f[I]anti-symmetry\f[R] is broken.
A comparator that always returns \f[V]0\f[R] will cause the array to not
be changed at all, but is reliable nonetheless.
.PP
The default lexicographic comparator satisfies all constraints above.
.PP
To compare numbers instead of strings, the compare function can subtract
\f[V]b\f[R] from \f[V]a\f[R].
The following function will sort the array in ascending order (if it
doesn\[cq]t contain \f[V]Infinity\f[R] and \f[V]NaN\f[R]):
.IP
.nf
\f[C]
function compareNumbers(a, b) {
  return a - b;
}
\f[R]
.fi
.PP
The \f[V]sort()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH EXAMPLES
.SS Creating, displaying, and sorting an array
.PP
The following example creates four arrays and displays the original
array, then the sorted arrays.
The numeric arrays are sorted without a compare function, then sorted
using one.
.IP
.nf
\f[C]
const stringArray = [\[dq]Blue\[dq], \[dq]Humpback\[dq], \[dq]Beluga\[dq]];
const numberArray = [40, 1, 5, 200];
const numericStringArray = [\[dq]80\[dq], \[dq]9\[dq], \[dq]700\[dq]];
const mixedNumericArray = [\[dq]80\[dq], \[dq]9\[dq], \[dq]700\[dq], 40, 1, 5, 200];

function compareNumbers(a, b) {
  return a - b;
}

stringArray.join(); // \[aq]Blue,Humpback,Beluga\[aq]
stringArray.sort(); // [\[aq]Beluga\[aq], \[aq]Blue\[aq], \[aq]Humpback\[aq]]

numberArray.join(); // \[aq]40,1,5,200\[aq]
numberArray.sort(); // [1, 200, 40, 5]
numberArray.sort(compareNumbers); // [1, 5, 40, 200]

numericStringArray.join(); // \[aq]80,9,700\[aq]
numericStringArray.sort(); // [\[aq]700\[aq], \[aq]80\[aq], \[aq]9\[aq]]
numericStringArray.sort(compareNumbers); // [\[aq]9\[aq], \[aq]80\[aq], \[aq]700\[aq]]

mixedNumericArray.join(); // \[aq]80,9,700,40,1,5,200\[aq]
mixedNumericArray.sort(); // [1, 200, 40, 5, \[aq]700\[aq], \[aq]80\[aq], \[aq]9\[aq]]
mixedNumericArray.sort(compareNumbers); // [1, 5, \[aq]9\[aq], 40, \[aq]80\[aq], 200, \[aq]700\[aq]]
\f[R]
.fi
.SS Sorting array of objects
.PP
Arrays of objects can be sorted by comparing the value of one of their
properties.
.IP
.nf
\f[C]
const items = [
  { name: \[dq]Edward\[dq], value: 21 },
  { name: \[dq]Sharpe\[dq], value: 37 },
  { name: \[dq]And\[dq], value: 45 },
  { name: \[dq]The\[dq], value: -12 },
  { name: \[dq]Magnetic\[dq], value: 13 },
  { name: \[dq]Zeros\[dq], value: 37 },
];

// sort by value
items.sort((a, b) => a.value - b.value);

// sort by name
items.sort((a, b) => {
  const nameA = a.name.toUpperCase(); // ignore upper and lowercase
  const nameB = b.name.toUpperCase(); // ignore upper and lowercase
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }

  // names must be equal
  return 0;
});
\f[R]
.fi
.SS Sorting non-ASCII characters
.PP
For sorting strings with non-ASCII characters, i.e.\ strings with
accented characters (e, é, è, a, ä, etc.), strings from languages other
than English, use \f[V]String.prototype.localeCompare()\f[R].
This function can compare those characters so they appear in the right
order.
.IP
.nf
\f[C]
const items = [\[dq]réservé\[dq], \[dq]premier\[dq], \[dq]communiqué\[dq], \[dq]café\[dq], \[dq]adieu\[dq], \[dq]éclair\[dq]];
items.sort((a, b) => a.localeCompare(b));

// items is [\[aq]adieu\[aq], \[aq]café\[aq], \[aq]communiqué\[aq], \[aq]éclair\[aq], \[aq]premier\[aq], \[aq]réservé\[aq]]
\f[R]
.fi
.SS Sorting with map
.PP
The \f[V]compareFn\f[R] can be invoked multiple times per element within
the array.
Depending on the \f[V]compareFn\f[R]\[cq]s nature, this may yield a high
overhead.
The more work a \f[V]compareFn\f[R] does and the more elements there are
to sort, it may be more efficient to use \f[V]map()\f[R] for sorting.
The idea is to traverse the array once to extract the actual values used
for sorting into a temporary array, sort the temporary array, and then
traverse the temporary array to achieve the right order.
.IP
.nf
\f[C]
// the array to be sorted
const data = [\[dq]delta\[dq], \[dq]alpha\[dq], \[dq]charlie\[dq], \[dq]bravo\[dq]];

// temporary array holds objects with position and sort-value
const mapped = data.map((v, i) => {
  return { i, value: someSlowOperation(v) };
});

// sorting the mapped array containing the reduced values
mapped.sort((a, b) => {
  if (a.value > b.value) {
    return 1;
  }
  if (a.value < b.value) {
    return -1;
  }
  return 0;
});

const result = mapped.map((v) => data[v.i]);
\f[R]
.fi
.PP
There is an open source library available called
mapsort (https://github.com/Pimm/mapsort) which applies this approach.
.SS sort() returns the reference to the same array
.PP
The \f[V]sort()\f[R] method returns a reference to the original array,
so mutating the returned array will mutate the original array as well.
.IP
.nf
\f[C]
const numbers = [3, 1, 4, 1, 5];
const sorted = numbers.sort((a, b) => a - b);
// numbers and sorted are both [1, 1, 3, 4, 5]
sorted[0] = 10;
console.log(numbers[0]); // 10
\f[R]
.fi
.PP
In case you want \f[V]sort()\f[R] to not mutate the original array, but
return a shallow-copied array like other array methods
(e.g.\ \f[V]map()\f[R]) do, use the \f[V]toSorted()\f[R] method.
Alternatively, you can do a shallow copy before calling
\f[V]sort()\f[R], using the spread syntax or \f[V]Array.from()\f[R].
.IP
.nf
\f[C]
const numbers = [3, 1, 4, 1, 5];
// [...numbers] creates a shallow copy, so sort() does not mutate the original
const sorted = [...numbers].sort((a, b) => a - b);
sorted[0] = 10;
console.log(numbers[0]); // 3
\f[R]
.fi
.SS Sort stability
.PP
Since version 10 (or ECMAScript 2019), the
specification (https://tc39.es/ecma262/#sec-array.prototype.sort)
dictates that \f[V]Array.prototype.sort\f[R] is stable.
.PP
For example, say you had a list of students alongside their grades.
Note that the list of students is already pre-sorted by name in
alphabetical order:
.IP
.nf
\f[C]
const students = [
  { name: \[dq]Alex\[dq], grade: 15 },
  { name: \[dq]Devlin\[dq], grade: 15 },
  { name: \[dq]Eagle\[dq], grade: 13 },
  { name: \[dq]Sam\[dq], grade: 14 },
];
\f[R]
.fi
.PP
After sorting this array by \f[V]grade\f[R] in ascending order:
.IP
.nf
\f[C]
students.sort((firstItem, secondItem) => firstItem.grade - secondItem.grade);
\f[R]
.fi
.PP
The \f[V]students\f[R] variable will then have the following value:
.IP
.nf
\f[C]
[
  { name: \[dq]Eagle\[dq], grade: 13 },
  { name: \[dq]Sam\[dq], grade: 14 },
  { name: \[dq]Alex\[dq], grade: 15 }, // original maintained for similar grade (stable sorting)
  { name: \[dq]Devlin\[dq], grade: 15 }, // original maintained for similar grade (stable sorting)
];
\f[R]
.fi
.PP
It\[cq]s important to note that students that have the same grade (for
example, Alex and Devlin), will remain in the same order as before
calling the sort.
This is what a stable sorting algorithm guarantees.
.PP
Before version 10 (or ECMAScript 2019), sort stability was not
guaranteed, meaning that you could end up with the following:
.IP
.nf
\f[C]
[
  { name: \[dq]Eagle\[dq], grade: 13 },
  { name: \[dq]Sam\[dq], grade: 14 },
  { name: \[dq]Devlin\[dq], grade: 15 }, // original order not maintained
  { name: \[dq]Alex\[dq], grade: 15 }, // original order not maintained
];
\f[R]
.fi
.SS Sorting with non-well-formed comparator
.PP
If a comparing function does not satisfy all of purity, stability,
reflexivity, anti-symmetry, and transitivity rules, as explained in the
description, the program\[cq]s behavior is not well-defined.
.PP
For example, consider this code:
.IP
.nf
\f[C]
const arr = [3, 1, 4, 1, 5, 9];
const compareFn = (a, b) => (a > b ? 1 : 0);
arr.sort(compareFn);
\f[R]
.fi
.PP
The \f[V]compareFn\f[R] function here is not well-formed, because it
does not satisfy anti-symmetry: if \f[V]a > b\f[R], it returns
\f[V]1\f[R]; but by swapping \f[V]a\f[R] and \f[V]b\f[R], it returns
\f[V]0\f[R] instead of a negative value.
Therefore, the resulting array will be different across engines.
For example, V8 (used by Chrome, Node.js, etc.)
and JavaScriptCore (used by Safari) would not sort the array at all and
return \f[V][3, 1, 4, 1, 5, 9]\f[R], while SpiderMonkey (used by
Firefox) will return the array sorted ascendingly, as
\f[V][1, 1, 3, 4, 5, 9]\f[R].
.PP
However, if the \f[V]compareFn\f[R] function is changed slightly so that
it returns \f[V]-1\f[R] or \f[V]0\f[R]:
.IP
.nf
\f[C]
const arr = [3, 1, 4, 1, 5, 9];
const compareFn = (a, b) => (a > b ? -1 : 0);
arr.sort(compareFn);
\f[R]
.fi
.PP
Then V8 and JavaScriptCore sorts it descendingly, as
\f[V][9, 5, 4, 3, 1, 1]\f[R], while SpiderMonkey returns it as-is:
\f[V][3, 1, 4, 1, 5, 9]\f[R].
.PP
Due to this implementation inconsistency, you are always advised to make
your comparator well-formed by following the five constraints.
.SS Using sort() on sparse arrays
.PP
Empty slots are moved to the end of the array.
.IP
.nf
\f[C]
console.log([\[dq]a\[dq], \[dq]c\[dq], , \[dq]b\[dq]].sort()); // [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], empty]
console.log([, undefined, \[dq]a\[dq], \[dq]b\[dq]].sort()); // [\[dq]a\[dq], \[dq]b\[dq], undefined, empty]
\f[R]
.fi
.SS Calling sort() on non-array objects
.PP
The \f[V]sort()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
It then collects all existing integer-keyed properties in the range of
\f[V]0\f[R] to \f[V]length - 1\f[R], sorts them, and writes them back.
If there are missing properties in the range, the corresponding trailing
properties are deleted, as if the non-existent properties are sorted
towards the end.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  0: 5,
  2: 4,
};
console.log(Array.prototype.sort.call(arrayLike));
// { \[aq]0\[aq]: 4, \[aq]1\[aq]: 5, length: 3, unrelated: \[aq]foo\[aq] }
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.sort\f[R] with modern behavior like
stable sort in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.reverse()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toSorted()\f[R]
.IP \[bu] 2
\f[V]String.prototype.localeCompare()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.sort()\f[R]
.IP \[bu] 2
Getting things sorted in V8 (https://v8.dev/blog/array-sort) on v8.dev
(September 28, 2018)
.IP \[bu] 2
Stable
\f[V]Array.prototype.sort\f[R] (https://v8.dev/features/stable-sort) on
v8.dev (July 2, 2019)
.IP \[bu] 2
\f[V]Array.prototype.sort\f[R]
stability (https://mathiasbynens.be/demo/sort-stability) by Mathias
Bynens
