.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransferItemList" "JS" "March 30, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList \- DataTransferItemList
.SH SYNOPSIS
The \f[B]\f[CB]DataTransferItemList\f[B]\f[R] object is a list of
\f[CR]DataTransferItem\f[R] objects representing items being dragged.
During a \f[I]drag operation\f[R], each \f[CR]DragEvent\f[R] has a
\f[CR]dataTransfer\f[R] property and that property is a
\f[CR]DataTransferItemList\f[R].
.PP
The individual items can be accessed using the bracket notation
\f[CR][]\f[R].
.PP
This interface has no constructor.
.SH INSTANCE PROPERTIES
.TP
\f[B]DataTransferItemList.length\f[R] \f[I](read\-only)\f[R]
An \f[CR]unsigned long\f[R] that is the number of drag items in the
list.
.SH INSTANCE METHODS
.TP
\f[B]DataTransferItemList.add()\f[R]
Adds an item (either a \f[CR]File\f[R] object or a string) to the drag
item list and returns a \f[CR]DataTransferItem\f[R] object for the new
item.
.TP
\f[B]DataTransferItemList.remove()\f[R]
Removes the drag item from the list at the given index.
.TP
\f[B]DataTransferItemList.clear()\f[R]
Removes all of the drag items from the list.
.TP
\f[B]DataTransferItemList.operator[]\f[R]
Getter that returns a \f[CR]DataTransferItem\f[R] at the given index.
.SH EXAMPLE
This example shows how to use drag and drop.
.SS JavaScript
.IP
.EX
function dragstartHandler(ev) {
  console.log(\[dq]dragStart\[dq]);

  // Add this element\[aq]s id to the drag payload so the drop handler will
  // know which element to add to its tree
  const dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \[dq]text/plain\[dq]);

  // Add some other items to the drag payload
  dataList.add(\[dq]<p>Paragraph\&...</p>\[dq], \[dq]text/html\[dq]);
  dataList.add(\[dq]http://www.example.org\[dq], \[dq]text/uri\-list\[dq]);
}

function dropHandler(ev) {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();

  // Loop through the dropped items and log their data
  for (const item of ev.dataTransfer.items) {
    if (item.kind === \[dq]string\[dq] && item.type.match(/\[ha]text\[rs]/plain/)) {
      // This item is the target node
      item.getAsString((s) => {
        ev.target.appendChild(document.getElementById(s));
      });
    } else if (item.kind === \[dq]string\[dq] && item.type.match(/\[ha]text\[rs]/html/)) {
      // Drag data item is HTML
      item.getAsString((s) => {
        console.log(\[ga]\&... Drop: HTML = ${s}\[ga]);
      });
    } else if (item.kind === \[dq]string\[dq] && item.type.match(/\[ha]text\[rs]/uri\-list/)) {
      // Drag data item is URI
      item.getAsString((s) => {
        console.log(\[ga]\&... Drop: URI = ${s}\[ga]);
      });
    }
  }
}

function dragoverHandler(ev) {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();

  // Set the dropEffect to move
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

function dragendHandler(ev) {
  console.log(\[dq]dragEnd\[dq]);
  const dataList = ev.dataTransfer.items;

  // Clear any remaining drag data
  dataList.clear();
}
.EE
.SS HTML
.IP
.EX
<div>
  <p
    id=\[dq]source\[dq]
    ondragstart=\[dq]dragstartHandler(event);\[dq]
    ondragend=\[dq]dragendHandler(event);\[dq]
    draggable=\[dq]true\[dq]>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </p>
</div>
<div
  id=\[dq]target\[dq]
  ondrop=\[dq]dropHandler(event);\[dq]
  ondragover=\[dq]dragoverHandler(event);\[dq]>
  Drop Zone
</div>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0em;
  padding: 2em;
}

source {
  color: blue;
  border: 1px solid black;
}

target {
  border: 1px solid black;
}
.EE
.SS Result
