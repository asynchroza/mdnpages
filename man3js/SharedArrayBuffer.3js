.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "SharedArrayBuffer" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]SharedArrayBuffer\f[B]\f[R] object is used to represent a
generic raw binary data buffer, similar to the \f[V]ArrayBuffer\f[R]
object, but in a way that they can be used to create views on shared
memory.
A \f[V]SharedArrayBuffer\f[R] is not a Transferable Object, unlike an
\f[V]ArrayBuffer\f[R] which is transferable.
.SH Description
.PP
To share memory using \f[V]SharedArrayBuffer\f[R] objects from one agent
in the cluster to another (an agent is either the web page\[cq]s main
program or one of its web workers), \f[V]postMessage\f[R] and structured
cloning is used.
.PP
The structured clone algorithm accepts \f[V]SharedArrayBuffer\f[R]
objects and typed arrays mapped onto \f[V]SharedArrayBuffer\f[R]
objects.
In both cases, the \f[V]SharedArrayBuffer\f[R] object is transmitted to
the receiver resulting in a new, private \f[V]SharedArrayBuffer\f[R]
object in the receiving agent (just as for \f[V]ArrayBuffer\f[R]).
However, the shared data block referenced by the two
\f[V]SharedArrayBuffer\f[R] objects is the same data block, and a side
effect to the block in one agent will eventually become visible in the
other agent.
.IP
.nf
\f[C]
const sab = new SharedArrayBuffer(1024);
worker.postMessage(sab);
\f[R]
.fi
.PP
Shared memory can be created and updated simultaneously in workers or
the main thread.
Depending on the system (the CPU, the OS, the Browser) it can take a
while until the change is propagated to all contexts.
To synchronize, \f[V]atomic\f[R] operations are needed.
.PP
\f[V]SharedArrayBuffer\f[R] objects are used by some web APIs, such as:
.IP \[bu] 2
\f[V]WebGLRenderingContext.bufferData()\f[R]
.IP \[bu] 2
\f[V]WebGLRenderingContext.bufferSubData()\f[R]
.IP \[bu] 2
\f[V]WebGL2RenderingContext.getBufferSubData()\f[R]
.SS Security requirements
.PP
Shared memory and high-resolution timers were effectively disabled at
the start of
2018 (https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/)
in light of
Spectre (https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)).
In 2020, a new, secure approach has been standardized to re-enable
shared memory.
.PP
As a baseline requirement, your document needs to be in a secure
context.
.PP
For top-level documents, two headers need to be set to cross-origin
isolate your site:
.IP \[bu] 2
\f[V]Cross-Origin-Opener-Policy\f[R] with \f[V]same-origin\f[R] as value
(protects your origin from attackers)
.IP \[bu] 2
\f[V]Cross-Origin-Embedder-Policy\f[R] with \f[V]require-corp\f[R] or
\f[V]credentialless\f[R] as value (protects victims from your origin)
.IP
.nf
\f[C]
Cross-Origin-Opener-Policy: same-origin
Cross-Origin-Embedder-Policy: require-corp
\f[R]
.fi
.PP
To check if cross origin isolation has been successful, you can test
against the \f[V]crossOriginIsolated\f[R] property available to window
and worker contexts:
.IP
.nf
\f[C]
const myWorker = new Worker(\[dq]worker.js\[dq]);

if (crossOriginIsolated) {
  const buffer = new SharedArrayBuffer(16);
  myWorker.postMessage(buffer);
} else {
  const buffer = new ArrayBuffer(16);
  myWorker.postMessage(buffer);
}
\f[R]
.fi
.PP
With these two headers set, \f[V]postMessage()\f[R] no longer throws for
\f[V]SharedArrayBuffer\f[R] objects and shared memory across threads is
therefore available.
.PP
Nested documents and dedicated workers need to set the
\f[V]Cross-Origin-Embedder-Policy\f[R] header as well, with the same
value.
No further changes are needed for same-origin nested documents and
subresources.
Same-site (but cross-origin) nested documents and subresources need to
set the \f[V]Cross-Origin-Resource-Policy\f[R] header with
\f[V]same-site\f[R] as value.
And their cross-origin (and cross-site) counterparts need to set the
same header with \f[V]cross-origin\f[R] as value.
Note that setting the \f[V]Cross-Origin-Resource-Policy\f[R] header to
any other value than \f[V]same-origin\f[R] opens up the resource to
potential attacks, such as
Spectre (https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)).
.PP
Note that the \f[V]Cross-Origin-Opener-Policy\f[R] header limits your
ability to retain a reference to popups.
Direct access between two top-level window contexts essentially only
work if they are same-origin and carry the same two headers with the
same two values.
.SS API availability
.PP
Depending on whether the above security measures are taken, the various
memory-sharing APIs have different availabilities:
.IP \[bu] 2
The \f[V]Atomics\f[R] object is always available.
.IP \[bu] 2
\f[V]SharedArrayBuffer\f[R] objects are in principle always available,
but unfortunately the constructor on the global object is hidden, unless
the two headers mentioned above are set, for compatibility with web
content.
There is hope that this restriction can be removed in the future.
\f[V]WebAssembly.Memory\f[R] can still be used to get an instance.
.IP \[bu] 2
Unless the two headers mentioned above are set, the various
\f[V]postMessage()\f[R] APIs will throw for \f[V]SharedArrayBuffer\f[R]
objects.
If they are set, \f[V]postMessage()\f[R] on \f[V]Window\f[R] objects and
dedicated workers will function and allow for memory sharing.
.SS WebAssembly shared memory
.PP
\f[V]WebAssembly.Memory\f[R] objects can be created with the
\f[V]shared\f[R] constructor flag.
When this flag is set to \f[V]true\f[R], the constructed
\f[V]Memory\f[R] object can be shared between workers via
\f[V]postMessage()\f[R], just like \f[V]SharedArrayBuffer\f[R], and the
backing \f[V]buffer\f[R] of the \f[V]Memory\f[R] object is a
\f[V]SharedArrayBuffer\f[R].
Therefore, the requirements listed above for sharing a
\f[V]SharedArrayBuffer\f[R] between workers also apply to sharing a
\f[V]WebAssembly.Memory\f[R].
.PP
The WebAssembly Threads proposal also defines a new set of
atomic (https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses)
instructions.
Just as \f[V]SharedArrayBuffer\f[R] and its methods are unconditionally
enabled (and only sharing between threads is gated on the new headers),
the WebAssembly atomic instructions are also unconditionally allowed.
.SS Growing SharedArrayBuffers
.PP
\f[V]SharedArrayBuffer\f[R] objects can be made growable by including
the \f[V]maxByteLength\f[R] option when calling the
\f[V]SharedArrayBuffer()\f[R] constructor.
You can query whether a \f[V]SharedArrayBuffer\f[R] is growable and what
its maximum size is by accessing its \f[V]growable\f[R] and
\f[V]maxByteLength\f[R] properties, respectively.
You can assign a new size to a growable \f[V]SharedArrayBuffer\f[R] with
a \f[V]grow()\f[R] call.
New bytes are initialized to 0.
.PP
These features make growing \f[V]SharedArrayBuffer\f[R]s more efficient
\[em] otherwise, you have to make a copy of the buffer with a new size.
It also gives JavaScript parity with WebAssembly in this regard (Wasm
linear memory can be resized with
\f[V]WebAssembly.Memory.prototype.grow()\f[R]).
.PP
For security reasons, \f[V]SharedArrayBuffer\f[R]s cannot be reduced in
size, only grown.
.SH Constructor
.IP \[bu] 2
\f[V]SharedArrayBuffer()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]SharedArrayBuffer\f[R] object.
.RE
.SH Static properties
.IP \[bu] 2
\f[V]SharedArrayBuffer[\[at]\[at]species]\f[R]
.RS 2
.IP \[bu] 2
Returns the constructor used to construct return values from
\f[V]SharedArrayBuffer\f[R] methods.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]SharedArrayBuffer.prototype\f[R]
and shared by all \f[V]SharedArrayBuffer\f[R] instances.
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.byteLength\f[R]
.RS 2
.IP \[bu] 2
The size, in bytes, of the array.
This is established when the array is constructed and can only be
changed using the \f[V]SharedArrayBuffer.prototype.grow()\f[R] method if
the \f[V]SharedArrayBuffer\f[R] is growable.
.RE
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]SharedArrayBuffer\f[R] instances, the initial value is the
\f[V]SharedArrayBuffer\f[R] constructor.
.RE
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.growable\f[R]
.RS 2
.IP \[bu] 2
Read-only.
Returns \f[V]true\f[R] if the \f[V]SharedArrayBuffer\f[R] can be grown,
or \f[V]false\f[R] if not.
.RE
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.maxByteLength\f[R]
.RS 2
.IP \[bu] 2
The read-only maximum length, in bytes, that the
\f[V]SharedArrayBuffer\f[R] can be grown to.
This is established when the array is constructed and cannot be changed.
.RE
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype[\[at]\[at]toStringTag]\f[R]
.RS 2
.IP \[bu] 2
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]SharedArrayBuffer\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.grow()\f[R]
.RS 2
.IP \[bu] 2
Grows the \f[V]SharedArrayBuffer\f[R] to the specified size, in bytes.
.RE
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.slice()\f[R]
.RS 2
.IP \[bu] 2
Returns a new \f[V]SharedArrayBuffer\f[R] whose contents are a copy of
this \f[V]SharedArrayBuffer\f[R]\[cq]s bytes from \f[V]begin\f[R],
inclusive, up to \f[V]end\f[R], exclusive.
If either \f[V]begin\f[R] or \f[V]end\f[R] is negative, it refers to an
index from the end of the array, as opposed to from the beginning.
.RE
.SH Examples
.SS Creating a new SharedArrayBuffer
.IP
.nf
\f[C]
const sab = new SharedArrayBuffer(1024);
\f[R]
.fi
.SS Slicing the SharedArrayBuffer
.IP
.nf
\f[C]
sab.slice(); // SharedArrayBuffer { byteLength: 1024 }
sab.slice(2); // SharedArrayBuffer { byteLength: 1022 }
sab.slice(-2); // SharedArrayBuffer { byteLength: 2 }
sab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }
\f[R]
.fi
.SS Using it in a WebGL buffer
.IP
.nf
\f[C]
const canvas = document.querySelector(\[dq]canvas\[dq]);
const gl = canvas.getContext(\[dq]webgl\[dq]);
const buffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
gl.bufferData(gl.ARRAY_BUFFER, sab, gl.STATIC_DRAW);
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Atomics\f[R]
.IP \[bu] 2
\f[V]ArrayBuffer\f[R]
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
Web Workers
.IP \[bu] 2
parlib-simple (https://github.com/lars-t-hansen/parlib-simple) \[en] a
simple library providing synchronization and work distribution
abstractions.
.IP \[bu] 2
Shared Memory \[en] a brief
tutorial (https://github.com/tc39/proposal-ecmascript-sharedmem/blob/main/TUTORIAL.md)
.IP \[bu] 2
A Taste of JavaScript\[cq]s New Parallel Primitives \[en] Mozilla
Hacks (https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/)
.IP \[bu] 2
COOP and COEP
explained (https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit).
.IP \[bu] 2
\f[V]Cross-Origin-Opener-Policy\f[R]: whatwg/html issue
#3740 (https://github.com/whatwg/html/issues/3740), draft
specification (https://gist.github.com/annevk/6f2dd8c79c77123f39797f6bdac43f3e).
.IP \[bu] 2
\f[V]Cross-Origin-Embedder-Policy\f[R]: whatwg/html issue
#4175 (https://github.com/whatwg/html/issues/4175), draft
specification (https://mikewest.github.io/corpp/).
.IP \[bu] 2
\f[V]Cross-Origin-Resource-Policy\f[R]: standardized in
Fetch (https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header),
new \f[V]cross-origin\f[R] value is part of the
\f[V]Cross-Origin-Embedder-Policy\f[R] effort.
.IP \[bu] 2
\f[V]postMessage()\f[R] changes and \f[V]self.crossOriginIsolated\f[R]:
whatwg/html issue #4732 (https://github.com/whatwg/html/issues/4732),
whatwg/html issue #4872 (https://github.com/whatwg/html/issues/4872),
draft specification (https://github.com/whatwg/html/pull/4734).
.IP \[bu] 2
SharedArrayBuffer updates in Android Chrome 88 and Desktop Chrome
92 (https://developer.chrome.com/blog/enabling-shared-array-buffer/)
