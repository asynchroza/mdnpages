.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AudioWorkletNode.port" "JS" "April 6, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioWorkletNode.port \- AudioWorkletNode: port property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]port\f[B]\f[R] property of the
\f[CR]AudioWorkletNode\f[R] interface returns the associated
\f[CR]MessagePort\f[R].
It can be used to communicate between the node and its associated
\f[CR]AudioWorkletProcessor\f[R].
.RS
.PP
\f[B]Note:\f[R] The port at the other end of the channel is available
under the \f[CR]port\f[R] property of the processor.
.RE
.SH VALUE
The \f[CR]MessagePort\f[R] object that is connecting the
\f[CR]AudioWorkletNode\f[R] and its associated
\f[CR]AudioWorkletProcessor\f[R].
.SH EXAMPLES
To demonstrate bidirectional communication capabilities, we\[cq]ll
create an \f[CR]AudioWorkletProcessor\f[R], which will output silence
and respond to ping requests from its \f[CR]AudioWorkletNode\f[R].
.PP
First, we need to define a custom \f[CR]AudioWorkletProcessor\f[R], and
register it.
Note that this should be done in a separate file.
.IP
.EX
// ping\-pong\-processor.js
class PingPongProcessor extends AudioWorkletProcessor {
  constructor(...args) {
    super(...args);
    this.port.onmessage = (e) => {
      console.log(e.data);
      this.port.postMessage(\[dq]pong\[dq]);
    };
  }
  process(inputs, outputs, parameters) {
    return true;
  }
}

registerProcessor(\[dq]ping\-pong\-processor\[dq], PingPongProcessor);
.EE
.PP
Now in our main scripts file we\[cq]ll load the processor, create an
instance of \f[CR]AudioWorkletNode\f[R] passing the name of the
processor, and connect the node to an audio graph.
.IP
.EX
const audioContext = new AudioContext();
await audioContext.audioWorklet.addModule(\[dq]ping\-pong\-processor.js\[dq]);
const pingPongNode = new AudioWorkletNode(audioContext, \[dq]ping\-pong\-processor\[dq]);
// send the message containing \[aq]ping\[aq] string
// to the AudioWorkletProcessor from the AudioWorkletNode every second
setInterval(() => pingPongNode.port.postMessage(\[dq]ping\[dq]), 1000);
pingPongNode.port.onmessage = (e) => console.log(e.data);
pingPongNode.connect(audioContext.destination);
.EE
.PP
This will output \f[CR]\[dq]ping\[dq]\f[R] and \f[CR]\[dq]pong\[dq]\f[R]
strings to the console every second.
.SH SEE ALSO
.IP \[bu] 2
Web Audio API
.IP \[bu] 2
Using the Web Audio API
