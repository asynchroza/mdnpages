.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.of" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.of - Array.of()
.SH SYNOPSIS
The \f[B]\f[CB]Array.of()\f[B]\f[R] static method creates a new
\f[CR]Array\f[R] instance from a variable number of arguments,
regardless of number or type of the arguments.
.SH SYNTAX
.IP
.EX
Array.of()
Array.of(element1)
Array.of(element1, element2)
Array.of(element1, element2, /* \&..., */ elementN)
.EE
.SS Parameters
.TP
\f[B]element1\f[R], \&..., \f[B]elementN\f[R]
Elements used to create the array.
.SS Return value
A new \f[CR]Array\f[R] instance.
.SH DESCRIPTION
The difference between \f[CR]Array.of()\f[R] and the \f[CR]Array()\f[R]
constructor is in the handling of single arguments:
\f[CR]Array.of(7)\f[R] creates an array with a single element,
\f[CR]7\f[R], whereas \f[CR]Array(7)\f[R] creates an empty array with a
\f[CR]length\f[R] property of \f[CR]7\f[R].
(That implies an array of 7 empty slots, not slots with actual
\f[CR]undefined\f[R] values.)
.IP
.EX
Array.of(7); // [7]
Array(7); // array of 7 empty slots

Array.of(1, 2, 3); // [1, 2, 3]
Array(1, 2, 3); // [1, 2, 3]
.EE
.PP
The \f[CR]Array.of()\f[R] method is a generic factory method.
For example, if a subclass of \f[CR]Array\f[R] inherits the
\f[CR]of()\f[R] method, the inherited \f[CR]of()\f[R] method will return
new instances of the subclass instead of \f[CR]Array\f[R] instances.
In fact, the \f[CR]this\f[R] value can be any constructor function that
accepts a single argument representing the length of the new array, and
the constructor will be called with the number of arguments passed to
\f[CR]of()\f[R].
The final \f[CR]length\f[R] will be set again when all elements are
assigned.
If the \f[CR]this\f[R] value is not a constructor function, the plain
\f[CR]Array\f[R] constructor is used instead.
.SH EXAMPLES
.SS Using Array.of()
.IP
.EX
Array.of(1); // [1]
Array.of(1, 2, 3); // [1, 2, 3]
Array.of(undefined); // [undefined]
.EE
.SS Calling of() on non-array constructors
The \f[CR]of()\f[R] method can be called on any constructor function
that accepts a single argument representing the length of the new array.
.IP
.EX
function NotArray(len) {
  console.log(\[dq]NotArray called with length\[dq], len);
}

console.log(Array.of.call(NotArray, 1, 2, 3));
// NotArray called with length 3
// NotArray { \[aq]0\[aq]: 1, \[aq]1\[aq]: 2, \[aq]2\[aq]: 3, length: 3 }

console.log(Array.of.call(Object)); // [Number: 0] { length: 0 }
.EE
.PP
When the \f[CR]this\f[R] value is not a constructor, a plain
\f[CR]Array\f[R] object is returned.
.IP
.EX
console.log(Array.of.call({}, 1)); // [ 1 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.of\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array()\f[R]
.IP \[bu] 2
\f[CR]Array.from()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.of()\f[R]
