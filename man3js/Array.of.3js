.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.of" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Array.of()\f[B]\f[R] static method creates a new
\f[V]Array\f[R] instance from a variable number of arguments, regardless
of number or type of the arguments.
.SH Syntax
.IP
.nf
\f[C]
Array.of()
Array.of(element0)
Array.of(element0, element1)
Array.of(element0, element1, /* \&... ,*/ elementN)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]elementN\f[R]
.RS 2
.IP \[bu] 2
Elements used to create the array.
.RE
.SS Return value
.PP
A new \f[V]Array\f[R] instance.
.SH Description
.PP
The difference between \f[V]Array.of()\f[R] and the \f[V]Array()\f[R]
constructor is in the handling of single arguments:
\f[V]Array.of(7)\f[R] creates an array with a single element,
\f[V]7\f[R], whereas \f[V]Array(7)\f[R] creates an empty array with a
\f[V]length\f[R] property of \f[V]7\f[R].
(That implies an array of 7 empty slots, not slots with actual
\f[V]undefined\f[R] values.)
.IP
.nf
\f[C]
Array.of(7); // [7]
Array(7); // array of 7 empty slots

Array.of(1, 2, 3); // [1, 2, 3]
Array(1, 2, 3); // [1, 2, 3]
\f[R]
.fi
.PP
The \f[V]Array.of()\f[R] method is a generic factory method.
For example, if a subclass of \f[V]Array\f[R] inherits the
\f[V]of()\f[R] method, the inherited \f[V]of()\f[R] method will return
new instances of the subclass instead of \f[V]Array\f[R] instances.
In fact, the \f[V]this\f[R] value can be any constructor function that
accepts a single argument representing the length of the new array, and
the constructor will be called with the number of arguments passed to
\f[V]of()\f[R].
The final \f[V]length\f[R] will be set again when all elements are
assigned.
If the \f[V]this\f[R] value is not a constructor function, the plain
\f[V]Array\f[R] constructor is used instead.
.SH Examples
.SS Using Array.of()
.IP
.nf
\f[C]
Array.of(1); // [1]
Array.of(1, 2, 3); // [1, 2, 3]
Array.of(undefined); // [undefined]
\f[R]
.fi
.SS Calling of() on non-array constructors
.PP
The \f[V]of()\f[R] method can be called on any constructor function that
accepts a single argument representing the length of the new array.
.IP
.nf
\f[C]
function NotArray(len) {
  console.log(\[dq]NotArray called with length\[dq], len);
}

console.log(Array.of.call(NotArray, 1, 2, 3));
// NotArray called with length 3
// NotArray { \[aq]0\[aq]: 1, \[aq]1\[aq]: 2, \[aq]2\[aq]: 3, length: 3 }

console.log(Array.of.call(Object)); // [Number: 0] { length: 0 }
\f[R]
.fi
.PP
When the \f[V]this\f[R] value is not a constructor, a plain
\f[V]Array\f[R] object is returned.
.IP
.nf
\f[C]
console.log(Array.of.call({}, 1)); // [ 1 ]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.of\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array()\f[R]
.IP \[bu] 2
\f[V]Array.from()\f[R]
.IP \[bu] 2
\f[V]TypedArray.of()\f[R]
