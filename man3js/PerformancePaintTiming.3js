.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PerformancePaintTiming" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformancePaintTiming \- PerformancePaintTiming
.SH SYNOPSIS
The \f[B]\f[CB]PerformancePaintTiming\f[B]\f[R] interface provides
timing information about \[lq]paint\[rq] (also called \[lq]render\[rq])
operations during web page construction.
\[lq]Paint\[rq] refers to conversion of the render tree to on\-screen
pixels.
.PP
There are two key paint moments this API provides:
.IP \[bu] 2
First paint (FP): Time when anything is rendered.
Note that the marking of the first paint is optional, not all user
agents report it.
.IP \[bu] 2
First contentful paint (FCP): Time when the first bit of DOM text or
image content is rendered.
.PP
A third key paint moment is provided by the
\f[CR]LargestContentfulPaint\f[R] API:
.IP \[bu] 2
Largest contentful paint (LCP): Render time of the largest image or text
block visible within the viewport, recorded from when the page first
begins to load.
.PP
The data this API provides helps you minimize the time that users have
to wait before they can see the site\[cq]s content start to appear.
Decreasing the time until these key paint moments make sites feel more
responsive, performant, and engaging for your users.
.PP
Like other Performance APIs, this API extends
\f[CR]PerformanceEntry\f[R].
.SH INSTANCE PROPERTIES
This interface has no properties but it extends the following
\f[CR]PerformanceEntry\f[R] properties by qualifying and constraining
the properties as follows:
.TP
\f[B]PerformanceEntry.entryType\f[R]
Returns \[lq]\f[CR]paint\f[R]\[rq].
.TP
\f[B]PerformanceEntry.name\f[R]
Returns either \f[CR]\[dq]first\-paint\[dq]\f[R] or
\f[CR]\[dq]first\-contentful\-paint\[dq]\f[R].
.TP
\f[B]PerformanceEntry.startTime\f[R]
Returns the \f[CR]timestamp\f[R] when the paint occurred.
.TP
\f[B]PerformanceEntry.duration\f[R]
Returns 0.
.SH INSTANCE METHODS
This interface has no methods.
.SH EXAMPLES
.SS Getting paint timings
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]paint\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
const observer = new PerformanceObserver((list) => {
  list.getEntries().forEach((entry) => {
    console.log(
      \[ga]The time to ${entry.name} was ${entry.startTime} milliseconds.\[ga],
    );
    // Logs \[dq]The time to first\-paint was 386.7999999523163 milliseconds.\[dq]
    // Logs \[dq]The time to first\-contentful\-paint was 400.6999999284744 milliseconds.\[dq]
  });
});

observer.observe({ type: \[dq]paint\[dq], buffered: true });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]paint\f[R] performance entries present in the browser\[cq]s
performance timeline at the time you call this method:
.IP
.EX
const entries = performance.getEntriesByType(\[dq]paint\[dq]);
entries.forEach((entry) => {
  console.log(\[ga]The time to ${entry.name} was ${entry.startTime} milliseconds.\[ga]);
  // Logs \[dq]The time to first\-paint was 386.7999999523163 milliseconds.\[dq]
  // Logs \[dq]The time to first\-contentful\-paint was 400.6999999284744 milliseconds.\[dq]
});
.EE
.SS See also
.IP \[bu] 2
\f[CR]LargestContentfulPaint\f[R]
