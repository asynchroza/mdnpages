.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.isFinite" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Number.isFinite - Number.isFinite()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Number.isFinite()\f[B]\f[R] static method determines
whether the passed value is a finite number \[em] that is, it checks
that a given value is a number, and the number is neither positive
\f[V]Infinity\f[R], negative \f[V]Infinity\f[R], nor \f[V]NaN\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
Number.isFinite(value)
\f[R]
.fi
.SS Parameters
.TP
\f[B]value\f[R]
The value to be tested for finiteness.
.SS Return value
.PP
The boolean value \f[V]true\f[R] if the given value is a finite number.
Otherwise \f[V]false\f[R].
.SH EXAMPLES
.SS Using isFinite()
.IP
.nf
\f[C]
Number.isFinite(Infinity); // false
Number.isFinite(NaN); // false
Number.isFinite(-Infinity); // false

Number.isFinite(0); // true
Number.isFinite(2e64); // true
\f[R]
.fi
.SS Difference between Number.isFinite() and global isFinite()
.PP
In comparison to the global \f[V]isFinite()\f[R] function, this method
doesn\[cq]t first convert the parameter to a number.
This means only values of the type number \f[I]and\f[R] are finite
return \f[V]true\f[R], and non-numbers always return \f[V]false\f[R].
.IP
.nf
\f[C]
isFinite(\[dq]0\[dq]); // true; coerced to number 0
Number.isFinite(\[dq]0\[dq]); // false
isFinite(null); // true; coerced to number 0
Number.isFinite(null); // false
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Number.isFinite\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-number)
.IP \[bu] 2
The \f[V]Number\f[R] object it belongs to
.IP \[bu] 2
The global function \f[V]isFinite\f[R]
