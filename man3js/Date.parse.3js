.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Date.parse" "JS" "June 1, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.parse - Date.parse()
.SH SYNOPSIS
The \f[B]\f[CB]Date.parse()\f[B]\f[R] static method parses a string
representation of a date, and returns the date\[cq]s timestamp.
.PP
Only the date time string format is explicitly specified to be
supported.
Other formats are implementation-defined and may not work across all
browsers.
A library can help if many different formats are to be accommodated.
.SH SYNTAX
.IP
.EX
Date.parse(dateString)
.EE
.SS Parameters
.TP
\f[B]dateString\f[R]
A string in the date time string format.
See the linked reference for caveats on using different formats.
.SS Return value
A number representing the timestamp of the given date.
If \f[CR]dateString\f[R] fails to be parsed as a valid date,
\f[CR]NaN\f[R] is returned.
.SH DESCRIPTION
This function is useful for setting date values based on string values,
for example in conjunction with the \f[CR]setTime()\f[R] method.
.PP
Because \f[CR]parse()\f[R] is a static method of \f[CR]Date\f[R], you
always use it as \f[CR]Date.parse()\f[R], rather than as a method of a
\f[CR]Date\f[R] object you created.
.SH EXAMPLES
.SS Using Date.parse()
The following calls all return \f[CR]1546300800000\f[R].
The first will imply UTC time because it\[cq]s date-only, and the others
explicitly specify the UTC timezone.
.IP
.EX
Date.parse(\[dq]2019-01-01\[dq]);
Date.parse(\[dq]2019-01-01T00:00:00.000Z\[dq]);
Date.parse(\[dq]2019-01-01T00:00:00.000+00:00\[dq]);
.EE
.PP
The following call, which does not specify a time zone will be set to
2019-01-01 at 00:00:00 in the local timezone of the system, because it
has both date and time.
.IP
.EX
Date.parse(\[dq]2019-01-01T00:00:00\[dq]);
.EE
.SS Non-standard date strings
.RS
.PP
\f[B]Note:\f[R] This section contains implementation-specific behavior
that can be inconsistent across implementations.
.RE
.PP
Implementations usually default to the local time zone when the date
string is non-standard.
For consistency, we will assume that the code uses the UTC timezone.
.IP
.EX
Date.parse(\[dq]Jan 1, 1970\[dq]); // 0 in all implementations

Date.parse(\[dq]Thu, 01 Jan 1970 00:00:00\[dq]); // 0 in all implementations

Date.parse(\[dq]1970,1,1\[dq]); // 0 in Chrome and Firefox, NaN in Safari

Date.parse(\[dq]02 01 1970\[dq]);
// 2678400000 in Chrome and Firefox (Sun Feb 01 1970 00:00:00 GMT+0000);
// NaN in Safari

// With explicit timezone
Date.parse(\[dq]Thu, 01 Jan 1970 00:00:00 GMT+0300\[dq]);
// -10800000 in all implementations in all timezones

// Single number
Date.parse(\[dq]0\[dq]);
// 946684800000 in Chrome (Sat Jan 01 2000 00:00:00 GMT+0000);
// NaN in Firefox;
// -62167219200000 in Safari (Sat Jan 01 0000 00:00:00 GMT+0000)

// Two-digit number that may be a month
Date.parse(\[dq]28\[dq]); // NaN in all implementations

// Two-digit year
Date.parse(\[dq]70/01/01\[dq]); // 0 in all implementations

// Out-of-bounds date components
Date.parse(\[dq]2014-25-23\[dq]); // NaN in all implementations
Date.parse(\[dq]Mar 32, 2014\[dq]); // NaN in all implementations
Date.parse(\[dq]2014/25/23\[dq]); // NaN in all implementations

Date.parse(\[dq]2014-02-30\[dq]);
// NaN in Safari and Firefox;
// 1393718400000 in Chrome (Sun Mar 02 2014 00:00:00 GMT+0000)
Date.parse(\[dq]02/30/2014\[dq]); // 1393718400000 in all implementations
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date.UTC()\f[R]
