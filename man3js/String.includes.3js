.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.includes" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]includes()\f[B]\f[R] method performs a case-sensitive
search to determine whether one string may be found within another
string, returning \f[V]true\f[R] or \f[V]false\f[R] as appropriate.
.SH Syntax
.IP
.nf
\f[C]
includes(searchString)
includes(searchString, position)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]searchString\f[R]
.RS 2
.IP \[bu] 2
A string to be searched for within \f[V]str\f[R].
Cannot be a regex.
All values that are not regexes are coerced to strings, so omitting it
or passing \f[V]undefined\f[R] causes \f[V]includes()\f[R] to search for
the string \f[V]\[dq]undefined\[dq]\f[R], which is rarely what you want.
.RE
.IP \[bu] 2
\f[V]position\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
The position within the string at which to begin searching for
\f[V]searchString\f[R].
(Defaults to \f[V]0\f[R].)
.RE
.SS Return value
.PP
\f[B]\f[VB]true\f[B]\f[R] if the search string is found anywhere within
the given string, including when \f[V]searchString\f[R] is an empty
string; otherwise, \f[B]\f[VB]false\f[B]\f[R].
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]searchString\f[R] is a regex.
.RE
.SH Description
.PP
This method lets you determine whether or not a string includes another
string.
.SS Case-sensitivity
.PP
The \f[V]includes()\f[R] method is case sensitive.
For example, the following expression returns \f[V]false\f[R]:
.IP
.nf
\f[C]
\[dq]Blue Whale\[dq].includes(\[dq]blue\[dq]); // returns false
\f[R]
.fi
.PP
You can work around this constraint by transforming both the original
string and the search string to all lowercase:
.IP
.nf
\f[C]
\[dq]Blue Whale\[dq].toLowerCase().includes(\[dq]blue\[dq]); // returns true
\f[R]
.fi
.SH Examples
.SS Using includes()
.IP
.nf
\f[C]
const str = \[dq]To be, or not to be, that is the question.\[dq];

console.log(str.includes(\[dq]To be\[dq])); // true
console.log(str.includes(\[dq]question\[dq])); // true
console.log(str.includes(\[dq]nonexistent\[dq])); // false
console.log(str.includes(\[dq]To be\[dq], 1)); // false
console.log(str.includes(\[dq]TO BE\[dq])); // false
console.log(str.includes(\[dq]\[dq])); // true
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]String.prototype.includes\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[V]Array.prototype.includes()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.includes()\f[R]
.IP \[bu] 2
\f[V]String.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[V]String.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[V]String.prototype.startsWith()\f[R]
.IP \[bu] 2
\f[V]String.prototype.endsWith()\f[R]
