.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.of" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]TypedArray.of()\f[B]\f[R] static method creates a new
typed array from a variable number of arguments.
This method is nearly the same as \f[V]Array.of()\f[R].
.SH Syntax
.IP
.nf
\f[C]
TypedArray.of()
TypedArray.of(element0)
TypedArray.of(element0, element1)
TypedArray.of(element0, element1, /* \&... ,*/ elementN)
\f[R]
.fi
.PP
Where \f[V]TypedArray\f[R] is one of:
.IP \[bu] 2
\f[V]Int8Array\f[R]
.IP \[bu] 2
\f[V]Uint8Array\f[R]
.IP \[bu] 2
\f[V]Uint8ClampedArray\f[R]
.IP \[bu] 2
\f[V]Int16Array\f[R]
.IP \[bu] 2
\f[V]Uint16Array\f[R]
.IP \[bu] 2
\f[V]Int32Array\f[R]
.IP \[bu] 2
\f[V]Uint32Array\f[R]
.IP \[bu] 2
\f[V]Float32Array\f[R]
.IP \[bu] 2
\f[V]Float64Array\f[R]
.IP \[bu] 2
\f[V]BigInt64Array\f[R]
.IP \[bu] 2
\f[V]BigUint64Array\f[R]
.SS Parameters
.IP \[bu] 2
\f[V]elementN\f[R]
.RS 2
.IP \[bu] 2
Elements of which to create the typed array.
.RE
.SS Return value
.PP
A new \f[V]TypedArray\f[R] instance.
.SH Description
.PP
Some subtle distinctions between \f[V]Array.of()\f[R] and
\f[V]TypedArray.of()\f[R]:
.IP \[bu] 2
If the \f[V]this\f[R] value passed to \f[V]TypedArray.of()\f[R] is not a
constructor, \f[V]TypedArray.of()\f[R] will throw a \f[V]TypeError\f[R],
where \f[V]Array.of()\f[R] defaults to creating a new \f[V]Array\f[R].
.IP \[bu] 2
\f[V]TypedArray.of()\f[R] uses \f[V][[Set]]\f[R] where
\f[V]Array.of()\f[R] uses \f[V][[DefineOwnProperty]]\f[R].
Hence, when working with \f[V]Proxy\f[R] objects, it calls
\f[V]handler.set()\f[R] to create new elements rather than
\f[V]handler.defineProperty()\f[R].
.SH Examples
.SS Using of()
.IP
.nf
\f[C]
Uint8Array.of(1); // Uint8Array [ 1 ]
Int8Array.of(\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq]); // Int8Array [ 1, 2, 3 ]
Float32Array.of(1, 2, 3); // Float32Array [ 1, 2, 3 ]
Int16Array.of(undefined); // Int16Array [ 0 ]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]TypedArray.of\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[V]TypedArray.from()\f[R]
.IP \[bu] 2
\f[V]Array.of()\f[R]
