.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.fround" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Math.fround - Math.fround()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Math.fround()\f[B]\f[R] static method returns the nearest
32-bit single
precision (https://en.wikipedia.org/wiki/Single-precision_floating-point_format)
float representation of a number.
.SH SYNTAX
.IP
.nf
\f[C]
Math.fround(doubleFloat)
\f[R]
.fi
.SS Parameters
.TP
\f[B]doubleFloat\f[R]
A number.
.SS Return value
.PP
The nearest 32-bit single
precision (https://en.wikipedia.org/wiki/Single-precision_floating-point_format)
float representation of \f[V]x\f[R].
.SH DESCRIPTION
.PP
JavaScript uses 64-bit double floating-point numbers internally, which
offer a very high precision.
However, sometimes you may be working with 32-bit floating-point
numbers, for example if you are reading values from a
\f[V]Float32Array\f[R].
This can create confusion: checking a 64-bit float and a 32-bit float
for equality may fail even though the numbers are seemingly identical.
.PP
To solve this, \f[V]Math.fround()\f[R] can be used to cast the 64-bit
float to a 32-bit float.
Internally, JavaScript continues to treat the number as a 64-bit float,
it just performs a \[lq]round to even\[rq] on the 23rd bit of the
mantissa, and sets all following mantissa bits to \f[V]0\f[R].
If the number is outside the range of a 32-bit float, \f[V]Infinity\f[R]
or \f[V]-Infinity\f[R] is returned.
.PP
Because \f[V]fround()\f[R] is a static method of \f[V]Math\f[R], you
always use it as \f[V]Math.fround()\f[R], rather than as a method of a
\f[V]Math\f[R] object you created (\f[V]Math\f[R] is not a constructor).
.SH EXAMPLES
.SS Using Math.fround()
.PP
The number 1.5 can be precisely represented in the binary numeral
system, and is identical in 32-bit and 64-bit:
.IP
.nf
\f[C]
Math.fround(1.5); // 1.5
Math.fround(1.5) === 1.5; // true
\f[R]
.fi
.PP
However, the number 1.337 cannot be precisely represented in the binary
numeral system, so it differs in 32-bit and 64-bit:
.IP
.nf
\f[C]
Math.fround(1.337); // 1.3370000123977661
Math.fround(1.337) === 1.337; // false
\f[R]
.fi
.PP
21502\[ha]150 is too big for a 32-bit float, so \f[V]Infinity\f[R] is
returned:
.IP
.nf
\f[C]
2 ** 150; // 1.42724769270596e+45
Math.fround(2 ** 150); // Infinity
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Math.fround\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-math)
.IP \[bu] 2
\f[V]Math.round()\f[R]
