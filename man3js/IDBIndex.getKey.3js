.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "IDBIndex.getKey" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBIndex.getKey \- IDBIndex: getKey() method
.SH SYNOPSIS
The \f[B]\f[CB]getKey()\f[B]\f[R] method of the \f[CR]IDBIndex\f[R]
interface returns an \f[CR]IDBRequest\f[R] object, and, in a separate
thread, finds either the primary key that corresponds to the given key
in this index or the first corresponding primary key, if \f[CR]key\f[R]
is set to an \f[CR]IDBKeyRange\f[R].
.PP
If a primary key is found, it is set as the \f[CR]result\f[R] of the
request object.
Note that this doesn\[cq]t return the whole record as
\f[CR]IDBIndex.get\f[R] does.
.PP
This feature is available in Web Workers.
.SH SYNTAX
.IP
.EX
getKey()
getKey(key)
.EE
.SS Parameters
.TP
\f[B]key\f[R] \f[I](optional)\f[R]
A key or \f[CR]IDBKeyRange\f[R] that identifies a record to be
retrieved.
If this value is null or missing, the browser will use an unbound key
range.
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is the key for the first record matching the
given key or key range.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBIndex\f[R]\[cq]s transaction is inactive.
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if the key or key range provided contains an invalid key.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]IDBIndex\f[R] has been deleted or removed.
.SH EXAMPLES
In the following example we open a transaction and an object store, then
get the index \f[CR]lName\f[R] from a simple contacts database.
We then open a basic cursor on the index using
\f[CR]IDBIndex.openCursor\f[R] \[em] this works the same as opening a
cursor directly on an \f[CR]ObjectStore\f[R] using
\f[CR]IDBObjectStore.openCursor\f[R] except that the returned records
are sorted based on the index, not the primary key.
.PP
\f[CR]myIndex.getKey(\[aq]Bungle\[aq])\f[R] is then used to retrieve the
primary key of the record with an \f[CR]lName\f[R] of \f[CR]Bungle\f[R],
and the result of that request is logged to the console when its success
callback returns.
.PP
Finally, we iterate through each record, and insert the data into an
HTML table.
For a complete working example, see our \c
.UR
https://github.com/mdn/dom-examples/tree/main/indexeddb-examples/idbindex
IndexedDB\-examples demo repo
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/indexeddb-examples/idbindex/
View the example live
.UE \c
).
.IP
.EX
function displayDataByIndex() {
  tableEntry.innerHTML = \[dq]\[dq];
  const transaction = db.transaction([\[dq]contactsList\[dq]], \[dq]readonly\[dq]);
  const objectStore = transaction.objectStore(\[dq]contactsList\[dq]);

  const myIndex = objectStore.index(\[dq]lName\[dq]);
  const getKeyRequest = myIndex.getKey(\[dq]Bungle\[dq]);
  getKeyRequest.onsuccess = () => {
    console.log(getKeyRequest.result);
  };

  myIndex.openCursor().onsuccess = (event) => {
    const cursor = event.target.result;
    if (cursor) {
      const tableRow = document.createElement(\[dq]tr\[dq]);
      tableRow.innerHTML =
        \[ga]<td>${cursor.value.id}</td>\[ga] +
        \[ga]<td>${cursor.value.lName}</td>\[ga] +
        \[ga]<td>${cursor.value.fName}</td>\[ga] +
        \[ga]<td>${cursor.value.jTitle}</td>\[ga] +
        \[ga]<td>${cursor.value.company}</td>\[ga] +
        \[ga]<td>${cursor.value.eMail}</td>\[ga] +
        \[ga]<td>${cursor.value.phone}</td>\[ga] +
        \[ga]<td>${cursor.value.age}</td>\[ga];
      tableEntry.appendChild(tableRow);

      cursor.continue();
    } else {
      console.log(\[dq]Entries all displayed.\[dq]);
    }
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
