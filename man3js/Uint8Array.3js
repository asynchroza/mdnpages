.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Uint8Array" "JS" "May 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Uint8Array - Uint8Array
.SH SYNOPSIS
The \f[B]\f[CB]Uint8Array\f[B]\f[R] typed array represents an array of
8-bit unsigned integers.
The contents are initialized to \f[CR]0\f[R].
Once established, you can reference elements in the array using the
object\[cq]s methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[CR]Uint8Array\f[R] is a subclass of the hidden \f[CR]TypedArray\f[R]
class.
.SH CONSTRUCTOR
.TP
\f[B]Uint8Array()\f[R]
Creates a new \f[CR]Uint8Array\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits static properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]Uint8Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]1\f[R] in the case of \f[CR]Uint8Array\f[R].
.SH STATIC METHODS
\f[I]Inherits static methods from its parent \f[CI]TypedArray\f[I]\f[R].
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[CR]Uint8Array.prototype\f[R] and
shared by all \f[CR]Uint8Array\f[R] instances.
.TP
\f[B]Uint8Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]1\f[R] in the case of a \f[CR]Uint8Array\f[R].
.TP
\f[B]Uint8Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Uint8Array\f[R] instances, the initial value is the
\f[CR]Uint8Array\f[R] constructor.
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent
\f[CI]TypedArray\f[I]\f[R].
.SH EXAMPLES
.SS Different ways to create a Uint8Array
.IP
.EX
// From a length
const uint8 = new Uint8Array(2);
uint8[0] = 42;
console.log(uint8[0]); // 42
console.log(uint8.length); // 2
console.log(uint8.BYTES_PER_ELEMENT); // 1

// From an array
const x = new Uint8Array([21, 31]);
console.log(x[1]); // 31

// From another TypedArray
const y = new Uint8Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
const buffer = new ArrayBuffer(8);
const z = new Uint8Array(buffer, 1, 4);
console.log(z.byteOffset); // 1

// From an iterable
const iterable = (function* () {
  yield* [1, 2, 3];
})();
const uint8FromIterable = new Uint8Array(iterable);
console.log(uint8FromIterable);
// Uint8Array [1, 2, 3]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Uint8Array\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
