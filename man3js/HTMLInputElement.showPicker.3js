.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "HTMLInputElement.showPicker" "JS" "December 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLInputElement.showPicker \- HTMLInputElement: showPicker() method
.SH SYNOPSIS
The \f[B]\f[CB]HTMLInputElement.showPicker()\f[B]\f[R] method displays
the browser picker for an \f[CR]input\f[R] element.
.PP
This is the same picker that would normally be displayed when the
element is selected, but can be triggered from a button press or other
user interaction.
.PP
Commonly browsers implement it for inputs of these types:
\f[CR]\[dq]date\[dq]\f[R], \f[CR]\[dq]month\[dq]\f[R],
\f[CR]\[dq]week\[dq]\f[R], \f[CR]\[dq]time\[dq]\f[R],
\f[CR]\[dq]datetime\-local\[dq]\f[R], \f[CR]\[dq]color\[dq]\f[R], or
\f[CR]\[dq]file\[dq]\f[R].
It can also be prepopulated with items from a \f[CR]<datalist>\f[R]
element or \f[CR]autocomplete\f[R] attribute.
.PP
More generally, this method should ideally display the picker for any
input element on the platform that has a picker.
.SH SYNTAX
.IP
.EX
showPicker()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the element is not mutable, meaning that the user cannot
modify it and/or that it cannot be automatically prefilled.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if not explicitly triggered by a user action such as a touch
gesture or mouse click (the picker requires Transient activation).
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if called in a cross\-origin iframe, except for file and color
pickers (exempt for historical reasons).
.SH SECURITY
Transient user activation is required.
The user has to interact with the page or a UI element in order for this
feature to work.
.SH EXAMPLES
.SS Feature Detection
The code below shows how to check if \f[CR]showPicker()\f[R] is
supported:
.IP
.EX
if (\[dq]showPicker\[dq] in HTMLInputElement.prototype) {
  // showPicker() is supported.
}
.EE
.SS Normal input pickers
This example shows how this feature can be used for \f[CR]color\f[R] and
\f[CR]file\f[R] input pickers.
.RS
.PP
\f[B]Note:\f[R] Pickers for \f[CR]date\f[R], \f[CR]datetime\-local\f[R],
\f[CR]month\f[R], \f[CR]time\f[R], \f[CR]week\f[R] are launched in the
same way.
They cannot be shown here because live examples run in a cross\-origin
frame, and would cause a \f[CR]SecurityError\f[R]
.RE
.SS HTML
.IP
.EX
<p>
  <input type=\[dq]color\[dq] />
  <button id=\[dq]color\[dq]>Show the color picker</button>
</p>

<p>
  <input type=\[dq]file\[dq] />
  <button id=\[dq]file\[dq]>Show the file picker</button>
</p>
.EE
.SS JavaScript
The code simply gets the previous element of the selected button and
calls \f[CR]showPicker()\f[R] on it.
.IP
.EX
document.querySelectorAll(\[dq]button\[dq]).forEach((button) => {
  button.addEventListener(\[dq]click\[dq], (event) => {
    const input = event.srcElement.previousElementSibling;
    try {
      input.showPicker();
    } catch (error) {
      window.alert(error);
    }
  });
});
.EE
.SS Result
Click the button next to each input type to show its picker.
.SS showPicker() for a datalist input
\f[CR]showPicker()\f[R] can launch the picker for a list of options
defined in a \f[CR]<datalist>\f[R].
.PP
First we define a \f[CR]<datalist>\f[R] in HTML consisting of a number
of internet browsers, an input of type \f[CR]text\f[R] that uses it, and
a button.
.IP
.EX
<datalist id=\[dq]browsers\[dq]>
  <option value=\[dq]Chrome\[dq]></option>
  <option value=\[dq]Firefox\[dq]></option>
  <option value=\[dq]Opera\[dq]></option>
  <option value=\[dq]Safari\[dq]></option>
  <option value=\[dq]Microsoft Edge\[dq]></option>
</datalist>

<input type=\[dq]text\[dq] list=\[dq]browsers\[dq] />
<button>Select browser</button>
.EE
.PP
The code below adds an event listener that calls \f[CR]showPicker()\f[R]
when the button is clicked.
.IP
.EX
const button = document.querySelector(\[dq]button\[dq]);
const browserInput = document.querySelector(\[dq]input\[dq]);

button.addEventListener(\[dq]click\[dq], () => {
  try {
    browserInput.showPicker();
  } catch (error) {
    // Fall back to another picker mechanism
  }
});
.EE
.SS showPicker() for autocomplete
\f[CR]showPicker()\f[R] can launch a picker for an
\f[CR]autocomplete\f[R] input.
.PP
Here we define an input that takes an autocomplete option of
\[lq]name\[rq].
.IP
.EX
<input autocomplete=\[dq]name\[dq] /> <button>Show autocomplete options</button>
.EE
.PP
The code below shows the picker for the input when the button is
clicked.
.IP
.EX
const button = document.querySelector(\[dq]button\[dq]);
const browserInput = document.querySelector(\[dq]input\[dq]);

button.addEventListener(\[dq]click\[dq], () => {
  try {
    browserInput.showPicker();
  } catch (error) {
    // Fall back to another picker mechanism
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]<input>\f[R]
.IP \[bu] 2
\f[CR]HTMLInputElement\f[R]
.IP \[bu] 2
\f[CR]HTMLSelectElement.showPicker()\f[R]
.IP \[bu] 2
\f[CR]<datalist>\f[R]
.IP \[bu] 2
\f[CR]autocomplete\f[R]
