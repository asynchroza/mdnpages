.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Report" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Report \- Report
.SH SYNOPSIS
The \f[CR]Report\f[R] interface of the Reporting API represents a single
report.
.PP
Reports can be accessed in a number of ways:
.IP \[bu] 2
Via the \f[CR]ReportingObserver.takeRecords()\f[R] method \[em] this
returns all reports in an observer\[cq]s report queue, and then empties
the queue.
.IP \[bu] 2
Via the \f[CR]reports\f[R] parameter of the callback function passed
into the \f[CR]ReportingObserver()\f[R] constructor upon creation of a
new observer instance.
This contains the list of reports currently contained in the
observer\[cq]s report queue.
.IP \[bu] 2
By sending requests to the endpoints defined via the
\f[CR]Report\-To\f[R] HTTP header.
.SH INSTANCE PROPERTIES
.TP
\f[B]Report.body\f[R] \f[I](read\-only)\f[R]
The body of the report, which is a \f[CR]ReportBody\f[R] object
containing the detailed report information.
.TP
\f[B]Report.type\f[R] \f[I](read\-only)\f[R]
The type of report generated, e.g.\ \f[CR]deprecation\f[R] or
\f[CR]intervention\f[R].
.TP
\f[B]Report.url\f[R] \f[I](read\-only)\f[R]
The URL of the document that generated the report.
.SH INSTANCE METHODS
\f[I]This interface has no methods defined on it.\f[R]
.SH EVENTS
\f[I]This interface has no events that fire on it.\f[R]
.SH EXAMPLES
In our \c
.UR
https://mdn.github.io/dom-examples/reporting-api/deprecation_report.html
deprecation_report.html
.UE \c
\ example, we create a simple reporting observer to observe usage of
deprecated features on our web page:
.IP
.EX
const options = {
  types: [\[dq]deprecation\[dq]],
  buffered: true,
};

const observer = new ReportingObserver((reports, observer) => {
  reportBtn.onclick = () => displayReports(reports);
}, options);
.EE
.PP
We then tell it to start observing reports using
\f[CR]ReportingObserver.observe()\f[R]; this tells the observer to start
collecting reports in its report queue, and runs the callback function
specified inside the constructor:
.IP
.EX
observer.observe();
.EE
.PP
Because of the event handler we set up inside the
\f[CR]ReportingObserver()\f[R] constructor, we can now click the button
to display the report details.
[IMAGE: image of a jolly bearded man with various stats displayed below
it about a deprecated feature]
image of a jolly bearded man with various stats displayed below it about
a deprecated feature
.PP
The report details are displayed via the \f[CR]displayReports()\f[R]
function, which takes the observer callback\[cq]s \f[CR]reports\f[R]
parameter as its parameter:
.IP
.EX
function displayReports(reports) {
  const outputElem = document.querySelector(\[dq].output\[dq]);
  const list = document.createElement(\[dq]ul\[dq]);
  outputElem.appendChild(list);

  reports.forEach((report, i) => {
    let listItem = document.createElement(\[dq]li\[dq]);
    let textNode = document.createTextNode(
      \[ga]Report ${i + 1}, type: ${report.type}\[ga],
    );
    listItem.appendChild(textNode);
    let innerList = document.createElement(\[dq]ul\[dq]);
    listItem.appendChild(innerList);
    list.appendChild(listItem);

    for (const key in report.body) {
      const innerListItem = document.createElement(\[dq]li\[dq]);
      const keyValue = report.body[key];
      innerListItem.textContent = \[ga]${key}: ${keyValue}\[ga];
      innerList.appendChild(innerListItem);
    }
  });
}
.EE
.PP
The \f[CR]reports\f[R] parameter contains an array of all the reports in
the observer\[cq]s report queue.
We loop over each report using a \f[CR]forEach()\f[R] loop, then iterate
over each entry of in the report\[cq]s body using a \f[CR]for...in\f[R]
structure, displaying each key/value pair inside a list item.
.SH SEE ALSO
.IP \[bu] 2
Reporting API
