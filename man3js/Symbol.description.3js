.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.description" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]description\f[B]\f[R] accessor property of
\f[V]Symbol\f[R] values returns a string containing the description of
this symbol, or \f[V]undefined\f[R] if the symbol has no description.
.SH Description
.PP
\f[V]Symbol\f[R] objects can be created with an optional description
which can be used for debugging but not to access the symbol itself.
The \f[V]Symbol.prototype.description\f[R] property can be used to read
that description.
It is different to \f[V]Symbol.prototype.toString()\f[R] as it does not
contain the enclosing \f[V]\[dq]Symbol()\[dq]\f[R] string.
See the examples.
.SH Examples
.SS Using description
.IP
.nf
\f[C]
Symbol(\[dq]desc\[dq]).toString(); // \[dq]Symbol(desc)\[dq]
Symbol(\[dq]desc\[dq]).description; // \[dq]desc\[dq]
Symbol(\[dq]\[dq]).description; // \[dq]\[dq]
Symbol().description; // undefined

// well-known symbols
Symbol.iterator.toString(); // \[dq]Symbol(Symbol.iterator)\[dq]
Symbol.iterator.description; // \[dq]Symbol.iterator\[dq]

// global symbols
Symbol.for(\[dq]foo\[dq]).toString(); // \[dq]Symbol(foo)\[dq]
Symbol.for(\[dq]foo\[dq]).description; // \[dq]foo\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Symbol.prototype.description\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-symbol)
.IP \[bu] 2
\f[V]Symbol.prototype.toString()\f[R]
.IP \[bu] 2
Polyfill: <https://npmjs.com/symbol.prototype.description>
