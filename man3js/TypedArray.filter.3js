.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.filter" "JS" "March 30, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.filter - TypedArray.prototype.filter()
.SH SYNOPSIS
The \f[B]\f[CB]filter()\f[B]\f[R] method creates a new typed array with
all elements that pass the test implemented by the provided function.
This method has the same algorithm as
\f[CR]Array.prototype.filter()\f[R].
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH SYNTAX
.IP
.EX
filter(callbackFn)
filter(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
It should return a truthy value to keep the element in the resulting
typed array, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the typed array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the typed array.
.TP
\f[B]array\f[R]
The typed array \f[CR]filter()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
A new typed array with the elements that pass the test.
.SH DESCRIPTION
The \f[CR]filter()\f[R] method calls a provided \f[CR]callbackFn\f[R]
function once for each element in a typed array, and constructs a new
typed array of all the values for which \f[CR]callbackFn\f[R] returns a
value that coerces to \f[CR]true\f[R].
\f[CR]callbackFn\f[R] is invoked only for indexes of the typed array
which have assigned values; it is not invoked for indexes which have
been deleted or which have never been assigned values.
Typed array elements which do not pass the \f[CR]callbackFn\f[R] test
are skipped, and are not included in the new typed array.
.PP
\f[CR]callbackFn\f[R] is invoked with three arguments:
.IP "1." 3
the value of the element
.IP "2." 3
the index of the element
.IP "3." 3
the typed array object being traversed
.PP
If a \f[CR]thisArg\f[R] parameter is provided to \f[CR]filter()\f[R], it
will be passed to \f[CR]callbackFn\f[R] when invoked, for use as its
\f[CR]this\f[R] value.
Otherwise, the value \f[CR]undefined\f[R] will be passed for use as its
\f[CR]this\f[R] value.
The \f[CR]this\f[R] value ultimately observable by \f[CR]callbackFn\f[R]
is determined according to the usual rules for determining the
\f[CR]this\f[R] seen by a function.
.PP
\f[CR]filter()\f[R] does not mutate the typed array on which it is
called.
.PP
The range of elements processed by \f[CR]filter()\f[R] is set before the
first invocation of \f[CR]callbackFn\f[R].
Elements which are appended to the typed array after the call to
\f[CR]filter()\f[R] begins will not be visited by \f[CR]callbackFn\f[R].
If existing elements of the typed array are changed, or deleted, their
value as passed to \f[CR]callbackFn\f[R] will be the value at the time
\f[CR]filter()\f[R] visits them; elements that are deleted are not
visited.
.SH EXAMPLES
.SS Filtering out all small values
The following example uses \f[CR]filter()\f[R] to create a filtered
typed array that has all elements with values less than 10 removed.
.IP
.EX
function isBigEnough(element, index, array) {
  return element >= 10;
}
new Uint8Array([12, 5, 8, 130, 44]).filter(isBigEnough);
// Uint8Array [ 12, 130, 44 ]
.EE
.SS Filtering typed array elements using arrow functions
Arrow functions provide a shorter syntax for the same test.
.IP
.EX
new Uint8Array([12, 5, 8, 130, 44]).filter((elem) => elem >= 10);
// Uint8Array [ 12, 130, 44 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.filter\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[CR]TypedArray.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.filter()\f[R]
