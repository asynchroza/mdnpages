.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Object.lookupGetter" "JS" "April 5, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.lookupGetter - Object.prototype.__lookupGetter__()
.SH SYNOPSIS
\f[I](deprecated)\f[R]
.RS
.PP
\f[B]Note:\f[R] This feature is deprecated in favor of the
\f[CR]Object.getOwnPropertyDescriptor()\f[R] API.
This method\[cq]s behavior is only specified for web compatibility, and
is not required to be implemented in any platform.
It may not work everywhere.
.RE
.PP
The \f[B]\f[CB]__lookupGetter__()\f[B]\f[R] method returns the function
bound as a getter to the specified property.
.SH SYNTAX
.IP
.EX
__lookupGetter__(prop)
.EE
.SS Parameters
.TP
\f[B]prop\f[R]
A string containing the name of the property whose getter should be
returned.
.SS Return value
The function bound as a getter to the specified property.
Returns \f[CR]undefined\f[R] if no such property is found, or the
property is a data property.
.SH DESCRIPTION
All objects that inherit from \f[CR]Object.prototype\f[R] (that is, all
except \f[CR]null\f[R]-prototype objects) inherit the
\f[CR]__lookupGetter__()\f[R] method.
If a getter has been defined for an object\[cq]s property, it\[cq]s not
possible to reference the getter function through that property, because
that property refers to the return value of that function.
\f[CR]__lookupGetter__()\f[R] can be used to obtain a reference to the
getter function.
.PP
\f[CR]__lookupGetter__()\f[R] walks up the prototype chain to find the
specified property.
If any object along the prototype chain has the specified own property,
the \f[CR]get\f[R] attribute of the property descriptor for that
property is returned.
If that property is a data property, \f[CR]undefined\f[R] is returned.
If the property is not found along the entire prototype chain,
\f[CR]undefined\f[R] is also returned.
.PP
\f[CR]__lookupGetter__()\f[R] is defined in the spec as \[lq]normative
optional\[rq], which means no implementation is required to implement
this.
However, all major browsers implement it, and due to its continued
usage, it\[cq]s unlikely to be removed.
If a browser implements \f[CR]__lookupGetter__()\f[R], it also needs to
implement the \f[CR]__lookupSetter__()\f[R],
\f[CR]__defineGetter__()\f[R], and \f[CR]__defineSetter__()\f[R]
methods.
.SH EXAMPLES
.SS Using __lookupGetter__()
.IP
.EX
const obj = {
  get foo() {
    return Math.random() > 0.5 ? \[dq]foo\[dq] : \[dq]bar\[dq];
  },
};

obj.__lookupGetter__(\[dq]foo\[dq]);
// [Function: get foo]
.EE
.SS Looking up a property\[cq]s getter in the standard way
You should use the \f[CR]Object.getOwnPropertyDescriptor()\f[R] API to
look up a property\[cq]s getter.
Compared to \f[CR]__lookupGetter__()\f[R], this method allows looking up
symbol properties.
The \f[CR]Object.getOwnPropertyDescriptor()\f[R] method also works with
\f[CR]null\f[R]-prototype objects, which don\[cq]t inherit from
\f[CR]Object.prototype\f[R] and therefore don\[cq]t have the
\f[CR]__lookupGetter__()\f[R] method.
If \f[CR]__lookupGetter__()\f[R]\[cq]s behavior of walking up the
prototype chain is important, you may implement it yourself with
\f[CR]Object.getPrototypeOf()\f[R].
.IP
.EX
const obj = {
  get foo() {
    return Math.random() > 0.5 ? \[dq]foo\[dq] : \[dq]bar\[dq];
  },
};

Object.getOwnPropertyDescriptor(obj, \[dq]foo\[dq]).get;
// [Function: get foo]
.EE
.IP
.EX
const obj2 = {
  __proto__: {
    get foo() {
      return Math.random() > 0.5 ? \[dq]foo\[dq] : \[dq]bar\[dq];
    },
  },
};

function findGetter(obj, prop) {
  while (obj) {
    const desc = Object.getOwnPropertyDescriptor(obj, \[dq]foo\[dq]);
    if (desc) {
      return desc.get;
    }
    obj = Object.getPrototypeOf(obj);
  }
}

console.log(findGetter(obj2, \[dq]foo\[dq])); // [Function: get foo]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Object.prototype.__lookupGetter__\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
\f[CR]Object.prototype.__lookupSetter__()\f[R]
.IP \[bu] 2
\f[CR]get\f[R] syntax
.IP \[bu] 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R] and
\f[CR]Object.getPrototypeOf()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.__defineGetter__()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.__defineSetter__()\f[R]
.IP \[bu] 2
JS Guide: Defining Getters and Setters
