.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PushEvent" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushEvent \- PushEvent
.SH SYNOPSIS
The \f[B]\f[CB]PushEvent\f[B]\f[R] interface of the Push API represents
a push message that has been received.
This event is sent to the global scope of a \f[CR]ServiceWorker\f[R].
It contains the information sent from an application server to a
\f[CR]PushSubscription\f[R].
.SH CONSTRUCTOR
.TP
\f[B]PushEvent()\f[R]
Creates a new \f[CR]PushEvent\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]ExtendableEvent\f[I].
Additional properties:\f[R]
.TP
\f[B]PushEvent.data\f[R] \f[I](read\-only)\f[R]
Returns a reference to a \f[CR]PushMessageData\f[R] object containing
data sent to the \f[CR]PushSubscription\f[R].
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]ExtendableEvent\f[I]\f[R].
.SH EXAMPLES
The following example takes data from a \f[CR]PushEvent\f[R] and
displays it on all of the service worker\[cq]s clients.
.IP
.EX
self.addEventListener(\[dq]push\[dq], (event) => {
  if (!(self.Notification && self.Notification.permission === \[dq]granted\[dq])) {
    return;
  }

  const data = event.data?.json() ?? {};
  const title = data.title || \[dq]Something Has Happened\[dq];
  const message =
    data.message || \[dq]Here\[aq]s something you might want to check out.\[dq];
  const icon = \[dq]images/new\-notification.png\[dq];

  const notification = new self.Notification(title, {
    body: message,
    tag: \[dq]simple\-push\-demo\-notification\[dq],
    icon,
  });

  notification.addEventListener(\[dq]click\[dq], () => {
    clients.openWindow(
      \[dq]https://example.blog.com/2015/03/04/something\-new.html\[dq],
    );
  });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Push API
.IP \[bu] 2
Service Worker API
