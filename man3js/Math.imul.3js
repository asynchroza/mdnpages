.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.imul" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Math.imul()\f[B]\f[R] static method returns the result of
the C-like 32-bit multiplication of the two parameters.
.SH Syntax
.IP
.nf
\f[C]
Math.imul(a, b)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]a\f[R]
.RS 2
.IP \[bu] 2
First number.
.RE
.IP \[bu] 2
\f[V]b\f[R]
.RS 2
.IP \[bu] 2
Second number.
.RE
.SS Return value
.PP
The result of the C-like 32-bit multiplication of the given arguments.
.SH Description
.PP
\f[V]Math.imul()\f[R] allows for 32-bit integer multiplication with
C-like semantics.
This feature is useful for projects like
Emscripten (https://en.wikipedia.org/wiki/Emscripten).
.PP
Because \f[V]imul()\f[R] is a static method of \f[V]Math\f[R], you
always use it as \f[V]Math.imul()\f[R], rather than as a method of a
\f[V]Math\f[R] object you created (\f[V]Math\f[R] is not a constructor).
.PP
If you use normal JavaScript floating point numbers in \f[V]imul()\f[R],
you will experience a degrade in performance.
This is because of the costly conversion from a floating point to an
integer for multiplication, and then converting the multiplied integer
back into a floating point.
However, with asm.js, which allows JIT-optimizers to more confidently
use integers in JavaScript, multiplying two numbers stored internally as
integers (which is only possible with asm.js) with \f[V]imul()\f[R]
could be potentially more performant.
.SH Examples
.SS Using Math.imul()
.IP
.nf
\f[C]
Math.imul(2, 4); // 8
Math.imul(-1, 8); // -8
Math.imul(-2, -2); // 4
Math.imul(0xffffffff, 5); // -5
Math.imul(0xfffffffe, 5); // -10
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Math.imul\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-math)
.IP \[bu] 2
Emscripten (https://en.wikipedia.org/wiki/Emscripten)
