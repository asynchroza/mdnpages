.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Iterator" "JS" "May 1, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator - Iterator
.SH SYNOPSIS
An \f[B]\f[CB]Iterator\f[B]\f[R] object is an object that conforms to
the iterator protocol by providing a \f[CR]next()\f[R] method that
returns an iterator result object.
The \f[CR]Iterator.prototype\f[R] object is a hidden global object that
all built-in iterators inherit from.
It provides a \f[CR]\[at]\[at]iterator\f[R] method that returns the
iterator object itself, making the iterator also iterable.
.PP
Note that \f[CR]Iterator\f[R] is \f[I]not\f[R] a global object, although
it will be in the future with the iterator helpers
proposal (https://github.com/tc39/proposal-iterator-helpers).
The \f[CR]Iterator.prototype\f[R] object shared by all built-in
iterators can be obtained with the following code:
.IP
.EX
const IteratorPrototype = Object.getPrototypeOf(
  Object.getPrototypeOf([].values()),
);
.EE
.SH DESCRIPTION
The following are all built-in JavaScript iterators:
.IP \[bu] 2
The \f[I]Array Iterator\f[R] returned by
\f[CR]Array.prototype.values()\f[R], \f[CR]Array.prototype.keys()\f[R],
\f[CR]Array.prototype.entries()\f[R],
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R],
\f[CR]TypedArray.prototype.values()\f[R],
\f[CR]TypedArray.prototype.keys()\f[R],
\f[CR]TypedArray.prototype.entries()\f[R],
\f[CR]TypedArray.prototype[\[at]\[at]iterator]()\f[R], and
\f[CR]arguments[\[at]\[at]iterator]()\f[R].
.IP \[bu] 2
The \f[I]String Iterator\f[R] returned by
\f[CR]String.prototype[\[at]\[at]iterator]()\f[R].
.IP \[bu] 2
The \f[I]Map Iterator\f[R] returned by
\f[CR]Map.prototype.values()\f[R], \f[CR]Map.prototype.keys()\f[R],
\f[CR]Map.prototype.entries()\f[R], and
\f[CR]Map.prototype[\[at]\[at]iterator]()\f[R].
.IP \[bu] 2
The \f[I]Set Iterator\f[R] returned by
\f[CR]Set.prototype.values()\f[R], \f[CR]Set.prototype.keys()\f[R],
\f[CR]Set.prototype.entries()\f[R], and
\f[CR]Set.prototype[\[at]\[at]iterator]()\f[R].
.IP \[bu] 2
The \f[I]RegExp String Iterator\f[R] returned by
\f[CR]RegExp.prototype[\[at]\[at]matchAll]()\f[R] and
\f[CR]String.prototype.matchAll()\f[R].
.IP \[bu] 2
The \f[CR]Generator\f[R] object returned by generator functions.
.IP \[bu] 2
The \f[I]Segments Iterator\f[R] returned by the
\f[CR][\[at]\[at]iterator]()\f[R] method of the \f[CR]Segments\f[R]
object returned by \f[CR]Intl.Segmenter.prototype.segment()\f[R].
.PP
Each of these iterators have a distinct prototype object, which defines
the \f[CR]next()\f[R] method used by the particular iterator.
For example, all string iterator objects inherit from a hidden object
\f[CR]StringIteratorPrototype\f[R], which has a \f[CR]next()\f[R] method
that iterates this string by code points.
\f[CR]StringIteratorPrototype\f[R] also has a
\f[CR]\[at]\[at]toStringTag\f[R] property whose initial value is the
string \f[CR]\[dq]String Iterator\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
Similarly, other iterator prototypes also have their own
\f[CR]\[at]\[at]toStringTag\f[R] values, which are the same as the names
given above.
.PP
All of these prototype objects inherit from
\f[CR]Iterator.prototype\f[R], which provides a
\f[CR]\[at]\[at]iterator\f[R] method that returns the iterator object
itself, making the iterator also iterable.
.SH INSTANCE METHODS
.TP
\f[B]Iterator.prototype[\[at]\[at]iterator]()\f[R]
Returns the iterator object itself.
This allows iterator objects to also be iterable.
.SH EXAMPLES
.SS Using an iterator as an iterable
All built-in iterators are also iterable, so you can use them in a
\f[CR]for...of\f[R] loop:
.IP
.EX
const arrIterator = [1, 2, 3].values();
for (const value of arrIterator) {
  console.log(value);
}
// Logs: 1, 2, 3
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]function*\f[R]
.IP \[bu] 2
The Iterator protocol
