.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "JSON" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
JSON \- JSON
.SH SYNOPSIS
The \f[B]\f[CB]JSON\f[B]\f[R] namespace object contains static methods
for parsing values from and converting values to \c
.UR https://json.org/
JavaScript Object Notation
.UE \c
\ (JSON).
.SH DESCRIPTION
Unlike most global objects, \f[CR]JSON\f[R] is not a constructor.
You cannot use it with the \f[CR]new\f[R] operator or invoke the
\f[CR]JSON\f[R] object as a function.
All properties and methods of \f[CR]JSON\f[R] are static (just like the
\f[CR]Math\f[R] object).
.SS JavaScript and JSON differences
JSON is a syntax for serializing objects, arrays, numbers, strings,
booleans, and \f[CR]null\f[R].
It is based upon JavaScript syntax, but is distinct from JavaScript:
most of JavaScript is \f[I]not\f[R] JSON.
For example:
.TP
Objects and Arrays
Property names must be double\-quoted strings; trailing commas are
forbidden.
.TP
Numbers
Leading zeros are prohibited.
A decimal point must be followed by at least one digit.
\f[CR]NaN\f[R] and \f[CR]Infinity\f[R] are unsupported.
.PP
Any JSON text is a valid JavaScript expression, but only after the \c
.UR https://github.com/tc39/proposal-json-superset
JSON superset
.UE \c
\ revision.
Before the revision, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH
SEPARATOR are allowed in string literals and property keys in JSON; but
the same use in JavaScript string literals is a \f[CR]SyntaxError\f[R].
.PP
Other differences include allowing only double\-quoted strings and no
support for \f[CR]undefined\f[R] or comments.
For those who wish to use a more human\-friendly configuration format
based on JSON, there is \c
.UR https://json5.org/
JSON5
.UE \c
, used by the Babel compiler, and the more commonly used \c
.UR https://en.wikipedia.org/wiki/YAML
YAML
.UE \c
\&.
.PP
The same text may represent different values in JavaScript object
literals vs.\ JSON as well.
For more information, see Object literal syntax vs.\ JSON.
.SS Full JSON grammar
Valid JSON syntax is formally defined by the following grammar,
expressed in \c
.UR https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form
ABNF
.UE \c
, and copied from \c
.UR https://datatracker.ietf.org/doc/html/rfc8259
IETF JSON standard (RFC)
.UE \c
:
.IP
.EX
JSON\-text = object / array
begin\-array     = ws %x5B ws  ; [ left square bracket
begin\-object    = ws %x7B ws  ; { left curly bracket
end\-array       = ws %x5D ws  ; ] right square bracket
end\-object      = ws %x7D ws  ; } right curly bracket
name\-separator  = ws %x3A ws  ; : colon
value\-separator = ws %x2C ws  ; , comma
ws = *(
     %x20 /              ; Space
     %x09 /              ; Horizontal tab
     %x0A /              ; Line feed or New line
     %x0D                ; Carriage return
     )
value = false / null / true / object / array / number / string
false = %x66.61.6c.73.65   ; false
null  = %x6e.75.6c.6c      ; null
true  = %x74.72.75.65      ; true
object = begin\-object [ member *( value\-separator member ) ]
         end\-object
member = string name\-separator value
array = begin\-array [ value *( value\-separator value ) ] end\-array
number = [ minus ] int [ frac ] [ exp ]
decimal\-point = %x2E       ; .
digit1\-9 = %x31\-39         ; 1\-9
e = %x65 / %x45            ; e E
exp = e [ minus / plus ] 1*DIGIT
frac = decimal\-point 1*DIGIT
int = zero / ( digit1\-9 *DIGIT )
minus = %x2D               ; \-
plus = %x2B                ; +
zero = %x30                ; 0
string = quotation\-mark *char quotation\-mark
char = unescaped /
    escape (
        %x22 /          ; \[dq]    quotation mark  U+0022
        %x5C /          ; \[rs]    reverse solidus U+005C
        %x2F /          ; /    solidus         U+002F
        %x62 /          ; b    backspace       U+0008
        %x66 /          ; f    form feed       U+000C
        %x6E /          ; n    line feed       U+000A
        %x72 /          ; r    carriage return U+000D
        %x74 /          ; t    tab             U+0009
        %x75 4HEXDIG )  ; uXXXX                U+XXXX
escape = %x5C              ; \[rs]
quotation\-mark = %x22      ; \[dq]
unescaped = %x20\-21 / %x23\-5B / %x5D\-10FFFF
HEXDIG = DIGIT / %x41\-46 / %x61\-66   ; 0\-9, A\-F, or a\-f
       ; HEXDIG equivalent to HEXDIG rule in [RFC5234]
DIGIT = %x30\-39            ; 0\-9
      ; DIGIT equivalent to DIGIT rule in [RFC5234]
.EE
.PP
Insignificant whitespace may be present anywhere except within a
\f[CR]JSONNumber\f[R] (numbers must contain no whitespace) or
\f[CR]JSONString\f[R] (where it is interpreted as the corresponding
character in the string, or would cause an error).
The tab character (\c
.UR https://unicode-table.com/en/0009/
U+0009
.UE \c
), carriage return (\c
.UR https://unicode-table.com/en/000D/
U+000D
.UE \c
), line feed (\c
.UR https://unicode-table.com/en/000A/
U+000A
.UE \c
), and space (\c
.UR https://unicode-table.com/en/0020/
U+0020
.UE \c
) characters are the only valid whitespace characters.
.SH STATIC PROPERTIES
.TP
\f[B]JSON[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[CR]\[at]\[at]toStringTag\f[R] property is
the string \f[CR]\[dq]JSON\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH STATIC METHODS
.TP
\f[B]JSON.parse()\f[R]
Parse a piece of string text as JSON, optionally transforming the
produced value and its properties, and return the value.
.TP
\f[B]JSON.stringify()\f[R]
Return a JSON string corresponding to the specified value, optionally
including only certain properties or replacing property values in a
user\-defined manner.
.SH EXAMPLES
.SS Example JSON
.IP
.EX
{
  \[dq]browsers\[dq]: {
    \[dq]firefox\[dq]: {
      \[dq]name\[dq]: \[dq]Firefox\[dq],
      \[dq]pref_url\[dq]: \[dq]about:config\[dq],
      \[dq]releases\[dq]: {
        \[dq]1\[dq]: {
          \[dq]release_date\[dq]: \[dq]2004\-11\-09\[dq],
          \[dq]status\[dq]: \[dq]retired\[dq],
          \[dq]engine\[dq]: \[dq]Gecko\[dq],
          \[dq]engine_version\[dq]: \[dq]1.7\[dq]
        }
      }
    }
  }
}
.EE
.PP
You can use the \f[CR]JSON.parse()\f[R] method to convert the above JSON
string into a JavaScript object:
.IP
.EX
const jsonText = \[ga]{
  \[dq]browsers\[dq]: {
    \[dq]firefox\[dq]: {
      \[dq]name\[dq]: \[dq]Firefox\[dq],
      \[dq]pref_url\[dq]: \[dq]about:config\[dq],
      \[dq]releases\[dq]: {
        \[dq]1\[dq]: {
          \[dq]release_date\[dq]: \[dq]2004\-11\-09\[dq],
          \[dq]status\[dq]: \[dq]retired\[dq],
          \[dq]engine\[dq]: \[dq]Gecko\[dq],
          \[dq]engine_version\[dq]: \[dq]1.7\[dq]
        }
      }
    }
  }
}\[ga];

console.log(JSON.parse(jsonText));
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date.prototype.toJSON()\f[R]
.IP \[bu] 2
\c
.UR https://json-diff.com/
JSON Diff
.UE \c
.IP \[bu] 2
\c
.UR https://jsonbeautifier.org/
JSON Beautifier/editor
.UE \c
.IP \[bu] 2
\c
.UR https://jsonparser.org/
JSON Parser
.UE \c
.IP \[bu] 2
\c
.UR https://tools.learningcontainer.com/json-validator/
JSON Validator
.UE \c
