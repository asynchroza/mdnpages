.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "JSON" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]JSON\f[B]\f[R] namespace object contains static methods
for parsing values from and converting values to JavaScript Object
Notation (https://json.org/) (JSON).
.SH Description
.PP
Unlike most global objects, \f[V]JSON\f[R] is not a constructor.
You cannot use it with the \f[V]new\f[R] operator or invoke the
\f[V]JSON\f[R] object as a function.
All properties and methods of \f[V]JSON\f[R] are static (just like the
\f[V]Math\f[R] object).
.SS JavaScript and JSON differences
.PP
JSON is a syntax for serializing objects, arrays, numbers, strings,
booleans, and \f[V]null\f[R].
It is based upon JavaScript syntax, but is distinct from JavaScript:
most of JavaScript is \f[I]not\f[R] JSON.
For example:
.IP \[bu] 2
Objects and Arrays
.RS 2
.IP \[bu] 2
Property names must be double-quoted strings; trailing commas are
forbidden.
.RE
.IP \[bu] 2
Numbers
.RS 2
.IP \[bu] 2
Leading zeros are prohibited.
A decimal point must be followed by at least one digit.
\f[V]NaN\f[R] and \f[V]Infinity\f[R] are unsupported.
.RE
.PP
Any JSON text is a valid JavaScript expression, but only after the JSON
superset (https://github.com/tc39/proposal-json-superset) revision.
Before the revision, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH
SEPARATOR are allowed in string literals and property keys in JSON; but
the same use in JavaScript string literals is a \f[V]SyntaxError\f[R].
.PP
Other differences include allowing only double-quoted strings and no
support for \f[V]undefined\f[R] or comments.
For those who wish to use a more human-friendly configuration format
based on JSON, there is JSON5 (https://json5.org/), used by the Babel
compiler, and the more commonly used
YAML (https://en.wikipedia.org/wiki/YAML).
.PP
The same text may represent different values in JavaScript object
literals vs.\ JSON as well.
For more information, see Object literal syntax vs.\ JSON.
.SS Full JSON grammar
.PP
Valid JSON syntax is formally defined by the following grammar,
expressed in
ABNF (https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form),
and copied from IETF JSON standard
(RFC) (https://datatracker.ietf.org/doc/html/rfc8259):
.IP
.nf
\f[C]
JSON-text = object / array
begin-array     = ws %x5B ws  ; [ left square bracket
begin-object    = ws %x7B ws  ; { left curly bracket
end-array       = ws %x5D ws  ; ] right square bracket
end-object      = ws %x7D ws  ; } right curly bracket
name-separator  = ws %x3A ws  ; : colon
value-separator = ws %x2C ws  ; , comma
ws = *(
     %x20 /              ; Space
     %x09 /              ; Horizontal tab
     %x0A /              ; Line feed or New line
     %x0D                ; Carriage return
     )
value = false / null / true / object / array / number / string
false = %x66.61.6c.73.65   ; false
null  = %x6e.75.6c.6c      ; null
true  = %x74.72.75.65      ; true
object = begin-object [ member *( value-separator member ) ]
         end-object
member = string name-separator value
array = begin-array [ value *( value-separator value ) ] end-array
number = [ minus ] int [ frac ] [ exp ]
decimal-point = %x2E       ; .
digit1-9 = %x31-39         ; 1-9
e = %x65 / %x45            ; e E
exp = e [ minus / plus ] 1*DIGIT
frac = decimal-point 1*DIGIT
int = zero / ( digit1-9 *DIGIT )
minus = %x2D               ; -
plus = %x2B                ; +
zero = %x30                ; 0
string = quotation-mark *char quotation-mark
char = unescaped /
    escape (
        %x22 /          ; \[dq]    quotation mark  U+0022
        %x5C /          ; \[rs]    reverse solidus U+005C
        %x2F /          ; /    solidus         U+002F
        %x62 /          ; b    backspace       U+0008
        %x66 /          ; f    form feed       U+000C
        %x6E /          ; n    line feed       U+000A
        %x72 /          ; r    carriage return U+000D
        %x74 /          ; t    tab             U+0009
        %x75 4HEXDIG )  ; uXXXX                U+XXXX
escape = %x5C              ; \[rs]
quotation-mark = %x22      ; \[dq]
unescaped = %x20-21 / %x23-5B / %x5D-10FFFF
HEXDIG = DIGIT / %x41-46 / %x61-66   ; 0-9, A-F, or a-f
       ; HEXDIG equivalent to HEXDIG rule in [RFC5234]
DIGIT = %x30-39            ; 0-9
      ; DIGIT equivalent to DIGIT rule in [RFC5234]
\f[R]
.fi
.PP
Insignificant whitespace may be present anywhere except within a
\f[V]JSONNumber\f[R] (numbers must contain no whitespace) or
\f[V]JSONString\f[R] (where it is interpreted as the corresponding
character in the string, or would cause an error).
The tab character (U+0009 (https://unicode-table.com/en/0009/)),
carriage return (U+000D (https://unicode-table.com/en/000D/)), line feed
(U+000A (https://unicode-table.com/en/000A/)), and space
(U+0020 (https://unicode-table.com/en/0020/)) characters are the only
valid whitespace characters.
.SH Static properties
.IP \[bu] 2
\f[V]JSON[\[at]\[at]toStringTag]\f[R]
.RS 2
.IP \[bu] 2
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]JSON\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.RE
.SH Static methods
.IP \[bu] 2
\f[V]JSON.parse()\f[R]
.RS 2
.IP \[bu] 2
Parse a piece of string text as JSON, optionally transforming the
produced value and its properties, and return the value.
.RE
.IP \[bu] 2
\f[V]JSON.stringify()\f[R]
.RS 2
.IP \[bu] 2
Return a JSON string corresponding to the specified value, optionally
including only certain properties or replacing property values in a
user-defined manner.
.RE
.SH Examples
.SS Example JSON
.IP
.nf
\f[C]
{
  \[dq]browsers\[dq]: {
    \[dq]firefox\[dq]: {
      \[dq]name\[dq]: \[dq]Firefox\[dq],
      \[dq]pref_url\[dq]: \[dq]about:config\[dq],
      \[dq]releases\[dq]: {
        \[dq]1\[dq]: {
          \[dq]release_date\[dq]: \[dq]2004-11-09\[dq],
          \[dq]status\[dq]: \[dq]retired\[dq],
          \[dq]engine\[dq]: \[dq]Gecko\[dq],
          \[dq]engine_version\[dq]: \[dq]1.7\[dq]
        }
      }
    }
  }
}
\f[R]
.fi
.PP
You can use the \f[V]JSON.parse()\f[R] method to convert the above JSON
string into a JavaScript object:
.IP
.nf
\f[C]
const jsonText = \[ga]{
  \[dq]browsers\[dq]: {
    \[dq]firefox\[dq]: {
      \[dq]name\[dq]: \[dq]Firefox\[dq],
      \[dq]pref_url\[dq]: \[dq]about:config\[dq],
      \[dq]releases\[dq]: {
        \[dq]1\[dq]: {
          \[dq]release_date\[dq]: \[dq]2004-11-09\[dq],
          \[dq]status\[dq]: \[dq]retired\[dq],
          \[dq]engine\[dq]: \[dq]Gecko\[dq],
          \[dq]engine_version\[dq]: \[dq]1.7\[dq]
        }
      }
    }
  }
}\[ga];

console.log(JSON.parse(jsonText));
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Date.prototype.toJSON()\f[R]
.IP \[bu] 2
JSON Diff (https://json-diff.com/) checker
.IP \[bu] 2
JSON Beautifier/editor (https://jsonbeautifier.org/)
.IP \[bu] 2
JSON Parser (https://jsonparser.org/)
.IP \[bu] 2
JSON Validator (https://tools.learningcontainer.com/json-validator/)
