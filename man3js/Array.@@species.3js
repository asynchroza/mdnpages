.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.\[at]\[at]species" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.\[at]\[at]species - Array[\[at]\[at]species]
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Array[\[at]\[at]species]\f[B]\f[R] static accessor
property returns the constructor used to construct return values from
array methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[V]\[at]\[at]species\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are investigating whether to remove this
feature (https://github.com/tc39/proposal-rm-builtin-subclassing).
Avoid relying on it if possible.
Modern array methods, such as \f[V]toReversed()\f[R], do not use
\f[V]\[at]\[at]species\f[R] and always return a new \f[V]Array\f[R] base
class instance.
.RE
.SH SYNTAX
.IP
.nf
\f[C]
Array[Symbol.species]
\f[R]
.fi
.SS Return value
.PP
The value of the constructor (\f[V]this\f[R]) on which
\f[V]get \[at]\[at]species\f[R] was called.
The return value is used to construct return values from array methods
that create new arrays.
.SH DESCRIPTION
.PP
The \f[V]\[at]\[at]species\f[R] accessor property returns the default
constructor for \f[V]Array\f[R] objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.nf
\f[C]
// Hypothetical underlying implementation for illustration
class Array {
  static get [Symbol.species]() {
    return this;
  }
}
\f[R]
.fi
.PP
Because of this polymorphic implementation, \f[V]\[at]\[at]species\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.nf
\f[C]
class SubArray extends Array {}
SubArray[Symbol.species] === SubArray; // true
\f[R]
.fi
.PP
When calling array methods that do not mutate the existing array but
return a new array instance (for example, \f[V]filter()\f[R] and
\f[V]map()\f[R]), the array\[cq]s
\f[V]constructor[\[at]\[at]species]\f[R] will be accessed.
The returned constructor will be used to construct the return value of
the array method.
This makes it technically possible to make array methods return objects
unrelated to arrays.
.IP
.nf
\f[C]
class NotAnArray {
  constructor(length) {
    this.length = length;
  }
}

const arr = [0, 1, 2];
arr.constructor = { [Symbol.species]: NotAnArray };
arr.map((i) => i); // NotAnArray { \[aq]0\[aq]: 0, \[aq]1\[aq]: 1, \[aq]2\[aq]: 2, length: 3 }
arr.filter((i) => i); // NotAnArray { \[aq]0\[aq]: 1, \[aq]1\[aq]: 2, length: 0 }
arr.concat([1, 2]); // NotAnArray { \[aq]0\[aq]: 0, \[aq]1\[aq]: 1, \[aq]2\[aq]: 2, \[aq]3\[aq]: 1, \[aq]4\[aq]: 2, length: 5 }
\f[R]
.fi
.SH EXAMPLES
.SS Species in ordinary objects
.PP
The \f[V]\[at]\[at]species\f[R] property returns the default constructor
function, which is the \f[V]Array\f[R] constructor for \f[V]Array\f[R].
.IP
.nf
\f[C]
Array[Symbol.species]; // [Function: Array]
\f[R]
.fi
.SS Species in derived objects
.PP
In an instance of a custom \f[V]Array\f[R] subclass, such as
\f[V]MyArray\f[R], the \f[V]MyArray\f[R] species is the
\f[V]MyArray\f[R] constructor.
However, you might want to overwrite this, in order to return parent
\f[V]Array\f[R] objects in your derived class methods:
.IP
.nf
\f[C]
class MyArray extends Array {
  // Overwrite MyArray species to the parent Array constructor
  static get [Symbol.species]() {
    return Array;
  }
}
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array[\[at]\[at]species]\f[R] and support of
\f[V]\[at]\[at]species\f[R] in all affected \f[V]Array\f[R] methods in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Symbol.species\f[R]
