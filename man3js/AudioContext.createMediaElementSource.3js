.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AudioContext.createMediaElementSource" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioContext.createMediaElementSource \- AudioContext:
createMediaElementSource() method
.SH SYNOPSIS
The \f[CR]createMediaElementSource()\f[R] method of the
\f[CR]AudioContext\f[R] Interface is used to create a new
\f[CR]MediaElementAudioSourceNode\f[R] object, given an existing HTML
\f[CR]<audio>\f[R] or \f[CR]<video>\f[R] element, the audio from which
can then be played and manipulated.
.PP
For more details about media element audio source nodes, check out the
\f[CR]MediaElementAudioSourceNode\f[R] reference page.
.SH SYNTAX
.IP
.EX
createMediaElementSource(myMediaElement)
.EE
.SS Parameters
.TP
\f[B]myMediaElement\f[R]
An \f[CR]HTMLMediaElement\f[R] object that you want to feed into an
audio processing graph to manipulate.
.SS Return value
A \f[CR]MediaElementAudioSourceNode\f[R].
.SH EXAMPLES
This simple example creates a source from an \f[CR]<audio>\f[R] element
using \f[CR]createMediaElementSource()\f[R], then passes the audio
through a \f[CR]GainNode\f[R] before feeding it into the
\f[CR]AudioDestinationNode\f[R] for playback.
When the mouse pointer is moved, the \f[CR]updatePage()\f[R] function is
invoked, which calculates the current gain as a ratio of mouse Y
position divided by overall window height.
You can therefore increase and decrease the volume of the playing music
by moving the mouse pointer up and down.
.RS
.PP
\f[B]Note:\f[R] You can also \c
.UR https://mdn.github.io/webaudio-examples/media-source-buffer/
view this example running live
.UE \c
, or \c
.UR
https://github.com/mdn/webaudio-examples/tree/main/media-source-buffer
view the source
.UE \c
\&.
.RE
.IP
.EX
const audioCtx = new AudioContext();
const myAudio = document.querySelector(\[dq]audio\[dq]);

// Create a MediaElementAudioSourceNode
// Feed the HTMLMediaElement into it
const source = audioCtx.createMediaElementSource(myAudio);

// Create a gain node
const gainNode = audioCtx.createGain();

// Create variables to store mouse pointer Y coordinate
// and HEIGHT of screen
let curY;
const HEIGHT = window.innerHeight;

// Get new mouse pointer coordinates when mouse is moved
// then set new gain value
document.onmousemove = updatePage;

function updatePage(e) {
  curY = e.pageY;
  gainNode.gain.value = curY / HEIGHT;
}

// Connect the AudioBufferSourceNode to the gainNode
// and the gainNode to the destination, so we can play the
// music and adjust the volume using the mouse cursor
source.connect(gainNode);
gainNode.connect(audioCtx.destination);
.EE
.RS
.PP
\f[B]Note:\f[R] As a consequence of calling
\f[CR]createMediaElementSource()\f[R], audio playback from the
\f[CR]HTMLMediaElement\f[R] will be re\-routed into the processing graph
of the AudioContext.
So playing/pausing the media can still be done through the media element
API and the player controls.
.RE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
