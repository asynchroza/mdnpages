.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "TrustedTypePolicy" "JS" "March 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TrustedTypePolicy \- TrustedTypePolicy
.SH SYNOPSIS
The \f[B]\f[CB]TrustedTypePolicy\f[B]\f[R] interface of the
\f[CR]Trusted Types API\f[R] defines a group of functions which create
\f[CR]TrustedType\f[R] objects.
.PP
A \f[CR]TrustedTypePolicy\f[R] object is created by
\f[CR]TrustedTypePolicyFactory.createPolicy()\f[R] to define a policy
for enforcing security rules on input.
Therefore, \f[CR]TrustedTypePolicy\f[R] has no constructor.
.SH INSTANCE PROPERTIES
.TP
\f[B]TrustedTypePolicy.name\f[R] \f[I](read\-only)\f[R]
A string containing the name of the policy.
.SH INSTANCE METHODS
.TP
\f[B]TrustedTypePolicy.createHTML()\f[R]
Creates a \f[CR]TrustedHTML\f[R] object.
.TP
\f[B]TrustedTypePolicy.createScript()\f[R]
Creates a \f[CR]TrustedScript\f[R] object.
.TP
\f[B]TrustedTypePolicy.createScriptURL()\f[R]
Creates a \f[CR]TrustedScriptURL\f[R] object.
.SH EXAMPLES
In the below example we create a policy that will create
\f[CR]TrustedHTML\f[R] objects using
\f[CR]TrustedTypePolicyFactory.createPolicy()\f[R].
We can then use \f[CR]TrustedTypePolicy.createHTML\f[R] to create a
sanitized HTML string to be inserted into the document.
.PP
The sanitized value can then be used with \f[CR]Element.innerHTML\f[R]
to ensure that no new HTML elements can be injected.
.IP
.EX
<div id=\[dq]myDiv\[dq]></div>
.EE
.IP
.EX
const escapeHTMLPolicy = trustedTypes.createPolicy(\[dq]myEscapePolicy\[dq], {
  createHTML: (string) => string.replace(/>/g, \[dq]<\[dq]),
});

let el = document.getElementById(\[dq]myDiv\[dq]);
const escaped = escapeHTMLPolicy.createHTML(\[dq]<img src=x onerror=alert(1)>\[dq]);
console.log(escaped instanceof TrustedHTML); // true
el.innerHTML = escaped;
.EE
