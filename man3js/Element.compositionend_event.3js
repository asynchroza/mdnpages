.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.compositionend_event" "JS" "December 22, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.compositionend_event \- Element: compositionend event
.SH SYNOPSIS
The \f[B]\f[CB]compositionend\f[B]\f[R] event is fired when a text
composition system such as an input method editor completes or cancels
the current composition session.
.PP
For example, this event could be fired after a user finishes entering a
Chinese character using a \c
.UR https://en.wikipedia.org/wiki/Pinyin
Pinyin
.UE \c
\ IME.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]compositionend\[dq], (event) => {});

oncompositionend = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]CompositionEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parent,
\f[CI]UIEvent\f[I], and its ancestor \[em] \f[CI]Event\f[I].\f[R]
.TP
\f[B]CompositionEvent.data\f[R] \f[I](read\-only)\f[R]
Returns the characters generated by the input method that raised the
event; its varies depending on the type of event that generated the
\f[CR]CompositionEvent\f[R] object.
.TP
\f[B]CompositionEvent.locale\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R]
Returns the locale of current input method (for example, the keyboard
layout locale if the composition is associated with IME).
.SH EXAMPLES
.IP
.EX
const inputElement = document.querySelector(\[aq]input[type=\[dq]text\[dq]]\[aq]);

inputElement.addEventListener(\[dq]compositionend\[dq], (event) => {
  console.log(\[ga]generated characters were: ${event.data}\[ga]);
});
.EE
.SS Live example
.SS HTML
.IP
.EX
<div class=\[dq]control\[dq]>
  <label for=\[dq]example\[dq]>
    First select textbox, then to open IME:
    <ul>
      <li>on macOS type <kbd>option</kbd> + <kbd>\[ga]</kbd></li>
      <li>on Windows type <kbd>windows</kbd> + <kbd>.</kbd></li>
    </ul>
  </label>
  <input type=\[dq]text\[dq] id=\[dq]example\[dq] name=\[dq]example\[dq] />
</div>

<div class=\[dq]event\-log\[dq]>
  <label for=\[dq]eventLog\[dq]>Event log:</label>
  <textarea
    readonly
    class=\[dq]event\-log\-contents\[dq]
    rows=\[dq]8\[dq]
    cols=\[dq]25\[dq]
    id=\[dq]eventLog\[dq]></textarea>
  <button class=\[dq]clear\-log\[dq]>Clear</button>
</div>
.EE
.PP
\[ga]\[ga]\[ga]css hidden body { padding: 0.2rem; display: grid;
grid\-template\-areas: \[lq]control log\[rq]; }
.PP
\&.control { grid\-area: control; }
.PP
\&.event\-log { grid\-area: log; }
.PP
\&.event\-log\-contents { resize: none; }
.PP
label, button { display: block; }
.PP
input[type=\[lq]text\[rq]] { margin: 0.5rem 0; }
.PP
kbd { border\-radius: 3px; padding: 1px 2px 0; border: 1px solid black;
}
.IP
.EX

### JavaScript

\[ga]\[ga]\[ga]js
const inputElement = document.querySelector(\[aq]input[type=\[dq]text\[dq]]\[aq]);
const log = document.querySelector(\[dq].event\-log\-contents\[dq]);
const clearLog = document.querySelector(\[dq].clear\-log\[dq]);

clearLog.addEventListener(\[dq]click\[dq], () => {
  log.textContent = \[dq]\[dq];
});

function handleEvent(event) {
  log.textContent += \[ga]${event.type}: ${event.data}\[rs]n\[ga];
}

inputElement.addEventListener(\[dq]compositionstart\[dq], handleEvent);
inputElement.addEventListener(\[dq]compositionupdate\[dq], handleEvent);
inputElement.addEventListener(\[dq]compositionend\[dq], handleEvent);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]compositionstart\f[R],
\f[CR]compositionupdate\f[R].
