'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.asyncIterator" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Symbol.asyncIterator - Symbol.asyncIterator
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Symbol.asyncIterator\f[B]\f[R] static data property
represents the well-known symbol \f[V]\[at]\[at]asyncIterator\f[R].
The async iterable protocol looks up this symbol for the method that
returns the async iterator for an object.
In order for an object to be async iterable, it must have an
\f[V]\[at]\[at]asyncIterator\f[R] key.
.SH VALUE
.PP
The well-known symbol \f[V]\[at]\[at]asyncIterator\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH EXAMPLES
.SS User-defined async iterables
.PP
You can define your own async iterable by setting the
\f[V][Symbol.asyncIterator]\f[R] property on an object.
.IP
.nf
\f[C]
const myAsyncIterable = {
  async *[Symbol.asyncIterator]() {
    yield \[dq]hello\[dq];
    yield \[dq]async\[dq];
    yield \[dq]iteration!\[dq];
  },
};

(async () => {
  for await (const x of myAsyncIterable) {
    console.log(x);
  }
})();
// Logs:
// \[dq]hello\[dq]
// \[dq]async\[dq]
// \[dq]iteration!\[dq]
\f[R]
.fi
.PP
When creating an API, remember that async iterables are designed to
represent something \f[I]iterable\f[R] \[em] like a stream of data or a
list \[em], not to completely replace callbacks and events in most
situations.
.SS Built-in async iterables
.PP
\f[V]ReadableStream\f[R] is the only built-in JavaScript object that has
the \f[V]Symbol.asyncIterator\f[R] method set by default at the time of
writing.
.SH SEE ALSO
.IP \[bu] 2
Iteration protocols
.IP \[bu] 2
for await\&...of
