.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CSSMathSum" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSMathSum \- CSSMathSum
.SH SYNOPSIS
The \f[B]\f[CB]CSSMathSum\f[B]\f[R] interface of the
CSS_Object_Model#css_typed_object_model represents the result obtained
by calling \f[CR]add()\f[R], \f[CR]sub()\f[R], or \f[CR]toSum()\f[R] on
\f[CR]CSSNumericValue\f[R].
.PP
A CSSMathSum is the object type returned when the
\f[CR]StylePropertyMapReadOnly.get()\f[R] method is used on a CSS
property whose value is created with a \f[CR]calc()\f[R] function.
.SH CONSTRUCTOR
.TP
\f[B]CSSMathSum()\f[R] \f[I](experimental)\f[R]
Creates a new \f[CR]CSSMathSum\f[R] object.
.SH INSTANCE PROPERTIES
.TP
\f[B]CSSMathSum.values\f[R]
Returns a \f[CR]CSSNumericArray\f[R] object which contains one or more
\f[CR]CSSNumericValue\f[R] objects.
.SH STATIC METHODS
\f[I]The interface may also inherit methods from its parent interface,
\f[CI]CSSMathValue\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]The interface may also inherit methods from its parent interface,
\f[CI]CSSMathValue\f[I].\f[R]
.SH EVENT HANDLERS
No
.SH EXAMPLES
We create an element with a \f[CR]width\f[R] determined using a
\f[CR]calc()\f[R] function, then \f[CR]console.log()\f[R] the
\f[CR]operator\f[R] and \f[CR]values\f[R], and dig into the values a
bit.
.IP
.EX
<div>has width</div>
.EE
.PP
We assign a \f[CR]width\f[R]
.IP
.EX
div {
  width: calc(30% \- 20px);
}
.EE
.PP
We add the JavaScript
.IP
.EX
const styleMap = document.querySelector(\[dq]div\[dq]).computedStyleMap();

console.log(styleMap.get(\[dq]width\[dq])); // CSSMathSum {values: CSSNumericArray, operator: \[dq]sum\[dq]}
console.log(styleMap.get(\[dq]width\[dq]).operator); // \[aq]sum\[aq]
console.log(styleMap.get(\[dq]width\[dq]).values); // CSSNumericArray {0: CSSUnitValue, 1: CSSUnitValue, length: 2}
console.log(styleMap.get(\[dq]width\[dq]).values[0]); // CSSUnitValue {value: 30, unit: \[dq]percent\[dq]}
console.log(styleMap.get(\[dq]width\[dq]).values[0].value); // 30
console.log(styleMap.get(\[dq]width\[dq]).values[0].unit); // \[aq]percent\[aq]
console.log(styleMap.get(\[dq]width\[dq]).values[1]); // CSSUnitValue {value: \-20, unit: \[dq]px\[dq]}
console.log(styleMap.get(\[dq]width\[dq]).values[1].value); //  \-20
console.log(styleMap.get(\[dq]width\[dq]).values[1].unit); // \[aq]px\[aq]
.EE
.PP
The specification is still evolving.
In the future we may write the last three lines as:
.IP
.EX
console.log(styleMap.get(\[dq]width\[dq]).values[1]); // CSSMathNegate {value: CSSUnitValue, operator: \[dq]negate\[dq]}
console.log(styleMap.get(\[dq]width\[dq]).values[1].value); // CSSUnitValue {value: 20, unit: \[dq]px\[dq]}
console.log(styleMap.get(\[dq]width\[dq]).values[1].value.unit); // \[aq]px\[aq]
.EE
