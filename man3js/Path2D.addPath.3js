.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Path2D.addPath" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Path2D.addPath \- Path2D: addPath() method
.SH SYNOPSIS
The \f[B]\f[CB]Path2D.addPath()\f[B]\f[R] method of the Canvas 2D API
adds one \f[CR]Path2D\f[R] object to another \f[CR]Path2D\f[R] object.
.SH SYNTAX
.IP
.EX
addPath(path)
addPath(path, transform)
.EE
.SS Parameters
.TP
\f[B]path\f[R]
A \f[CR]Path2D\f[R] path to add.
.TP
\f[B]transform\f[R] \f[I](optional)\f[R]
A \f[CR]DOMMatrix\f[R] to be used as the transformation matrix for the
path that is added.
(Technically a \f[CR]DOMMatrixInit\f[R] object).
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Adding a path to an existing path
This example adds one path to another.
.SS HTML
.IP
.EX
<canvas id=\[dq]canvas\[dq]></canvas>
.EE
.SS JavaScript
First, we create two separate \f[CR]Path2D\f[R] objects, each of which
contains a rectangle made using the \f[CR]rect()\f[R] method.
We then create a matrix using \f[CR]DOMMatrix()\f[R].
We then add the second path to the first using \f[CR]addPath()\f[R],
also applying the matrix to move the second path to the right.
Finally, we draw the first path (which now contains both rectangles)
using \f[CR]fill()\f[R].
.IP
.EX
const canvas = document.getElementById(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

// Create first path and add a rectangle
let p1 = new Path2D();
p1.rect(0, 0, 100, 150);

// Create second path and add a rectangle
let p2 = new Path2D();
p2.rect(0, 0, 100, 75);

// Create transformation matrix that moves 200 points to the right
let m = new DOMMatrix();
m.a = 1;
m.b = 0;
m.c = 0;
m.d = 1;
m.e = 200;
m.f = 0;

// Add second path to the first path
p1.addPath(p2, m);

// Draw the first path
ctx.fill(p1);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]Path2D\f[R]
