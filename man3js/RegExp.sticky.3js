.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.sticky" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]sticky\f[B]\f[R] accessor property of \f[V]RegExp\f[R]
instances returns whether or not the \f[V]y\f[R] flag is used with this
regular expression.
.SH Description
.PP
\f[V]RegExp.prototype.sticky\f[R] has the value \f[V]true\f[R] if the
\f[V]y\f[R] flag was used; otherwise, \f[V]false\f[R].
The \f[V]y\f[R] flag indicates that the regex attempts to match the
target string only from the index indicated by the \f[V]lastIndex\f[R]
property (and unlike a global regex, does not attempt to match from any
later indexes).
.PP
The set accessor of \f[V]sticky\f[R] is \f[V]undefined\f[R].
You cannot change this property directly.
.PP
For both sticky regexes and global regexes:
.IP \[bu] 2
They start matching at \f[V]lastIndex\f[R].
.IP \[bu] 2
When the match succeeds, \f[V]lastIndex\f[R] is advanced to the end of
the match.
.IP \[bu] 2
When \f[V]lastIndex\f[R] is out of bounds of the currently matched
string, \f[V]lastIndex\f[R] is reset to 0.
.PP
However, for the \f[V]exec()\f[R] method, the behavior when matching
fails is different:
.IP \[bu] 2
When the \f[V]exec()\f[R] method is called on a sticky regex, if the
regex fails to match at \f[V]lastIndex\f[R], the regex immediately
returns \f[V]null\f[R] and resets \f[V]lastIndex\f[R] to 0.
.IP \[bu] 2
When the \f[V]exec()\f[R] method is called on a global regex, if the
regex fails to match at \f[V]lastIndex\f[R], it tries to match from the
next character, and so on until a match is found or the end of the
string is reached.
.PP
For the \f[V]exec()\f[R] method, a regex that\[cq]s both sticky and
global behaves the same as a sticky and non-global regex.
Because \f[V]test()\f[R] is a simple wrapper around \f[V]exec()\f[R],
\f[V]test()\f[R] would ignore the global flag and perform sticky matches
as well.
However, due to many other methods special-casing the behavior of global
regexes, the global flag is, in general, orthogonal to the sticky flag.
.IP \[bu] 2
\f[V]String.prototype.matchAll()\f[R] (which calls
\f[V]RegExp.prototype[\[at]\[at]matchAll]()\f[R]): \f[V]y\f[R],
\f[V]g\f[R] and \f[V]gy\f[R] are all different.
.RS 2
.IP \[bu] 2
For \f[V]y\f[R] regexes: \f[V]matchAll()\f[R] throws;
\f[V][\[at]\[at]matchAll]()\f[R] yields the \f[V]exec()\f[R] result
exactly once, without updating the regex\[cq]s \f[V]lastIndex\f[R].
.IP \[bu] 2
For \f[V]g\f[R] or \f[V]gy\f[R] regexes: returns an iterator that yields
a sequence of \f[V]exec()\f[R] results.
.RE
.IP \[bu] 2
\f[V]String.prototype.match()\f[R] (which calls
\f[V]RegExp.prototype[\[at]\[at]match]()\f[R]): \f[V]y\f[R], \f[V]g\f[R]
and \f[V]gy\f[R] are all different.
.RS 2
.IP \[bu] 2
For \f[V]y\f[R] regexes: returns the \f[V]exec()\f[R] result and updates
the regex\[cq]s \f[V]lastIndex\f[R].
.IP \[bu] 2
For \f[V]g\f[R] or \f[V]gy\f[R] regexes: returns an array of all
\f[V]exec()\f[R] results.
.RE
.IP \[bu] 2
\f[V]String.prototype.search()\f[R] (which calls
\f[V]RegExp.prototype[\[at]\[at]search]()\f[R]): the \f[V]g\f[R] flag is
always irrelevant.
.RS 2
.IP \[bu] 2
For \f[V]y\f[R] or \f[V]gy\f[R] regexes: always returns \f[V]0\f[R] (if
the very beginning of the string matches) or \f[V]-1\f[R] (if the
beginning doesn\[cq]t match), without updating the regex\[cq]s
\f[V]lastIndex\f[R] when it exits.
.IP \[bu] 2
For \f[V]g\f[R] regexes: returns the index of the first match in the
string, or \f[V]-1\f[R] if no match is found.
.RE
.IP \[bu] 2
\f[V]String.prototype.split()\f[R] (which calls
\f[V]RegExp.prototype[\[at]\[at]split]()\f[R]): \f[V]y\f[R],
\f[V]g\f[R], and \f[V]gy\f[R] all have the same behavior.
.IP \[bu] 2
\f[V]String.prototype.replace()\f[R] (which calls
\f[V]RegExp.prototype[\[at]\[at]replace]()\f[R]): \f[V]y\f[R],
\f[V]g\f[R] and \f[V]gy\f[R] are all different.
.RS 2
.IP \[bu] 2
For \f[V]y\f[R] regexes: replaces once at the current
\f[V]lastIndex\f[R] and updates \f[V]lastIndex\f[R].
.IP \[bu] 2
For \f[V]g\f[R] and \f[V]gy\f[R] regexes: replaces all occurrences
matched by \f[V]exec()\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.replaceAll()\f[R] (which calls
\f[V]RegExp.prototype[\[at]\[at]replace]()\f[R]): \f[V]y\f[R],
\f[V]g\f[R] and \f[V]gy\f[R] are all different.
.RS 2
.IP \[bu] 2
For \f[V]y\f[R] regexes: \f[V]replaceAll()\f[R] throws.
.IP \[bu] 2
For \f[V]g\f[R] and \f[V]gy\f[R] regexes: replaces all occurrences
matched by \f[V]exec()\f[R].
.RE
.SH Examples
.SS Using a regular expression with the sticky flag
.IP
.nf
\f[C]
const str = \[dq]#foo#\[dq];
const regex = /foo/y;

regex.lastIndex = 1;
regex.test(str); // true
regex.lastIndex = 5;
regex.test(str); // false (lastIndex is taken into account with sticky flag)
regex.lastIndex; // 0 (reset after match failure)
\f[R]
.fi
.SS Anchored sticky flag
.PP
For several versions, Firefox\[cq]s SpiderMonkey engine had a
bug (https://bugzil.la/773687) with regard to the \f[V]\[ha]\f[R]
assertion and the sticky flag which allowed expressions starting with
the \f[V]\[ha]\f[R] assertion and using the sticky flag to match when
they shouldn\[cq]t.
The bug was introduced some time after Firefox 3.6 (which had the sticky
flag but not the bug) and fixed in 2015.
Perhaps because of the bug, the specification specifically calls
out (https://tc39.es/ecma262/#sec-compileassertion) the fact that:
.RS
.PP
Even when the \f[V]y\f[R] flag is used with a pattern, \f[V]\[ha]\f[R]
always matches only at the beginning of \f[I]Input\f[R], or (if
\f[I]rer\f[R].[[Multiline]] is \f[V]true\f[R]) at the beginning of a
line.
.RE
.PP
Examples of correct behavior:
.IP
.nf
\f[C]
const regex = /\[ha]foo/y;
regex.lastIndex = 2;
regex.test(\[dq]..foo\[dq]); // false - index 2 is not the beginning of the string

const regex2 = /\[ha]foo/my;
regex2.lastIndex = 2;
regex2.test(\[dq]..foo\[dq]); // false - index 2 is not the beginning of the string or line
regex2.lastIndex = 2;
regex2.test(\[dq].\[rs]nfoo\[dq]); // true - index 2 is the beginning of a line
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of the \f[V]sticky\f[R] flag in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[V]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.dotAll\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.hasIndices\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.ignoreCase\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.unicode\f[R]
