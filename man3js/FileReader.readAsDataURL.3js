.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FileReader.readAsDataURL" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileReader.readAsDataURL \- FileReader: readAsDataURL() method
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]readAsDataURL\f[B]\f[R] method of the
\f[CR]FileReader\f[R] interface is used to read the contents of the
specified \f[CR]Blob\f[R] or \f[CR]File\f[R].
When the read operation is finished, the \f[CR]readyState\f[R] becomes
\f[CR]DONE\f[R], and the \f[CR]loadend\f[R] is triggered.
At that time, the \f[CR]result\f[R] attribute contains the data as a
data: URL representing the file\[cq]s data as a base64 encoded string.
.RS
.PP
\f[B]Note:\f[R] The blob\[cq]s \f[CR]result\f[R] cannot be directly
decoded as Base64 without first removing the Data\-URL declaration
preceding the Base64\-encoded data.
To retrieve only the Base64 encoded string, first remove
\f[CR]data:*/*;base64,\f[R] from the result.
.RE
.SH SYNTAX
.IP
.EX
readAsDataURL(blob)
.EE
.SS Parameters
.TP
\f[B]blob\f[R]
The \f[CR]Blob\f[R] or \f[CR]File\f[R] from which to read.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Reading a single file
.SS HTML
.IP
.EX
<input type=\[dq]file\[dq] onchange=\[dq]previewFile()\[dq] /><br />
<img src=\[dq]\[dq] height=\[dq]200\[dq] alt=\[dq]Image preview\[dq] />
.EE
.SS JavaScript
.IP
.EX
function previewFile() {
  const preview = document.querySelector(\[dq]img\[dq]);
  const file = document.querySelector(\[dq]input[type=file]\[dq]).files[0];
  const reader = new FileReader();

  reader.addEventListener(
    \[dq]load\[dq],
    () => {
      // convert image file to base64 string
      preview.src = reader.result;
    },
    false,
  );

  if (file) {
    reader.readAsDataURL(file);
  }
}
.EE
.SS Result
.SS Reading multiple files
.SS HTML
.IP
.EX
<input id=\[dq]browse\[dq] type=\[dq]file\[dq] multiple />
<div id=\[dq]preview\[dq]></div>
.EE
.SS JavaScript
.IP
.EX
function previewFiles() {
  const preview = document.querySelector(\[dq]#preview\[dq]);
  const files = document.querySelector(\[dq]input[type=file]\[dq]).files;

  function readAndPreview(file) {
    // Make sure \[ga]file.name\[ga] matches our extensions criteria
    if (/\[rs].(jpe?g|png|gif)$/i.test(file.name)) {
      const reader = new FileReader();

      reader.addEventListener(
        \[dq]load\[dq],
        () => {
          const image = new Image();
          image.height = 100;
          image.title = file.name;
          image.src = reader.result;
          preview.appendChild(image);
        },
        false,
      );

      reader.readAsDataURL(file);
    }
  }

  if (files) {
    Array.prototype.forEach.call(files, readAndPreview);
  }
}

const picker = document.querySelector(\[dq]#browse\[dq]);
picker.addEventListener(\[dq]change\[dq], previewFiles);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]FileReader\f[R]
.IP \[bu] 2
\f[CR]URL.createObjectURL()\f[R]
