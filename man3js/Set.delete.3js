.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Set.delete" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.delete - Set.prototype.delete()
.SH SYNOPSIS
The \f[B]\f[CB]delete()\f[B]\f[R] method removes a specified value from
a \f[CR]Set\f[R] object, if it is in the set.
.SH SYNTAX
.IP
.EX
delete(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to remove from \f[CR]Set\f[R].
.SS Return value
Returns \f[CR]true\f[R] if \f[CR]value\f[R] was already in
\f[CR]Set\f[R]; otherwise \f[CR]false\f[R].
.SH EXAMPLES
.SS Using the delete() method
.IP
.EX
const mySet = new Set();
mySet.add(\[dq]foo\[dq]);

console.log(mySet.delete(\[dq]bar\[dq])); // false; no \[dq]bar\[dq] element found to be deleted.
console.log(mySet.delete(\[dq]foo\[dq])); // true; successfully removed.

console.log(mySet.has(\[dq]foo\[dq])); // false; the \[dq]foo\[dq] element is no longer present.
.EE
.SS Deleting an object from a set
Because objects are compared by reference, you have to delete them by
checking individual properties if you don\[cq]t have a reference to the
original object.
.IP
.EX
const setObj = new Set(); // Create a new set.

setObj.add({ x: 10, y: 20 }); // Add object in the set.

setObj.add({ x: 20, y: 30 }); // Add object in the set.

// Delete any point with \[ga]x > 10\[ga].
setObj.forEach((point) => {
  if (point.x > 10) {
    setObj.delete(point);
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Set\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.clear()\f[R]
