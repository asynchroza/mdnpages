.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.search" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]search()\f[B]\f[R] method executes a search for a match
between a regular expression and this \f[V]String\f[R] object.
.SH Syntax
.IP
.nf
\f[C]
search(regexp)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]regexp\f[R]
.RS 2
.IP \[bu] 2
A regular expression object, or any object that has a
\f[V]Symbol.search\f[R] method.
.RS 2
.PP
If \f[V]regexp\f[R] is not a \f[V]RegExp\f[R] object and does not have a
\f[V]Symbol.search\f[R] method, it is implicitly converted to a
\f[V]RegExp\f[R] by using \f[V]new RegExp(regexp)\f[R].
.RE
.RE
.SS Return value
.PP
The index of the first match between the regular expression and the
given string, or \f[V]-1\f[R] if no match was found.
.SH Description
.PP
The implementation of \f[V]String.prototype.search()\f[R] itself is very
simple \[em] it simply calls the \f[V]Symbol.search\f[R] method of the
argument with the string as the first parameter.
The actual implementation comes from
\f[V]RegExp.prototype[\[at]\[at]search]()\f[R].
.PP
The \f[V]g\f[R] flag of \f[V]regexp\f[R] has no effect on the
\f[V]search()\f[R] result, and the search always happens as if the
regex\[cq]s \f[V]lastIndex\f[R] is 0.
For more information on the behavior of \f[V]search()\f[R], see
\f[V]RegExp.prototype[\[at]\[at]search]()\f[R].
.PP
When you want to know whether a pattern is found, and \f[I]also\f[R]
know its index within a string, use \f[V]search()\f[R].
.IP \[bu] 2
If you only want to know if it exists, use the
\f[V]RegExp.prototype.test()\f[R] method, which returns a boolean.
.IP \[bu] 2
If you need the content of the matched text, use \f[V]match()\f[R] or
\f[V]RegExp.prototype.exec()\f[R].
.SH Examples
.SS Using search()
.PP
The following example searches a string with two different regex objects
to show a successful search (positive value) vs.\ an unsuccessful search
(\f[V]-1\f[R]).
.IP
.nf
\f[C]
const str = \[dq]hey JudE\[dq];
const re = /[A-Z]/;
const reDot = /[.]/;
console.log(str.search(re)); // returns 4, which is the index of the first capital letter \[dq]J\[dq]
console.log(str.search(reDot)); // returns -1 cannot find \[aq].\[aq] dot punctuation
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]String.prototype.search\f[R] in \f[V]core-js\f[R] with
fixes and implementation of modern behavior like \f[V]Symbol.search\f[R]
support (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
Using regular expressions in JavaScript
.IP \[bu] 2
\f[V]String.prototype.match()\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.exec()\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype[\[at]\[at]search]()\f[R]
