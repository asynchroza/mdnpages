.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.isArray" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.isArray - Array.isArray()
.SH SYNOPSIS
The \f[B]\f[CB]Array.isArray()\f[B]\f[R] static method determines
whether the passed value is an \f[CR]Array\f[R].
.SH SYNTAX
.IP
.EX
Array.isArray(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to be checked.
.SS Return value
\f[CR]true\f[R] if \f[CR]value\f[R] is an \f[CR]Array\f[R]; otherwise,
\f[CR]false\f[R].
\f[CR]false\f[R] is always returned if \f[CR]value\f[R] is a
\f[CR]TypedArray\f[R] instance.
.SH DESCRIPTION
\f[CR]Array.isArray()\f[R] checks if the passed value is an
\f[CR]Array\f[R].
It does not check the value\[cq]s prototype chain, nor does it rely on
the \f[CR]Array\f[R] constructor it is attached to.
It returns \f[CR]true\f[R] for any value that was created using the
array literal syntax or the \f[CR]Array\f[R] constructor.
This makes it safe to use with cross-realm objects, where the identity
of the \f[CR]Array\f[R] constructor is different and would therefore
cause \f[CR]instanceof Array\f[R] to fail.
.PP
See the article \[lq]Determining with absolute accuracy whether or not a
JavaScript object is an
array\[rq] (https://web.mit.edu/jwalden/www/isArray.html) for more
details.
.PP
\f[CR]Array.isArray()\f[R] also rejects objects with
\f[CR]Array.prototype\f[R] in its prototype chain but aren\[cq]t actual
arrays, which \f[CR]instanceof Array\f[R] would accept.
.SH EXAMPLES
.SS Using Array.isArray()
.IP
.EX
// all following calls return true
Array.isArray([]);
Array.isArray([1]);
Array.isArray(new Array());
Array.isArray(new Array(\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq]));
Array.isArray(new Array(3));
// Little known fact: Array.prototype itself is an array:
Array.isArray(Array.prototype);

// all following calls return false
Array.isArray();
Array.isArray({});
Array.isArray(null);
Array.isArray(undefined);
Array.isArray(17);
Array.isArray(\[dq]Array\[dq]);
Array.isArray(true);
Array.isArray(false);
Array.isArray(new Uint8Array(32));
// This is not an array, because it was not created using the
// array literal syntax or the Array constructor
Array.isArray({ __proto__: Array.prototype });
.EE
.SS instanceof vs.\ Array.isArray()
When checking for \f[CR]Array\f[R] instance, \f[CR]Array.isArray()\f[R]
is preferred over \f[CR]instanceof\f[R] because it works across realms.
.IP
.EX
const iframe = document.createElement(\[dq]iframe\[dq]);
document.body.appendChild(iframe);
const xArray = window.frames[window.frames.length - 1].Array;
const arr = new xArray(1, 2, 3); // [1, 2, 3]

// Correctly checking for Array
Array.isArray(arr); // true
// The prototype of arr is xArray.prototype, which is a
// different object from Array.prototype
arr instanceof Array; // false
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.isArray\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
