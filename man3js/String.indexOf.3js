.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.indexOf" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]indexOf()\f[B]\f[R] method of \f[V]String\f[R] values
searches this string and returns the index of the first occurrence of
the specified substring.
It takes an optional starting position and returns the first occurrence
of the specified substring at an index greater than or equal to the
specified number.
.SH Syntax
.IP
.nf
\f[C]
indexOf(searchString)
indexOf(searchString, position)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]searchString\f[R]
.RS 2
.IP \[bu] 2
Substring to search for.
All values are coerced to strings, so omitting it or passing
\f[V]undefined\f[R] causes \f[V]indexOf()\f[R] to search for the string
\f[V]\[dq]undefined\[dq]\f[R], which is rarely what you want.
.RE
.IP \[bu] 2
\f[V]position\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
The method returns the index of the first occurrence of the specified
substring at a position greater than or equal to \f[V]position\f[R],
which defaults to \f[V]0\f[R].
If \f[V]position\f[R] is greater than the length of the calling string,
the method doesn\[cq]t search the calling string at all.
If \f[V]position\f[R] is less than zero, the method behaves as it would
if \f[V]position\f[R] were \f[V]0\f[R].
.RS 2
.IP \[bu] 2
\f[V]\[aq]hello world hello\[aq].indexOf(\[aq]o\[aq], -5)\f[R] returns
\f[V]4\f[R] \[em] because it causes the method to behave as if the
second argument were \f[V]0\f[R], and the first occurrence of
\f[V]o\f[R] at a position greater or equal to \f[V]0\f[R] is at position
\f[V]4\f[R].
.IP \[bu] 2
\f[V]\[aq]hello world hello\[aq].indexOf(\[aq]world\[aq], 12)\f[R]
returns \f[V]-1\f[R] \[em] because, while it\[cq]s true the substring
\f[V]world\f[R] occurs at index \f[V]6\f[R], that position is not
greater than or equal to \f[V]12\f[R].
.IP \[bu] 2
\f[V]\[aq]hello world hello\[aq].indexOf(\[aq]o\[aq], 99)\f[R] returns
\f[V]-1\f[R] \[em] because \f[V]99\f[R] is greater than the length of
\f[V]hello world hello\f[R], which causes the method to not search the
string at all.
.RE
.RE
.SS Return value
.PP
The index of the first occurrence of \f[V]searchString\f[R] found, or
\f[V]-1\f[R] if not found.
.SS Return value when using an empty search string
.PP
Searching for an empty search string produces strange results.
With no second argument, or with a second argument whose value is less
than the calling string\[cq]s length, the return value is the same as
the value of the second argument:
.IP
.nf
\f[C]
\[dq]hello world\[dq].indexOf(\[dq]\[dq]); // returns 0
\[dq]hello world\[dq].indexOf(\[dq]\[dq], 0); // returns 0
\[dq]hello world\[dq].indexOf(\[dq]\[dq], 3); // returns 3
\[dq]hello world\[dq].indexOf(\[dq]\[dq], 8); // returns 8
\f[R]
.fi
.PP
However, with a second argument whose value is greater than or equal to
the string\[cq]s length, the return value is the string\[cq]s length:
.IP
.nf
\f[C]
\[dq]hello world\[dq].indexOf(\[dq]\[dq], 11); // returns 11
\[dq]hello world\[dq].indexOf(\[dq]\[dq], 13); // returns 11
\[dq]hello world\[dq].indexOf(\[dq]\[dq], 22); // returns 11
\f[R]
.fi
.PP
In the former instance, the method behaves as if it found an empty
string just after the position specified in the second argument.
In the latter instance, the method behaves as if it found an empty
string at the end of the calling string.
.SH Description
.PP
Strings are zero-indexed: The index of a string\[cq]s first character is
\f[V]0\f[R], and the index of a string\[cq]s last character is the
length of the string minus 1.
.IP
.nf
\f[C]
\[dq]Blue Whale\[dq].indexOf(\[dq]Blue\[dq]); // returns  0
\[dq]Blue Whale\[dq].indexOf(\[dq]Blute\[dq]); // returns -1
\[dq]Blue Whale\[dq].indexOf(\[dq]Whale\[dq], 0); // returns  5
\[dq]Blue Whale\[dq].indexOf(\[dq]Whale\[dq], 5); // returns  5
\[dq]Blue Whale\[dq].indexOf(\[dq]Whale\[dq], 7); // returns -1
\[dq]Blue Whale\[dq].indexOf(\[dq]\[dq]); // returns  0
\[dq]Blue Whale\[dq].indexOf(\[dq]\[dq], 9); // returns  9
\[dq]Blue Whale\[dq].indexOf(\[dq]\[dq], 10); // returns 10
\[dq]Blue Whale\[dq].indexOf(\[dq]\[dq], 11); // returns 10
\f[R]
.fi
.PP
The \f[V]indexOf()\f[R] method is case sensitive.
For example, the following expression returns \f[V]-1\f[R]:
.IP
.nf
\f[C]
\[dq]Blue Whale\[dq].indexOf(\[dq]blue\[dq]); // returns -1
\f[R]
.fi
.SS Checking occurrences
.PP
When checking if a specific substring occurs within a string, the
correct way to check is test whether the return value is \f[V]-1\f[R]:
.IP
.nf
\f[C]
\[dq]Blue Whale\[dq].indexOf(\[dq]Blue\[dq]) !== -1; // true; found \[aq]Blue\[aq] in \[aq]Blue Whale\[aq]
\[dq]Blue Whale\[dq].indexOf(\[dq]Bloe\[dq]) !== -1; // false; no \[aq]Bloe\[aq] in \[aq]Blue Whale\[aq]
\f[R]
.fi
.SH Examples
.SS Using indexOf()
.PP
The following example uses \f[V]indexOf()\f[R] to locate substrings in
the string \f[V]\[dq]Brave new world\[dq]\f[R].
.IP
.nf
\f[C]
const str = \[dq]Brave new world\[dq];

console.log(str.indexOf(\[dq]w\[dq])); // 8
console.log(str.indexOf(\[dq]new\[dq])); // 6
\f[R]
.fi
.SS indexOf() and case-sensitivity
.PP
The following example defines two string variables.
.PP
The variables contain the same string, except that the second string
contains uppercase letters.
The first \f[V]console.log()\f[R] method displays \f[V]19\f[R].
But because the \f[V]indexOf()\f[R] method is case sensitive, the string
\f[V]\[dq]cheddar\[dq]\f[R] is not found in \f[V]myCapString\f[R], so
the second \f[V]console.log()\f[R] method displays \f[V]-1\f[R].
.IP
.nf
\f[C]
const myString = \[dq]brie, pepper jack, cheddar\[dq];
const myCapString = \[dq]Brie, Pepper Jack, Cheddar\[dq];

console.log(myString.indexOf(\[dq]cheddar\[dq])); // 19
console.log(myCapString.indexOf(\[dq]cheddar\[dq])); // -1
\f[R]
.fi
.SS Using indexOf() to count occurrences of a letter in a string
.PP
The following example sets \f[V]count\f[R] to the number of occurrences
of the letter \f[V]e\f[R] in the string \f[V]str\f[R]:
.IP
.nf
\f[C]
const str = \[dq]To be, or not to be, that is the question.\[dq];
let count = 0;
let position = str.indexOf(\[dq]e\[dq]);

while (position !== -1) {
  count++;
  position = str.indexOf(\[dq]e\[dq], position + 1);
}

console.log(count); // 4
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]String.prototype.charAt()\f[R]
.IP \[bu] 2
\f[V]String.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[V]String.prototype.includes()\f[R]
.IP \[bu] 2
\f[V]String.prototype.split()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.indexOf()\f[R]
