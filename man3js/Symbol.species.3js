'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.species" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Symbol.species\f[B]\f[R] static data property represents
the well-known symbol \f[V]\[at]\[at]species\f[R].
Methods that create copies of an object may look up this symbol on the
object for the constructor function to use when creating the copy.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[V]\[at]\[at]species\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are investigating whether to remove this
feature (https://github.com/tc39/proposal-rm-builtin-subclassing).
Avoid relying on it if possible.
.RE
.SH Value
.PP
The well-known symbol \f[V]\[at]\[at]species\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH Description
.PP
The \f[V]\[at]\[at]species\f[R] accessor property allows subclasses to
override the default constructor for objects.
This specifies a protocol about how instances should be copied.
For example, when you use copying methods of arrays, such as
\f[V]map()\f[R].
the \f[V]map()\f[R] method uses
\f[V]instance.constructor[Symbol.species]\f[R] to get the constructor
for constructing the new array.
For more information, see subclassing built-ins.
.PP
All built-in implementations of \f[V]\[at]\[at]species\f[R] return the
\f[V]this\f[R] value, which is the current instance\[cq]s constructor.
This allows copying methods to create instances of derived classes
rather than the base class \[em] for example, \f[V]map()\f[R] will
return an array of the same type as the original array.
.SH Examples
.SS Using species
.PP
You might want to return \f[V]Array\f[R] objects in your derived array
class \f[V]MyArray\f[R].
For example, when using methods such as \f[V]map()\f[R] that return the
default constructor, you want these methods to return a parent
\f[V]Array\f[R] object, instead of the \f[V]MyArray\f[R] object.
The \f[V]species\f[R] symbol lets you do this:
.IP
.nf
\f[C]
class MyArray extends Array {
  // Overwrite species to the parent Array constructor
  static get [Symbol.species]() {
    return Array;
  }
}
const a = new MyArray(1, 2, 3);
const mapped = a.map((x) => x * x);

console.log(mapped instanceof MyArray); // false
console.log(mapped instanceof Array); // true
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Array[\[at]\[at]species]\f[R]
.IP \[bu] 2
\f[V]ArrayBuffer[\[at]\[at]species]\f[R]
.IP \[bu] 2
\f[V]Map[\[at]\[at]species]\f[R]
.IP \[bu] 2
\f[V]Promise[\[at]\[at]species]\f[R]
.IP \[bu] 2
\f[V]RegExp[\[at]\[at]species]\f[R]
.IP \[bu] 2
\f[V]Set[\[at]\[at]species]\f[R]
.IP \[bu] 2
\f[V]TypedArray[\[at]\[at]species]\f[R]
