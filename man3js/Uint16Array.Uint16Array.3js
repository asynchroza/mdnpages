.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Uint16Array.Uint16Array" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Uint16Array.Uint16Array - Uint16Array() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Uint16Array()\f[B]\f[R] constructor creates
\f[CR]Uint16Array\f[R] objects.
The contents are initialized to \f[CR]0\f[R].
.SH SYNTAX
.IP
.EX
new Uint16Array()
new Uint16Array(length)
new Uint16Array(typedArray)
new Uint16Array(object)

new Uint16Array(buffer)
new Uint16Array(buffer, byteOffset)
new Uint16Array(buffer, byteOffset, length)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Uint16Array()\f[R] can only be constructed with
\f[CR]new\f[R].
Attempting to call it without \f[CR]new\f[R] throws a
\f[CR]TypeError\f[R].
.RE
.SS Parameters
See \f[CR]TypedArray\f[R].
.SS Exceptions
See \f[CR]TypedArray\f[R].
.SH EXAMPLES
.SS Different ways to create a Uint16Array
.IP
.EX
// From a length
const uint16 = new Uint16Array(2);
uint16[0] = 42;
console.log(uint16[0]); // 42
console.log(uint16.length); // 2
console.log(uint16.BYTES_PER_ELEMENT); // 2

// From an array
const x = new Uint16Array([21, 31]);
console.log(x[1]); // 31

// From another TypedArray
const y = new Uint16Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
const buffer = new ArrayBuffer(16);
const z = new Uint16Array(buffer, 2, 4);
console.log(z.byteOffset); // 2

// From an iterable
const iterable = (function* () {
  yield* [1, 2, 3];
})();
const uint16FromIterable = new Uint16Array(iterable);
console.log(uint16FromIterable);
// Uint16Array [1, 2, 3]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Uint16Array\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
