.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.log1p" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Math.log1p()\f[B]\f[R] static method returns the natural
logarithm (base e) of \f[V]1 + x\f[R], where \f[V]x\f[R] is the
argument.
That is:
.PP
∀x>−1,𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝚙(𝚡)=ln(1+x)x > -1,; = (1 + x)
.SH Syntax
.IP
.nf
\f[C]
Math.log1p(x)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]x\f[R]
.RS 2
.IP \[bu] 2
A number greater than or equal to -1.
.RE
.SS Return value
.PP
The natural logarithm (base e) of \f[V]x + 1\f[R].
If \f[V]x\f[R] is -1, returns \f[V]-Infinity\f[R].
If \f[V]x < -1\f[R], returns \f[V]NaN\f[R].
.SH Description
.PP
For very small values of \f[I]x\f[R], adding 1 can reduce or eliminate
precision.
The double floats used in JS give you about 15 digits of precision.
1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and
therefore exactly 1.0 in that arithmetic, because digits past 15 are
rounded off.
.PP
When you calculate log(1 + \f[I]x\f[R]) where \f[I]x\f[R] is a small
positive number, you should get an answer very close to \f[I]x\f[R],
because limx→0log⁡(1+x)x=1_{x } = 1.
If you calculate \f[V]Math.log(1 + 1.1111111111e-15)\f[R], you should
get an answer close to \f[V]1.1111111111e-15\f[R].
Instead, you will end up taking the logarithm of
\f[V]1.00000000000000111022\f[R] (the roundoff is in binary, so
sometimes it gets ugly), and get the answer 1.11022\&...e-15, with only
3 correct digits.
If, instead, you calculate \f[V]Math.log1p(1.1111111111e-15)\f[R], you
will get a much more accurate answer \f[V]1.1111111110999995e-15\f[R],
with 15 correct digits of precision (actually 16 in this case).
.PP
If the value of \f[V]x\f[R] is less than -1, the return value is always
\f[V]NaN\f[R].
.PP
Because \f[V]log1p()\f[R] is a static method of \f[V]Math\f[R], you
always use it as \f[V]Math.log1p()\f[R], rather than as a method of a
\f[V]Math\f[R] object you created (\f[V]Math\f[R] is not a constructor).
.SH Examples
.SS Using Math.log1p()
.IP
.nf
\f[C]
Math.log1p(-2); // NaN
Math.log1p(-1); // -Infinity
Math.log1p(-0); // -0
Math.log1p(0); // 0
Math.log1p(1); // 0.6931471805599453
Math.log1p(Infinity); // Infinity
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Math.log1p\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-math)
.IP \[bu] 2
\f[V]Math.exp()\f[R]
.IP \[bu] 2
\f[V]Math.log()\f[R]
.IP \[bu] 2
\f[V]Math.expm1()\f[R]
.IP \[bu] 2
\f[V]Math.log10()\f[R]
.IP \[bu] 2
\f[V]Math.log2()\f[R]
.IP \[bu] 2
\f[V]Math.pow()\f[R]
