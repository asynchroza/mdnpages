.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.toLocaleTimeString" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Date.toLocaleTimeString - Date.prototype.toLocaleTimeString()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toLocaleTimeString()\f[B]\f[R] method returns a string
with a language-sensitive representation of the time portion of the
date.
In implementations with \f[V]Intl.DateTimeFormat\f[R] API support, this
method simply calls \f[V]Intl.DateTimeFormat\f[R].
.PP
When formatting large numbers of dates, it is better to create an
\f[V]Intl.DateTimeFormat\f[R] object and use its \f[V]format()\f[R]
method.
.SH SYNTAX
.IP
.nf
\f[C]
toLocaleTimeString()
toLocaleTimeString(locales)
toLocaleTimeString(locales, options)
\f[R]
.fi
.SS Parameters
.PP
The \f[V]locales\f[R] and \f[V]options\f[R] arguments customize the
behavior of the function and let applications specify the language whose
formatting conventions should be used.
.PP
In implementations that support the \f[V]Intl.DateTimeFormat\f[R] API,
these parameters correspond exactly to the
\f[V]Intl.DateTimeFormat()\f[R] constructor\[cq]s parameters.
Implementations without \f[V]Intl.DateTimeFormat\f[R] support are asked
to ignore both parameters, making the locale used and the form of the
string returned entirely implementation-dependent.
.TP
\f[B]locales\f[R] \f[I](optional)\f[R]
A string with a BCP 47 language tag, or an array of such strings.
Corresponds to the \f[V]locales\f[R] parameter of the
\f[V]Intl.DateTimeFormat()\f[R] constructor.
.RS
.PP
In implementations without \f[V]Intl.DateTimeFormat\f[R] support, this
parameter is ignored and the host\[cq]s locale is usually used.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object adjusting the output format.
Corresponds to the \f[V]options\f[R] parameter of the
\f[V]Intl.DateTimeFormat()\f[R] constructor.
If \f[V]dayPeriod\f[R], \f[V]hour\f[R], \f[V]minute\f[R],
\f[V]second\f[R], and \f[V]fractionalSecondDigits\f[R] are all
undefined, then \f[V]hour\f[R], \f[V]minute\f[R], \f[V]second\f[R] will
be set to \f[V]\[dq]numeric\[dq]\f[R].
.RS
.PP
In implementations without \f[V]Intl.DateTimeFormat\f[R] support, this
parameter is ignored.
.RE
.PP
See the \f[V]Intl.DateTimeFormat()\f[R] constructor for details on these
parameters and how to use them.
.SS Return value
.PP
A string representing the time portion of the given \f[V]Date\f[R]
instance according to language-specific conventions.
.PP
In implementations with \f[V]Intl.DateTimeFormat\f[R], this is
equivalent to
\f[V]new Intl.DateTimeFormat(locales, options).format(date)\f[R], where
\f[V]options\f[R] has been normalized as described above.
.SH EXAMPLES
.SS Using toLocaleTimeString()
.PP
Basic use of this method without specifying a \f[V]locale\f[R] returns a
formatted string in the default locale and with default options.
.IP
.nf
\f[C]
const date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));

// toLocaleTimeString() without arguments depends on the implementation,
// the default locale, and the default time zone
console.log(date.toLocaleTimeString());
// \[dq]7:00:00 PM\[dq] if run in en-US locale with time zone America/Los_Angeles
\f[R]
.fi
.SS Checking for support for locales and options parameters
.PP
The \f[V]locales\f[R] and \f[V]options\f[R] parameters may not be
supported in all implementations, because support for the
internalization API is optional, and some systems may not have the
necessary data.
For implementations without internationalization support,
\f[V]toLocaleTimeString()\f[R] always uses the system\[cq]s locale,
which may not be what you want.
Because any implementation that supports the \f[V]locales\f[R] and
\f[V]options\f[R] parameters must support the \f[V]Intl\f[R] API, you
can check the existence of the latter for support:
.IP
.nf
\f[C]
function toLocaleTimeStringSupportsLocales() {
  return (
    typeof Intl === \[dq]object\[dq] &&
    !!Intl &&
    typeof Intl.DateTimeFormat === \[dq]function\[dq]
  );
}
\f[R]
.fi
.SS Using locales
.PP
This example shows some of the variations in localized time formats.
In order to get the format of the language used in the user interface of
your application, make sure to specify that language (and possibly some
fallback languages) using the \f[V]locales\f[R] argument:
.IP
.nf
\f[C]
const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// formats below assume the local time zone of the locale;
// America/Los_Angeles for the US

// US English uses 12-hour time with AM/PM
console.log(date.toLocaleTimeString(\[dq]en-US\[dq]));
// \[dq]7:00:00 PM\[dq]

// British English uses 24-hour time without AM/PM
console.log(date.toLocaleTimeString(\[dq]en-GB\[dq]));
// \[dq]03:00:00\[dq]

// Korean uses 12-hour time with AM/PM
console.log(date.toLocaleTimeString(\[dq]ko-KR\[dq]));
// \[dq]오후 12:00:00\[dq]

// Arabic in most Arabic speaking countries uses real Arabic digits
console.log(date.toLocaleTimeString(\[dq]ar-EG\[dq]));
// \[dq]٧:٠٠:٠٠ م\[dq]

// when requesting a language that may not be supported, such as
// Balinese, include a fallback language, in this case Indonesian
console.log(date.toLocaleTimeString([\[dq]ban\[dq], \[dq]id\[dq]]));
// \[dq]11.00.00\[dq]
\f[R]
.fi
.SS Using options
.PP
The results provided by \f[V]toLocaleTimeString()\f[R] can be customized
using the \f[V]options\f[R] argument:
.IP
.nf
\f[C]
const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// an application may want to use UTC and make that visible
const options = { timeZone: \[dq]UTC\[dq], timeZoneName: \[dq]short\[dq] };
console.log(date.toLocaleTimeString(\[dq]en-US\[dq], options));
// \[dq]3:00:00 AM GMT\[dq]

// sometimes even the US needs 24-hour time
console.log(date.toLocaleTimeString(\[dq]en-US\[dq], { hour12: false }));
// \[dq]19:00:00\[dq]

// show only hours and minutes, use options with the default locale - use an empty array
console.log(
  date.toLocaleTimeString([], { hour: \[dq]2-digit\[dq], minute: \[dq]2-digit\[dq] }),
);
// \[dq]20:01\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Intl.DateTimeFormat\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toLocaleDateString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toTimeString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toString()\f[R]
