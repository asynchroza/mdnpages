.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.reduce" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]reduce()\f[B]\f[R] method applies a function against an
accumulator and each value of the typed array (from left-to-right) has
to reduce it to a single value.
This method has the same algorithm as
\f[V]Array.prototype.reduce()\f[R].
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH Syntax
.IP
.nf
\f[C]
reduce(callbackFn)
reduce(callbackFn, initialValue)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]callbackFn\f[R]
.RS 2
.IP \[bu] 2
A function to execute for each element in the typed array.
Its return value becomes the value of the \f[V]accumulator\f[R]
parameter on the next invocation of \f[V]callbackFn\f[R].
For the last invocation, the return value becomes the return value of
\f[V]reduce()\f[R].
The function is called with the following arguments:
.RS 2
.IP \[bu] 2
\f[V]accumulator\f[R]
.RS 2
.IP \[bu] 2
The value resulting from the previous call to \f[V]callbackFn\f[R].
On first call, \f[V]initialValue\f[R] if specified, otherwise the value
of \f[V]array[0]\f[R].
.RE
.IP \[bu] 2
\f[V]currentValue\f[R]
.RS 2
.IP \[bu] 2
The value of the current element.
On first call, the value of \f[V]array[0]\f[R] if an
\f[V]initialValue\f[R] was specified, otherwise the value of
\f[V]array[1]\f[R].
.RE
.IP \[bu] 2
\f[V]currentIndex\f[R]
.RS 2
.IP \[bu] 2
The index position of \f[V]currentValue\f[R] in the typed array.
On first call, \f[V]0\f[R] if \f[V]initialValue\f[R] was specified,
otherwise \f[V]1\f[R].
.RE
.IP \[bu] 2
\f[V]array\f[R]
.RS 2
.IP \[bu] 2
The typed array \f[V]reduce()\f[R] was called upon.
.RE
.RE
.RE
.IP \[bu] 2
\f[V]initialValue\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A value to which \f[V]accumulator\f[R] is initialized the first time the
callback is called.
If \f[V]initialValue\f[R] is specified, \f[V]callbackFn\f[R] starts
executing with the first value in the typed array as
\f[V]currentValue\f[R].
If \f[V]initialValue\f[R] is \f[I]not\f[R] specified,
\f[V]accumulator\f[R] is initialized to the first value in the typed
array, and \f[V]callbackFn\f[R] starts executing with the second value
in the typed array as \f[V]currentValue\f[R].
In this case, if the typed array is empty (so that there\[cq]s no first
value to return as \f[V]accumulator\f[R]), an error is thrown.
.RE
.SS Return value
.PP
The value that results from the reduction.
.SH Description
.PP
The \f[V]reduce\f[R] method executes the \f[V]callbackFn\f[R] function
once for each element present in the typed array, excluding holes in the
typed array, receiving four arguments: the initial value (or value from
the previous \f[V]callbackFn\f[R] call), the value of the current
element, the current index, and the typed array over which iteration is
occurring.
.PP
The first time the callback is called, \f[V]accumulator\f[R] and
\f[V]currentValue\f[R] can be one of two values.
If \f[V]initialValue\f[R] is provided in the call to \f[V]reduce\f[R],
then \f[V]accumulator\f[R] will be equal to \f[V]initialValue\f[R] and
\f[V]currentValue\f[R] will be equal to the first value in the typed
array.
If no \f[V]initialValue\f[R] was provided, then \f[V]accumulator\f[R]
will be equal to the first value in the typed array and
\f[V]currentValue\f[R] will be equal to the second.
.PP
If the typed array is empty and no \f[V]initialValue\f[R] was provided,
\f[V]TypeError\f[R] would be thrown.
If the typed array has only one element (regardless of position) and no
\f[V]initialValue\f[R] was provided, or if \f[V]initialValue\f[R] is
provided but the typed array is empty, the solo value would be returned
without calling \f[V]callbackFn\f[R].
.SH Examples
.SS Sum up all values within an array
.IP
.nf
\f[C]
const total = new Uint8Array([0, 1, 2, 3]).reduce((a, b) => a + b);
// total === 6
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]TypedArray.prototype.reduce\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[V]TypedArray.prototype.reduceRight()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.reduce()\f[R]
