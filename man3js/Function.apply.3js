.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Function.apply" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Function.apply - Function.prototype.apply()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]apply()\f[B]\f[R] method calls the specified function
with a given \f[V]this\f[R] value, and \f[V]arguments\f[R] provided as
an array (or an array-like object).
.SH SYNTAX
.IP
.nf
\f[C]
apply(thisArg)
apply(thisArg, argsArray)
\f[R]
.fi
.SS Parameters
.TP
\f[B]thisArg\f[R]
The value of \f[V]this\f[R] provided for the call to \f[V]func\f[R].
If the function is not in strict mode, \f[V]null\f[R] and
\f[V]undefined\f[R] will be replaced with the global object, and
primitive values will be converted to objects.
.TP
\f[B]argsArray\f[R] \f[I](optional)\f[R]
An array-like object, specifying the arguments with which \f[V]func\f[R]
should be called, or \f[V]null\f[R] or \f[V]undefined\f[R] if no
arguments should be provided to the function.
.SS Return value
.PP
The result of calling the function with the specified \f[V]this\f[R]
value and arguments.
.SH DESCRIPTION
.RS
.PP
\f[B]Note:\f[R] This function is almost identical to \f[V]call()\f[R],
except that the function arguments are passed to \f[V]call()\f[R]
individually as a list, while for \f[V]apply()\f[R] they are combined in
one object, typically an array \[em] for example,
\f[V]func.call(this, \[dq]eat\[dq], \[dq]bananas\[dq])\f[R]
vs.\ \f[V]func.apply(this, [\[dq]eat\[dq], \[dq]bananas\[dq]])\f[R].
.RE
.PP
Normally, when calling a function, the value of \f[V]this\f[R] inside
the function is the object that the function was accessed on.
With \f[V]apply()\f[R], you can assign an arbitrary value as
\f[V]this\f[R] when calling an existing function, without first
attaching the function to the object as a property.
This allows you to use methods of one object as generic utility
functions.
.PP
You can also use any kind of object which is array-like as the second
parameter.
In practice, this means that it needs to have a \f[V]length\f[R]
property, and integer (\[lq]index\[rq]) properties in the range
\f[V](0..length - 1)\f[R].
For example, you could use a \f[V]NodeList\f[R], or a custom object like
\f[V]{ \[aq]length\[aq]: 2, \[aq]0\[aq]: \[aq]eat\[aq], \[aq]1\[aq]: \[aq]bananas\[aq] }\f[R].
You can also use \f[V]arguments\f[R], for example:
.IP
.nf
\f[C]
function wrapper() {
  return anotherFn.apply(null, arguments);
}
\f[R]
.fi
.PP
With the rest parameters and parameter spread syntax, this can be
rewritten as:
.IP
.nf
\f[C]
function wrapper(...args) {
  return anotherFn(...args);
}
\f[R]
.fi
.PP
In general, \f[V]fn.apply(null, args)\f[R] is equivalent to
\f[V]fn(...args)\f[R] with the parameter spread syntax, except
\f[V]args\f[R] is expected to be an array-like object in the former case
with \f[V]apply()\f[R], and an iterable object in the latter case with
spread syntax.
.RS
.PP
\f[B]Warning:\f[R] Do not use \f[V]apply()\f[R] to chain constructors
(for example, to implement inheritance).
This invokes the constructor function as a plain function, which means
\f[V]new.target\f[R] is \f[V]undefined\f[R], and classes throw an error
because they can\[cq]t be called without \f[V]new\f[R].
Use \f[V]Reflect.construct()\f[R] or \f[V]extends\f[R] instead.
.RE
.SH EXAMPLES
.SS Using apply() to append an array to another
.PP
You can use \f[V]Array.prototype.push()\f[R] to append an element to an
array.
Because \f[V]push()\f[R] accepts a variable number of arguments, you can
also push multiple elements at once.
But if you pass an array to \f[V]push()\f[R], it will actually add that
array as a single element, instead of adding the elements individually,
ending up with an array inside an array.
On the other hand, \f[V]Array.prototype.concat()\f[R] does have the
desired behavior in this case, but it does not append to the
\f[I]existing\f[R] array \[em] it creates and returns a new array.
.PP
In this case, you can use \f[V]apply\f[R] to implicitly \[lq]spread\[rq]
an array as a series of arguments.
.IP
.nf
\f[C]
const array = [\[dq]a\[dq], \[dq]b\[dq]];
const elements = [0, 1, 2];
array.push.apply(array, elements);
console.info(array); // [\[dq]a\[dq], \[dq]b\[dq], 0, 1, 2]
\f[R]
.fi
.PP
The same effect can be achieved with the spread syntax.
.IP
.nf
\f[C]
const array = [\[dq]a\[dq], \[dq]b\[dq]];
const elements = [0, 1, 2];
array.push(...elements);
console.info(array); // [\[dq]a\[dq], \[dq]b\[dq], 0, 1, 2]
\f[R]
.fi
.SS Using apply() and built-in functions
.PP
Clever usage of \f[V]apply()\f[R] allows you to use built-in functions
for some tasks that would probably otherwise require manually looping
over a collection (or using the spread syntax).
.PP
For example, we can use \f[V]Math.max()\f[R] and \f[V]Math.min()\f[R] to
find out the maximum and minimum value in an array.
.IP
.nf
\f[C]
// min/max number in an array
const numbers = [5, 6, 2, 3, 7];

// using Math.min/Math.max apply
let max = Math.max.apply(null, numbers);
// This about equal to Math.max(numbers[0], \&...)
// or Math.max(5, 6, \&...)

let min = Math.min.apply(null, numbers);

// vs. simple loop based algorithm
max = -Infinity;
min = +Infinity;

for (let i = 0; i < numbers.length; i++) {
  if (numbers[i] > max) {
    max = numbers[i];
  }
  if (numbers[i] < min) {
    min = numbers[i];
  }
}
\f[R]
.fi
.PP
But beware: by using \f[V]apply()\f[R] (or the spread syntax) with an
arbitrarily long arguments list, you run the risk of exceeding the
JavaScript engine\[cq]s argument length limit.
.PP
The consequences of calling a function with too many arguments (that is,
more than tens of thousands of arguments) is unspecified and varies
across engines.
(The JavaScriptCore engine has a hard-coded argument limit of
65536 (https://webkit.org/b/80797).)
Most engines throw an exception; but there\[cq]s no normative
specification preventing other behaviors, such as arbitrarily limiting
the number of arguments actually passed to the applied function.
To illustrate this latter case: if such an engine had a limit of four
arguments (actual limits are of course significantly higher), it would
be as if the arguments \f[V]5, 6, 2, 3\f[R] had been passed to
\f[V]apply\f[R] in the examples above, rather than the full array.
.PP
If your value array might grow into the tens of thousands, use a hybrid
strategy: apply your function to chunks of the array at a time:
.IP
.nf
\f[C]
function minOfArray(arr) {
  let min = Infinity;
  const QUANTUM = 32768;

  for (let i = 0; i < arr.length; i += QUANTUM) {
    const submin = Math.min.apply(
      null,
      arr.slice(i, Math.min(i + QUANTUM, arr.length)),
    );
    min = Math.min(submin, min);
  }

  return min;
}

const min = minOfArray([5, 6, 2, 3, 7]);
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]arguments\f[R] object
.IP \[bu] 2
\f[V]Function.prototype.bind()\f[R]
.IP \[bu] 2
\f[V]Function.prototype.call()\f[R]
.IP \[bu] 2
\f[V]Functions and function scope\f[R]
.IP \[bu] 2
\f[V]Reflect.apply()\f[R]
.IP \[bu] 2
Spread syntax
