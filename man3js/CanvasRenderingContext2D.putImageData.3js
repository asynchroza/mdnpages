.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CanvasRenderingContext2D.putImageData" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.putImageData \- CanvasRenderingContext2D:
putImageData() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.putImageData()\f[B]\f[R] method
of the Canvas 2D API paints data from the given \f[CR]ImageData\f[R]
object onto the canvas.
If a dirty rectangle is provided, only the pixels from that rectangle
are painted.
This method is not affected by the canvas transformation matrix.
.RS
.PP
\f[B]Note:\f[R] Image data can be retrieved from a canvas using the
\f[CR]getImageData()\f[R] method.
.RE
.PP
You can find more information about \f[CR]putImageData()\f[R] and
general manipulation of canvas contents in the article Pixel
manipulation with canvas.
.SH SYNTAX
.IP
.EX
putImageData(imageData, dx, dy)
putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight)
.EE
.SS Parameters
.TP
\f[B]imageData\f[R]
An \f[CR]ImageData\f[R] object containing the array of pixel values.
.TP
\f[B]dx\f[R]
Horizontal position (x coordinate) at which to place the image data in
the destination canvas.
.TP
\f[B]dy\f[R]
Vertical position (y coordinate) at which to place the image data in the
destination canvas.
.TP
\f[B]dirtyX\f[R] \f[I](optional)\f[R]
Horizontal position (x coordinate) of the top\-left corner from which
the image data will be extracted.
Defaults to \f[CR]0\f[R].
.TP
\f[B]dirtyY\f[R] \f[I](optional)\f[R]
Vertical position (y coordinate) of the top\-left corner from which the
image data will be extracted.
Defaults to \f[CR]0\f[R].
.TP
\f[B]dirtyWidth\f[R] \f[I](optional)\f[R]
Width of the rectangle to be painted.
Defaults to the width of the image data.
.TP
\f[B]dirtyHeight\f[R] \f[I](optional)\f[R]
Height of the rectangle to be painted.
Defaults to the height of the image data.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if any of the arguments is infinite.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]ImageData\f[R] object\[cq]s data has been detached.
.SH EXAMPLES
.SS Understanding putImageData
To understand what this algorithm does under the hood, here is an
implementation on top of \f[CR]CanvasRenderingContext2D.fillRect()\f[R].
.SS HTML
.IP
.EX
<canvas id=\[dq]canvas\[dq]></canvas>
.EE
.SS JavaScript
.IP
.EX
const canvas = document.getElementById(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

function putImageData(
  ctx,
  imageData,
  dx,
  dy,
  dirtyX,
  dirtyY,
  dirtyWidth,
  dirtyHeight,
) {
  const data = imageData.data;
  const height = imageData.height;
  const width = imageData.width;
  dirtyX = dirtyX || 0;
  dirtyY = dirtyY || 0;
  dirtyWidth = dirtyWidth !== undefined ? dirtyWidth : width;
  dirtyHeight = dirtyHeight !== undefined ? dirtyHeight : height;
  const limitBottom = dirtyY + dirtyHeight;
  const limitRight = dirtyX + dirtyWidth;
  for (let y = dirtyY; y < limitBottom; y++) {
    for (let x = dirtyX; x < limitRight; x++) {
      const pos = y * width + x;
      ctx.fillStyle = \[ga]rgba(${data[pos * 4 + 0]}, ${data[pos * 4 + 1]}, ${
        data[pos * 4 + 2]
      }, ${data[pos * 4 + 3] / 255})\[ga];
      ctx.fillRect(x + dx, y + dy, 1, 1);
    }
  }
}

// Draw content onto the canvas
ctx.fillRect(0, 0, 100, 100);
// Create an ImageData object from it
const imagedata = ctx.getImageData(0, 0, 100, 100);
// use the putImageData function that illustrates how putImageData works
putImageData(ctx, imagedata, 150, 0, 50, 50, 25, 25);
.EE
.SS Result
.SS Data loss due to browser optimization
.RS
.PP
\f[B]Warning:\f[R] Due to the lossy nature of converting to and from
premultiplied alpha color values, pixels that have just been set using
\f[CR]putImageData()\f[R] might be returned to an equivalent
\f[CR]getImageData()\f[R] as different values.
.RE
.SS JavaScript
.IP
.EX
const canvas = document.createElement(\[dq]canvas\[dq]);
canvas.width = 1;
canvas.height = 1;
const context = canvas.getContext(\[dq]2d\[dq]);
const imgData = context.getImageData(0, 0, canvas.width, canvas.height);
const pixels = imgData.data;
pixels[0 + 0] = 1;
pixels[0 + 1] = 127;
pixels[0 + 2] = 255;
pixels[0 + 3] = 1;
console.log(\[dq]before:\[dq], pixels);
context.putImageData(imgData, 0, 0);
const imgData2 = context.getImageData(0, 0, canvas.width, canvas.height);
const pixels2 = imgData2.data;
console.log(\[dq]after:\[dq], pixels2);
.EE
.PP
The output might look like:
.IP
.EX
before: Uint8ClampedArray(4) [ 1, 127, 255, 1 ]
after: Uint8ClampedArray(4) [ 255, 255, 255, 1 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]ImageData\f[R] object
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.getImageData()\f[R]
.IP \[bu] 2
Pixel manipulation with canvas
