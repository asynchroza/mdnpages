.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Object.setPrototypeOf" "JS" "March 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.setPrototypeOf - Object.setPrototypeOf()
.SH SYNOPSIS
The \f[B]\f[CB]Object.setPrototypeOf()\f[B]\f[R] static method sets the
prototype (i.e., the internal \f[CR][[Prototype]]\f[R] property) of a
specified object to another object or \f[CR]null\f[R].
.RS
.PP
\f[B]Warning:\f[R] Changing the \f[CR][[Prototype]]\f[R] of an object
is, by the nature of how modern JavaScript engines optimize property
accesses, currently a very slow operation in every browser and
JavaScript engine.
In addition, the effects of altering inheritance are subtle and
far-flung, and are not limited to the time spent in the
\f[CR]Object.setPrototypeOf(...)\f[R] statement, but may extend to
\f[B]\f[BI]any\f[B]\f[R] code that has access to any object whose
\f[CR][[Prototype]]\f[R] has been altered.
You can read more in JavaScript engine fundamentals: optimizing
prototypes (https://mathiasbynens.be/notes/prototypes).
.PP
Because this feature is a part of the language, it is still the burden
on engine developers to implement that feature performantly (ideally).
Until engine developers address this issue, if you are concerned about
performance, you should avoid setting the \f[CR][[Prototype]]\f[R] of an
object.
Instead, create a new object with the desired \f[CR][[Prototype]]\f[R]
using \f[CR]Object.create()\f[R].
.RE
.SH SYNTAX
.IP
.EX
Object.setPrototypeOf(obj, prototype)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object which is to have its prototype set.
.TP
\f[B]prototype\f[R]
The object\[cq]s new prototype (an object or \f[CR]null\f[R]).
.SS Return value
The specified object.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if one of the following conditions is met:
.RS
.IP \[bu] 2
The \f[CR]obj\f[R] parameter is \f[CR]undefined\f[R] or \f[CR]null\f[R].
.IP \[bu] 2
The \f[CR]obj\f[R] parameter is non-extensible, or it\[cq]s an immutable
prototype exotic
object (https://tc39.es/ecma262/#sec-immutable-prototype-exotic-objects),
such as \f[CR]Object.prototype\f[R] or \f[CR]window\f[R].
However, the error is not thrown if the new prototype is the same value
as the original prototype of \f[CR]obj\f[R].
.IP \[bu] 2
The \f[CR]prototype\f[R] parameter is not an object or \f[CR]null\f[R].
.RE
.SH DESCRIPTION
\f[CR]Object.setPrototypeOf()\f[R] is generally considered the proper
way to set the prototype of an object.
You should always use it in favor of the deprecated
\f[CR]Object.prototype.__proto__\f[R] accessor.
.PP
If the \f[CR]obj\f[R] parameter is not an object (e.g.\ number, string,
etc.), this method does nothing \[em] without coercing it to an object
or attempting to set its prototype \[em] and directly returns
\f[CR]obj\f[R] as a primitive value.
If \f[CR]prototype\f[R] is the same value as the prototype of
\f[CR]obj\f[R], then \f[CR]obj\f[R] is directly returned, without
causing a \f[CR]TypeError\f[R] even when \f[CR]obj\f[R] has immutable
prototype.
.PP
For security concerns, there are certain built-in objects that are
designed to have an \f[I]immutable prototype\f[R].
This prevents prototype pollution attacks, especially proxy-related
ones (https://github.com/tc39/ecma262/issues/272).
The core language only specifies \f[CR]Object.prototype\f[R] as an
immutable prototype exotic object, whose prototype is always
\f[CR]null\f[R].
In browsers, \f[CR]window\f[R] and \f[CR]location\f[R] are two other
very common examples.
.IP
.EX
Object.isExtensible(Object.prototype); // true; you can add more properties
Object.setPrototypeOf(Object.prototype, {}); // TypeError: Immutable prototype object \[aq]#<Object>\[aq] cannot have their prototype set
Object.setPrototypeOf(Object.prototype, null); // No error; the prototype of \[ga]Object.prototype\[ga] is already \[ga]null\[ga]
.EE
.SH EXAMPLES
.SS Pseudoclassical inheritance using Object.setPrototypeOf()
Inheritance in JS using classes.
.IP
.EX
class Human {}
class SuperHero extends Human {}

const superMan = new SuperHero();
.EE
.PP
However, if we want to implement subclasses without using
\f[CR]class\f[R], we can do the following:
.IP
.EX
function Human(name, level) {
  this.name = name;
  this.level = level;
}

function SuperHero(name, level) {
  Human.call(this, name, level);
}

Object.setPrototypeOf(SuperHero.prototype, Human.prototype);

// Set the \[ga][[Prototype]]\[ga] of \[ga]SuperHero.prototype\[ga]
// to \[ga]Human.prototype\[ga]
// To set the prototypal inheritance chain

Human.prototype.speak = function () {
  return \[ga]${this.name} says hello.\[ga];
};

SuperHero.prototype.fly = function () {
  return \[ga]${this.name} is flying.\[ga];
};

const superMan = new SuperHero(\[dq]Clark Kent\[dq], 1);

console.log(superMan.fly());
console.log(superMan.speak());
.EE
.PP
The similarity between classical inheritance (with classes) and
pseudoclassical inheritance (with constructors\[cq] \f[CR]prototype\f[R]
property) as done above is mentioned in Inheritance chains.
.PP
Since function constructors\[cq] \f[CR]prototype\f[R] property is
writable, you can reassign it to a new object created with
\f[CR]Object.create()\f[R] to achieve the same inheritance chain as
well.
There are caveats to watch out when using \f[CR]create()\f[R], such as
remembering to re-add the \f[CR]constructor\f[R] property.
.PP
In the example below, which also uses classes, \f[CR]SuperHero\f[R] is
made to inherit from \f[CR]Human\f[R] without using \f[CR]extends\f[R]
by using \f[CR]setPrototypeOf()\f[R] instead.
.RS
.PP
\f[B]Warning:\f[R] It is not advisable to use
\f[CR]setPrototypeOf()\f[R] instead of \f[CR]extends\f[R] due to
performance and readability reasons.
.RE
.IP
.EX
class Human {}
class SuperHero {}

// Set the instance properties
Object.setPrototypeOf(SuperHero.prototype, Human.prototype);

// Hook up the static properties
Object.setPrototypeOf(SuperHero, Human);

const superMan = new SuperHero();
.EE
.PP
Subclassing without \f[CR]extends\f[R] is mentioned in ES-6
subclassing (https://hacks.mozilla.org/2015/08/es6-in-depth-subclassing/).
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Object.setPrototypeOf\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
\f[CR]Reflect.setPrototypeOf()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.isPrototypeOf()\f[R]
.IP \[bu] 2
\f[CR]Object.getPrototypeOf()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.__proto__\f[R]
.IP \[bu] 2
Inheritance chain
.IP \[bu] 2
ES-6
subclassing (https://hacks.mozilla.org/2015/08/es6-in-depth-subclassing/)
