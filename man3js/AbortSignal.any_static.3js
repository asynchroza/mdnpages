.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AbortSignal.any_static" "JS" "November 20, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AbortSignal.any_static \- AbortSignal: any() static method
.SH SYNOPSIS
The \f[B]\f[CB]AbortSignal.any()\f[B]\f[R] static method takes an
iterable of abort signals and returns an \f[CR]AbortSignal\f[R].
The returned abort signal is aborted when any of the input iterable
abort signals are aborted.
The abort reason will be set to the reason of the first signal that is
aborted.
If any of the the given abort signals are already aborted then so will
be the returned \f[CR]AbortSignal\f[R].
.SH SYNTAX
.IP
.EX
AbortSignal.any(iterable)
.EE
.SS Parameters
.TP
\f[B]iterable\f[R]
An iterable (such as an \f[CR]Array\f[R]) of abort signals.
.SS Return value
A \f[CR]AbortSignal\f[R] that is:
.IP \[bu] 2
\f[B]Already aborted\f[R], if any of the abort signals given is already
aborted.
The returned \f[CR]AbortSignal\f[R]\[cq]s reason will be already set to
the \f[CR]reason\f[R] of the first abort signal that was already
aborted.
.IP \[bu] 2
\f[B]Asynchronously aborted\f[R], when any abort signal in
\f[CR]iterable\f[R] aborts.
The \f[CR]reason\f[R] will be set to the reason of the first abort
signal that is aborted.
.SH EXAMPLES
.SS Using \f[CR]AbortSignal.any()\f[R]
This example demonstrates combining both a signal from an
\f[CR]AbortController\f[R], and a timeout signal from
\f[CR]AbortSignal.timeout\f[R].
.IP
.EX
const cancelDownloadButton = document.getElementById(\[dq]cancelDownloadButton\[dq]);

const userCancelController = new AbortController();

cancelDownloadButton.addEventListener(\[dq]click\[dq], () => {
  userCancelController.abort();
});

// Timeout after 5 minutes
const timeoutSignal = AbortSignal.timeout(1_000 * 60 * 5);

// This signal will abort when either the user clicks the cancel button or 5 minutes is up
// whichever is sooner
const combinedSignal = AbortSignal.any([
  userCancelController.signal,
  timeoutSignal,
]);

try {
  const res = await fetch(someUrlToDownload, {
    // Stop the fetch when any of the
    signal: combinedSignal,
  });
  const body = await res.blob();
  // Do something with downloaded content:
  // ...
} catch (e) {
  if (e.name === \[dq]AbortError\[dq]) {
    // Cancelled by the user
  } else if (e.name === \[dq]TimeoutError\[dq]) {
    // Show user that download timed out
  } else {
    // Other error, e.g. network error
  }
}
.EE
