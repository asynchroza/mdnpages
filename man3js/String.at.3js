.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.at" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
String.at - String.prototype.at()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]at()\f[B]\f[R] method takes an integer value and returns
a new \f[V]String\f[R] consisting of the single UTF-16 code unit located
at the specified offset.
This method allows for positive and negative integers.
Negative integers count back from the last string character.
.SH SYNTAX
.IP
.nf
\f[C]
at(index)
\f[R]
.fi
.SS Parameters
.TP
\f[B]index\f[R]
The index (position) of the string character to be returned.
Supports relative indexing from the end of the string when passed a
negative index; i.e.\ if a negative number is used, the character
returned will be found by counting back from the end of the string.
.SS Return value
.PP
A \f[V]String\f[R] consisting of the single UTF-16 code unit located at
the specified position.
Returns \f[V]undefined\f[R] if the given index can not be found.
.SH EXAMPLES
.SS Return the last character of a string
.PP
The following example provides a function which returns the last
character found in a specified string.
.IP
.nf
\f[C]
// A function which returns the last character of a given string
function returnLast(arr) {
  return arr.at(-1);
}

let invoiceRef = \[dq]myinvoice01\[dq];

console.log(returnLast(invoiceRef)); // \[aq]1\[aq]

invoiceRef = \[dq]myinvoice02\[dq];

console.log(returnLast(invoiceRef)); // \[aq]2\[aq]
\f[R]
.fi
.SS Comparing methods
.PP
Here we compare different ways to select the penultimate (last but one)
character of a \f[V]String\f[R].
Whilst all below methods are valid, it highlights the succinctness and
readability of the \f[V]at()\f[R] method.
.IP
.nf
\f[C]
const myString = \[dq]Every green bus drives fast.\[dq];

// Using length property and charAt() method
const lengthWay = myString.charAt(myString.length - 2);
console.log(lengthWay); // \[aq]t\[aq]

// Using slice() method
const sliceWay = myString.slice(-2, -1);
console.log(sliceWay); // \[aq]t\[aq]

// Using at() method
const atWay = myString.at(-2);
console.log(atWay); // \[aq]t\[aq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]String.prototype.at\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
A polyfill for the at()
method (https://github.com/tc39/proposal-relative-indexing-method#polyfill).
.IP \[bu] 2
\f[V]String.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[V]String.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[V]String.prototype.charCodeAt()\f[R]
.IP \[bu] 2
\f[V]String.prototype.codePointAt()\f[R]
.IP \[bu] 2
\f[V]String.prototype.split()\f[R]
