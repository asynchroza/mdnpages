.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "String.at" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.at - String.prototype.at()
.SH SYNOPSIS
The \f[B]\f[CB]at()\f[B]\f[R] method of \f[CR]String\f[R] values takes
an integer value and returns a new \f[CR]String\f[R] consisting of the
single UTF-16 code unit located at the specified offset.
This method allows for positive and negative integers.
Negative integers count back from the last string character.
.SH SYNTAX
.IP
.EX
at(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
The index (position) of the string character to be returned.
Supports relative indexing from the end of the string when passed a
negative index; i.e.\ if a negative number is used, the character
returned will be found by counting back from the end of the string.
.SS Return value
A \f[CR]String\f[R] consisting of the single UTF-16 code unit located at
the specified position.
Returns \f[CR]undefined\f[R] if the given index can not be found.
.SH EXAMPLES
.SS Return the last character of a string
The following example provides a function which returns the last
character found in a specified string.
.IP
.EX
// A function which returns the last character of a given string
function returnLast(arr) {
  return arr.at(-1);
}

let invoiceRef = \[dq]myinvoice01\[dq];

console.log(returnLast(invoiceRef)); // \[aq]1\[aq]

invoiceRef = \[dq]myinvoice02\[dq];

console.log(returnLast(invoiceRef)); // \[aq]2\[aq]
.EE
.SS Comparing methods
Here we compare different ways to select the penultimate (last but one)
character of a \f[CR]String\f[R].
Whilst all below methods are valid, it highlights the succinctness and
readability of the \f[CR]at()\f[R] method.
.IP
.EX
const myString = \[dq]Every green bus drives fast.\[dq];

// Using length property and charAt() method
const lengthWay = myString.charAt(myString.length - 2);
console.log(lengthWay); // \[aq]t\[aq]

// Using slice() method
const sliceWay = myString.slice(-2, -1);
console.log(sliceWay); // \[aq]t\[aq]

// Using at() method
const atWay = myString.at(-2);
console.log(atWay); // \[aq]t\[aq]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]String.prototype.at\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[CR]String.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.charCodeAt()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.codePointAt()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.split()\f[R]
