.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.Array" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Array()\f[B]\f[R] constructor creates \f[V]Array\f[R]
objects.
.SH Syntax
.IP
.nf
\f[C]
new Array()
new Array(element0)
new Array(element0, element1)
new Array(element0, element1, /* \&... ,*/ elementN)
new Array(arrayLength)

Array()
Array(element0)
Array(element0, element1)
Array(element0, element1, /* \&... ,*/ elementN)
Array(arrayLength)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]Array()\f[R] can be called with or without
\f[V]new\f[R].
Both create a new \f[V]Array\f[R] instance.
.RE
.SS Parameters
.IP \[bu] 2
\f[V]elementN\f[R]
.RS 2
.IP \[bu] 2
A JavaScript array is initialized with the given elements, except in the
case where a single argument is passed to the \f[V]Array\f[R]
constructor and that argument is a number (see the \f[V]arrayLength\f[R]
parameter below).
Note that this special case only applies to JavaScript arrays created
with the \f[V]Array\f[R] constructor, not array literals created with
the bracket syntax.
.RE
.IP \[bu] 2
\f[V]arrayLength\f[R]
.RS 2
.IP \[bu] 2
If the only argument passed to the \f[V]Array\f[R] constructor is an
integer between 0 and 232 - 1 (inclusive), this returns a new JavaScript
array with its \f[V]length\f[R] property set to that number
(\f[B]Note:\f[R] this implies an array of \f[V]arrayLength\f[R] empty
slots, not slots with actual \f[V]undefined\f[R] values \[em] see sparse
arrays).
.RE
.SS Exceptions
.IP \[bu] 2
\f[V]RangeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if there\[cq]s only one argument (\f[V]arrayLength\f[R]) that is
a number, but its value is not an integer or not between 0 and 232 - 1
(inclusive).
.RE
.SH Examples
.SS Array literal notation
.PP
Arrays can be created using the literal notation:
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];

console.log(fruits.length); // 2
console.log(fruits[0]); // \[dq]Apple\[dq]
\f[R]
.fi
.SS Array constructor with a single parameter
.PP
Arrays can be created using a constructor with a single number
parameter.
An array is created with its \f[V]length\f[R] property set to that
number, and the array elements are empty slots.
.IP
.nf
\f[C]
const arrayEmpty = new Array(2);

console.log(arrayEmpty.length); // 2
console.log(arrayEmpty[0]); // undefined; actually, it is an empty slot
console.log(0 in arrayEmpty); // false
console.log(1 in arrayEmpty); // false
\f[R]
.fi
.IP
.nf
\f[C]
const arrayOfOne = new Array(\[dq]2\[dq]); // Not the number 2 but the string \[dq]2\[dq]

console.log(arrayOfOne.length); // 1
console.log(arrayOfOne[0]); // \[dq]2\[dq]
\f[R]
.fi
.SS Array constructor with multiple parameters
.PP
If more than one argument is passed to the constructor, a new
\f[V]Array\f[R] with the given elements is created.
.IP
.nf
\f[C]
const fruits = new Array(\[dq]Apple\[dq], \[dq]Banana\[dq]);

console.log(fruits.length); // 2
console.log(fruits[0]); // \[dq]Apple\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
