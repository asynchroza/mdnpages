.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.toWellFormed" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
String.toWellFormed - String.prototype.toWellFormed()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toWellFormed()\f[B]\f[R] method of \f[V]String\f[R]
values returns a string where all lone surrogates of this string are
replaced with the Unicode replacement character U+FFFD.
.SH SYNTAX
.IP
.nf
\f[C]
toWellFormed()
\f[R]
.fi
.SS Return value
.PP
A new string that is a copy of this string, with all lone surrogates
replaced with the Unicode replacement character U+FFFD.
If \f[V]str\f[R] is well formed, a new string is still returned
(essentially a copy of \f[V]str\f[R]).
.SH DESCRIPTION
.PP
Strings in JavaScript are UTF-16 encoded.
UTF-16 encoding has the concept of \f[I]surrogate pairs\f[R], which is
introduced in detail in the UTF-16 characters, Unicode code points, and
grapheme clusters section.
.PP
\f[V]toWellFormed()\f[R] iterates through the code units of this string,
and replaces any lone surrogates with the Unicode replacement
character (https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character)
U+FFFD \f[V]ï¿½\f[R].
This ensures that the returned string is well-formed and can be used in
functions that expect well-formed strings, such as \f[V]encodeURI\f[R].
Compared to a custom implementation, \f[V]toWellFormed()\f[R] is more
efficient, as engines can directly access the internal representation of
strings.
.PP
When ill-formed strings are used in certain contexts, such as
\f[V]TextEncoder\f[R], they are automatically converted to well-formed
strings using the same replacement character.
When lone surrogates are rendered, they are also rendered as the
replacement character (a diamond with a question mark inside).
.SH EXAMPLES
.SS Using toWellFormed()
.IP
.nf
\f[C]
const strings = [
  // Lone high surrogate
  \[dq]ab\[rs]uD800\[dq],
  \[dq]ab\[rs]uD800c\[dq],
  // Lone low surrogate
  \[dq]\[rs]uDFFFab\[dq],
  \[dq]c\[rs]uDFFFab\[dq],
  // Well-formed
  \[dq]abc\[dq],
  \[dq]ab\[rs]uD83D\[rs]uDE04c\[dq],
];

for (const str of strings) {
  console.log(str.toWellFormed());
}
// Logs:
// \[dq]abï¿½\[dq]
// \[dq]abï¿½c\[dq]
// \[dq]ï¿½ab\[dq]
// \[dq]cï¿½ab\[dq]
// \[dq]abc\[dq]
// \[dq]abðŸ˜„c\[dq]
\f[R]
.fi
.SS Avoiding errors in encodeURI()
.PP
\f[V]encodeURI\f[R] throws an error if the string passed is not
well-formed.
This can be avoided by using \f[V]toWellFormed()\f[R] to convert the
string to a well-formed string first.
.IP
.nf
\f[C]
const illFormed = \[dq]https://example.com/search?q=\[rs]uD800\[dq];

try {
  encodeURI(illFormed);
} catch (e) {
  console.log(e); // URIError: URI malformed
}

console.log(encodeURI(illFormed.toWellFormed())); // \[dq]https://example.com/search?q=%EF%BF%BD\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]String.prototype.toWellFormed\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#well-formed-unicode-strings)
.IP \[bu] 2
\f[V]String.prototype.isWellFormed()\f[R]
.IP \[bu] 2
\f[V]String.prototype.normalize()\f[R]
