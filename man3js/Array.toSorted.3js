.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Array.toSorted" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.toSorted \- Array.prototype.toSorted()
.SH SYNOPSIS
The \f[B]\f[CB]toSorted()\f[B]\f[R] method of \f[CR]Array\f[R] instances
is the copying version of the \f[CR]sort()\f[R] method.
It returns a new array with the elements sorted in ascending order.
.SH SYNTAX
.IP
.EX
toSorted()
toSorted(compareFn)
.EE
.SS Parameters
.TP
\f[B]compareFn\f[R] \f[I](optional)\f[R]
Specifies a function that defines the sort order.
If omitted, the array elements are converted to strings, then sorted
according to each character\[cq]s Unicode code point value.
.RS
.TP
\f[B]a\f[R]
The first element for comparison.
.TP
\f[B]b\f[R]
The second element for comparison.
.RE
.SS Return value
A new array with the elements sorted in ascending order.
.SH DESCRIPTION
See \f[CR]sort()\f[R] for more information on the \f[CR]compareFn\f[R]
parameter.
.PP
When used on sparse arrays, the \f[CR]toSorted()\f[R] method iterates
empty slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]toSorted()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Sorting an array
.IP
.EX
const months = [\[dq]Mar\[dq], \[dq]Jan\[dq], \[dq]Feb\[dq], \[dq]Dec\[dq]];
const sortedMonths = months.toSorted();
console.log(sortedMonths); // [\[aq]Dec\[aq], \[aq]Feb\[aq], \[aq]Jan\[aq], \[aq]Mar\[aq]]
console.log(months); // [\[aq]Mar\[aq], \[aq]Jan\[aq], \[aq]Feb\[aq], \[aq]Dec\[aq]]

const values = [1, 10, 21, 2];
const sortedValues = values.toSorted((a, b) => a \- b);
console.log(sortedValues); // [1, 2, 10, 21]
console.log(values); // [1, 10, 21, 2]
.EE
.PP
For more usage examples, see \f[CR]sort()\f[R].
.SS Using toSorted() on sparse arrays
Empty slots are sorted as if they have the value \f[CR]undefined\f[R].
They are always sorted to the end of the array and \f[CR]compareFn\f[R]
is not called for them.
.IP
.EX
console.log([\[dq]a\[dq], \[dq]c\[dq], , \[dq]b\[dq]].toSorted()); // [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], undefined]
console.log([, undefined, \[dq]a\[dq], \[dq]b\[dq]].toSorted()); // [\[dq]a\[dq], \[dq]b\[dq], undefined, undefined]
.EE
.SS Calling toSorted() on non\-array objects
The \f[CR]toSorted()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R].
It then collects all existing integer\-keyed properties in the range of
\f[CR]0\f[R] to \f[CR]length \- 1\f[R], sorts them, and writes them into
a new array.
.IP
.EX
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  0: 5,
  2: 4,
  3: 3, // ignored by toSorted() since length is 3
};
console.log(Array.prototype.toSorted.call(arrayLike));
// [4, 5, undefined]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#change-array-by-copy
Polyfill of \f[CR]Array.prototype.toSorted\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array.prototype.sort()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.toReversed()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.toSpliced()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.with()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.toSorted()\f[R]
