.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.toSorted" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.toSorted - Array.prototype.toSorted()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toSorted()\f[B]\f[R] method of \f[V]Array\f[R] instances
is the copying version of the \f[V]sort()\f[R] method.
It returns a new array with the elements sorted in ascending order.
.SH SYNTAX
.IP
.nf
\f[C]
// Functionless
toSorted()

// Arrow function
toSorted((a, b) => { /* \&... */ })

// Compare function
toSorted(compareFn)

// Inline compare function
toSorted(function compareFn(a, b) { /* \&... */ })
\f[R]
.fi
.SS Parameters
.TP
\f[B]compareFn\f[R] \f[I](optional)\f[R]
Specifies a function that defines the sort order.
If omitted, the array elements are converted to strings, then sorted
according to each character\[cq]s Unicode code point value.
.RS
.TP
\f[B]a\f[R]
The first element for comparison.
.TP
\f[B]b\f[R]
The second element for comparison.
.RE
.SS Return value
.PP
A new array with the elements sorted in ascending order.
.SH DESCRIPTION
.PP
See \f[V]sort()\f[R] for more information on the \f[V]compareFn\f[R]
parameter.
.PP
When used on sparse arrays, the \f[V]toSorted()\f[R] method iterates
empty slots as if they have the value \f[V]undefined\f[R].
.PP
The \f[V]toSorted()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Sorting an array
.IP
.nf
\f[C]
const months = [\[dq]Mar\[dq], \[dq]Jan\[dq], \[dq]Feb\[dq], \[dq]Dec\[dq]];
const sortedMonths = months.toSorted();
console.log(sortedMonths); // [\[aq]Dec\[aq], \[aq]Feb\[aq], \[aq]Jan\[aq], \[aq]Mar\[aq]]
console.log(months); // [\[aq]Mar\[aq], \[aq]Jan\[aq], \[aq]Feb\[aq], \[aq]Dec\[aq]]

const values = [1, 10, 21, 2];
const sortedValues = values.toSorted((a, b) => a - b);
console.log(sortedValues); // [1, 2, 10, 21]
console.log(values); // [1, 10, 21, 2]
\f[R]
.fi
.PP
For more usage examples, see \f[V]sort()\f[R].
.SS Using toSorted() on sparse arrays
.PP
Empty slots are sorted as if they have the value \f[V]undefined\f[R].
They are always sorted to the end of the array and \f[V]compareFn\f[R]
is not called for them.
.IP
.nf
\f[C]
console.log([\[dq]a\[dq], \[dq]c\[dq], , \[dq]b\[dq]].toSorted()); // [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], undefined]
console.log([, undefined, \[dq]a\[dq], \[dq]b\[dq]].toSorted()); // [\[dq]a\[dq], \[dq]b\[dq], undefined, undefined]
\f[R]
.fi
.SS Calling toSorted() on non-array objects
.PP
The \f[V]toSorted()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
It then collects all existing integer-keyed properties in the range of
\f[V]0\f[R] to \f[V]length - 1\f[R], sorts them, and writes them into a
new array.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  0: 5,
  2: 4,
};
console.log(Array.prototype.toSorted.call(arrayLike));
// [4, 5, undefined]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.toSorted\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#change-array-by-copy)
.IP \[bu] 2
\f[V]Array.prototype.sort()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toReversed()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toSpliced()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.with()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.toSorted()\f[R]
