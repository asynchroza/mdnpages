.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.preventExtensions" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Reflect.preventExtensions()\f[B]\f[R] static method is
like \f[V]Object.preventExtensions()\f[R].
It prevents new properties from ever being added to an object (i.e.,
prevents future extensions to the object).
.SH Syntax
.IP
.nf
\f[C]
Reflect.preventExtensions(target)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
The target object on which to prevent extensions.
.RE
.SS Return value
.PP
A \f[V]Boolean\f[R] indicating whether or not the target was
successfully set to prevent extensions.
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]target\f[R] is not an object.
.RE
.SH Description
.PP
\f[V]Reflect.preventExtensions()\f[R] provides the reflective semantic
of preventing extensions of an object.
The differences with \f[V]Object.preventExtensions()\f[R] are:
.IP \[bu] 2
\f[V]Reflect.preventExtensions()\f[R] throws a \f[V]TypeError\f[R] if
the target is not an object, while \f[V]Object.preventExtensions()\f[R]
always returns non-object targets as-is.
.IP \[bu] 2
\f[V]Reflect.preventExtensions()\f[R] returns a \f[V]Boolean\f[R]
indicating whether or not the target was successfully set to prevent
extensions, while \f[V]Object.preventExtensions()\f[R] returns the
target object.
.PP
\f[V]Reflect.preventExtensions()\f[R] invokes the
\f[V][[PreventExtensions]]\f[R] object internal method of
\f[V]target\f[R].
.SH Examples
.SS Using Reflect.preventExtensions()
.PP
See also \f[V]Object.preventExtensions()\f[R].
.IP
.nf
\f[C]
// Objects are extensible by default.
const empty = {};
Reflect.isExtensible(empty); // true

// ...but that can be changed.
Reflect.preventExtensions(empty);
Reflect.isExtensible(empty); // false
\f[R]
.fi
.SS Difference with Object.preventExtensions()
.PP
If the \f[V]target\f[R] argument to this method is not an object (a
primitive), then it will cause a \f[V]TypeError\f[R].
With \f[V]Object.preventExtensions()\f[R], a non-object \f[V]target\f[R]
will be returned as-is without any errors.
.IP
.nf
\f[C]
Reflect.preventExtensions(1);
// TypeError: 1 is not an object

Object.preventExtensions(1);
// 1
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Reflect.preventExtensions\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]Object.preventExtensions()\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]preventExtensions\f[R] handler
