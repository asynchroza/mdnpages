.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "WeakMap" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
WeakMap - WeakMap
.SH SYNOPSIS
.PP
A \f[B]\f[VB]WeakMap\f[B]\f[R] is a collection of key/value pairs whose
keys must be objects or non-registered symbols, with values of any
arbitrary JavaScript type, and which does not create strong references
to its keys.
That is, an object\[cq]s presence as a key in a \f[V]WeakMap\f[R] does
not prevent the object from being garbage collected.
Once an object used as a key has been collected, its corresponding
values in any \f[V]WeakMap\f[R] become candidates for garbage collection
as well \[em] as long as they aren\[cq]t strongly referred to elsewhere.
The only primitive type that can be used as a \f[V]WeakMap\f[R] key is
symbol \[em] more specifically, non-registered symbols \[em] because
non-registered symbols are guaranteed to be unique and cannot be
re-created.
.PP
\f[V]WeakMap\f[R] allows associating data to objects in a way that
doesn\[cq]t prevent the key objects from being collected, even if the
values reference the keys.
However, a \f[V]WeakMap\f[R] doesn\[cq]t allow observing the liveness of
its keys, which is why it doesn\[cq]t allow enumeration; if a
\f[V]WeakMap\f[R] exposed any method to obtain a list of its keys, the
list would depend on the state of garbage collection, introducing
non-determinism.
If you want to have a list of keys, you should use a \f[V]Map\f[R]
rather than a \f[V]WeakMap\f[R].
.PP
You can learn more about \f[V]WeakMap\f[R] in the WeakMap object section
of the Keyed collections guide.
.SH DESCRIPTION
.PP
Keys of WeakMaps must be garbage-collectable.
Most primitive data types can be arbitrarily created and don\[cq]t have
a lifetime, so they cannot be used as keys.
Objects and non-registered symbols can be used as keys because they are
garbage-collectable.
.SS Why WeakMap?
.PP
A map API \f[I]could\f[R] be implemented in JavaScript with two arrays
(one for keys, one for values) shared by the four API methods.
Setting elements on this map would involve pushing a key and value onto
the end of each of those arrays simultaneously.
As a result, the indices of the key and value would correspond to both
arrays.
Getting values from the map would involve iterating through all keys to
find a match, then using the index of this match to retrieve the
corresponding value from the array of values.
.PP
Such an implementation would have two main inconveniences:
.IP "1." 3
The first one is an \f[V]O(n)\f[R] set and search (\f[I]n\f[R] being the
number of keys in the map) since both operations must iterate through
the list of keys to find a matching value.
.IP "2." 3
The second inconvenience is a memory leak because the arrays ensure that
references to each key and each value are maintained indefinitely.
These references prevent the keys from being garbage collected, even if
there are no other references to the object.
This would also prevent the corresponding values from being garbage
collected.
.PP
By contrast, in a \f[V]WeakMap\f[R], a key object refers strongly to its
contents as long as the key is not garbage collected, but weakly from
then on.
As such, a \f[V]WeakMap\f[R]:
.IP \[bu] 2
does not prevent garbage collection, which eventually removes references
to the key object
.IP \[bu] 2
allows garbage collection of any values if their key objects are not
referenced from somewhere other than a \f[V]WeakMap\f[R]
.PP
A \f[V]WeakMap\f[R] can be a particularly useful construct when mapping
keys to information about the key that is valuable \f[I]only if\f[R] the
key has not been garbage collected.
.PP
But because a \f[V]WeakMap\f[R] doesn\[cq]t allow observing the liveness
of its keys, its keys are not enumerable.
There is no method to obtain a list of the keys.
If there were, the list would depend on the state of garbage collection,
introducing non-determinism.
If you want to have a list of keys, you should use a \f[V]Map\f[R].
.SH CONSTRUCTOR
.TP
\f[B]WeakMap()\f[R]
Creates a new \f[V]WeakMap\f[R] object.
.SH INSTANCE PROPERTIES
.PP
These properties are defined on \f[V]WeakMap.prototype\f[R] and shared
by all \f[V]WeakMap\f[R] instances.
.TP
\f[B]WeakMap.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[V]WeakMap\f[R] instances, the initial value is the
\f[V]WeakMap\f[R] constructor.
.TP
\f[B]WeakMap.prototype[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]WeakMap\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]WeakMap.prototype.delete()\f[R]
Removes any value associated to the \f[V]key\f[R].
\f[V]WeakMap.prototype.has(key)\f[R] will return \f[V]false\f[R]
afterwards.
.TP
\f[B]WeakMap.prototype.get()\f[R]
Returns the value associated to the \f[V]key\f[R], or
\f[V]undefined\f[R] if there is none.
.TP
\f[B]WeakMap.prototype.has()\f[R]
Returns a Boolean asserting whether a value has been associated to the
\f[V]key\f[R] in the \f[V]WeakMap\f[R] object or not.
.TP
\f[B]WeakMap.prototype.set()\f[R]
Sets the \f[V]value\f[R] for the \f[V]key\f[R] in the \f[V]WeakMap\f[R]
object.
Returns the \f[V]WeakMap\f[R] object.
.SH EXAMPLES
.SS Using WeakMap
.IP
.nf
\f[C]
const wm1 = new WeakMap();
const wm2 = new WeakMap();
const wm3 = new WeakMap();
const o1 = {};
const o2 = function () {};
const o3 = window;

wm1.set(o1, 37);
wm1.set(o2, \[dq]azerty\[dq]);
wm2.set(o1, o2); // a value can be anything, including an object or a function
wm2.set(o3, undefined);
wm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!

wm1.get(o2); // \[dq]azerty\[dq]
wm2.get(o2); // undefined, because there is no key for o2 on wm2
wm2.get(o3); // undefined, because that is the set value

wm1.has(o2); // true
wm2.has(o2); // false
wm2.has(o3); // true (even if the value itself is \[aq]undefined\[aq])

wm3.set(o1, 37);
wm3.get(o1); // 37

wm1.has(o1); // true
wm1.delete(o1);
wm1.has(o1); // false
\f[R]
.fi
.SS Implementing a WeakMap-like class with a .clear() method
.IP
.nf
\f[C]
class ClearableWeakMap {
  #wm;
  constructor(init) {
    this.#wm = new WeakMap(init);
  }
  clear() {
    this.#wm = new WeakMap();
  }
  delete(k) {
    return this.#wm.delete(k);
  }
  get(k) {
    return this.#wm.get(k);
  }
  has(k) {
    return this.#wm.has(k);
  }
  set(k, v) {
    this.#wm.set(k, v);
    return this;
  }
}
\f[R]
.fi
.SS Emulating private members
.PP
Developers can use a \f[V]WeakMap\f[R] to associate private data to an
object, with the following benefits:
.IP \[bu] 2
Compared to a \f[V]Map\f[R], a WeakMap does not hold strong references
to the object used as the key, so the metadata shares the same lifetime
as the object itself, avoiding memory leaks.
.IP \[bu] 2
Compared to using non-enumerable and/or \f[V]Symbol\f[R] properties, a
WeakMap is external to the object and there is no way for user code to
retrieve the metadata through reflective methods like
\f[V]Object.getOwnPropertySymbols\f[R].
.IP \[bu] 2
Compared to a closure, the same WeakMap can be reused for all instances
created from a constructor, making it more memory-efficient, and allows
different instances of the same class to read the private members of
each other.
.IP
.nf
\f[C]
let Thing;

{
  const privateScope = new WeakMap();
  let counter = 0;

  Thing = function () {
    this.someProperty = \[dq]foo\[dq];

    privateScope.set(this, {
      hidden: ++counter,
    });
  };

  Thing.prototype.showPublic = function () {
    return this.someProperty;
  };

  Thing.prototype.showPrivate = function () {
    return privateScope.get(this).hidden;
  };
}

console.log(typeof privateScope);
// \[dq]undefined\[dq]

const thing = new Thing();

console.log(thing);
// Thing {someProperty: \[dq]foo\[dq]}

thing.showPublic();
// \[dq]foo\[dq]

thing.showPrivate();
// 1
\f[R]
.fi
.PP
This is roughly equivalent to the following, using private fields:
.IP
.nf
\f[C]
class Thing {
  static #counter = 0;
  #hidden;
  constructor() {
    this.someProperty = \[dq]foo\[dq];
    this.#hidden = ++Thing.#counter;
  }
  showPublic() {
    return this.someProperty;
  }
  showPrivate() {
    return this.#hidden;
  }
}

console.log(thing);
// Thing {someProperty: \[dq]foo\[dq]}

thing.showPublic();
// \[dq]foo\[dq]

thing.showPrivate();
// 1
\f[R]
.fi
.SS Associating metadata
.PP
A \f[V]WeakMap\f[R] can be used to associate metadata with an object,
without affecting the lifetime of the object itself.
This is very similar to the private members example, since private
members are also modelled as external metadata that doesn\[cq]t
participate in prototypical inheritance.
.PP
This use case can be extended to already-created objects.
For example, on the web, we may want to associate extra data with a DOM
element, which the DOM element may access later.
A common approach is to attach the data as a property:
.IP
.nf
\f[C]
const buttons = document.querySelectorAll(\[dq].button\[dq]);
buttons.forEach((button) => {
  button.clicked = false;
  button.addEventListener(\[dq]click\[dq], () => {
    button.clicked = true;
    const currentButtons = [...document.querySelectorAll(\[dq].button\[dq])];
    if (currentButtons.every((button) => button.clicked)) {
      console.log(\[dq]All buttons have been clicked!\[dq]);
    }
  });
});
\f[R]
.fi
.PP
This approach works, but it has a few pitfalls:
.IP \[bu] 2
The \f[V]clicked\f[R] property is enumerable, so it will show up in
\f[V]Object.keys(button)\f[R], \f[V]for...in\f[R] loops, etc.
This can be mitigated by using \f[V]Object.defineProperty()\f[R], but
that makes the code more verbose.
.IP \[bu] 2
The \f[V]clicked\f[R] property is a normal string property, so it can be
accessed and overwritten by other code.
This can be mitigated by using a \f[V]Symbol\f[R] key, but the key would
still be accessible via \f[V]Object.getOwnPropertySymbols()\f[R].
.PP
Using a \f[V]WeakMap\f[R] fixes these:
.IP
.nf
\f[C]
const buttons = document.querySelectorAll(\[dq].button\[dq]);
const clicked = new WeakMap();
buttons.forEach((button) => {
  clicked.set(button, false);
  button.addEventListener(\[dq]click\[dq], () => {
    clicked.set(button, true);
    const currentButtons = [...document.querySelectorAll(\[dq].button\[dq])];
    if (currentButtons.every((button) => clicked.get(button))) {
      console.log(\[dq]All buttons have been clicked!\[dq]);
    }
  });
});
\f[R]
.fi
.PP
Here, only code that has access to \f[V]clicked\f[R] knows the clicked
state of each button, and external code can\[cq]t modify the states.
In addition, if any of the buttons gets removed from the DOM, the
associated metadata will automatically get garbage-collected.
.SS Caching
.PP
You can associate objects passed to a function with the result of the
function, so that if the same object is passed again, the cached result
can be returned without re-executing the function.
This is useful if the function is pure (i.e.\ it doesn\[cq]t mutate any
outside objects or cause other observable side effects).
.IP
.nf
\f[C]
const cache = new WeakMap();
function handleObjectValues(obj) {
  if (cache.has(obj)) {
    return cache.get(obj);
  }
  const result = Object.values(obj).map(heavyComputation);
  cache.set(obj, result);
  return result;
}
\f[R]
.fi
.PP
This only works if your function\[cq]s input is an object.
Moreover, even if the input is never passed in again, the result still
remains forever in the cache.
A more effective way is to use a \f[V]Map\f[R] paired with
\f[V]WeakRef\f[R] objects, which allows you to associate any type of
input value with its respective (potentially large) computation result.
See the WeakRefs and FinalizationRegistry example for more details.
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]WeakMap\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#weakmap)
.IP \[bu] 2
WeakMap object in the Keyed collections guide
.IP \[bu] 2
Hiding Implementation Details with ECMAScript 6
WeakMaps (https://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html)
.IP \[bu] 2
\f[V]Map\f[R]
.IP \[bu] 2
\f[V]Set\f[R]
.IP \[bu] 2
\f[V]WeakSet\f[R]
