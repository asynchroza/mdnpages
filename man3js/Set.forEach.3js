.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Set.forEach" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]forEach()\f[B]\f[R] method executes a provided function
once for each value in the \f[V]Set\f[R] object, in insertion order.
.SH Syntax
.IP
.nf
\f[C]
forEach(callbackFn)
forEach(callbackFn, thisArg)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]callback\f[R]
.RS 2
.IP \[bu] 2
A function to execute for each entry in the set.
The function is called with the following arguments:
.RS 2
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
Value of each iteration.
.RE
.IP \[bu] 2
\f[V]key\f[R]
.RS 2
.IP \[bu] 2
Key of each iteration.
This is always the same as \f[V]value\f[R].
.RE
.IP \[bu] 2
\f[V]set\f[R]
.RS 2
.IP \[bu] 2
The set being iterated.
.RE
.RE
.RE
.IP \[bu] 2
\f[V]thisArg\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A value to use as \f[V]this\f[R] when executing \f[V]callbackFn\f[R].
.RE
.SS Return value
.PP
\f[V]undefined\f[R].
.SH Description
.PP
The \f[V]forEach()\f[R] method executes the provided \f[V]callback\f[R]
once for each value which actually exists in the \f[V]Set\f[R] object.
It is not invoked for values which have been deleted.
However, it is executed for values which are present but have the value
\f[V]undefined\f[R].
.PP
\f[V]callback\f[R] is invoked with \f[B]three arguments\f[R]:
.IP \[bu] 2
the \f[B]element value\f[R]
.IP \[bu] 2
the \f[B]element key\f[R]
.IP \[bu] 2
the \f[B]\f[VB]Set\f[B] object being traversed\f[R]
.PP
There are no keys in \f[V]Set\f[R] objects, however, so the first two
arguments are both \f[B]values\f[R] contained in the \f[V]Set\f[R].
This is to make it consistent with other \f[V]forEach()\f[R] methods for
\f[V]Map\f[R] and \f[V]Array\f[R].
.PP
If a \f[V]thisArg\f[R] parameter is provided to \f[V]forEach()\f[R], it
will be passed to \f[V]callback\f[R] when invoked, for use as its
\f[V]this\f[R] value.
Otherwise, the value \f[V]undefined\f[R] will be passed for use as its
\f[V]this\f[R] value.
The \f[V]this\f[R] value ultimately observable by \f[V]callback\f[R] is
determined according to the usual rules for determining the
\f[V]this\f[R] seen by a function.
.PP
Each value is visited once, except in the case when it was deleted and
re-added before \f[V]forEach()\f[R] has finished.
\f[V]callback\f[R] is not invoked for values deleted before being
visited.
New values added before \f[V]forEach()\f[R] has finished will be
visited.
.PP
\f[V]forEach()\f[R] executes the \f[V]callback\f[R] function once for
each element in the \f[V]Set\f[R] object; it does not return a value.
.SH Examples
.SS Logging the contents of a Set object
.PP
The following code logs a line for each element in a \f[V]Set\f[R]
object:
.IP
.nf
\f[C]
function logSetElements(value1, value2, set) {
  console.log(\[ga]s[${value1}] = ${value2}\[ga]);
}

new Set([\[dq]foo\[dq], \[dq]bar\[dq], undefined]).forEach(logSetElements);

// Logs:
// \[dq]s[foo] = foo\[dq]
// \[dq]s[bar] = bar\[dq]
// \[dq]s[undefined] = undefined\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.forEach()\f[R]
