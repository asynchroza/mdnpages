.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.values" "JS" "April 17, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.values - Array.prototype.values()
.SH SYNOPSIS
The \f[B]\f[CB]values()\f[B]\f[R] method returns a new \f[I]array
iterator\f[R] object that iterates the value of each item in the array.
.SH SYNTAX
.IP
.EX
values()
.EE
.SS Return value
A new iterable iterator object.
.SH DESCRIPTION
\f[CR]Array.prototype.values()\f[R] is the default implementation of
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R].
.IP
.EX
Array.prototype.values === Array.prototype[Symbol.iterator]; // true
.EE
.PP
When used on sparse arrays, the \f[CR]values()\f[R] method iterates
empty slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]values()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Iteration using for\&...of loop
Because \f[CR]values()\f[R] returns an iterable iterator, you can use a
\f[CR]for...of\f[R] loop to iterate it.
.IP
.EX
const arr = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq], \[dq]e\[dq]];
const iterator = arr.values();

for (const letter of iterator) {
  console.log(letter);
} // \[dq]a\[dq] \[dq]b\[dq] \[dq]c\[dq] \[dq]d\[dq] \[dq]e\[dq]
.EE
.SS Iteration using next()
Because the return value is also an iterator, you can directly call its
\f[CR]next()\f[R] method.
.IP
.EX
const arr = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq], \[dq]e\[dq]];
const iterator = arr.values();
iterator.next(); // { value: \[dq]a\[dq], done: false }
iterator.next(); // { value: \[dq]b\[dq], done: false }
iterator.next(); // { value: \[dq]c\[dq], done: false }
iterator.next(); // { value: \[dq]d\[dq], done: false }
iterator.next(); // { value: \[dq]e\[dq], done: false }
iterator.next(); // { value: undefined, done: true }
console.log(iterator.next().value); // undefined
.EE
.SS Reusing the iterable
.RS
.PP
\f[B]Warning:\f[R] The array iterator object should be a one-time use
object.
Do not reuse it.
.RE
.PP
The iterable returned from \f[CR]values()\f[R] is not reusable.
When \f[CR]next().done = true\f[R] or \f[CR]currentIndex > length\f[R],
the \f[CR]for...of\f[R] loop ends, and further iterating it has no
effect.
.IP
.EX
const arr = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq], \[dq]e\[dq]];
const values = arr.values();
for (const letter of values) {
  console.log(letter);
}
// \[dq]a\[dq] \[dq]b\[dq] \[dq]c\[dq] \[dq]d\[dq] \[dq]e\[dq]
for (const letter of values) {
  console.log(letter);
}
// undefined
.EE
.PP
If you use a \f[CR]break\f[R] statement to end the iteration early, the
iterator can resume from the current position when continuing to iterate
it.
.IP
.EX
const arr = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq], \[dq]e\[dq]];
const values = arr.values();
for (const letter of values) {
  console.log(letter);
  if (letter === \[dq]b\[dq]) {
    break;
  }
}
// \[dq]a\[dq] \[dq]b\[dq]

for (const letter of values) {
  console.log(letter);
}
// \[dq]c\[dq] \[dq]d\[dq] \[dq]e\[dq]
.EE
.SS Mutations during iteration
There are no values stored in the array iterator object returned from
\f[CR]values()\f[R]; instead, it stores the address of the array used in
its creation, and reads the currently visited index on each iteration.
Therefore, its iteration output depends on the value stored in that
index at the time of stepping.
If the values in the array changed, the array iterator object\[cq]s
values change too.
.IP
.EX
const arr = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq], \[dq]e\[dq]];
const iterator = arr.values();
console.log(iterator); // Array Iterator { }
console.log(iterator.next().value); // \[dq]a\[dq]
arr[1] = \[dq]n\[dq];
console.log(iterator.next().value); // \[dq]n\[dq]
.EE
.SS Iterating sparse arrays
\f[CR]values()\f[R] will visit empty slots as if they are
\f[CR]undefined\f[R].
.IP
.EX
for (const element of [, \[dq]a\[dq]].values()) {
  console.log(element);
}
// undefined
// \[aq]a\[aq]
.EE
.SS Calling values() on non-array objects
The \f[CR]values()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each integer index.
.IP
.EX
const arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
};
for (const entry of Array.prototype.values.call(arrayLike)) {
  console.log(entry);
}
// a
// b
// c
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.prototype.values\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.values()\f[R]
.IP \[bu] 2
Iteration protocols
