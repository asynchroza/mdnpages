.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FileSystemSyncAccessHandle.write" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemSyncAccessHandle.write \- FileSystemSyncAccessHandle: write()
method
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]write()\f[B]\f[R] method of the
\f[CR]FileSystemSyncAccessHandle\f[R] interface writes the content of a
specified buffer to the file associated with the handle, optionally at a
given offset.
.PP
Files within the origin private file system are not visible to
end\-users, therefore are not subject to the same security checks as
methods running on files within the user\-visible file system.
As a result, writes performed using
\f[CR]FileSystemSyncAccessHandle.write()\f[R] are much more performant.
This makes them suitable for significant, large\-scale file updates such
as \c
.UR https://www.sqlite.org/wasm
SQLite
.UE \c
\ database modifications.
.SH SYNTAX
.IP
.EX
write(buffer, options)
.EE
.SS Parameters
.TP
\f[B]buffer\f[R]
An \f[CR]ArrayBuffer\f[R] or \f[CR]ArrayBufferView\f[R] (such as a
\f[CR]DataView\f[R]) representing the buffer to be written to the file.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object containing the following properties:
.RS
.TP
\f[B]at\f[R]
A number representing the offset in bytes from the start of the file
that the buffer should be written at.
.RE
.RS
.PP
\f[B]Note:\f[R] You cannot directly manipulate the contents of an
\f[CR]ArrayBuffer\f[R].
Instead, you create a typed array object like an \f[CR]Int8Array\f[R] or
a \f[CR]DataView\f[R] object, which represents the buffer in a specific
format, and use that to read and write the contents of the buffer.
.RE
.SS Return value
A number representing the number of bytes written to the file.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the associated access handle is already closed, or if the
modification of the file\[cq]s binary data completely fails.
.TP
\f[B]QuotaExceededError\f[R] \f[B]DOMException\f[R]
Thrown if the increased data capacity exceeds the browser\[cq]s storage
quota.
.TP
\f[B]TypeError\f[R]
Thrown if the underlying file system does not support writing the file
from the specified file offset.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP \[bu] 2
Creates a synchronous file access handle.
.IP \[bu] 2
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP \[bu] 2
Reads the file contents into the buffer.
.IP \[bu] 2
Encodes the message and writes it to the end of the file.
.IP \[bu] 2
Persists the changes to disk and closes the access handle.
.IP
.EX
onmessage = async (e) => {
  // Retrieve message sent to work from main script
  const message = e.data;

  // Get handle to draft file
  const root = await navigator.storage.getDirectory();
  const draftHandle = await root.getFileHandle(\[dq]draft.txt\[dq], { create: true });
  // Get sync access handle
  const accessHandle = await draftHandle.createSyncAccessHandle();

  // Get size of the file.
  const fileSize = accessHandle.getSize();
  // Read file content to a buffer.
  const buffer = new DataView(new ArrayBuffer(fileSize));
  const readBuffer = accessHandle.read(buffer, { at: 0 });

  // Write the message to the end of the file.
  const encoder = new TextEncoder();
  const encodedMessage = encoder.encode(message);
  const writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  // Persist changes to disk.
  accessHandle.flush();

  // Always close FileSystemSyncAccessHandle if done.
  accessHandle.close();
};
.EE
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR
https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
