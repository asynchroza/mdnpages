.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Iterator.some" "JS" "August 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.some - Iterator.prototype.some()
.SH SYNOPSIS
The \f[B]\f[CB]some()\f[B]\f[R] method of \f[CR]Iterator\f[R] instances
is similar to \f[CR]Array.prototype.some()\f[R]: it tests whether at
least one element in the array passes the test implemented by the
provided function.
It returns a boolean value.
.SH SYNTAX
.IP
.EX
some(callbackFn)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element produced by the iterator.
It should return a truthy value to indicate the element passes the test,
and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed.
.TP
\f[B]index\f[R]
The index of the current element being processed.
.RE
.SS Return value
\f[CR]true\f[R] if the callback function returns a truthy value for at
least one element.
Otherwise, \f[CR]false\f[R].
.SH DESCRIPTION
\f[CR]some()\f[R] iterates the iterator and invokes the
\f[CR]callbackFn\f[R] function once for each element.
It returns \f[CR]true\f[R] immediately if the callback function returns
a truthy value.
Otherwise, it iterates until the end of the iterator and returns
\f[CR]false\f[R].
If \f[CR]some()\f[R] returns \f[CR]true\f[R], the underlying iterator is
closed by calling its \f[CR]return()\f[R] method.
.PP
The main advantage of iterator helpers over array methods is their
ability to work with infinite iterators.
With infinite iterators, \f[CR]some()\f[R] returns \f[CR]true\f[R] as
soon as the first truthy value is found.
If the \f[CR]callbackFn\f[R] always returns a falsy value, the method
never returns.
.SH EXAMPLES
.SS Using some()
.IP
.EX
function* fibonacci() {
  let current = 1;
  let next = 1;
  while (true) {
    yield current;
    [current, next] = [next, current + next];
  }
}

const isEven = (x) => x % 2 === 0;
console.log(fibonacci().some(isEven)); // true

const isNegative = (x) => x < 0;
const isPositive = (x) => x > 0;
console.log(fibonacci().take(10).some(isPositive)); // false
console.log(fibonacci().some(isNegative)); // Never completes
.EE
.PP
Calling \f[CR]some()\f[R] always closes the underlying iterator, even if
the method early-returns.
The iterator is never left in a half-way state.
.IP
.EX
const seq = fibonacci();
console.log(seq.some(isEven)); // true
console.log(seq.next()); // { value: undefined, done: true }
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Iterator.prototype.some\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#iterator-helpers)
.IP \[bu] 2
\f[CR]Iterator\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.some()\f[R]
