.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Iterator.from" "JS" "August 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.from - Iterator.from()
.SH SYNOPSIS
The \f[B]\f[CB]Iterator.from()\f[B]\f[R] static method creates a new
\f[CR]Iterator\f[R] object from an iterator or iterable object.
.SH SYNTAX
.IP
.EX
from(object)
.EE
.SS Parameters
.TP
\f[B]object\f[R]
An object that implements the iterable protocol or the iterator
protocol.
.SS Return value
If \f[CR]object\f[R] is an iterable, its \f[CR]\[at]\[at]iterator\f[R]
method is called to obtain the iterator.
Otherwise, \f[CR]object\f[R] is assumed to be an iterator.
If the iterator is already \f[CR]instanceof\f[R] \f[CR]Iterator\f[R]
(which means it has \f[CR]Iterator.prototype\f[R] in its prototype
chain), it is returned directly.
Otherwise, a new \f[CR]Iterator\f[R] object is created that wraps the
original iterator.
.SH DESCRIPTION
This method exists to convert custom iterators, probably exported by
libraries, to proper iterators.
All iterator objects returned by \f[CR]Iterator.from()\f[R] inherit from
a common prototype object, which has the following methods:
.TP
\f[B]next()\f[R]
Calls the underlying iterator\[cq]s \f[CR]next()\f[R] method and returns
the result.
.TP
\f[B]return()\f[R]
Calls the underlying iterator\[cq]s \f[CR]return()\f[R] method and
returns the result, or returns
\f[CR]{ value: undefined, done: true }\f[R] if the underlying iterator
doesn\[cq]t have a \f[CR]return()\f[R] method.
.SH EXAMPLES
.SS Converting an iterable to a proper iterator
Because \f[CR]obj\f[R] is already an iterable that returns a proper
iterator when its \f[CR]\[at]\[at]iterator\f[R] method is called,
\f[CR]Iterator.from(obj)\f[R] returns the same iterator.
.IP
.EX
const iterator = (function* () {
  yield 1;
  yield 2;
  yield 3;
})();

const obj = {
  [Symbol.iterator]() {
    return iterator;
  },
};

const iterator2 = Iterator.from(obj);
console.log(iterator2 === iterator); // true
.EE
.PP
Because \f[CR]obj2\f[R] is an iterable that returns a non-proper
iterator when its \f[CR]\[at]\[at]iterator\f[R] method is called,
\f[CR]Iterator.from(obj2)\f[R] returns a new iterator that wraps the
original iterator.
.IP
.EX
const iterator = {
  current: 0,
  next() {
    return { value: this.current++, done: false };
  },
};

const obj2 = {
  [Symbol.iterator]() {
    return iterator;
  },
};

const iterator2 = Iterator.from(obj2);
console.log(iterator2 === iterator); // false
console.log(iterator2.next()); // { value: 0, done: false }
console.log(iterator.next()); // { value: 1, done: false }
.EE
.SS Converting an iterator to a proper iterator
Because \f[CR]obj\f[R] is already a proper iterator,
\f[CR]Iterator.from(obj)\f[R] returns itself.
.IP
.EX
const obj = (function* () {
  yield 1;
  yield 2;
  yield 3;
})();

const iterator = Iterator.from(obj);
console.log(iterator === obj); // true
.EE
.PP
Because \f[CR]obj2\f[R] is a non-proper iterator,
\f[CR]Iterator.from(obj2)\f[R] returns a new iterator that wraps the
original iterator.
.IP
.EX
const obj2 = {
  current: 0,
  next() {
    return { value: this.current++, done: false };
  },
};

const iterator = Iterator.from(obj2);
console.log(iterator === obj2); // false
console.log(iterator.next()); // { value: 0, done: false }
console.log(obj2.next()); // { value: 1, done: false }
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Iterator.from\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#iterator-helpers)
.IP \[bu] 2
\f[CR]Iterator\f[R]
.IP \[bu] 2
\f[CR]Array.from()\f[R]
