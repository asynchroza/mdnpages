.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MutationObserver.observe" "JS" "December 9, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationObserver.observe \- MutationObserver: observe() method
.SH SYNOPSIS
The \f[CR]MutationObserver\f[R] method \f[B]\f[CB]observe()\f[B]\f[R]
configures the \f[CR]MutationObserver\f[R] callback to begin receiving
notifications of changes to the DOM that match the given options.
.PP
Depending on the configuration, the observer may watch a single
\f[CR]Node\f[R] in the DOM tree, or that node and some or all of its
descendant nodes.
.PP
To stop the \f[CR]MutationObserver\f[R] (so that none of its callbacks
will be triggered any longer), call
\f[CR]MutationObserver.disconnect()\f[R].
.SH SYNTAX
.IP
.EX
observe(target, options)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A DOM \f[CR]Node\f[R] (which may be an \f[CR]Element\f[R]) within the
DOM tree to watch for changes, or to be the root of a subtree of nodes
to be watched.
.TP
\f[B]options\f[R]
An object providing options that describe which DOM mutations should be
reported to \f[CR]mutationObserver\f[R]\[cq]s \f[CR]callback\f[R].
At a minimum, one of \f[CR]childList\f[R], \f[CR]attributes\f[R], and/or
\f[CR]characterData\f[R] must be \f[CR]true\f[R] when you call
\f[CR]observe()\f[R].
Otherwise, a \f[CR]TypeError\f[R] exception will be thrown.
.RS
.PP
Options are as follows:
.TP
\f[B]subtree\f[R] \f[I](optional)\f[R]
Set to \f[CR]true\f[R] to extend monitoring to the entire subtree of
nodes rooted at \f[CR]target\f[R].
All of the other properties are then extended to all of the nodes in the
subtree instead of applying solely to the \f[CR]target\f[R] node.
The default value is \f[CR]false\f[R].
.TP
\f[B]childList\f[R] \f[I](optional)\f[R]
Set to \f[CR]true\f[R] to monitor the target node (and, if
\f[CR]subtree\f[R] is \f[CR]true\f[R], its descendants) for the addition
of new child nodes or removal of existing child nodes.
The default value is \f[CR]false\f[R].
.TP
\f[B]attributes\f[R] \f[I](optional)\f[R]
Set to \f[CR]true\f[R] to watch for changes to the value of attributes
on the node or nodes being monitored.
The default value is \f[CR]true\f[R] if either of
\f[CR]attributeFilter\f[R] or \f[CR]attributeOldValue\f[R] is specified,
otherwise the default value is \f[CR]false\f[R].
.TP
\f[B]attributeFilter\f[R] \f[I](optional)\f[R]
An array of specific attribute names to be monitored.
If this property isn\[cq]t included, changes to all attributes cause
mutation notifications.
.TP
\f[B]attributeOldValue\f[R] \f[I](optional)\f[R]
Set to \f[CR]true\f[R] to record the previous value of any attribute
that changes when monitoring the node or nodes for attribute changes;
See Monitoring attribute values for an example of watching for attribute
changes and recording values.
The default value is \f[CR]false\f[R].
.TP
\f[B]characterData\f[R] \f[I](optional)\f[R]
Set to \f[CR]true\f[R] to monitor the specified target node (and, if
\f[CR]subtree\f[R] is \f[CR]true\f[R], its descendants) for changes to
the character data contained within the node or nodes.
The default value is \f[CR]true\f[R] if \f[CR]characterDataOldValue\f[R]
is specified, otherwise the default value is \f[CR]false\f[R].
.TP
\f[B]characterDataOldValue\f[R] \f[I](optional)\f[R]
Set to \f[CR]true\f[R] to record the previous value of a node\[cq]s text
whenever the text changes on nodes being monitored.
The default value is \f[CR]false\f[R].
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown in any of the following circumstances:
.RS
.IP \[bu] 2
The \f[CR]options\f[R] are configured such that nothing will actually be
monitored.
(For example, if \f[CR]childList\f[R], \f[CR]attributes\f[R], and
\f[CR]characterData\f[R] are all \f[CR]false\f[R].)
.IP \[bu] 2
The value of \f[CR]options.attributes\f[R] is \f[CR]false\f[R]
(indicating that attribute changes are not to be monitored), but
\f[CR]attributeOldValue\f[R] is \f[CR]true\f[R] and/or
\f[CR]attributeFilter\f[R] is present.
.IP \[bu] 2
The \f[CR]characterDataOldValue\f[R] option is \f[CR]true\f[R] but
\f[CR]characterData\f[R] is \f[CR]false\f[R] (indicating that character
changes are not to be monitored).
.RE
.SH USAGE NOTES
.SS Reusing MutationObservers
You can call \f[CR]observe()\f[R] multiple times on the same
\f[CR]MutationObserver\f[R] to watch for changes to different parts of
the DOM tree and/or different types of changes.
There are some caveats to note:
.IP \[bu] 2
If you call \f[CR]observe()\f[R] on a node that\[cq]s already being
observed by the same \f[CR]MutationObserver\f[R], all existing observers
are automatically removed from all targets being observed before the new
observer is activated.
.IP \[bu] 2
If the same \f[CR]MutationObserver\f[R] is not already in use on the
target, then the existing observers are left alone and the new one is
added.
.SS Observation follows nodes when disconnected
Mutation observers are intended to let you be able to watch the desired
set of nodes over time, even if the direct connections between those
nodes are severed.
If you begin watching a subtree of nodes, and a portion of that subtree
is detached and moved elsewhere in the DOM, you continue to watch the
detached segment of nodes, receiving the same callbacks as before the
nodes were detached from the original subtree.
.PP
In other words, until you\[cq]ve been notified that nodes are being
split off from your monitored subtree, you\[cq]ll get notifications of
changes to that split\-off subtree and its nodes.
This prevents you from missing changes that occur after the connection
is severed and before you have a chance to specifically begin monitoring
the moved node or subtree for changes.
.PP
Theoretically, this means that if you keep track of the
\f[CR]MutationRecord\f[R] objects describing the changes that occur, you
should be able to \[lq]undo\[rq] the changes, rewinding the DOM back to
its initial state.
.SH EXAMPLES
.SS Basic usage
In this example, we demonstrate how to call the method
\f[B]\f[CB]observe()\f[B]\f[R] on an instance of
\f[CR]MutationObserver\f[R], once it has been set up, passing it a
target element and an \f[CR]options\f[R] object.
.IP
.EX
// create a new instance of \[ga]MutationObserver\[ga] named \[ga]observer\[ga],
// passing it a callback function
const observer = new MutationObserver(() => {
  console.log(\[dq]callback that runs when observer is triggered\[dq]);
});

// call \[ga]observe()\[ga], passing it the element to observe, and the options object
observer.observe(document.querySelector(\[dq]#element\-to\-observe\[dq]), {
  subtree: true,
  childList: true,
});
.EE
.SS Using \f[CR]attributeFilter\f[R]
In this example, a Mutation Observer is set up to watch for changes to
the \f[CR]status\f[R] and \f[CR]username\f[R] attributes in any elements
contained within a subtree that displays the names of users in a chat
room.
This lets the code, for example, reflect changes to users\[cq]
nicknames, or to mark them as away from keyboard (AFK) or offline.
.IP
.EX
function callback(mutationList) {
  mutationList.forEach((mutation) => {
    switch (mutation.type) {
      case \[dq]attributes\[dq]:
        switch (mutation.attributeName) {
          case \[dq]status\[dq]:
            userStatusChanged(mutation.target.username, mutation.target.status);
            break;
          case \[dq]username\[dq]:
            usernameChanged(mutation.oldValue, mutation.target.username);
            break;
        }
        break;
    }
  });
}

const userListElement = document.querySelector(\[dq]#userlist\[dq]);

const observer = new MutationObserver(callback);
observer.observe(userListElement, {
  attributeFilter: [\[dq]status\[dq], \[dq]username\[dq]],
  attributeOldValue: true,
  subtree: true,
});
.EE
.SS Monitoring attribute values
In this example we observe an element for attribute value changes, and
add a button which toggles the element\[cq]s \f[CR]dir\f[R] attribute
between \f[CR]\[dq]ltr\[dq]\f[R] and \f[CR]\[dq]rtl\[dq]\f[R].
Inside the observer\[cq]s callback, we log the old value of the
attribute.
.SS HTML
.IP
.EX
<button id=\[dq]toggle\[dq]>Toggle direction</button><br />
<div id=\[dq]container\[dq]>
  <input type=\[dq]text\[dq] id=\[dq]rhubarb\[dq] dir=\[dq]ltr\[dq] value=\[dq]Tofu\[dq] />
</div>
<pre id=\[dq]output\[dq]></pre>
.EE
.SS CSS
.IP
.EX
body {
  background\-color: paleturquoise;
}

button,
input,
pre {
  margin: 0.5rem;
}
.EE
.SS JavaScript
.IP
.EX
const toggle = document.querySelector(\[dq]#toggle\[dq]);
const rhubarb = document.querySelector(\[dq]#rhubarb\[dq]);
const observerTarget = document.querySelector(\[dq]#container\[dq]);
const output = document.querySelector(\[dq]#output\[dq]);

toggle.addEventListener(\[dq]click\[dq], () => {
  rhubarb.dir = rhubarb.dir === \[dq]ltr\[dq] ? \[dq]rtl\[dq] : \[dq]ltr\[dq];
});

const config = {
  subtree: true,
  attributeOldValue: true,
};

const callback = (mutationList) => {
  for (const mutation of mutationList) {
    if (mutation.type === \[dq]attributes\[dq]) {
      output.textContent = \[ga]The ${mutation.attributeName} attribute was modified from \[dq]${mutation.oldValue}\[dq].\[ga];
    }
  }
};

const observer = new MutationObserver(callback);
observer.observe(observerTarget, config);
.EE
.SS Result
