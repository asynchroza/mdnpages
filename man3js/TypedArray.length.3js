.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.length" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]length\f[B]\f[R] accessor property of
\f[V]TypedArray\f[R] instances returns the length (in elements) of this
typed array.
.SH Description
.PP
The \f[V]length\f[R] property is an accessor property whose set accessor
function is \f[V]undefined\f[R], meaning that you can only read this
property.
The value is established when a \f[I]TypedArray\f[R] is constructed and
cannot be changed.
If the \f[I]TypedArray\f[R] is not specifying a \f[V]byteOffset\f[R] or
a \f[V]length\f[R], the length of the referenced \f[V]ArrayBuffer\f[R]
will be returned.
\f[I]TypedArray\f[R] is one of the TypedArray objects.
.SH Examples
.SS Using the \f[V]length\f[R] property
.IP
.nf
\f[C]
const buffer = new ArrayBuffer(8);

let uint8 = new Uint8Array(buffer);
uint8.length; // 8 (matches the length of the buffer)

uint8 = new Uint8Array(buffer, 1, 5);
uint8.length; // 5 (as specified when constructing the Uint8Array)

uint8 = new Uint8Array(buffer, 2);
uint8.length; // 6 (due to the offset of the constructed Uint8Array)
\f[R]
.fi
.SH See also
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]TypedArray\f[R]
