.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Intl.Collator" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Intl.Collator\f[B]\f[R] object enables language-sensitive
string comparison.
.SH Constructor
.IP \[bu] 2
\f[V]Intl.Collator()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Collator\f[R] object.
.RE
.SH Static methods
.IP \[bu] 2
\f[V]Intl.Collator.supportedLocalesOf()\f[R]
.RS 2
.IP \[bu] 2
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]Intl.Collator.prototype\f[R] and
shared by all \f[V]Intl.Collator\f[R] instances.
.IP \[bu] 2
\f[V]Intl.Collator.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]Intl.Collator\f[R] instances, the initial value is the
\f[V]Intl.Collator\f[R] constructor.
.RE
.IP \[bu] 2
\f[V]Intl.Collator.prototype[\[at]\[at]toStringTag]\f[R]
.RS 2
.IP \[bu] 2
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]Intl.Collator\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]Intl.Collator.prototype.compare()\f[R]
.RS 2
.IP \[bu] 2
Getter function that compares two strings according to the sort order of
this \f[V]Intl.Collator\f[R] object.
.RE
.IP \[bu] 2
\f[V]Intl.Collator.prototype.resolvedOptions()\f[R]
.RS 2
.IP \[bu] 2
Returns a new object with properties reflecting the locale and collation
options computed during initialization of the object.
.RE
.SH Examples
.SS Using Collator
.PP
The following example demonstrates the different potential results for a
string occurring before, after, or at the same level as another:
.IP
.nf
\f[C]
console.log(new Intl.Collator().compare(\[dq]a\[dq], \[dq]c\[dq])); // -1, or some other negative value
console.log(new Intl.Collator().compare(\[dq]c\[dq], \[dq]a\[dq])); // 1, or some other positive value
console.log(new Intl.Collator().compare(\[dq]a\[dq], \[dq]a\[dq])); // 0
\f[R]
.fi
.PP
Note that the results shown in the code above can vary between browsers
and browser versions.
This is because the values are implementation-specific.
That is, the specification requires only that the before and after
values are negative and positive.
.SS Using locales
.PP
The results provided by \f[V]Intl.Collator.prototype.compare()\f[R] vary
between languages.
In order to get the sort order of the language used in the user
interface of your application, make sure to specify that language (and
possibly some fallback languages) using the \f[V]locales\f[R] argument:
.IP
.nf
\f[C]
// in German, ä sorts with a
console.log(new Intl.Collator(\[dq]de\[dq]).compare(\[dq]ä\[dq], \[dq]z\[dq]));
// -1, or some other negative value

// in Swedish, ä sorts after z
console.log(new Intl.Collator(\[dq]sv\[dq]).compare(\[dq]ä\[dq], \[dq]z\[dq]));
// 1, or some other positive value
\f[R]
.fi
.SS Using options
.PP
The results provided by \f[V]Intl.Collator.prototype.compare()\f[R] can
be customized using the \f[V]options\f[R] argument:
.IP
.nf
\f[C]
// in German, ä has a as the base letter
console.log(new Intl.Collator(\[dq]de\[dq], { sensitivity: \[dq]base\[dq] }).compare(\[dq]ä\[dq], \[dq]a\[dq]));
// 0

// in Swedish, ä and a are separate base letters
console.log(new Intl.Collator(\[dq]sv\[dq], { sensitivity: \[dq]base\[dq] }).compare(\[dq]ä\[dq], \[dq]a\[dq]));
// 1, or some other positive value
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Intl\f[R]
