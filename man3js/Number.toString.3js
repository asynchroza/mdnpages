.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.toString" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]toString()\f[B]\f[R] method returns a string representing
the specified number value.
.SH Syntax
.IP
.nf
\f[C]
toString()
toString(radix)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]radix\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An integer in the range \f[V]2\f[R] through \f[V]36\f[R] specifying the
base to use for representing the number value.
Defaults to 10.
.RE
.SS Return value
.PP
A string representing the specified number value.
.SS Exceptions
.IP \[bu] 2
\f[V]RangeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]radix\f[R] is less than 2 or greater than 36.
.RE
.SH Description
.PP
The \f[V]Number\f[R] object overrides the \f[V]toString\f[R] method of
\f[V]Object\f[R]; it does not inherit
\f[V]Object.prototype.toString()\f[R].
For \f[V]Number\f[R] values, the \f[V]toString\f[R] method returns a
string representation of the value in the specified radix.
.PP
For radixes above 10, the letters of the alphabet indicate digits
greater than 9.
For example, for hexadecimal numbers (base 16) \f[V]a\f[R] through
\f[V]f\f[R] are used.
.PP
If the specified number value is negative, the sign is preserved.
This is the case even if the radix is 2; the string returned is the
positive binary representation of the number value preceded by a
\f[V]-\f[R] sign, \f[B]not\f[R] the two\[cq]s complement of the number
value.
.PP
Both \f[V]0\f[R] and \f[V]-0\f[R] have \f[V]\[dq]0\[dq]\f[R] as their
string representation.
\f[V]Infinity\f[R] returns \f[V]\[dq]Infinity\[dq]\f[R] and
\f[V]NaN\f[R] returns \f[V]\[dq]NaN\[dq]\f[R].
.PP
If the number is not a whole number, the decimal point \f[V].\f[R] is
used to separate the decimal places.
Scientific notation is used if the radix is 10 and the number\[cq]s
magnitude (ignoring sign) is greater than or equal to 1021 or less than
10-6.
In this case, the returned string always explicitly specifies the sign
of the exponent.
.IP
.nf
\f[C]
console.log((10 ** 21.5).toString()); // \[dq]3.1622776601683794e+21\[dq]
console.log((10 ** 21.5).toString(8)); // \[dq]526665530627250154000000\[dq]
\f[R]
.fi
.PP
The \f[V]toString()\f[R] method requires its \f[V]this\f[R] value to be
a \f[V]Number\f[R] primitive or wrapper object.
It throws a \f[V]TypeError\f[R] for other \f[V]this\f[R] values without
attempting to coerce them to number values.
.PP
Because \f[V]Number\f[R] doesn\[cq]t have a
\f[V][\[at]\[at]toPrimitive]()\f[R] method, JavaScript calls the
\f[V]toString()\f[R] method automatically when a \f[V]Number\f[R]
\f[I]object\f[R] is used in a context expecting a string, such as in a
template literal.
However, Number \f[I]primitive\f[R] values do not consult the
\f[V]toString()\f[R] method to be coerced to strings \[em] rather, they
are directly converted using the same algorithm as the initial
\f[V]toString()\f[R] implementation.
.IP
.nf
\f[C]
Number.prototype.toString = () => \[dq]Overridden\[dq];
console.log(\[ga]${1}\[ga]); // \[dq]1\[dq]
console.log(\[ga]${new Number(1)}\[ga]); // \[dq]Overridden\[dq]
\f[R]
.fi
.SH Examples
.SS Using toString()
.IP
.nf
\f[C]
const count = 10;
console.log(count.toString()); // \[dq]10\[dq]

console.log((17).toString()); // \[dq]17\[dq]
console.log((17.2).toString()); // \[dq]17.2\[dq]

const x = 6;
console.log(x.toString(2)); // \[dq]110\[dq]
console.log((254).toString(16)); // \[dq]fe\[dq]
console.log((-10).toString(2)); // \[dq]-1010\[dq]
console.log((-0xff).toString(2)); // \[dq]-11111111\[dq]
\f[R]
.fi
.SS Converting radix of number strings
.PP
If you have a string representing a number in a non-decimal radix, you
can use \f[V]parseInt()\f[R] and \f[V]toString()\f[R] to convert it to a
different radix.
.IP
.nf
\f[C]
const hex = \[dq]CAFEBABE\[dq];
const bin = parseInt(hex, 16).toString(2); // \[dq]11001010111111101011101010111110\[dq]
\f[R]
.fi
.PP
Beware of loss of precision: if the original number string is too large
(larger than \f[V]Number.MAX_SAFE_INTEGER\f[R], for example), you should
use a \f[V]BigInt\f[R] instead.
However, the \f[V]BigInt\f[R] constructor only has support for strings
representing number literals (i.e.\ strings starting with \f[V]0b\f[R],
\f[V]0o\f[R], \f[V]0x\f[R]).
In case your original radix is not one of binary, octal, decimal, or
hexadecimal, you may need to hand-write your radix converter, or use a
library.
.SH See also
.IP \[bu] 2
\f[V]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toPrecision()\f[R]
