.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.toJSON" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Date.toJSON - Date.prototype.toJSON()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toJSON()\f[B]\f[R] method of \f[V]Date\f[R] instances
returns a string representing this date in the same ISO format as
\f[V]toISOString()\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
toJSON()
\f[R]
.fi
.SS Return value
.PP
A string representing the given date in the date time string format
according to universal time, or \f[V]null\f[R] when the date is invalid.
For valid dates, the return value is the same as that of
\f[V]toISOString()\f[R].
.SH DESCRIPTION
.PP
The \f[V]toJSON()\f[R] method is automatically called by
\f[V]JSON.stringify()\f[R] when a \f[V]Date\f[R] object is stringified.
This method is generally intended to, by default, usefully serialize
\f[V]Date\f[R] objects during JSON serialization, which can then be
deserialized using the \f[V]Date()\f[R] constructor as the reviver of
\f[V]JSON.parse()\f[R].
.PP
The method first attempts to convert its \f[V]this\f[R] value to a
primitive by calling its \f[V][\[at]\[at]toPrimitive]()\f[R] (with
\f[V]\[dq]number\[dq]\f[R] as hint), \f[V]valueOf()\f[R], and
\f[V]toString()\f[R] methods, in that order.
If the result is a non-finite number, \f[V]null\f[R] is returned.
(This generally corresponds to an invalid date, whose
\f[V]valueOf()\f[R] returns \f[V]NaN\f[R].)
Otherwise, if the converted primitive is not a number or is a finite
number, the return value of \f[V]this.toISOString()\f[R] is returned.
.PP
Note that the method does not check whether the \f[V]this\f[R] value is
a valid \f[V]Date\f[R] object.
However, calling \f[V]Date.prototype.toJSON()\f[R] on non-\f[V]Date\f[R]
objects fails unless the object\[cq]s number primitive representation is
\f[V]NaN\f[R], or the object also has a \f[V]toISOString()\f[R] method.
.SH EXAMPLES
.SS Using toJSON()
.IP
.nf
\f[C]
const jsonDate = new Date(0).toJSON(); // \[aq]1970-01-01T00:00:00.000Z\[aq]
const backToDate = new Date(jsonDate);

console.log(jsonDate); // 1970-01-01T00:00:00.000Z
\f[R]
.fi
.SS Serialization round-tripping
.PP
When parsing JSON containing date strings, you can use the
\f[V]Date()\f[R] constructor to revive them into the original date
objects.
.IP
.nf
\f[C]
const fileData = {
  author: \[dq]Maria\[dq],
  title: \[dq]Date.prototype.toJSON()\[dq],
  createdAt: new Date(2019, 3, 15),
  updatedAt: new Date(2020, 6, 26),
};
const response = JSON.stringify(fileData);

// Imagine transmission through network

const data = JSON.parse(response, (key, value) => {
  if (key === \[dq]createdAt\[dq] || key === \[dq]updatedAt\[dq]) {
    return new Date(value);
  }
  return value;
});

console.log(data);
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] The reviver of \f[V]JSON.parse()\f[R] must be specific
to the payload shape you expect, because the serialization is
\f[I]lossy\f[R]: it\[cq]s not possible to distinguish between a string
that represents a Date and a normal string.
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[V]Date.prototype.toLocaleDateString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toTimeString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toUTCString()\f[R]
