.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "DataView.setBigInt64" "JS" "March 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataView.setBigInt64 - DataView.prototype.setBigInt64()
.SH SYNOPSIS
The \f[B]\f[CB]setBigInt64()\f[B]\f[R] method stores a signed 64-bit
integer (long long) value at the specified byte offset from the start of
the \f[CR]DataView\f[R].
.SH SYNTAX
.IP
.EX
setBigInt64(byteOffset, value)
setBigInt64(byteOffset, value, littleEndian)
.EE
.SS Parameters
.TP
\f[B]byteOffset\f[R]
The offset, in bytes, from the start of the view to store the data from.
.TP
\f[B]value\f[R]
The value to set as a \f[CR]BigInt\f[R].
The highest possible value that fits in a signed 64-bit integer is
\f[CR]2n ** (64n -1n) - 1n\f[R] (\f[CR]9223372036854775807n\f[R]).
Upon overflow, it will be negative (\f[CR]-9223372036854775808n\f[R]).
.TP
\f[B]littleEndian\f[R] \f[I](optional)\f[R]
Indicates whether the 64-bit int is stored in little- or big-endian
format.
If \f[CR]false\f[R] or \f[CR]undefined\f[R], a big-endian value is
written.
.SS Return value
\f[CR]undefined\f[R].
.SS Errors thrown
.TP
\f[B]RangeError\f[R]
Thrown if the \f[CR]byteOffset\f[R] is set such that it would store
beyond the end of the view.
.SH EXAMPLES
.SS Using the \f[CR]setBigInt64\f[R] method
.IP
.EX
const buffer = new ArrayBuffer(8);
const dataview = new DataView(buffer);
dataview.setBigInt64(0, 3n);
dataview.getBigInt64(0); // 3n
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]DataView\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]BigInt\f[R]
