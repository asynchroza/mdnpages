.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ServiceWorkerRegistration" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerRegistration \- ServiceWorkerRegistration
.SH SYNOPSIS
The \f[B]\f[CB]ServiceWorkerRegistration\f[B]\f[R] interface of the
Service Worker API represents the service worker registration.
You register a service worker to control one or more pages that share
the same origin.
.PP
The lifetime of a service worker registration is beyond that of the
\f[CR]ServiceWorkerRegistration\f[R] objects that represent them within
the lifetime of their corresponding service worker clients.
The browser maintains a persistent list of active
\f[CR]ServiceWorkerRegistration\f[R] objects.
.RS
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.RE
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,\f[R]
\f[CR]EventTarget\f[R].
.TP
\f[B]ServiceWorkerRegistration.active\f[R] \f[I](read\-only)\f[R]
Returns a service worker whose state is \f[CR]activating\f[R] or
\f[CR]activated\f[R].
This is initially set to \f[CR]null\f[R].
An active worker will control a \f[CR]Client\f[R] if the client\[cq]s
URL falls within the scope of the registration (the \f[CR]scope\f[R]
option set when \f[CR]ServiceWorkerContainer.register\f[R] is first
called.)
.TP
\f[B]ServiceWorkerRegistration.backgroundFetch\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a reference to a \f[CR]BackgroundFetchManager\f[R] object, which
manages background fetch operations.
.TP
\f[B]ServiceWorkerRegistration.index\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a reference to the \f[CR]ContentIndex\f[R] interface, for
managing indexed content for offline viewing.
.TP
\f[B]ServiceWorkerRegistration.installing\f[R] \f[I](read\-only)\f[R]
Returns a service worker whose state is \f[CR]installing\f[R].
This is initially set to \f[CR]null\f[R].
.TP
\f[B]ServiceWorkerRegistration.navigationPreload\f[R] \f[I](read\-only)\f[R]
Returns the instance of \f[CR]NavigationPreloadManager\f[R] associated
with the current service worker registration.
.TP
\f[B]ServiceWorkerRegistration.paymentManager\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a payment app\[cq]s \f[CR]PaymentManager\f[R] instance, which is
used to manage various payment app functionality.
.TP
\f[B]ServiceWorkerRegistration.periodicSync\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a reference to the \f[CR]PeriodicSyncManager\f[R] interface,
which allows for registering of tasks to run at specific intervals.
.TP
\f[B]ServiceWorkerRegistration.pushManager\f[R] \f[I](read\-only)\f[R]
Returns a reference to the \f[CR]PushManager\f[R] interface for managing
push subscriptions including subscribing, getting an active
subscription, and accessing push permission status.
.TP
\f[B]ServiceWorkerRegistration.scope\f[R] \f[I](read\-only)\f[R]
Returns a unique identifier for a service worker registration.
This must be on the same origin as the document that registers the
\f[CR]ServiceWorker\f[R].
.TP
\f[B]ServiceWorkerRegistration.sync\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a reference to the \f[CR]SyncManager\f[R] interface, which
manages background synchronization processes.
.TP
\f[B]ServiceWorkerRegistration.updateViaCache\f[R] \f[I](read\-only)\f[R]
Returns a string indicating what is the cache strategy to use when
updating the service worker scripts.
It can be one of the following: \f[CR]imports\f[R], \f[CR]all\f[R], or
\f[CR]none\f[R].
.TP
\f[B]ServiceWorkerRegistration.waiting\f[R] \f[I](read\-only)\f[R]
Returns a service worker whose state is \f[CR]installed\f[R].
This is initially set to \f[CR]null\f[R].
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,\f[R]
\f[CR]EventTarget\f[R].
.TP
\f[B]ServiceWorkerRegistration.getNotifications()\f[R]
Returns a \f[CR]Promise\f[R] that resolves to an array of
\f[CR]Notification\f[R] objects.
.TP
\f[B]ServiceWorkerRegistration.showNotification()\f[R]
Displays the notification with the requested title.
.TP
\f[B]ServiceWorkerRegistration.unregister()\f[R]
Unregisters the service worker registration and returns a
\f[CR]Promise\f[R].
The service worker will finish any ongoing operations before it is
unregistered.
.TP
\f[B]ServiceWorkerRegistration.update()\f[R]
Checks the server for an updated version of the service worker without
consulting caches.
.SH EVENTS
.TP
\f[B]updatefound\f[R]
Fired any time the \f[CR]ServiceWorkerRegistration.installing\f[R]
property acquires a new service worker.
.SH EXAMPLES
In this example, the code first checks whether the browser supports
service workers and if so registers one.
Next, it adds an \f[CR]updatefound\f[R] listener in which it uses the
service worker registration to listen for further changes to the service
worker\[cq]s state.
If the service worker hasn\[cq]t changed since the last time it was
registered, then the \f[CR]updatefound\f[R] event will not be fired.
.IP
.EX
if (\[dq]serviceWorker\[dq] in navigator) {
  navigator.serviceWorker
    .register(\[dq]/sw.js\[dq])
    .then((registration) => {
      registration.addEventListener(\[dq]updatefound\[dq], () => {
        // If updatefound is fired, it means that there\[aq]s
        // a new service worker being installed.
        const installingWorker = registration.installing;
        console.log(
          \[dq]A new service worker is being installed:\[dq],
          installingWorker,
        );

        // You can listen for changes to the installing service worker\[aq]s
        // state via installingWorker.onstatechange
      });
    })
    .catch((error) => {
      console.error(\[ga]Service worker registration failed: ${error}\[ga]);
    });
} else {
  console.error(\[dq]Service workers are not supported.\[dq]);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR
https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using web workers
