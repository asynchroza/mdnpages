.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.String" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
String.String - String() constructor
.SH SYNOPSIS
.PP
The \f[B]\f[VB]String()\f[B]\f[R] constructor creates \f[V]String\f[R]
objects.
When called as a function, it returns primitive values of type String.
.SH SYNTAX
.IP
.nf
\f[C]
new String(thing)
String(thing)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]String()\f[R] can be called with or without
\f[V]new\f[R], but with different effects.
See Return value.
.RE
.SS Parameters
.TP
\f[B]thing\f[R]
Anything to be converted to a string.
.SS Return value
.PP
When \f[V]String\f[R] is called as a constructor (with \f[V]new\f[R]),
it creates a \f[V]String\f[R] object, which is \f[B]not\f[R] a
primitive.
.PP
When \f[V]String\f[R] is called as a function, it coerces the parameter
to a string primitive.
Symbol values would be converted to
\f[V]\[dq]Symbol(description)\[dq]\f[R], where \f[V]description\f[R] is
the description of the Symbol, instead of throwing.
.RS
.PP
\f[B]Warning:\f[R] You should rarely find yourself using
\f[V]String\f[R] as a constructor.
.RE
.SH EXAMPLES
.SS String constructor and String function
.PP
String function and String constructor produce different results:
.IP
.nf
\f[C]
const a = new String(\[dq]Hello world\[dq]); // a === \[dq]Hello world\[dq] is false
const b = String(\[dq]Hello world\[dq]); // b === \[dq]Hello world\[dq] is true
a instanceof String; // is true
b instanceof String; // is false
typeof a; // \[dq]object\[dq]
typeof b; // \[dq]string\[dq]
\f[R]
.fi
.PP
Here, the function produces a string (the primitive type) as promised.
However, the constructor produces an instance of the type String (an
object wrapper) and that\[cq]s why you rarely want to use the String
constructor at all.
.SS Using String() to stringify a symbol
.PP
\f[V]String()\f[R] is the only case where a symbol can be converted to a
string without throwing, because it\[cq]s very explicit.
.PP
\f[B]Bad\f[R]
.IP
.nf
\f[C]
const sym = Symbol(\[dq]example\[dq]);
\[ga]${sym}\[ga]; // TypeError: Cannot convert a Symbol value to a string
\[dq]\[dq] + sym; // TypeError: Cannot convert a Symbol value to a string
\[dq]\[dq].concat(sym); // TypeError: Cannot convert a Symbol value to a string
\f[R]
.fi
.PP
\f[B]Good\f[R]
.IP
.nf
\f[C]
const sym = Symbol(\[dq]example\[dq]);
String(sym); // \[dq]Symbol(example)\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Text formatting in the JavaScript Guide
