.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DocumentFragment.replaceChildren" "JS" "August 4, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DocumentFragment.replaceChildren \- DocumentFragment: replaceChildren()
method
.SH SYNOPSIS
The \f[B]\f[CB]DocumentFragment.replaceChildren()\f[B]\f[R] method
replaces the existing children of a \f[CR]DocumentFragment\f[R] with a
specified new set of children.
These can be string or \f[CR]Node\f[R] objects.
.SH SYNTAX
.IP
.EX
replaceChildren(param1)
replaceChildren(param1, param2)
replaceChildren(param1, param2, /* \&..., */ paramN)
.EE
.SS Parameters
.TP
\f[B]param1\f[R], \&..., \f[B]paramN\f[R]
A set of \f[CR]Node\f[R] or string objects to replace the
\f[CR]DocumentFragment\f[R]\[cq]s existing children with.
If no replacement objects are specified, then the
\f[CR]DocumentFragment\f[R] is emptied of all child nodes.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]HierarchyRequestError\f[R] \f[B]DOMException\f[R]
Thrown when the \c
.UR https://dom.spec.whatwg.org/#concept-node-tree
constraints of the node tree
.UE \c
\ are violated.
.SH EXAMPLES
.SS Emptying a document fragment
\f[CR]replaceChildren()\f[R] provides a very convenient mechanism for
emptying a document fragment of all its children.
You call it on the document fragment without any argument specified:
.IP
.EX
let fragment = new DocumentFragment();
let div = document.createElement(\[dq]div\[dq]);
let p = document.createElement(\[dq]p\[dq]);
fragment.append(p);
fragment.prepend(div);

fragment.children; // HTMLCollection [<div>, <p>]

fragment.replaceChildren();

fragment.children; // HTMLCollection []
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]DocumentFragment.prepend()\f[R]
.IP \[bu] 2
\f[CR]DocumentFragment.append()\f[R]
