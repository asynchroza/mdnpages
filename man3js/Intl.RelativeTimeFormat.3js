.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Intl.RelativeTimeFormat" "JS" "March 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.RelativeTimeFormat - Intl.RelativeTimeFormat
.SH SYNOPSIS
The \f[B]\f[CB]Intl.RelativeTimeFormat\f[B]\f[R] object enables
language-sensitive relative time formatting.
.SH CONSTRUCTOR
.TP
\f[B]Intl.RelativeTimeFormat()\f[R]
Creates a new \f[CR]Intl.RelativeTimeFormat\f[R] object.
.SH STATIC METHODS
.TP
\f[B]Intl.RelativeTimeFormat.supportedLocalesOf()\f[R]
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.SH INSTANCE PROPERTIES
These properties are defined on
\f[CR]Intl.RelativeTimeFormat.prototype\f[R] and shared by all
\f[CR]Intl.RelativeTimeFormat\f[R] instances.
.TP
\f[B]Intl.RelativeTimeFormat.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Intl.RelativeTimeFormat\f[R] instances, the initial value is
the \f[CR]Intl.RelativeTimeFormat\f[R] constructor.
.TP
\f[B]Intl.RelativeTimeFormat.prototype[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[CR]\[at]\[at]toStringTag\f[R] property is
the string \f[CR]\[dq]Intl.RelativeTimeFormat\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Intl.RelativeTimeFormat.prototype.format()\f[R]
Formats a \f[CR]value\f[R] and a \f[CR]unit\f[R] according to the locale
and formatting options of the given \f[CR]Intl.RelativeTimeFormat\f[R]
object.
.TP
\f[B]Intl.RelativeTimeFormat.prototype.formatToParts()\f[R]
Returns an \f[CR]Array\f[R] of objects representing the relative time
format in parts that can be used for custom locale-aware formatting.
.TP
\f[B]Intl.RelativeTimeFormat.prototype.resolvedOptions()\f[R]
Returns a new object with properties reflecting the locale and
formatting options computed during initialization of the object.
.SH EXAMPLES
.SS Basic format usage
The following example shows how to use a relative time formatter for the
English language.
.IP
.EX
// Create a relative time formatter in your locale
// with default values explicitly passed in.
const rtf = new Intl.RelativeTimeFormat(\[dq]en\[dq], {
  localeMatcher: \[dq]best fit\[dq], // other values: \[dq]lookup\[dq]
  numeric: \[dq]always\[dq], // other values: \[dq]auto\[dq]
  style: \[dq]long\[dq], // other values: \[dq]short\[dq] or \[dq]narrow\[dq]
});

// Format relative time using negative value (-1).
rtf.format(-1, \[dq]day\[dq]); // \[dq]1 day ago\[dq]

// Format relative time using positive value (1).
rtf.format(1, \[dq]day\[dq]); // \[dq]in 1 day\[dq]
.EE
.SS Using formatToParts
The following example shows how to create a relative time formatter
returning formatted parts.
.IP
.EX
const rtf = new Intl.RelativeTimeFormat(\[dq]en\[dq], { numeric: \[dq]auto\[dq] });

// Format relative time using the day unit.
rtf.formatToParts(-1, \[dq]day\[dq]);
// [{ type: \[dq]literal\[dq], value: \[dq]yesterday\[dq]}]

rtf.formatToParts(100, \[dq]day\[dq]);
// [
//   { type: \[dq]literal\[dq], value: \[dq]in \[dq] },
//   { type: \[dq]integer\[dq], value: \[dq]100\[dq], unit: \[dq]day\[dq] },
//   { type: \[dq]literal\[dq], value: \[dq] days\[dq] }
// ]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl\f[R]
.IP \[bu] 2
The Intl.RelativeTimeFormat
API (https://v8.dev/features/intl-relativetimeformat)
.IP \[bu] 2
A polyfill of \f[CR]Intl.RelativeTimeFormat\f[R] in
FormatJS (https://formatjs.io/docs/polyfills/intl-relativetimeformat/)
