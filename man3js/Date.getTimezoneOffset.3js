'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.getTimezoneOffset" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]getTimezoneOffset()\f[B]\f[R] method of \f[V]Date\f[R]
instances returns the difference, in minutes, between this date as
evaluated in the UTC time zone, and the same date as evaluated in the
local time zone.
.SH Syntax
.IP
.nf
\f[C]
getTimezoneOffset()
\f[R]
.fi
.SS Return value
.PP
A number representing the difference, in minutes, between the date as
evaluated in the UTC time zone and as evaluated in the local time zone.
The actual local time algorithm is implementation-defined, and the
return value is allowed to be zero in runtimes without appropriate data.
Returns \f[V]NaN\f[R] if the date is invalid.
.SH Description
.PP
\f[V]date.getTimezoneOffset()\f[R] returns the difference, in minutes,
between \f[V]date\f[R] as evaluated in the UTC time zone and as
evaluated in the local time zone \[em] that is, the time zone of the
host system in which the browser is being used (if the code is run from
the Web in a browser), or otherwise the host system of whatever
JavaScript runtime (for example, a Node.js environment) the code is
executed in.
.SS Negative values and positive values
.PP
The number of minutes returned by \f[V]getTimezoneOffset()\f[R] is
positive if the local time zone is behind UTC, and negative if the local
time zone is ahead of UTC.
For example, for UTC+10, \f[V]-600\f[R] will be returned.
.PP
.TS
tab(@);
l l.
T{
Current time zone
T}@T{
Return value
T}
_
T{
UTC-8
T}@T{
480
T}
T{
UTC
T}@T{
0
T}
T{
UTC+3
T}@T{
-180
T}
.TE
.SS Varied results in Daylight Saving Time (DST) regions
.PP
In a region that annually shifts in and out of Daylight Saving Time
(DST), as \f[V]date\f[R] varies, the number of minutes returned by
calling \f[V]getTimezoneOffset()\f[R] can be non-uniform.
.RS
.PP
\f[B]Note:\f[R] \f[V]getTimezoneOffset()\f[R]\[cq]s behavior will never
differ based on the time when the code is run \[em] its behavior is
always consistent when running in the same region.
Only the value of \f[V]date\f[R] affects the result.
.RE
.PP
In most implementations, the IANA time zone
database (https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database)
(tzdata) is used to precisely determine the offset of the local timezone
at the moment of the \f[V]date\f[R].
However, if such information is unavailable, an implementation may
return zero.
.SH Examples
.SS Using getTimezoneOffset()
.IP
.nf
\f[C]
// Create a Date instance for the current time
const currentLocalDate = new Date();
// Create a Date instance for 03:24 GMT-0200 on May 1st in 2016
const laborDay2016at0324GMTminus2 = new Date(\[dq]2016-05-01T03:24:00-02:00\[dq]);
currentLocalDate.getTimezoneOffset() ===
  laborDay2016at0324GMTminus2.getTimezoneOffset();
// true, always, in any timezone that doesn\[aq]t annually shift in and out of DST
// false, sometimes, in any timezone that annually shifts in and out of DST
\f[R]
.fi
.SS getTimezoneOffset() and DST
.PP
In regions that use DST, the return value may change based on the time
of the year \f[V]date\f[R] is in.
Below is the output in a runtime in New York, where the timezone is
UTC-05:00.
.IP
.nf
\f[C]
const nyOffsetSummer = new Date(\[dq]2022-02-01\[dq]).getTimezoneOffset(); // 300
const nyOffsetWinter = new Date(\[dq]2022-08-01\[dq]).getTimezoneOffset(); // 240
\f[R]
.fi
.SS getTimezoneOffset() and historical data
.PP
Due to historical reasons, the timezone a region is in can be constantly
changing, even disregarding DST.
For example, below is the output in a runtime in Shanghai, where the
timezone is UTC+08:00.
.IP
.nf
\f[C]
const shModernOffset = new Date(\[dq]2022-01-27\[dq]).getTimezoneOffset(); // -480
const shHistoricalOffset = new Date(\[dq]1943-01-27\[dq]).getTimezoneOffset(); // -540
\f[R]
.fi
.PP
This is because during the Sino-Japanese
War (https://en.wikipedia.org/wiki/Second_Sino-Japanese_War) when
Shanghai was under Japanese control, the timezone was changed to
UTC+09:00 to align with Japan\[cq]s (in effect, it was a \[lq]year-round
DST\[rq]), and this was recorded in the IANA database.
.SH See also
.IP \[bu] 2
\f[V]Date\f[R]
