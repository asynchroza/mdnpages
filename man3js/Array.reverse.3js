.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.reverse" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.reverse - Array.prototype.reverse()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]reverse()\f[B]\f[R] method reverses an array \f[I]in
place (https://en.wikipedia.org/wiki/In-place_algorithm)\f[R] and
returns the reference to the same array, the first array element now
becoming the last, and the last array element becoming the first.
In other words, elements order in the array will be turned towards the
direction opposite to that previously stated.
.PP
To reverse the elements in an array without mutating the original array,
use \f[V]toReversed()\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
reverse()
\f[R]
.fi
.SS Return value
.PP
The reference to the original array, now reversed.
Note that the array is reversed \f[I]in
place (https://en.wikipedia.org/wiki/In-place_algorithm)\f[R], and no
copy is made.
.SH DESCRIPTION
.PP
The \f[V]reverse()\f[R] method transposes the elements of the calling
array object in place, mutating the array, and returning a reference to
the array.
.PP
The \f[V]reverse()\f[R] method preserves empty slots.
If the source array is sparse, the empty slots\[cq] corresponding new
indices are deleted and also become empty slots.
.PP
The \f[V]reverse()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH EXAMPLES
.SS Reversing the elements in an array
.PP
The following example creates an array \f[V]items\f[R], containing three
elements, then reverses the array.
The call to \f[V]reverse()\f[R] returns a reference to the reversed
array \f[V]items\f[R].
.IP
.nf
\f[C]
const items = [1, 2, 3];
console.log(items); // [1, 2, 3]

items.reverse();
console.log(items); // [3, 2, 1]
\f[R]
.fi
.SS The reverse() method returns the reference to the same array
.PP
The \f[V]reverse()\f[R] method returns reference to the original array,
so mutating the returned array will mutate the original array as well.
.IP
.nf
\f[C]
const numbers = [3, 2, 4, 1, 5];
const reversed = numbers.reverse();
// numbers and reversed are both in reversed order [5, 1, 4, 2, 3]
reversed[0] = 5;
console.log(numbers[0]); // 5
\f[R]
.fi
.PP
In case you want \f[V]reverse()\f[R] to not mutate the original array,
but return a shallow-copied array like other array methods
(e.g.\ \f[V]map()\f[R]) do, use the \f[V]toReversed()\f[R] method.
Alternatively, you can do a shallow copy before calling
\f[V]reverse()\f[R], using the spread syntax or \f[V]Array.from()\f[R].
.IP
.nf
\f[C]
const numbers = [3, 2, 4, 1, 5];
// [...numbers] creates a shallow copy, so reverse() does not mutate the original
const reverted = [...numbers].reverse();
reverted[0] = 5;
console.log(numbers[0]); // 3
\f[R]
.fi
.SS Using reverse() on sparse arrays
.PP
Sparse arrays remain sparse after calling \f[V]reverse()\f[R].
Empty slots are copied over to their respective new indices as empty
slots.
.IP
.nf
\f[C]
console.log([1, , 3].reverse()); // [3, empty, 1]
console.log([1, , 3, 4].reverse()); // [4, 3, empty, 1]
\f[R]
.fi
.SS Calling reverse() on non-array objects
.PP
The \f[V]reverse()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
It then visits each index between \f[V]0\f[R] and \f[V]length / 2\f[R],
and swaps the two corresponding indices on both ends, deleting
properties if needed.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  2: 4,
};
console.log(Array.prototype.reverse.call(arrayLike));
// { \[aq]0\[aq]: 4, length: 3, unrelated: \[aq]foo\[aq] }
// The \[aq]2\[aq] index is deleted because the \[aq]0\[aq] index was not present originally
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.reverse\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.join()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.sort()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toReversed()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.reverse()\f[R]
