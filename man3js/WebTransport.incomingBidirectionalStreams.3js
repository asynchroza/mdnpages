.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WebTransport.incomingBidirectionalStreams" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebTransport.incomingBidirectionalStreams \- WebTransport:
incomingBidirectionalStreams property
.SH SYNOPSIS
The \f[B]\f[CB]incomingBidirectionalStreams\f[B]\f[R] read\-only
property of the \f[CR]WebTransport\f[R] interface represents one or more
bidirectional streams opened by the server.
Returns a \f[CR]ReadableStream\f[R] of
\f[CR]WebTransportBidirectionalStream\f[R] objects.
Each one can be used to reliably read data from the server and write
data back to it.
.PP
\[lq]Reliable\[rq] means that transmission and order of data are
guaranteed.
This provides slower delivery (albeit faster than with WebSockets) than
\f[CR]datagrams\f[R], but is needed in situations where reliability and
ordering are important, like chat applications.
.PP
This feature is available in Web Workers.
.SH VALUE
A \f[CR]ReadableStream\f[R] of
\f[CR]WebTransportBidirectionalStream\f[R] objects.
.SH EXAMPLES
An initial function is used to read the
\f[CR]WebTransportBidirectionalStream\f[R] objects from the
\f[CR]ReadableStream\f[R].
For each one, the \f[CR]WebTransportBidirectionalStream.readable\f[R]
and \f[CR]WebTransportBidirectionalStream.writable\f[R] values are
passed to other functions to read from and write to those streams.
.IP
.EX
async function receiveBidirectional() {
  const bds = transport.incomingBidirectionalStreams;
  const reader = bds.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    // value is an instance of WebTransportBidirectionalStream
    await readData(value.readable);
    await writeData(value.writable);
  }
}

async function readData(readable) {
  const reader = readable.getReader();
  while (true) {
    const { value, done } = await reader.read();
    if (done) {
      break;
    }
    // value is a Uint8Array.
    console.log(value);
  }
}

async function writeData(writable) {
  const writer = writable.getWriter();
  const data1 = new Uint8Array([65, 66, 67]);
  const data2 = new Uint8Array([68, 69, 70]);
  writer.write(data1);
  writer.write(data2);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/webtransport
Using WebTransport
.UE \c
.IP \[bu] 2
WebSockets API
.IP \[bu] 2
Streams API
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/
WebTransport over HTTP/3
.UE \c
