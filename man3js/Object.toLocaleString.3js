.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Object.toLocaleString" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Object.toLocaleString - Object.prototype.toLocaleString()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toLocaleString()\f[B]\f[R] method returns a string
representing the object.
This method is meant to be overridden by derived objects for
locale-specific purposes.
.SH SYNTAX
.IP
.nf
\f[C]
toLocaleString()
\f[R]
.fi
.SS Parameters
.PP
None.
However, all objects that override this method are expected to accept at
most two parameters, corresponding to \f[V]locales\f[R] and
\f[V]options\f[R], such as \f[V]Date.prototype.toLocaleString\f[R].
The parameter positions should not be used for any other purpose.
.SS Return value
.PP
The return value of calling \f[V]this.toString()\f[R].
.SH DESCRIPTION
.PP
All objects that inherit from \f[V]Object.prototype\f[R] (that is, all
except \f[V]null\f[R]-prototype objects) inherit the
\f[V]toLocaleString()\f[R] method.
\f[V]Object\f[R]\[cq]s \f[V]toLocaleString\f[R] returns the result of
calling \f[V]this.toString()\f[R].
.PP
This function is provided to give objects a generic
\f[V]toLocaleString\f[R] method, even though not all may use it.
In the core language, these built-in objects override
\f[V]toLocaleString\f[R] to provide locale-specific formatting:
.IP \[bu] 2
\f[V]Array\f[R]: \f[V]Array.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]Number\f[R]: \f[V]Number.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]Date\f[R]: \f[V]Date.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]TypedArray\f[R]: \f[V]TypedArray.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]BigInt\f[R]: \f[V]BigInt.prototype.toLocaleString()\f[R]
.SH EXAMPLES
.SS Using the base toLocaleString() method
.PP
The base \f[V]toLocaleString()\f[R] method simply calls
\f[V]toString()\f[R].
.IP
.nf
\f[C]
const obj = {
  toString() {
    return \[dq]My Object\[dq];
  },
};
console.log(obj.toLocaleString()); // \[dq]My Object\[dq]
\f[R]
.fi
.SS Array toLocaleString() override
.PP
\f[V]Array.prototype.toLocaleString()\f[R] is used to print array values
as a string by invoking each element\[cq]s \f[V]toLocaleString()\f[R]
method and joining the results with a locale-specific separator.
For example:
.IP
.nf
\f[C]
const testArray = [4, 7, 10];

const euroPrices = testArray.toLocaleString(\[dq]fr\[dq], {
  style: \[dq]currency\[dq],
  currency: \[dq]EUR\[dq],
});
// \[dq]4,00 €,7,00 €,10,00 €\[dq]
\f[R]
.fi
.SS Date toLocaleString() override
.PP
\f[V]Date.prototype.toLocaleString()\f[R] is used to print out date
displays more suitable for specific locales.
For example:
.IP
.nf
\f[C]
const testDate = new Date();
// \[dq]Fri May 29 2020 18:04:24 GMT+0100 (British Summer Time)\[dq]

const deDate = testDate.toLocaleString(\[dq]de\[dq]);
// \[dq]29.5.2020, 18:04:24\[dq]

const frDate = testDate.toLocaleString(\[dq]fr\[dq]);
// \[dq]29/05/2020, 18:04:24\[dq]
\f[R]
.fi
.SS Number toLocaleString() override
.PP
\f[V]Number.prototype.toLocaleString()\f[R] is used to print out number
displays more suitable for specific locales, e.g.\ with the correct
separators.
For example:
.IP
.nf
\f[C]
const testNumber = 2901234564;
// \[dq]2901234564\[dq]

const deNumber = testNumber.toLocaleString(\[dq]de\[dq]);
// \[dq]2.901.234.564\[dq]

const frNumber = testNumber.toLocaleString(\[dq]fr\[dq]);
// \[dq]2 901 234 564\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Object.prototype.toString()\f[R]
