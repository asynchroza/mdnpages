.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.findLast" "JS" "September 14, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.findLast - TypedArray.prototype.findLast()
.SH SYNOPSIS
The \f[B]\f[CB]findLast()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances iterates the typed array in reverse order and returns the
value of the first element that satisfies the provided testing function.
If no elements satisfy the testing function, \f[CR]undefined\f[R] is
returned.
This method has the same algorithm as
\f[CR]Array.prototype.findLast()\f[R].
.SH SYNTAX
.IP
.EX
findLast(callbackFn)
findLast(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the typed array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the typed array.
.TP
\f[B]array\f[R]
The typed array \f[CR]findLast()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
The last (highest-index) element in the typed array that satisfies the
provided testing function; \f[CR]undefined\f[R] if no matching element
is found.
.SH DESCRIPTION
See \f[CR]Array.prototype.findLast()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Find the last prime number in a typed array
The following example returns the value of the last element in the typed
array that is a prime number, or \f[CR]undefined\f[R] if there is no
prime number.
.IP
.EX
function isPrime(element) {
  if (element % 2 === 0 || element < 2) {
    return false;
  }
  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {
    if (element % factor === 0) {
      return false;
    }
  }
  return true;
}

let uint8 = new Uint8Array([4, 6, 8, 12]);
console.log(uint8.findLast(isPrime)); // undefined (no primes in array)
uint8 = new Uint8Array([4, 5, 7, 8, 9, 11, 12]);
console.log(uint8.findLast(isPrime)); // 11
.EE
.SS All elements are visited and may be modified by the callback
The following examples show that all elements \f[I]are\f[R] visited, and
that the value passed to the callback is their value when visited:
.IP
.EX
// Declare array with no elements at indexes 2, 3, and 4
// The missing elements will be initialized to zero.
const uint8 = new Uint8Array([0, 1, , , , 5, 6]);

// Iterate through the elements in reverse order.
// Note that all elements are visited.
uint8.findLast((value, index) => {
  console.log(\[ga]Visited index ${index} with value ${value}\[ga]);
});

// Shows all indexes, including deleted
uint8.findLast((value, index) => {
  // Modify element 3 on first iteration
  if (index === 6) {
    console.log(\[dq]Set uint8[3] to 44\[dq]);
    uint8[3] = 44;
  }
  // Element 3 is still visited but will have a new value.
  console.log(\[ga]Visited index ${index} with value ${value}\[ga]);
});
// Visited index 6 with value 6
// Visited index 5 with value 5
// Visited index 4 with value 0
// Visited index 3 with value 0
// Visited index 2 with value 0
// Visited index 1 with value 1
// Visited index 0 with value 0
// Set uint8[3] to 44
// Visited index 6 with value 6
// Visited index 5 with value 5
// Visited index 4 with value 0
// Visited index 3 with value 44
// Visited index 2 with value 0
// Visited index 1 with value 1
// Visited index 0 with value 0
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.findLast\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#array-find-from-last)
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.findLastIndex()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.includes()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.filter()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findLast()\f[R]
