.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "XMLHttpRequestUpload" "JS" "November 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XMLHttpRequestUpload \- XMLHttpRequestUpload
.SH SYNOPSIS
The \f[B]\f[CB]XMLHttpRequestUpload\f[B]\f[R] interface represents the
upload process for a specific \f[CR]XMLHttpRequest\f[R].
It is an \f[I]opaque\f[R] object that represents the underlying,
browser\-dependent, upload process.
It is an \f[CR]XMLHttpRequestEventTarget\f[R] and can be obtained by
calling \f[CR]XMLHttpRequest.upload\f[R].
.PP
This feature is available in Web Workers, except for Service Workers.
.SH INSTANCE PROPERTIES
\f[I]This interface has no specific property, but inherits the
properties of \f[CI]XMLHttpRequestEventTarget\f[I] and of
\f[CI]EventTarget\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]This interface has no specific method, but inherits the methods of
\f[CI]XMLHttpRequestEventTarget\f[I] and of \f[CI]EventTarget\f[I].\f[R]
.SH EVENTS
.TP
\f[B]abort\f[R]
Fired when a request has been aborted, for example because the program
called \f[CR]XMLHttpRequest.abort()\f[R].
Also available via the \f[CR]onabort\f[R] event handler property.
.TP
\f[B]error\f[R]
Fired when the request encountered an error.
Also available via the \f[CR]onerror\f[R] event handler property.
.TP
\f[B]load\f[R]
Fired when a request transaction completes successfully.
Also available via the \f[CR]onload\f[R] event handler property.
.TP
\f[B]loadend\f[R]
Fired when a request has completed, whether successfully (after
\f[CR]load\f[R]) or unsuccessfully (after \f[CR]abort\f[R] or
\f[CR]error\f[R]).
Also available via the \f[CR]onloadend\f[R] event handler property.
.TP
\f[B]loadstart\f[R]
Fired when a request has started to load data.
Also available via the \f[CR]onloadstart\f[R] event handler property.
.TP
\f[B]progress\f[R]
Fired periodically when a request receives more data.
Also available via the \f[CR]onprogress\f[R] event handler property.
.TP
\f[B]timeout\f[R]
Fired when progress is terminated due to preset time expiring.
Also available via the \f[CR]ontimeout\f[R] event handler property.
.SH EXAMPLES
.SS Uploading a file with a timeout
This allows you to upload a file to a server; it displays a progress bar
while the upload is happening as well as a message with the progress and
the results, success or failure.
An abort button allows to stop an upload.
.SS HTML
.IP
.EX
<!doctype html>
<html lang=\[dq]en\[dq]>
  <head>
    <meta charset=\[dq]utf\-8\[dq] />
    <meta name=\[dq]viewport\[dq] content=\[dq]width=device\-width\[dq] />
    <title>XMLHttpRequestUpload test</title>
    <link rel=\[dq]stylesheet\[dq] href=\[dq]xhrupload_test.css\[dq] />
    <script src=\[dq]xhrupload_test.js\[dq]></script>
  </head>
  <body>
    <main>
      <h1>Upload a file</h1>
      <p>
        <label for=\[dq]file\[dq]>File to upload</label><input type=\[dq]file\[dq] id=\[dq]file\[dq] />
      </p>
      <p>
        <progress />
      </p>
      <p>
        <output></output>
      </p>
      <p>
        <button disabled id=\[dq]abort\[dq]>Abort</button>
      </p>
    </main>
  </body>
</html>
.EE
.SS CSS
.IP
.EX
body {
  background\-color: lightblue;
}

main {
  margin: 50px auto;
  text\-align: center;
}

file {
  display: none;
}

label[for=\[dq]file\[dq]] {
  background\-color: lightgrey;
  padding: 10px 10px;
}

progress {
  display: none;
}

progress.visible {
  display: inline;
}
.EE
.SS JavaScript
.IP
.EX
addEventListener(\[dq]DOMContentLoaded\[dq], () => {
  const fileInput = document.getElementById(\[dq]file\[dq]);
  const progressBar = document.querySelector(\[dq]progress\[dq]);
  const log = document.querySelector(\[dq]output\[dq]);
  const abortButton = document.getElementById(\[dq]abort\[dq]);

  fileInput.addEventListener(\[dq]change\[dq], () => {
    const xhr = new XMLHttpRequest();
    xhr.timeout = 2000; // 2 seconds

    // Link abort button
    abortButton.addEventListener(
      \[dq]click\[dq],
      () => {
        xhr.abort();
      },
      { once: true },
    );

    // When the upload starts, we display the progress bar
    xhr.upload.addEventListener(\[dq]loadstart\[dq], (event) => {
      progressBar.classList.add(\[dq]visible\[dq]);
      progressBar.value = 0;
      progressBar.max = event.total;
      log.textContent = \[dq]Uploading (0%)\&...\[dq];
      abortButton.disabled = false;
    });

    // Each time a progress event is received, we update the bar
    xhr.upload.addEventListener(\[dq]progress\[dq], (event) => {
      progressBar.value = event.loaded;
      log.textContent = \[ga]Uploading (${(
        (event.loaded / event.total) *
        100
      ).toFixed(2)}%)\&...\[ga];
    });

    // When the upload is finished, we hide the progress bar.
    xhr.upload.addEventListener(\[dq]loadend\[dq], (event) => {
      progressBar.classList.remove(\[dq]visible\[dq]);
      if (event.loaded !== 0) {
        log.textContent = \[dq]Upload finished.\[dq];
      }
      abortButton.disabled = true;
    });

    // In case of an error, an abort, or a timeout, we hide the progress bar
    // Note that these events can be listened to on the xhr object too
    function errorAction(event) {
      progressBar.classList.remove(\[dq]visible\[dq]);
      log.textContent = \[ga]Upload failed: ${event.type}\[ga];
    }
    xhr.upload.addEventListener(\[dq]error\[dq], errorAction);
    xhr.upload.addEventListener(\[dq]abort\[dq], errorAction);
    xhr.upload.addEventListener(\[dq]timeout\[dq], errorAction);

    // Build the payload
    const fileData = new FormData();
    fileData.append(\[dq]file\[dq], fileInput.files[0]);

    // Theoretically, event listeners could be set after the open() call
    // but browsers are buggy here
    xhr.open(\[dq]POST\[dq], \[dq]upload_test.php\[dq], true);

    // Note that the event listener must be set before sending (as it is a preflighted request)
    xhr.send(fileData);
  });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]XMLHttpRequest\f[R]
