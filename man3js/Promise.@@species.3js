.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Promise.\[at]\[at]species" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Promise.\[at]\[at]species - Promise[\[at]\[at]species]
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Promise[\[at]\[at]species]\f[B]\f[R] static accessor
property returns the constructor used to construct return values from
promise methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[V]\[at]\[at]species\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are investigating whether to remove this
feature (https://github.com/tc39/proposal-rm-builtin-subclassing).
Avoid relying on it if possible.
.RE
.SH SYNTAX
.IP
.nf
\f[C]
Promise[Symbol.species]
\f[R]
.fi
.SS Return value
.PP
The value of the constructor (\f[V]this\f[R]) on which
\f[V]get \[at]\[at]species\f[R] was called.
The return value is used to construct return values from promise
chaining methods that create new promises.
.SH DESCRIPTION
.PP
The \f[V]\[at]\[at]species\f[R] accessor property returns the default
constructor for \f[V]Promise\f[R] objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.nf
\f[C]
// Hypothetical underlying implementation for illustration
class Promise {
  static get [Symbol.species]() {
    return this;
  }
}
\f[R]
.fi
.PP
Because of this polymorphic implementation, \f[V]\[at]\[at]species\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.nf
\f[C]
class SubPromise extends Promise {}
SubPromise[Symbol.species] === SubPromise; // true
\f[R]
.fi
.PP
Promise chaining methods \[em] \f[V]then()\f[R], \f[V]catch()\f[R], and
\f[V]finally()\f[R] \[em] return new promise objects.
They get the constructor to construct the new promise through
\f[V]this.constructor[\[at]\[at]species]\f[R].
If \f[V]this.constructor\f[R] is \f[V]undefined\f[R], or if
\f[V]this.constructor[\[at]\[at]species]\f[R] is \f[V]undefined\f[R] or
\f[V]null\f[R], the default \f[V]Promise()\f[R] constructor is used.
Otherwise, the constructor returned by
\f[V]this.constructor[\[at]\[at]species]\f[R] is used to construct the
new promise object.
.SH EXAMPLES
.SS Species in ordinary objects
.PP
The \f[V]Symbol.species\f[R] property returns the default constructor
function, which is the \f[V]Promise\f[R] constructor for
\f[V]Promise\f[R].
.IP
.nf
\f[C]
Promise[Symbol.species]; // [Function: Promise]
\f[R]
.fi
.SS Species in derived objects
.PP
In an instance of a custom \f[V]Promise\f[R] subclass, such as
\f[V]MyPromise\f[R], the \f[V]MyPromise\f[R] species is the
\f[V]MyPromise\f[R] constructor.
However, you might want to override this, in order to return parent
\f[V]Promise\f[R] objects in your derived class methods.
.IP
.nf
\f[C]
class MyPromise extends Promise {
  // Override MyPromise species to the parent Promise constructor
  static get [Symbol.species]() {
    return Promise;
  }
}
\f[R]
.fi
.PP
By default, promise methods would return promises with the type of the
subclass.
.IP
.nf
\f[C]
class MyPromise extends Promise {
  someValue = 1;
}

console.log(MyPromise.resolve(1).then(() => {}).someValue); // 1
\f[R]
.fi
.PP
By overriding \f[V]\[at]\[at]species\f[R], the promise methods will
return the base \f[V]Promise\f[R] type.
.IP
.nf
\f[C]
class MyPromise extends Promise {
  someValue = 1;
  static get [Symbol.species]() {
    return Promise;
  }
}

console.log(MyPromise.resolve(1).then(() => {}).someValue); // undefined
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Promise\f[R]
.IP \[bu] 2
\f[V]Symbol.species\f[R]
