.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "RTCDataChannel.close_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCDataChannel.close_event \- RTCDataChannel: close event
.SH SYNOPSIS
The \f[B]\f[CB]close\f[B]\f[R] event is sent to the \f[CR]onclose\f[R]
event handler on an \f[CR]RTCDataChannel\f[R] instance when the data
transport for the data channel has closed.
Before any further data can be transferred using
\f[CR]RTCDataChannel\f[R], a new `RTCDataChannel' instance must be
created.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]close\[dq], (event) => {});

onclose = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example sets up a handler for the \f[CR]close\f[R] event for the
\f[CR]RTCDataChannel\f[R] named \f[CR]dc\f[R]; its responsibility in
this example is to update user interface elements to reflect that there
is no longer an ongoing call, and to allow a new call to be started.
.IP
.EX
dc.addEventListener(
  \[dq]close\[dq],
  (ev) => {
    messageInputBox.disabled = true;
    sendButton.disabled = true;
    connectButton.disabled = false;
    disconnectButton.disabled = true;
  },
  false,
);
.EE
.PP
All this code does in response to receiving the \f[CR]close\f[R] event
is to disable an input box and its \[lq]Send\[rq] button, and to enable
the button used to start a call (while disabling the one that ends a
call).
.PP
You can also use the \f[CR]onclose\f[R] event handler property to set a
handler for \f[CR]close\f[R] events:
.IP
.EX
dc.onclose = (ev) => {
  messageInputBox.disabled = true;
  sendButton.disabled = true;
  connectButton.disabled = false;
  disconnectButton.disabled = true;
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
A simple RTCDataChannel example
.IP \[bu] 2
Related events: \f[CR]open\f[R], \f[CR]message\f[R], and
\f[CR]error\f[R]
