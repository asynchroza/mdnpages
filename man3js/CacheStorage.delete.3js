.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CacheStorage.delete" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CacheStorage.delete \- CacheStorage: delete() method
.SH SYNOPSIS
The \f[B]\f[CB]delete()\f[B]\f[R] method of the \f[CR]CacheStorage\f[R]
interface finds the \f[CR]Cache\f[R] object matching the
\f[CR]cacheName\f[R], and if found, deletes the \f[CR]Cache\f[R] object
and returns a \f[CR]Promise\f[R] that resolves to \f[CR]true\f[R].
If no \f[CR]Cache\f[R] object is found, it resolves to \f[CR]false\f[R].
.PP
You can access \f[CR]CacheStorage\f[R] through the global
\f[CR]caches\f[R] property.
.SH SYNTAX
.IP
.EX
delete(cacheName)
.EE
.SS Parameters
.TP
\f[B]cacheName\f[R]
The name of the cache you want to delete.
.SS Return value
a \f[CR]Promise\f[R] that resolves to \f[CR]true\f[R] if the
\f[CR]Cache\f[R] object is found and deleted, and \f[CR]false\f[R]
otherwise.
.SH EXAMPLES
In this code snippet we wait for an activate event, and then run a
\f[CR]waitUntil()\f[R] block that clears up any old, unused caches
before a new service worker is activated.
Here we have an array of cache names we want to keep
(\f[CR]cachesToKeep\f[R]).
We return the keys of the caches in the \f[CR]CacheStorage\f[R] object
using \f[CR]CacheStorage.keys\f[R], then check each key to see if it is
in the array.
If not, we delete it using \f[CR]delete()\f[R].
.IP
.EX
this.addEventListener(\[dq]activate\[dq], (event) => {
  const cachesToKeep = [\[dq]v2\[dq]];

  event.waitUntil(
    caches.keys().then((keyList) =>
      Promise.all(
        keyList.map((key) => {
          if (!cachesToKeep.includes(key)) {
            return caches.delete(key);
          }
        }),
      ),
    ),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\f[CR]Cache\f[R]
.IP \[bu] 2
\f[CR]caches\f[R]
