.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Request" "JS" "September 16, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Request \- Request
.SH SYNOPSIS
The \f[B]\f[CB]Request\f[B]\f[R] interface of the Fetch API represents a
resource request.
.PP
You can create a new \f[CR]Request\f[R] object using the
\f[CR]Request()\f[R] constructor, but you are more likely to encounter a
\f[CR]Request\f[R] object being returned as the result of another API
operation, such as a service worker \f[CR]FetchEvent.request\f[R].
.SH CONSTRUCTOR
.TP
\f[B]Request()\f[R]
Creates a new \f[CR]Request\f[R] object.
.SH INSTANCE PROPERTIES
.TP
\f[B]Request.body\f[R] \f[I](read\-only)\f[R]
A \f[CR]ReadableStream\f[R] of the body contents.
.TP
\f[B]Request.bodyUsed\f[R] \f[I](read\-only)\f[R]
Stores \f[CR]true\f[R] or \f[CR]false\f[R] to indicate whether or not
the body has been used in a request yet.
.TP
\f[B]Request.cache\f[R] \f[I](read\-only)\f[R]
Contains the cache mode of the request (e.g., \f[CR]default\f[R],
\f[CR]reload\f[R], \f[CR]no\-cache\f[R]).
.TP
\f[B]Request.credentials\f[R] \f[I](read\-only)\f[R]
Contains the credentials of the request (e.g., \f[CR]omit\f[R],
\f[CR]same\-origin\f[R], \f[CR]include\f[R]).
The default is \f[CR]same\-origin\f[R].
.TP
\f[B]Request.destination\f[R] \f[I](read\-only)\f[R]
A string describing the type of content being requested.
.TP
\f[B]Request.headers\f[R] \f[I](read\-only)\f[R]
Contains the associated \f[CR]Headers\f[R] object of the request.
.TP
\f[B]Request.integrity\f[R] \f[I](read\-only)\f[R]
Contains the subresource integrity value of the request (e.g.,
\f[CR]sha256\-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=\f[R]).
.TP
\f[B]Request.method\f[R] \f[I](read\-only)\f[R]
Contains the request\[cq]s method (\f[CR]GET\f[R], \f[CR]POST\f[R],
etc.)
.TP
\f[B]Request.mode\f[R] \f[I](read\-only)\f[R]
Contains the mode of the request (e.g., \f[CR]cors\f[R],
\f[CR]no\-cors\f[R], \f[CR]same\-origin\f[R], \f[CR]navigate\f[R].)
.TP
\f[B]Request.redirect\f[R] \f[I](read\-only)\f[R]
Contains the mode for how redirects are handled.
It may be one of \f[CR]follow\f[R], \f[CR]error\f[R], or
\f[CR]manual\f[R].
.TP
\f[B]Request.referrer\f[R] \f[I](read\-only)\f[R]
Contains the referrer of the request (e.g., \f[CR]client\f[R]).
.TP
\f[B]Request.referrerPolicy\f[R] \f[I](read\-only)\f[R]
Contains the referrer policy of the request (e.g.,
\f[CR]no\-referrer\f[R]).
.TP
\f[B]Request.signal\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]AbortSignal\f[R] associated with the request
.TP
\f[B]Request.url\f[R] \f[I](read\-only)\f[R]
Contains the URL of the request.
.SH INSTANCE METHODS
.TP
\f[B]Request.arrayBuffer()\f[R]
Returns a promise that resolves with an \f[CR]ArrayBuffer\f[R]
representation of the request body.
.TP
\f[B]Request.blob()\f[R]
Returns a promise that resolves with a \f[CR]Blob\f[R] representation of
the request body.
.TP
\f[B]Request.clone()\f[R]
Creates a copy of the current \f[CR]Request\f[R] object.
.TP
\f[B]Request.formData()\f[R]
Returns a promise that resolves with a \f[CR]FormData\f[R]
representation of the request body.
.TP
\f[B]Request.json()\f[R]
Returns a promise that resolves with the result of parsing the request
body as \f[CR]JSON\f[R].
.TP
\f[B]Request.text()\f[R]
Returns a promise that resolves with a text representation of the
request body.
.RS
.PP
\f[B]Note:\f[R] The request body functions can be run only once;
subsequent calls will reject with TypeError showing that the body stream
has already used.
.RE
.SH EXAMPLES
In the following snippet, we create a new request using the
\f[CR]Request()\f[R] constructor (for an image file in the same
directory as the script), then return some property values of the
request:
.IP
.EX
const request = new Request(\[dq]https://www.mozilla.org/favicon.ico\[dq]);

const url = request.url;
const method = request.method;
const credentials = request.credentials;
.EE
.PP
You could then fetch this request by passing the \f[CR]Request\f[R]
object in as a parameter to a \f[CR]fetch()\f[R] call, for example:
.IP
.EX
fetch(request)
  .then((response) => response.blob())
  .then((blob) => {
    image.src = URL.createObjectURL(blob);
  });
.EE
.PP
In the following snippet, we create a new request using the
\f[CR]Request()\f[R] constructor with some initial data and body content
for an API request which need a body payload:
.IP
.EX
const request = new Request(\[dq]https://example.com\[dq], {
  method: \[dq]POST\[dq],
  body: \[aq]{\[dq]foo\[dq]: \[dq]bar\[dq]}\[aq],
});

const url = request.url;
const method = request.method;
const credentials = request.credentials;
const bodyUsed = request.bodyUsed;
.EE
.RS
.PP
\f[B]Note:\f[R] The body can only be a \f[CR]Blob\f[R], an
\f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], a \f[CR]DataView\f[R],
a \f[CR]FormData\f[R], a \f[CR]URLSearchParams\f[R], a
\f[CR]ReadableStream\f[R], or a \f[CR]String\f[R] object, as well as a
string literal, so for adding a JSON object to the payload you need to
stringify that object.
.RE
.PP
You could then fetch this API request by passing the \f[CR]Request\f[R]
object in as a parameter to a \f[CR]fetch()\f[R] call, for example and
get the response:
.IP
.EX
fetch(request)
  .then((response) => {
    if (response.status === 200) {
      return response.json();
    } else {
      throw new Error(\[dq]Something went wrong on API server!\[dq]);
    }
  })
  .then((response) => {
    console.debug(response);
    // \&...
  })
  .catch((error) => {
    console.error(error);
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
