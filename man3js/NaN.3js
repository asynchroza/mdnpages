'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "NaN" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]NaN\f[B]\f[R] global property is a value representing
Not-A-Number.
.SH Value
.PP
The same number value as \f[V]Number.NaN\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH Description
.PP
\f[V]NaN\f[R] is a property of the \f[I]global object\f[R].
In other words, it is a variable in global scope.
.PP
In modern browsers, \f[V]NaN\f[R] is a non-configurable, non-writable
property.
Even when this is not the case, avoid overriding it.
.PP
There are five different types of operations that return \f[V]NaN\f[R]:
.IP \[bu] 2
Failed number conversion (e.g.\ explicit ones like
\f[V]parseInt(\[dq]blabla\[dq])\f[R], \f[V]Number(undefined)\f[R], or
implicit ones like \f[V]Math.abs(undefined)\f[R])
.IP \[bu] 2
Math operation where the result is not a real number
(e.g.\ \f[V]Math.sqrt(-1)\f[R])
.IP \[bu] 2
Indeterminate form (e.g.\ \f[V]0 * Infinity\f[R],
\f[V]1 ** Infinity\f[R], \f[V]Infinity / Infinity\f[R],
\f[V]Infinity - Infinity\f[R])
.IP \[bu] 2
A method or expression whose operand is or gets coerced to \f[V]NaN\f[R]
(e.g.\ \f[V]7 ** NaN\f[R], \f[V]7 * \[dq]blabla\[dq]\f[R]) \[em] this
means \f[V]NaN\f[R] is contagious
.IP \[bu] 2
Other cases where an invalid value is to be represented as a number
(e.g.\ an invalid Date \f[V]new Date(\[dq]blabla\[dq]).getTime()\f[R],
\f[V]\[dq]\[dq].charCodeAt(1)\f[R])
.PP
\f[V]NaN\f[R] and its behaviors are not invented by JavaScript.
Its semantics in floating point arithmetic (including that
\f[V]NaN !== NaN\f[R]) are specified by IEEE
754 (https://en.wikipedia.org/wiki/Double_precision_floating-point_format).
\f[V]NaN\f[R]\[cq]s behaviors include:
.IP \[bu] 2
If \f[V]NaN\f[R] is involved in a mathematical operation (but not
bitwise operations), the result is usually also \f[V]NaN\f[R].
(See counter-example below.)
.IP \[bu] 2
When \f[V]NaN\f[R] is one of the operands of any relational comparison
(\f[V]>\f[R], \f[V]<\f[R], \f[V]>=\f[R], \f[V]<=\f[R]), the result is
always \f[V]false\f[R].
.IP \[bu] 2
\f[V]NaN\f[R] compares unequal (via \f[V]==\f[R], \f[V]!=\f[R],
\f[V]===\f[R], and \f[V]!==\f[R]) to any other value \[em] including to
another \f[V]NaN\f[R] value.
.PP
\f[V]NaN\f[R] is also one of the falsy values in JavaScript.
.SH Examples
.SS Testing against NaN
.PP
To tell if a value is \f[V]NaN\f[R], use \f[V]Number.isNaN()\f[R] or
\f[V]isNaN()\f[R] to most clearly determine whether a value is
\f[V]NaN\f[R] \[em] or, since \f[V]NaN\f[R] is the only value that
compares unequal to itself, you can perform a self-comparison like
\f[V]x !== x\f[R].
.IP
.nf
\f[C]
NaN === NaN; // false
Number.NaN === NaN; // false
isNaN(NaN); // true
isNaN(Number.NaN); // true
Number.isNaN(NaN); // true

function valueIsNaN(v) {
  return v !== v;
}
valueIsNaN(1); // false
valueIsNaN(NaN); // true
valueIsNaN(Number.NaN); // true
\f[R]
.fi
.PP
However, do note the difference between \f[V]isNaN()\f[R] and
\f[V]Number.isNaN()\f[R]: the former will return \f[V]true\f[R] if the
value is currently \f[V]NaN\f[R], or if it is going to be \f[V]NaN\f[R]
after it is coerced to a number, while the latter will return
\f[V]true\f[R] only if the value is currently \f[V]NaN\f[R]:
.IP
.nf
\f[C]
isNaN(\[dq]hello world\[dq]); // true
Number.isNaN(\[dq]hello world\[dq]); // false
\f[R]
.fi
.PP
For the same reason, using a BigInt value will throw an error with
\f[V]isNaN()\f[R] and not with \f[V]Number.isNaN()\f[R]:
.IP
.nf
\f[C]
isNaN(1n); // TypeError: Conversion from \[aq]BigInt\[aq] to \[aq]number\[aq] is not allowed.
Number.isNaN(1n); // false
\f[R]
.fi
.PP
Additionally, some array methods cannot find \f[V]NaN\f[R], while others
can.
Namely, the index-finding ones (\f[V]indexOf()\f[R],
\f[V]lastIndexOf()\f[R]) cannot find \f[V]NaN\f[R], while the
value-finding ones (\f[V]includes()\f[R]) can:
.IP
.nf
\f[C]
const arr = [2, 4, NaN, 12];
arr.indexOf(NaN); // -1
arr.includes(NaN); // true

// Methods accepting a properly defined predicate can always find NaN
arr.findIndex((n) => Number.isNaN(n)); // 2
\f[R]
.fi
.PP
For more information about \f[V]NaN\f[R] and its comparison, see
Equality comparison and sameness.
.SS Observably distinct NaN values
.PP
There\[cq]s a motivation for \f[V]NaN\f[R] being unequal to itself.
It\[cq]s possible to produce two floating point numbers with different
binary representations but are both \f[V]NaN\f[R], because in IEEE 754
encoding (https://en.wikipedia.org/wiki/NaN#Floating_point), any
floating point number with exponent \f[V]0x7ff\f[R] and a non-zero
mantissa is \f[V]NaN\f[R].
In JavaScript, you can do bit-level manipulation using typed arrays.
.IP
.nf
\f[C]
const f2b = (x) => new Uint8Array(new Float64Array([x]).buffer);
const b2f = (x) => new Float64Array(x.buffer)[0];
// Get a byte representation of NaN
const n = f2b(NaN);
// Change the first bit, which is the sign bit and doesn\[aq]t matter for NaN
n[0] = 1;
const nan2 = b2f(n);
console.log(nan2); // NaN
console.log(Object.is(nan2, NaN)); // true
console.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]
console.log(f2b(nan2)); // Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]
\f[R]
.fi
.SS Silently escaping NaN
.PP
\f[V]NaN\f[R] propagates through mathematical operations, so it\[cq]s
usually sufficient to test for \f[V]NaN\f[R] once at the end of
calculation to detect error conditions.
The only case where \f[V]NaN\f[R] gets silently escaped is when using
exponentiation with an exponent of \f[V]0\f[R], which immediately
returns \f[V]1\f[R] without testing the base\[cq]s value.
.IP
.nf
\f[C]
NaN ** 0 === 1; // true
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Number.NaN\f[R]
.IP \[bu] 2
\f[V]Number.isNaN()\f[R]
.IP \[bu] 2
\f[V]isNaN()\f[R]
