.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.getOwnPropertyDescriptor" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Reflect.getOwnPropertyDescriptor - Reflect.getOwnPropertyDescriptor()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Reflect.getOwnPropertyDescriptor()\f[B]\f[R] static
method is like \f[V]Object.getOwnPropertyDescriptor()\f[R].
It returns a property descriptor of the given property if it exists on
the object, \f[V]undefined\f[R] otherwise.
.SH SYNTAX
.IP
.nf
\f[C]
Reflect.getOwnPropertyDescriptor(target, propertyKey)
\f[R]
.fi
.SS Parameters
.TP
\f[B]target\f[R]
The target object in which to look for the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to get an own property descriptor for.
.SS Return value
.PP
A property descriptor object if the property exists as an own property
of \f[V]target\f[R]; otherwise, \f[V]undefined\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[V]target\f[R] is not an object.
.SH DESCRIPTION
.PP
\f[V]Reflect.getOwnPropertyDescriptor()\f[R] provides the reflective
semantic of retrieving the property descriptor of an object.
The only difference with \f[V]Object.getOwnPropertyDescriptor()\f[R] is
how non-object targets are handled.
\f[V]Reflect.getOwnPropertyDescriptor()\f[R] throws a
\f[V]TypeError\f[R] if the target is not an object, while
\f[V]Object.getOwnPropertyDescriptor()\f[R] coerces it to an object.
.PP
\f[V]Reflect.getOwnPropertyDescriptor()\f[R] invokes the
\f[V][[GetOwnProperty]]\f[R] object internal method of \f[V]target\f[R].
.SH EXAMPLES
.SS Using Reflect.getOwnPropertyDescriptor()
.IP
.nf
\f[C]
Reflect.getOwnPropertyDescriptor({ x: \[dq]hello\[dq] }, \[dq]x\[dq]);
// {value: \[dq]hello\[dq], writable: true, enumerable: true, configurable: true}

Reflect.getOwnPropertyDescriptor({ x: \[dq]hello\[dq] }, \[dq]y\[dq]);
// undefined

Reflect.getOwnPropertyDescriptor([], \[dq]length\[dq]);
// {value: 0, writable: true, enumerable: false, configurable: false}
\f[R]
.fi
.SS Difference with Object.getOwnPropertyDescriptor()
.PP
If the \f[V]target\f[R] argument to this method is not an object (a
primitive), then it will cause a \f[V]TypeError\f[R].
With \f[V]Object.getOwnPropertyDescriptor\f[R], a non-object first
argument will be coerced to an object at first.
.IP
.nf
\f[C]
Reflect.getOwnPropertyDescriptor(\[dq]foo\[dq], 0);
// TypeError: \[dq]foo\[dq] is not non-null object

Object.getOwnPropertyDescriptor(\[dq]foo\[dq], 0);
// { value: \[dq]f\[dq], writable: false, enumerable: true, configurable: false }
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Reflect.getOwnPropertyDescriptor\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]Object.getOwnPropertyDescriptor()\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]getOwnPropertyDescriptor\f[R] handler
