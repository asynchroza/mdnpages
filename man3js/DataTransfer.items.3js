.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransfer.items" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.items \- DataTransfer: items property
.SH SYNOPSIS
The read\-only \f[CR]DataTransfer\f[R] property \f[CR]items\f[R]
property is a \f[CR]list\f[R] of the data transfer items in a drag
operation.
The list includes one item for each item in the operation and if the
operation had no items, the list is empty.
.SH VALUE
A \f[CR]DataTransferItemList\f[R] object containing
\f[CR]DataTransferItem\f[R] objects representing the items being dragged
in a drag operation, one list item for each object being dragged.
If the drag operation had no data, the list is empty.
.SH EXAMPLES
.SS Logging dragged items
This example uses \f[CR]items\f[R] to log information about dragged
items.
.SS HTML
.IP
.EX
<ul>
  <li id=\[dq]source1\[dq] draggable=\[dq]true\[dq]>Drag Item 1 to the Drop Zone</li>
  <li id=\[dq]source2\[dq] draggable=\[dq]true\[dq]>Drag Item 2 to the Drop Zone</li>
</ul>
<div id=\[dq]target\[dq]>Drop Zone</div>

<button id=\[dq]reset\[dq]>Reset</button>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0em;
  padding: 2em;
}

target {
  border: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
function dragstartHandler(ev) {
  console.log(\[ga]dragstart: target.id = ${ev.target.id}\[ga]);
  // Add this element\[aq]s id to the drag payload so the drop handler will
  // know which element to add to its tree
  ev.dataTransfer.setData(\[dq]text/plain\[dq], ev.target.id);
  ev.dataTransfer.effectAllowed = \[dq]move\[dq];
}

function dropHandler(ev) {
  ev.preventDefault();
  // Get the id of the target and add the moved element to the target\[aq]s DOM
  const data = ev.dataTransfer.getData(\[dq]text\[dq]);
  ev.target.appendChild(document.getElementById(data));
  // Print each item\[aq]s \[dq]kind\[dq] and \[dq]type\[dq]
  if (ev.dataTransfer.items) {
    for (const item of ev.dataTransfer.items) {
      console.log(\[ga]kind = ${item.kind}, type = ${item.type}\[ga]);
    }
  }
}

function dragoverHandler(ev) {
  ev.preventDefault();
  // Set the dropEffect to move
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

const source1 = document.querySelector(\[dq]#source1\[dq]);
const source2 = document.querySelector(\[dq]#source2\[dq]);
const target = document.querySelector(\[dq]#target\[dq]);

source1.addEventListener(\[dq]dragstart\[dq], dragstartHandler);
source2.addEventListener(\[dq]dragstart\[dq], dragstartHandler);
target.addEventListener(\[dq]dragover\[dq], dragoverHandler);
target.addEventListener(\[dq]drop\[dq], dropHandler);

const reset = document.querySelector(\[dq]#reset\[dq]);
reset.addEventListener(\[dq]click\[dq], () => document.location.reload());
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Drag and drop
.IP \[bu] 2
Drag Operations
.IP \[bu] 2
Recommended Drag Types
.IP \[bu] 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
