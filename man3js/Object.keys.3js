.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Object.keys" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Object.keys - Object.keys()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Object.keys()\f[B]\f[R] static method returns an array of
a given object\[cq]s own enumerable string-keyed property names.
.SH SYNTAX
.IP
.nf
\f[C]
Object.keys(obj)
\f[R]
.fi
.SS Parameters
.TP
\f[B]obj\f[R]
An object.
.SS Return value
.PP
An array of strings representing the given object\[cq]s own enumerable
string-keyed property keys.
.SH DESCRIPTION
.PP
\f[V]Object.keys()\f[R] returns an array whose elements are strings
corresponding to the enumerable string-keyed property names found
directly upon \f[V]object\f[R].
This is the same as iterating with a \f[V]for...in\f[R] loop, except
that a \f[V]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[V]Object.keys()\f[R] is the same
as that provided by a \f[V]for...in\f[R] loop.
.PP
If you need the property values, use \f[V]Object.values()\f[R] instead.
If you need both the property keys and values, use
\f[V]Object.entries()\f[R] instead.
.SH EXAMPLES
.SS Using Object.keys()
.IP
.nf
\f[C]
// Simple array
const arr = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
console.log(Object.keys(arr)); // [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq]]

// Array-like object
const obj = { 0: \[dq]a\[dq], 1: \[dq]b\[dq], 2: \[dq]c\[dq] };
console.log(Object.keys(obj)); // [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq]]

// Array-like object with random key ordering
const anObj = { 100: \[dq]a\[dq], 2: \[dq]b\[dq], 7: \[dq]c\[dq] };
console.log(Object.keys(anObj)); // [\[aq]2\[aq], \[aq]7\[aq], \[aq]100\[aq]]

// getFoo is a non-enumerable property
const myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        return this.foo;
      },
    },
  },
);
myObj.foo = 1;
console.log(Object.keys(myObj)); // [\[aq]foo\[aq]]
\f[R]
.fi
.PP
If you want \f[I]all\f[R] string-keyed own properties, including
non-enumerable ones, see \f[V]Object.getOwnPropertyNames()\f[R].
.SS Using Object.keys() on primitives
.PP
Non-object arguments are coerced to objects.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.nf
\f[C]
// Strings have indices as enumerable own properties
console.log(Object.keys(\[dq]foo\[dq])); // [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq]]

// Other primitives have no own properties
console.log(Object.keys(100)); // []
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] In ES5, passing a non-object to \f[V]Object.keys()\f[R]
threw a \f[V]TypeError\f[R].
.RE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Object.keys\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
Enumerability and ownership of properties
.IP \[bu] 2
\f[V]Object.entries()\f[R]
.IP \[bu] 2
\f[V]Object.values()\f[R]
.IP \[bu] 2
\f[V]Object.prototype.propertyIsEnumerable()\f[R]
.IP \[bu] 2
\f[V]Object.create()\f[R]
.IP \[bu] 2
\f[V]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.keys()\f[R]
