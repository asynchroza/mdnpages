.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.with" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]with()\f[B]\f[R] method of \f[V]Array\f[R] instances is
the copying version of using the bracket notation to change the value of
a given index.
It returns a new array with the element at the given index replaced with
the given value.
.SH Syntax
.IP
.nf
\f[C]
array.with(index, value)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]index\f[R]
.RS 2
.IP \[bu] 2
Zero-based index at which to change the array, converted to an integer.
.RS 2
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]index < 0\f[R], \f[V]index + array.length\f[R] is used.
.IP \[bu] 2
If the index after normalization is out of bounds, a
\f[V]RangeError\f[R] is thrown.
.RE
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
Any value to be assigned to the given index.
.RE
.SS Return value
.PP
A new array with the element at \f[V]index\f[R] replaced with
\f[V]value\f[R].
.SS Exceptions
.IP \[bu] 2
\f[V]RangeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]index > array.length\f[R] or
\f[V]index < -array.length\f[R].
.RE
.SH Description
.PP
The \f[V]with()\f[R] method changes the value of a given index in the
array, returning a new array with the element at the given index
replaced with the given value.
The original array is not modified.
This allows you to chain array methods while doing manipulations.
.PP
The \f[V]with()\f[R] method never produces a sparse array.
If the source array is sparse, the empty slots will be replaced with
\f[V]undefined\f[R] in the new array.
.PP
The \f[V]with()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH Examples
.SS Creating a new array with a single element changed
.IP
.nf
\f[C]
const arr = [1, 2, 3, 4, 5];
console.log(arr.with(2, 6)); // [1, 2, 6, 4, 5]
console.log(arr); // [1, 2, 3, 4, 5]
\f[R]
.fi
.SS Chaining array methods
.PP
With the \f[V]with()\f[R] method, you can update a single element in an
array and then apply other array methods.
.IP
.nf
\f[C]
const arr = [1, 2, 3, 4, 5];
console.log(arr.with(2, 6).map((x) => x ** 2)); // [1, 4, 36, 16, 25]
\f[R]
.fi
.SS Using with() on sparse arrays
.PP
The \f[V]with()\f[R] method always creates a dense array.
.IP
.nf
\f[C]
const arr = [1, , 3, 4, , 6];
console.log(arr.with(0, 2)); // [2, undefined, 3, 4, undefined, 6]
\f[R]
.fi
.SS Calling with() on non-array objects
.PP
The \f[V]with()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
It then reads each integer-keyed property of \f[V]this\f[R] and writes
it to the new array, while \f[V]value\f[R] is written to the given
\f[V]index\f[R].
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  0: 5,
  2: 4,
};
console.log(Array.prototype.with.call(arrayLike, 0, 1));
// [ 1, undefined, 4 ]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.with\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#change-array-by-copy)
.IP \[bu] 2
\f[V]Array.prototype.toReversed()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toSorted()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toSpliced()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.with()\f[R]
