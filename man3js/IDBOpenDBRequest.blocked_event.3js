.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "IDBOpenDBRequest.blocked_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBOpenDBRequest.blocked_event \- IDBOpenDBRequest: blocked event
.SH SYNOPSIS
The \f[CR]blocked\f[R] handler is executed when an open connection to a
database is blocking a \f[CR]versionchange\f[R] transaction on the same
database.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]blocked\[dq], (event) => {});

onblocked = (event) => {};
.EE
.SH EVENT TYPE
An \f[CR]IDBVersionChangeEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent, \f[CI]Event\f[I]
interface.\f[R]
.TP
\f[B]IDBVersionChangeEvent.oldVersion\f[R] \f[I](read\-only)\f[R]
Returns the old version of the database.
.TP
\f[B]IDBVersionChangeEvent.newVersion\f[R] \f[I](read\-only)\f[R]
Returns the new version of the database.
.SH EXAMPLES
Using \f[CR]addEventListener()\f[R]:
.IP
.EX
// Open the database
const DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onupgradeneeded = (event) => {
  const db = event.target.result;

  db.onerror = () => {
    console.log(\[dq]Error creating database\[dq]);
  };

  // Create an objectStore for this database
  const objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  // define what data items the objectStore will contain
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: false });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: false });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: false });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: false });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: false });
};

DBOpenRequest.onsuccess = (event) => {
  // Let\[aq]s try to open the same database with a higher revision version
  const req2 = indexedDB.open(\[dq]toDoList\[dq], 5);

  // In this case the onblocked handler will be executed
  req2.addEventListener(\[dq]blocked\[dq], () => {
    console.log(\[dq]Request was blocked\[dq]);
  });
};
.EE
.PP
Using the \f[CR]onblocked\f[R] property:
.IP
.EX
// Open the database
const DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onupgradeneeded = (event) => {
  const db = event.target.result;

  db.onerror = () => {
    console.log(\[dq]Error creating database\[dq]);
  };

  // Create an objectStore for this database
  const objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  // define what data items the objectStore will contain
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: false });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: false });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: false });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: false });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: false });
};

DBOpenRequest.onsuccess = (event) => {
  // Let\[aq]s try to open the same database with a higher revision version
  const req2 = indexedDB.open(\[dq]toDoList\[dq], 5);

  // In this case the onblocked handler will be executed
  req2.onblocked = () => {
    console.log(\[dq]Request was blocked\[dq]);
  };
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
