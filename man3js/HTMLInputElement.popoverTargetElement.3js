.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "HTMLInputElement.popoverTargetElement" "JS" "December 22, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLInputElement.popoverTargetElement \- HTMLInputElement:
popoverTargetElement property
.SH SYNOPSIS
The \f[B]\f[CB]popoverTargetElement\f[B]\f[R] property of the
\f[CR]HTMLInputElement\f[R] interface gets and sets the popover element
to control via an \f[CR]<input>\f[R] element of
\f[CR]type=\[dq]button\[dq]\f[R].
.PP
It is the JavaScript equivalent of the \f[CR]popovertarget\f[R] HTML
attribute.
.SH VALUE
A reference to a popover element in the DOM.
.SH EXAMPLES
.IP
.EX
function supportsPopover() {
  return HTMLElement.prototype.hasOwnProperty(\[dq]popover\[dq]);
}

const popover = document.getElementById(\[dq]mypopover\[dq]);
const toggleBtn = document.getElementById(\[dq]toggleBtn\[dq]);

const popoverSupported = supportsPopover();

if (popoverSupported) {
  popover.popover = \[dq]auto\[dq];
  toggleBtn.popoverTargetElement = popover;
  toggleBtn.popoverTargetAction = \[dq]toggle\[dq];
} else {
  console.log(\[dq]Popover API not supported.\[dq]);
}
.EE
.SS Toggle popover action with an auto popover
This example shows the basic use of the popover API, setting a
\f[CR]<div>\f[R] element as a popover, and then setting it as the
\f[CR]popoverTargetElement\f[R] of an \f[CR]<input>\f[R] of
\f[CR]type=\[dq]button\[dq]\f[R].
The \f[CR]popover\f[R] attribute is set to \f[CR]\[dq]auto\[dq]\f[R], so
the popover can be closed (\[lq]light\-dismissed\[rq]) by clicking
outside the popover area.
.PP
First we define an \f[CR]<input>\f[R] that we will use to display and
hide the popover, and a \f[CR]<div>\f[R] that will be the popover.
In this case we don\[cq]t set the \f[CR]popovertargetaction\f[R] HTML
attribute on the \f[CR]<input>\f[R] or the \f[CR]popover\f[R] attribute
on the \f[CR]<div>\f[R], as we will be doing so programmatically.
.IP
.EX
<input id=\[dq]toggleBtn\[dq] type=\[dq]button\[dq] value=\[dq]Toggle popover\[dq] />
<div id=\[dq]mypopover\[dq]>This is popover content!</div>
.EE
.PP
The JavaScript code first gets a handle to the \f[CR]<div>\f[R] and
\f[CR]<input>\f[R] elements.
It then defines a function to check for popover support.
.IP
.EX
const popover = document.getElementById(\[dq]mypopover\[dq]);
const toggleBtn = document.getElementById(\[dq]toggleBtn\[dq]);

// Check for popover API support.
function supportsPopover() {
  return HTMLElement.prototype.hasOwnProperty(\[dq]popover\[dq]);
}
.EE
.PP
If the popover API is supported the code sets the \f[CR]<div>\f[R]
element\[cq]s \f[CR]popover\f[R] attribute to \f[CR]\[dq]auto\[dq]\f[R]
and makes it the popover target of the toggle button.
We then set the \f[CR]popoverTargetAction\f[R] of the button to
\f[CR]\[dq]toggle\[dq]\f[R].
If the popover API is not supported we change the text content of the
\f[CR]<div>\f[R] element to state this, and hide the input element.
.IP
.EX
if (supportsPopover()) {
  // Set the <div> element to be an auto popover
  popover.popover = \[dq]auto\[dq];

  // Set the button popover target to be the popover
  toggleBtn.popoverTargetElement = popover;

  // Set that the button toggles popover visibility
  toggleBtn.popoverTargetAction = \[dq]toggle\[dq];
} else {
  popover.textContent = \[dq]Popover API not supported.\[dq];
  toggleBtn.hidden = true;
}
.EE
.RS
.PP
\f[B]Note:\f[R] A popover element is hidden by default, but if the API
is not supported your element will display \[lq]as usual\[rq].
.RE
.PP
You can try out the example below.
Show and hide the popover by toggling the button.
The \[lq]auto\[rq] popover can also be light dismissed by selecting
outside the bounds of the popover text.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]popover\f[R] HTML global attribute
.IP \[bu] 2
Popover API
