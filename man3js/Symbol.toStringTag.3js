'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.toStringTag" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Symbol.toStringTag\f[B]\f[R] static data property
represents the well-known symbol \f[V]\[at]\[at]toStringTag\f[R].
\f[V]Object.prototype.toString()\f[R] looks up this symbol on the
\f[V]this\f[R] value for the property containing a string that
represents the type of the object.
.SH Value
.PP
The well-known symbol \f[V]\[at]\[at]toStringTag\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH Examples
.SS Default tags
.PP
Some values do not have \f[V]Symbol.toStringTag\f[R], but have special
\f[V]toString()\f[R] representations.
For a complete list, see \f[V]Object.prototype.toString()\f[R].
.IP
.nf
\f[C]
Object.prototype.toString.call(\[dq]foo\[dq]); // \[dq][object String]\[dq]
Object.prototype.toString.call([1, 2]); // \[dq][object Array]\[dq]
Object.prototype.toString.call(3); // \[dq][object Number]\[dq]
Object.prototype.toString.call(true); // \[dq][object Boolean]\[dq]
Object.prototype.toString.call(undefined); // \[dq][object Undefined]\[dq]
Object.prototype.toString.call(null); // \[dq][object Null]\[dq]
// ... and more
\f[R]
.fi
.SS Built-in toStringTag symbols
.PP
Most built-in objects provide their own \f[V]\[at]\[at]toStringTag\f[R]
property.
All built-in objects\[cq] \f[V]\[at]\[at]toStringTag\f[R] property is
not writable, not enumerable, and configurable.
.IP
.nf
\f[C]
Object.prototype.toString.call(new Map()); // \[dq][object Map]\[dq]
Object.prototype.toString.call(function* () {}); // \[dq][object GeneratorFunction]\[dq]
Object.prototype.toString.call(Promise.resolve()); // \[dq][object Promise]\[dq]
// ... and more
\f[R]
.fi
.SS Custom tag with toStringTag
.PP
When creating your own class, JavaScript defaults to the
\[lq]Object\[rq] tag:
.IP
.nf
\f[C]
class ValidatorClass {}

Object.prototype.toString.call(new ValidatorClass()); // \[dq][object Object]\[dq]
\f[R]
.fi
.PP
Now, with the help of \f[V]toStringTag\f[R], you are able to set your
own custom tag:
.IP
.nf
\f[C]
class ValidatorClass {
  get [Symbol.toStringTag]() {
    return \[dq]Validator\[dq];
  }
}

Object.prototype.toString.call(new ValidatorClass()); // \[dq][object Validator]\[dq]
\f[R]
.fi
.SS toStringTag available on all DOM prototype objects
.PP
Due to a WebIDL spec change (https://github.com/whatwg/webidl/pull/357)
in mid-2020, browsers are adding a \f[V]Symbol.toStringTag\f[R] property
to all DOM prototype objects.
For example, to access the \f[V]Symbol.toStringTag\f[R] property on
\f[V]HTMLButtonElement\f[R]:
.IP
.nf
\f[C]
const test = document.createElement(\[dq]button\[dq]);
test.toString(); // \[dq][object HTMLButtonElement]\[dq]
test[Symbol.toStringTag]; // \[dq]HTMLButtonElement\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Symbol.toStringTag\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-symbol)
.IP \[bu] 2
\f[V]Object.prototype.toString()\f[R]
