.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Range.getBoundingClientRect" "JS" "May 13, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Range.getBoundingClientRect \- Range: getBoundingClientRect() method
.SH SYNOPSIS
The \f[B]\f[CB]Range.getBoundingClientRect()\f[B]\f[R] method returns a
\f[CR]DOMRect\f[R] object that bounds the contents of the range; this is
a rectangle enclosing the union of the bounding rectangles for all the
elements in the range.
.PP
This method is useful for determining the viewport coordinates of the
cursor or selection inside a text box.
See \f[CR]Element.getBoundingClientRect()\f[R] for details on the
returned value.
.SH SYNTAX
.IP
.EX
getBoundingClientRect()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]DOMRect\f[R] object that encloses the union of the bounding
rectangles for all elements in the range.
.SH EXAMPLES
.SS HTML
.IP
.EX
<div id=\[dq]highlight\[dq]></div>
<p>
  This example positions a \[dq]highlight\[dq] rectangle behind the contents of a range.
  The range\[aq]s content <em>starts here</em> and continues on until it
  <em>ends here</em>. The bounding client rectangle contains everything selected
  in the range.
</p>
.EE
.SS CSS
.IP
.EX
highlight {
  background: yellow;
  position: absolute;
  z\-index: \-1;
}

p {
  width: 200px;
}
.EE
.SS JavaScript
.IP
.EX
const range = document.createRange();
range.setStartBefore(document.getElementsByTagName(\[dq]em\[dq]).item(0));
range.setEndAfter(document.getElementsByTagName(\[dq]em\[dq]).item(1));

const clientRect = range.getBoundingClientRect();
const highlight = document.getElementById(\[dq]highlight\[dq]);
highlight.style.left = \[ga]${clientRect.x}px\[ga];
highlight.style.top = \[ga]${clientRect.y}px\[ga];
highlight.style.width = \[ga]${clientRect.width}px\[ga];
highlight.style.height = \[ga]${clientRect.height}px\[ga];
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Range.getClientRects()\f[R] \- finer\-grained result for
non\-rectangular ranges (e.g., when the selection wraps onto the next
line);
.IP \[bu] 2
\f[CR]Element.getBoundingClientRect()\f[R]
.IP \[bu] 2
\f[CR]Document.caretPositionFromPoint()\f[R] \- to get the (node,
offset) from viewport coordinates.
