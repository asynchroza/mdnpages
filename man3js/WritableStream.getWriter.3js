.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WritableStream.getWriter" "JS" "October 28, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStream.getWriter \- WritableStream: getWriter() method
.SH SYNOPSIS
The \f[B]\f[CB]getWriter()\f[B]\f[R] method of the
\f[CR]WritableStream\f[R] interface returns a new instance of
\f[CR]WritableStreamDefaultWriter\f[R] and locks the stream to that
instance.
While the stream is locked, no other writer can be acquired until this
one is released.
.SH SYNTAX
.IP
.EX
getWriter()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]WritableStreamDefaultWriter\f[R] object instance.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The stream you are trying to create a writer for is not a
\f[CR]WritableStream\f[R] or it is already locked to another writer.
.SH EXAMPLES
The following example illustrates several features of this interface.
It shows the creation of the \f[CR]WritableStream\f[R] with a custom
sink and an API\-supplied queuing strategy.
t then calls a function called \f[CR]sendMessage()\f[R], passing the
newly created stream and a string.
Inside this function it calls the stream\[cq]s \f[CR]getWriter()\f[R]
method, which returns an instance of
\f[CR]WritableStreamDefaultWriter\f[R].
A \f[CR]forEach()\f[R] call is used to write each chunk of the string to
the stream.
Finally, \f[CR]write()\f[R] and \f[CR]close()\f[R] return promises that
are processed to deal with success or failure of chunks and streams.
.IP
.EX
const list = document.querySelector(\[dq]ul\[dq]);

function sendMessage(message, writableStream) {
  // defaultWriter is of type WritableStreamDefaultWriter
  const defaultWriter = writableStream.getWriter();
  const encoder = new TextEncoder();
  const encoded = encoder.encode(message, { stream: true });
  encoded.forEach((chunk) => {
    defaultWriter.ready
      .then(() => defaultWriter.write(chunk))
      .then(() => {
        console.log(\[dq]Chunk written to sink.\[dq]);
      })
      .catch((err) => {
        console.log(\[dq]Chunk error:\[dq], err);
      });
  });
  // Call ready again to ensure that all chunks are written
  //   before closing the writer.
  defaultWriter.ready
    .then(() => {
      defaultWriter.close();
    })
    .then(() => {
      console.log(\[dq]All chunks written\[dq]);
    })
    .catch((err) => {
      console.log(\[dq]Stream error:\[dq], err);
    });
}

const decoder = new TextDecoder(\[dq]utf\-8\[dq]);
const queuingStrategy = new CountQueuingStrategy({ highWaterMark: 1 });
let result = \[dq]\[dq];
const writableStream = new WritableStream(
  {
    // Implement the sink
    write(chunk) {
      return new Promise((resolve, reject) => {
        const buffer = new ArrayBuffer(1);
        const view = new Uint8Array(buffer);
        view[0] = chunk;
        const decoded = decoder.decode(view, { stream: true });
        const listItem = document.createElement(\[dq]li\[dq]);
        listItem.textContent = \[ga]Chunk decoded: ${decoded}\[ga];
        list.appendChild(listItem);
        result += decoded;
        resolve();
      });
    },
    close() {
      const listItem = document.createElement(\[dq]li\[dq]);
      listItem.textContent = \[ga][MESSAGE RECEIVED] ${result}\[ga];
      list.appendChild(listItem);
    },
    abort(err) {
      console.log(\[dq]Sink error:\[dq], err);
    },
  },
  queuingStrategy,
);

sendMessage(\[dq]Hello, world.\[dq], writableStream);
.EE
.PP
You can find the full code in our \c
.UR https://mdn.github.io/dom-examples/streams/simple-writer/
Simple writer example
.UE \c
\&.
