.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ConvolverNode.buffer" "JS" "November 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ConvolverNode.buffer \- ConvolverNode: buffer property
.SH SYNOPSIS
The \f[B]\f[CB]buffer\f[B]\f[R] property of the \f[CR]ConvolverNode\f[R]
interface represents a mono, stereo, or 4\-channel
\f[CR]AudioBuffer\f[R] containing the (possibly multichannel) impulse
response used by the \f[CR]ConvolverNode\f[R] to create the reverb
effect.
.PP
This is normally a simple recording of as\-close\-to\-an\-impulse as can
be found in the space you want to model.
For example, if you want to model the reverb in your bathroom, you might
set up a microphone near the door to record the sound of a balloon pop
or synthesized impulse from the sink.
That audio recording could then be used as the buffer.
.PP
This audio buffer must have the same sample\-rate as the
\f[CR]AudioContext\f[R] or an exception will be thrown.
At the time when this attribute is set, the buffer and the state of the
attribute will be used to configure the \f[CR]ConvolverNode\f[R] with
this impulse response having the given normalization.
The initial value of this attribute is \f[CR]null\f[R].
.SH VALUE
An \f[CR]AudioBuffer\f[R].
.SH EXAMPLES
.SS Assigning an audio buffer
The following example creates a convolver node and assigns it an
\f[CR]AudioBuffer\f[R].
.PP
For more complete applied examples/information, check out our \c
.UR https://mdn.github.io/webaudio-examples/voice-change-o-matic/
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR
https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js
app.js
.UE \c
\ for the code that is excerpted below).
.IP
.EX
const audioCtx = new AudioContext();
// ...

const convolver = audioCtx.createConvolver();
// ...

// Grab audio track via fetch() for convolver node
try {
  const response = await fetch(
    \[dq]https://mdn.github.io/voice\-change\-o\-matic/audio/concert\-crowd.ogg\[dq],
  );
  const arrayBuffer = await response.arrayBuffer();
  const decodedAudio = await audioCtx.decodeAudioData(arrayBuffer);
  convolver.buffer = decodedAudio;
} catch (error) {
  console.error(
    \[ga]Unable to fetch the audio file: ${name} Error: ${err.message}\[ga],
  );
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
