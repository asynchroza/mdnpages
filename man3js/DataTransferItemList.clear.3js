.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransferItemList.clear" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.clear \- DataTransferItemList: clear() method
.SH SYNOPSIS
The \f[CR]DataTransferItemList\f[R] method \f[B]\f[CB]clear()\f[B]\f[R]
removes all \f[CR]DataTransferItem\f[R] objects from the drag data items
list, leaving the list empty.
.PP
The drag data store in which this list is kept is only writable while
handling the \f[CR]dragstart\f[R] event.
While handling \f[CR]drop\f[R], the drag data store is in read\-only
mode, and this method silently does nothing.
No exception is thrown.
.SH SYNTAX
.IP
.EX
clear()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
This example shows the use of the \f[CR]clear()\f[R] method.
.SS HTML
.IP
.EX
<div>
  <p
    id=\[dq]source\[dq]
    ondragstart=\[dq]dragstartHandler(event);\[dq]
    ondragend=\[dq]dragendHandler(event);\[dq]
    draggable=\[dq]true\[dq]>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </p>
</div>
<div
  id=\[dq]target\[dq]
  ondrop=\[dq]dropHandler(event);\[dq]
  ondragover=\[dq]dragoverHandler(event);\[dq]>
  Drop Zone
</div>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0em;
  padding: 2em;
}
source {
  color: blue;
  border: 1px solid black;
}
target {
  border: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
function dragstartHandler(ev) {
  console.log(\[dq]dragStart\[dq]);

  // Add this element\[aq]s id to the drag payload so the drop handler will
  // know which element to add to its tree
  const dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \[dq]text/plain\[dq]);
}

function dropHandler(ev) {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();

  // Loop through the dropped items and log their data
  for (const item of ev.dataTransfer.items) {
    if (item.kind === \[dq]string\[dq] && item.type.match(/\[ha]text\[rs]/plain/)) {
      // This item is the target node
      item.getAsString((s) => {
        ev.target.appendChild(document.getElementById(s));
      });
    } else if (item.kind === \[dq]string\[dq] && item.type.match(/\[ha]text\[rs]/html/)) {
      // Drag data item is HTML
      item.getAsString((s) => {
        console.log(\[ga]\&... Drop: HTML = ${s}\[ga]);
      });
    } else if (item.kind === \[dq]string\[dq] && item.type.match(/\[ha]text\[rs]/uri\-list/)) {
      // Drag data item is URI
      item.getAsString((s) => {
        console.log(\[ga]\&... Drop: URI = ${s}\[ga]);
      });
    }
  }
}

function dragoverHandler(ev) {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();

  // Set the dropEffect to move
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

function dragendHandler(ev) {
  console.log(\[dq]dragEnd\[dq]);
  const dataList = ev.dataTransfer.items;

  // Clear any remaining drag data
  dataList.clear();
}
.EE
.SS Result
