.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.paste_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.paste_event \- Element: paste event
.SH SYNOPSIS
The \f[B]\f[CB]paste\f[B]\f[R] event is fired when the user has
initiated a \[lq]paste\[rq] action through the browser\[cq]s user
interface.
.PP
If the cursor is in an editable context (for example, in a
\f[CR]<textarea>\f[R] or an element with \f[CR]contenteditable\f[R]
attribute set to \f[CR]true\f[R]) then the default action is to insert
the contents of the clipboard into the document at the cursor position.
.PP
A handler for this event can access the clipboard contents by calling
\f[CR]getData()\f[R] on the event\[cq]s \f[CR]clipboardData\f[R]
property.
.PP
To override the default behavior (for example to insert some different
data or a transformation of the clipboard contents) an event handler
must cancel the default action using \f[CR]event.preventDefault()\f[R],
and then insert its desired data manually.
.PP
It\[cq]s possible to construct and dispatch a synthetic \f[CR]paste\f[R]
event, but this will not affect the document\[cq]s contents.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]paste\[dq], (event) => {});

onpaste = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]ClipboardEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EXAMPLES
.SS Live example
.SS HTML
.IP
.EX
<div class=\[dq]source\[dq] contenteditable=\[dq]true\[dq]>Copy text from this box.</div>
<div class=\[dq]target\[dq] contenteditable=\[dq]true\[dq]>And paste it into this one.</div>
.EE
.PP
\f[CR]css hidden div.source, div.target {   border: 1px solid gray;   margin: 0.5rem;   padding: 0.5rem;   height: 1rem;   background\-color: #e9eef1; }\f[R]
.SS JavaScript
.IP
.EX
const target = document.querySelector(\[dq]div.target\[dq]);

target.addEventListener(\[dq]paste\[dq], (event) => {
  event.preventDefault();

  let paste = (event.clipboardData || window.clipboardData).getData(\[dq]text\[dq]);
  paste = paste.toUpperCase();
  const selection = window.getSelection();
  if (!selection.rangeCount) return;
  selection.deleteFromDocument();
  selection.getRangeAt(0).insertNode(document.createTextNode(paste));
  selection.collapseToEnd();
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]cut\f[R], \f[CR]copy\f[R]
.IP \[bu] 2
This event on \f[CR]Document\f[R] targets: \f[CR]paste\f[R]
.IP \[bu] 2
This event on \f[CR]Window\f[R] targets: \f[CR]paste\f[R]
