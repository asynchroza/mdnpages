.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Map.get" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Map.get - Map.prototype.get()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]get()\f[B]\f[R] method returns a specified element from a
\f[V]Map\f[R] object.
If the value that is associated to the provided key is an object, then
you will get a reference to that object and any change made to that
object will effectively modify it inside the \f[V]Map\f[R] object.
.SH SYNTAX
.IP
.nf
\f[C]
get(key)
\f[R]
.fi
.SS Parameters
.TP
\f[B]key\f[R]
The key of the element to return from the \f[V]Map\f[R] object.
.SS Return value
.PP
The element associated with the specified key, or \f[V]undefined\f[R] if
the key can\[cq]t be found in the \f[V]Map\f[R] object.
.SH EXAMPLES
.SS Using get()
.IP
.nf
\f[C]
const myMap = new Map();
myMap.set(\[dq]bar\[dq], \[dq]foo\[dq]);

console.log(myMap.get(\[dq]bar\[dq])); // Returns \[dq]foo\[dq]
console.log(myMap.get(\[dq]baz\[dq])); // Returns undefined
\f[R]
.fi
.SS Using get() to retrieve a reference to an object
.IP
.nf
\f[C]
const arr = [];
const myMap = new Map();
myMap.set(\[dq]bar\[dq], arr);

myMap.get(\[dq]bar\[dq]).push(\[dq]foo\[dq]);

console.log(arr); // [\[dq]foo\[dq]]
console.log(myMap.get(\[dq]bar\[dq])); // [\[dq]foo\[dq]]
\f[R]
.fi
.PP
Note that the map holding a reference to the original object effectively
means the object cannot be garbage-collected, which may lead to
unexpected memory issues.
If you want the object stored in the map to have the same lifespan as
the original one, consider using a \f[V]WeakMap\f[R].
.SH SEE ALSO
.IP \[bu] 2
\f[V]Map\f[R]
.IP \[bu] 2
\f[V]Map.prototype.set()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.has()\f[R]
