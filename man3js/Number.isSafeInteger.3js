.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Number.isSafeInteger" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.isSafeInteger - Number.isSafeInteger()
.SH SYNOPSIS
The \f[B]\f[CB]Number.isSafeInteger()\f[B]\f[R] static method determines
whether the provided value is a number that is a \f[I]safe integer\f[R].
.SH SYNTAX
.IP
.EX
Number.isSafeInteger(testValue)
.EE
.SS Parameters
.TP
\f[B]testValue\f[R]
The value to be tested for being a safe integer.
.SS Return value
The boolean value \f[CR]true\f[R] if the given value is a number that is
a safe integer.
Otherwise \f[CR]false\f[R].
.SH DESCRIPTION
The safe integers consist of all integers from -(253 - 1) to 253 - 1,
inclusive (Â±9,007,199,254,740,991).
A safe integer is an integer that:
.IP \[bu] 2
can be exactly represented as an IEEE-754 double precision number, and
.IP \[bu] 2
whose IEEE-754 representation cannot be the result of rounding any other
integer to fit the IEEE-754 representation.
.PP
For example, 253 - 1 is a safe integer: it can be exactly represented,
and no other integer rounds to it under any IEEE-754 rounding mode.
In contrast, 253 is \f[I]not\f[R] a safe integer: it can be exactly
represented in IEEE-754, but the integer 253 + 1 can\[cq]t be directly
represented in IEEE-754 but instead rounds to 253 under round-to-nearest
and round-to-zero rounding.
.PP
Handling values larger or smaller than \[ti]9 quadrillion with full
precision requires using an arbitrary precision arithmetic
library (https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic).
See What Every Programmer Needs to Know about Floating Point
Arithmetic (https://floating-point-gui.de/) for more information on
floating point representations of numbers.
.PP
For larger integers, consider using the \f[CR]BigInt\f[R] type.
.SH EXAMPLES
.SS Using isSafeInteger()
.IP
.EX
Number.isSafeInteger(3); // true
Number.isSafeInteger(2 ** 53); // false
Number.isSafeInteger(2 ** 53 - 1); // true
Number.isSafeInteger(NaN); // false
Number.isSafeInteger(Infinity); // false
Number.isSafeInteger(\[dq]3\[dq]); // false
Number.isSafeInteger(3.1); // false
Number.isSafeInteger(3.0); // true
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Number.isSafeInteger\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-number)
.IP \[bu] 2
The \f[CR]Number\f[R] object it belongs to.
.IP \[bu] 2
\f[CR]Number.MIN_SAFE_INTEGER\f[R]
.IP \[bu] 2
\f[CR]Number.MAX_SAFE_INTEGER\f[R]
.IP \[bu] 2
\f[CR]BigInt\f[R]
