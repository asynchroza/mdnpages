.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Set.entries" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]entries()\f[B]\f[R] method returns a new \f[I]set
iterator\f[R] object that contains \f[B]an array of
\f[VB][value, value]\f[B]\f[R] for each element in the \f[V]Set\f[R]
object, in insertion order.
For \f[V]Set\f[R] objects there is no \f[V]key\f[R] like in
\f[V]Map\f[R] objects.
However, to keep the API similar to the \f[V]Map\f[R] object, each
\f[I]entry\f[R] has the same value for its \f[I]key\f[R] and
\f[I]value\f[R] here, so that an array \f[V][value, value]\f[R] is
returned.
.SH Syntax
.IP
.nf
\f[C]
entries()
\f[R]
.fi
.SS Return value
.PP
A new iterable iterator object.
.SH Examples
.SS Using entries()
.IP
.nf
\f[C]
const mySet = new Set();
mySet.add(\[dq]foobar\[dq]);
mySet.add(1);
mySet.add(\[dq]baz\[dq]);

const setIter = mySet.entries();

console.log(setIter.next().value); // [\[dq]foobar\[dq], \[dq]foobar\[dq]]
console.log(setIter.next().value); // [1, 1]
console.log(setIter.next().value); // [\[dq]baz\[dq], \[dq]baz\[dq]]
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Set.prototype.keys()\f[R]
.IP \[bu] 2
\f[V]Set.prototype.values()\f[R]
