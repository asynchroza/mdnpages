.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Set.entries" "JS" "August 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.entries \- Set.prototype.entries()
.SH SYNOPSIS
The \f[B]\f[CB]entries()\f[B]\f[R] method of \f[CR]Set\f[R] instances
returns a new \f[I]set iterator\f[R] object that contains \f[B]an array
of \f[CB][value, value]\f[B]\f[R] for each element in this set, in
insertion order.
For \f[CR]Set\f[R] objects there is no \f[CR]key\f[R] like in
\f[CR]Map\f[R] objects.
However, to keep the API similar to the \f[CR]Map\f[R] object, each
\f[I]entry\f[R] has the same value for its \f[I]key\f[R] and
\f[I]value\f[R] here, so that an array \f[CR][value, value]\f[R] is
returned.
.SH SYNTAX
.IP
.EX
entries()
.EE
.SS Parameters
None.
.SS Return value
A new iterable iterator object.
.SH EXAMPLES
.SS Using entries()
.IP
.EX
const mySet = new Set();
mySet.add(\[dq]foobar\[dq]);
mySet.add(1);
mySet.add(\[dq]baz\[dq]);

const setIter = mySet.entries();

console.log(setIter.next().value); // [\[dq]foobar\[dq], \[dq]foobar\[dq]]
console.log(setIter.next().value); // [1, 1]
console.log(setIter.next().value); // [\[dq]baz\[dq], \[dq]baz\[dq]]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Set.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.values()\f[R]
