.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "BaseAudioContext.createAnalyser" "JS" "April 6, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BaseAudioContext.createAnalyser \- BaseAudioContext: createAnalyser()
method
.SH SYNOPSIS
The \f[CR]createAnalyser()\f[R] method of the
\f[CR]BaseAudioContext\f[R] interface creates an
\f[CR]AnalyserNode\f[R], which can be used to expose audio time and
frequency data and create data visualizations.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]AnalyserNode()\f[R] constructor is the
recommended way to create an \f[CR]AnalyserNode\f[R]; see Creating an
AudioNode.
.RE
.RS
.PP
\f[B]Note:\f[R] For more on using this node, see the
\f[CR]AnalyserNode\f[R] page.
.RE
.SH SYNTAX
.IP
.EX
createAnalyser()
.EE
.SS Parameters
None.
.SS Return value
An \f[CR]AnalyserNode\f[R].
.SH EXAMPLES
The following example shows basic usage of an AudioContext to create an
Analyser node, then use requestAnimationFrame() to collect time domain
data repeatedly and draw an \[lq]oscilloscope style\[rq] output of the
current audio input.
For more complete applied examples/information, check out our \c
.UR https://mdn.github.io/webaudio-examples/voice-change-o-matic/
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR
https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\-193
.UE \c
\ for relevant code).
.IP
.EX
const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
const analyser = audioCtx.createAnalyser();

// \&...

analyser.fftSize = 2048;
const bufferLength = analyser.frequencyBinCount;
const dataArray = new Uint8Array(bufferLength);
analyser.getByteTimeDomainData(dataArray);

// draw an oscilloscope of the current audio source

function draw() {
  drawVisual = requestAnimationFrame(draw);

  analyser.getByteTimeDomainData(dataArray);

  canvasCtx.fillStyle = \[dq]rgb(200, 200, 200)\[dq];
  canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

  canvasCtx.lineWidth = 2;
  canvasCtx.strokeStyle = \[dq]rgb(0, 0, 0)\[dq];

  canvasCtx.beginPath();

  const sliceWidth = (WIDTH * 1.0) / bufferLength;
  let x = 0;

  for (let i = 0; i < bufferLength; i++) {
    const v = dataArray[i] / 128.0;
    const y = (v * HEIGHT) / 2;

    if (i === 0) {
      canvasCtx.moveTo(x, y);
    } else {
      canvasCtx.lineTo(x, y);
    }

    x += sliceWidth;
  }

  canvasCtx.lineTo(canvas.width, canvas.height / 2);
  canvasCtx.stroke();
}

draw();
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
