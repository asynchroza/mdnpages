.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.find" "JS" "April 17, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.find - Array.prototype.find()
.SH SYNOPSIS
The \f[B]\f[CB]find()\f[B]\f[R] method returns the first element in the
provided array that satisfies the provided testing function.
If no values satisfy the testing function, \f[CR]undefined\f[R] is
returned.
.IP \[bu] 2
If you need the \f[B]index\f[R] of the found element in the array, use
\f[CR]findIndex()\f[R].
.IP \[bu] 2
If you need to find the \f[B]index of a value\f[R], use
\f[CR]indexOf()\f[R].
(It\[cq]s similar to \f[CR]findIndex()\f[R], but checks each element for
equality with the value instead of using a testing function.)
.IP \[bu] 2
If you need to find if a value \f[B]exists\f[R] in an array, use
\f[CR]includes()\f[R].
Again, it checks each element for equality with the value instead of
using a testing function.
.IP \[bu] 2
If you need to find if any element satisfies the provided testing
function, use \f[CR]some()\f[R].
.SH SYNTAX
.IP
.EX
find(callbackFn)
find(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]find()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
The first element in the array that satisfies the provided testing
function.
Otherwise, \f[CR]undefined\f[R] is returned.
.SH DESCRIPTION
The \f[CR]find()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array in ascending-index order, until \f[CR]callbackFn\f[R]
returns a truthy value.
\f[CR]find()\f[R] then returns that element and stops iterating through
the array.
If \f[CR]callbackFn\f[R] never returns a truthy value, \f[CR]find()\f[R]
returns \f[CR]undefined\f[R].
.PP
\f[CR]callbackFn\f[R] is invoked for \f[I]every\f[R] index of the array,
not just those with assigned values.
Empty slots in sparse arrays behave the same as \f[CR]undefined\f[R].
.PP
\f[CR]find()\f[R] does not mutate the array on which it is called, but
the function provided as \f[CR]callbackFn\f[R] can.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[CR]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[CR]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[CR]find()\f[R] began.
.IP \[bu] 2
Changes to already-visited indexes do not cause \f[CR]callbackFn\f[R] to
be invoked on them again.
.IP \[bu] 2
If an existing, yet-unvisited element of the array is changed by
\f[CR]callbackFn\f[R], its value passed to the \f[CR]callbackFn\f[R]
will be the value at the time that element gets visited.
Deleted elements are visited as if they were \f[CR]undefined\f[R].
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard-to-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The \f[CR]find()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Find an object in an array by one of its properties
.IP
.EX
const inventory = [
  { name: \[dq]apples\[dq], quantity: 2 },
  { name: \[dq]bananas\[dq], quantity: 0 },
  { name: \[dq]cherries\[dq], quantity: 5 },
];

function isCherries(fruit) {
  return fruit.name === \[dq]cherries\[dq];
}

console.log(inventory.find(isCherries));
// { name: \[aq]cherries\[aq], quantity: 5 }
.EE
.SS Using arrow function and destructuring
.IP
.EX
const inventory = [
  { name: \[dq]apples\[dq], quantity: 2 },
  { name: \[dq]bananas\[dq], quantity: 0 },
  { name: \[dq]cherries\[dq], quantity: 5 },
];

const result = inventory.find(({ name }) => name === \[dq]cherries\[dq]);

console.log(result); // { name: \[aq]cherries\[aq], quantity: 5 }
.EE
.SS Find a prime number in an array
The following example finds an element in the array that is a prime
number (or returns \f[CR]undefined\f[R] if there is no prime number):
.IP
.EX
function isPrime(element, index, array) {
  let start = 2;
  while (start <= Math.sqrt(element)) {
    if (element % start++ < 1) {
      return false;
    }
  }
  return element > 1;
}

console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found
console.log([4, 5, 8, 12].find(isPrime)); // 5
.EE
.SS Using find() on sparse arrays
Empty slots in sparse arrays \f[I]are\f[R] visited, and are treated the
same as \f[CR]undefined\f[R].
.IP
.EX
// Declare array with no elements at indexes 2, 3, and 4
const array = [0, 1, , , , 5, 6];

// Shows all indexes, not just those with assigned values
array.find((value, index) => {
  console.log(\[dq]Visited index\[dq], index, \[dq]with value\[dq], value);
});
// Visited index 0 with value 0
// Visited index 1 with value 1
// Visited index 2 with value undefined
// Visited index 3 with value undefined
// Visited index 4 with value undefined
// Visited index 5 with value 5
// Visited index 6 with value 6

// Shows all indexes, including deleted
array.find((value, index) => {
  // Delete element 5 on first iteration
  if (index === 0) {
    console.log(\[dq]Deleting array[5] with value\[dq], array[5]);
    delete array[5];
  }
  // Element 5 is still visited even though deleted
  console.log(\[dq]Visited index\[dq], index, \[dq]with value\[dq], value);
});
// Deleting array[5] with value 5
// Visited index 0 with value 0
// Visited index 1 with value 1
// Visited index 2 with value undefined
// Visited index 3 with value undefined
// Visited index 4 with value undefined
// Visited index 5 with value undefined
// Visited index 6 with value 6
.EE
.SS Calling find() on non-array objects
The \f[CR]find()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each integer index.
.IP
.EX
const arrayLike = {
  length: 3,
  0: 2,
  1: 7.3,
  2: 4,
};
console.log(Array.prototype.find.call(arrayLike, (x) => !Number.isInteger(x)));
// 7.3
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.prototype.find\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findLast()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findLastIndex()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.includes()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.filter()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.find()\f[R]
