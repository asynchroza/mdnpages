.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Clipboard" "JS" "November 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard \- Clipboard
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]Clipboard\f[B]\f[R] interface implements the Clipboard
API, providing\[em]if the user grants permission\[em]both read and write
access to the contents of the system clipboard.
The Clipboard API can be used to implement cut, copy, and paste features
within a web application.
.PP
The system clipboard is exposed through the global
\f[CR]Navigator.clipboard\f[R] property.
.PP
Calls to the methods of the \f[CR]Clipboard\f[R] object will not succeed
if the user hasn\[cq]t granted the needed permissions using the
Permissions API and the \f[CR]\[aq]clipboard\-read\[aq]\f[R] or
\f[CR]\[aq]clipboard\-write\[aq]\f[R] permission as appropriate.
.RS
.PP
\f[B]Note:\f[R] In reality, at this time browser requirements for access
to the clipboard vary significantly.
Please see the section Clipboard availability for details.
.RE
.PP
All of the Clipboard API methods operate asynchronously; they return a
\f[CR]Promise\f[R] which is resolved once the clipboard access has been
completed.
The promise is rejected if clipboard access is denied.
.SH INSTANCE METHODS
\f[I]\f[CI]Clipboard\f[I] is based on the \f[CI]EventTarget\f[I]
interface, and includes its methods.\f[R]
.TP
\f[B]read()\f[R]
Requests arbitrary data (such as images) from the clipboard, returning a
\f[CR]Promise\f[R] that resolves with an array of
\f[CR]ClipboardItem\f[R] objects containing the clipboard\[cq]s
contents.
.TP
\f[B]readText()\f[R]
Requests text from the system clipboard; returns a \f[CR]Promise\f[R]
which is resolved with a string containing the clipboard\[cq]s text once
it\[cq]s available.
.TP
\f[B]write()\f[R]
Writes arbitrary data to the system clipboard.
This asynchronous operation signals that it\[cq]s finished by resolving
the returned \f[CR]Promise\f[R].
.TP
\f[B]writeText()\f[R]
Writes text to the system clipboard, returning a \f[CR]Promise\f[R]
which is resolved once the text is fully copied into the clipboard.
.SH CLIPBOARD AVAILABILITY
The asynchronous clipboard API is a relatively recent addition, and the
process of implementing it in browsers is not yet complete.
Due to both potential security concerns and technical complexities, the
process of integrating this API is happening gradually in most browsers.
See the browser compatibility section below for more information.
.PP
In browser extensions, you can access the system clipboard using the
WebExtension \f[CR]clipboard\f[R] API.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Document.execCommand()\f[R]
