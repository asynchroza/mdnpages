.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CanvasRenderingContext2D.reset" "JS" "April 18, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.reset \- CanvasRenderingContext2D: reset()
method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.reset()\f[B]\f[R] method of the
Canvas 2D API resets the rendering context to its default state,
allowing it to be reused for drawing something else without having to
explicitly reset all the properties.
.PP
Resetting clears the backing buffer, drawing state stack, any defined
paths, and styles.
This includes the current transformation matrix, compositing properties,
clipping region, dash list, line styles, text styles, shadows, image
smoothing, filters, and so on.
.SH SYNTAX
.IP
.EX
reset()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
This example shows how we can use \f[CR]reset()\f[R] to completely clear
the context before redrawing.
.PP
First we define a button and a canvas.
.IP
.EX
toggle\-reset {
  display: block;
}
.EE
.IP
.EX
<button id=\[dq]toggle\-reset\[dq]>Toggle</button>
<canvas id=\[dq]my\-house\[dq] width=\[dq]500\[dq] height=\[dq]200\[dq]></canvas>
.EE
.PP
The code first gets a \f[CR]2d\f[R] context for the canvas.
It then defines functions that can use the context to draw a rectangle
and a circle, respectively.
.IP
.EX
// Get the 2d context
const canvas = document.getElementById(\[dq]my\-house\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

function drawRect() {
  // Set line width
  ctx.lineWidth = 10;

  // Stroke rect outline
  ctx.strokeRect(50, 50, 150, 100);

  // Create filled text
  ctx.font = \[dq]50px serif\[dq];
  ctx.fillText(\[dq]Rect!\[dq], 70, 110);
}

function drawCircle() {
  // Set line width
  ctx.lineWidth = 5;

  // Stroke out circle
  ctx.beginPath();
  ctx.arc(300, 100, 50, 0, 2 * Math.PI);
  ctx.stroke();

  // Create filled text
  ctx.font = \[dq]25px sans\-serif\[dq];
  ctx.fillText(\[dq]Circle!\[dq], 265, 100);
}
.EE
.PP
We then draw the rectangle using its function.
The button toggles drawing the circle and rectangle.
Note how \f[CR]reset()\f[R] is called before drawing to clear the
context.
.IP
.EX
drawRect();

// Toggle between circle and rectangle using button
let toggle = true;
const mybutton = document.getElementById(\[dq]toggle\-reset\[dq]);

mybutton.addEventListener(\[dq]click\[dq], () => {
  ctx.reset(); // Clear the context!
  if (toggle) {
    drawCircle();
  } else {
    drawRect();
  }
  toggle = !toggle;
});
.EE
.PP
The result looks like this:
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
