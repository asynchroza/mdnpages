.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MutationRecord.oldValue" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.oldValue \- MutationRecord: oldValue property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]oldValue\f[B]\f[R] contains the character data or attribute
value of an observed node before it was changed.
.SH VALUE
A string representing the old value of an attribute which has been
changed, if:
.IP \[bu] 2
the \f[CR]attributeOldValue\f[R] parameter to
\f[CR]MutationObserver.observe()\f[R] is \f[CR]true\f[R]
.IP \[bu] 2
the \f[CR]attributes\f[R] parameter to
\f[CR]MutationObserver.observe()\f[R] is \f[CR]true\f[R] or omitted
.IP \[bu] 2
the mutation \f[CR]type\f[R] is \f[CR]attributes\f[R].
.PP
A string representing the old value of a \f[CR]CharacterData\f[R] node
that has been changed, if:
.IP \[bu] 2
the \f[CR]characterDataOldValue\f[R] parameter to
\f[CR]MutationObserver.observe()\f[R] is \f[CR]true\f[R]
.IP \[bu] 2
the \f[CR]characterData\f[R] parameter to
\f[CR]MutationObserver.observe()\f[R] is \f[CR]true\f[R] or omitted
.IP \[bu] 2
the mutation \f[CR]type\f[R] is \f[CR]characterData\f[R].
.PP
Otherwise this property is \f[CR]null\f[R].
.SH EXAMPLES
.SS Show old color value
In the following example, there is a button that changes the color of an
\f[CR]h1\f[R] to a random new color.
A \f[CR]MutationObserver\f[R] is used to observe the target node
(\f[CR]h1\f[R]) for changes to the attribute; when a change is detected,
the observer calls a function, \f[CR]logOldValue()\f[R].
.PP
The \f[CR]logOldValue()\f[R] function is passed the
\f[CR]mutationRecords\f[R] array, which contains the
\f[CR]MutationRecord\f[R] objects.
The \f[CR]oldValue\f[R] property of the \f[CR]MutationRecord\f[R] object
is then displayed, in the color of the old value.
.SS HTML
.IP
.EX
<h1 id=\[dq]h1\[dq] style=\[dq]color:rgb(0, 0, 0);\[dq]>Hi, Mom!</h1>
<button id=\[dq]changeColorButton\[dq]>Change color</button>
<p id=\[dq]log\[dq]></p>
.EE
.SS JavaScript
.IP
.EX
const h1 = document.getElementById(\[dq]h1\[dq]);
const changeValueButton = document.getElementById(\[dq]changeColorButton\[dq]);
const log = document.getElementById(\[dq]log\[dq]);

changeColorButton.addEventListener(\[dq]click\[dq], () => {
  // Random 6 character hexadecimal number to use as the hex color value
  const newColor = Math.floor(Math.random() * 16777215).toString(16);
  h1.style.color = \[ga]#${newColor}\[ga];
});

function logOldValue(mutationRecordArray) {
  for (const record of mutationRecordArray) {
    log.textContent = \[ga]Old value: ${record.oldValue}\[ga];
    log.style.cssText = record.oldValue;
  }
}

const observer = new MutationObserver(logOldValue);
observer.observe(h1, {
  attributes: true,
  attributeOldValue: true,
});
.EE
.SS Result
