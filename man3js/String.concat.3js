.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.concat" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]concat()\f[B]\f[R] method concatenates the string
arguments to the calling string and returns a new string.
.SH Syntax
.IP
.nf
\f[C]
concat(str1)
concat(str1, str2)
concat(str1, str2, /* \&..., */ strN)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]strN\f[R]
.RS 2
.IP \[bu] 2
One or more strings to concatenate to \f[V]str\f[R].
.RE
.SS Return value
.PP
A new string containing the combined text of the strings provided.
.SH Description
.PP
The \f[V]concat()\f[R] function concatenates the string arguments to the
calling string and returns a new string.
Changes to the original string or the returned string don\[cq]t affect
the other.
.PP
If the arguments are not of the type string, they are converted to
string values before concatenating.
.PP
The \f[V]concat()\f[R] method is very similar to the addition/string
concatenation operators (\f[V]+\f[R], \f[V]+=\f[R]), except that
\f[V]concat()\f[R] coerces its arguments directly to strings, while
addition coerces its operands to primitives first.
For more information, see the reference page for the \f[V]+\f[R]
operator.
.SH Examples
.SS Using concat()
.PP
The following example combines strings into a new string.
.IP
.nf
\f[C]
const hello = \[dq]Hello, \[dq];
console.log(hello.concat(\[dq]Kevin\[dq], \[dq]. Have a nice day.\[dq]));
// Hello, Kevin. Have a nice day.

const greetList = [\[dq]Hello\[dq], \[dq] \[dq], \[dq]Venkat\[dq], \[dq]!\[dq]];
\[dq]\[dq].concat(...greetList); // \[dq]Hello Venkat!\[dq]

\[dq]\[dq].concat({}); // \[dq][object Object]\[dq]
\[dq]\[dq].concat([]); // \[dq]\[dq]
\[dq]\[dq].concat(null); // \[dq]null\[dq]
\[dq]\[dq].concat(true); // \[dq]true\[dq]
\[dq]\[dq].concat(4, 5); // \[dq]45\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Array.prototype.concat()\f[R]
.IP \[bu] 2
Addition operator
