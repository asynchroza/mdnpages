.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Function" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Function\f[B]\f[R] object provides methods for functions.
In JavaScript, every function is actually a \f[V]Function\f[R] object.
.SH Constructor
.IP \[bu] 2
\f[V]Function()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Function\f[R] object.
Calling the constructor directly can create functions dynamically but
suffers from security and similar (but far less significant) performance
issues to \f[V]eval()\f[R].
However, unlike \f[V]eval()\f[R], the \f[V]Function\f[R] constructor
creates functions that execute in the global scope only.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]Function.prototype\f[R] and shared
by all \f[V]Function\f[R] instances.
.IP \[bu] 2
\f[V]Function.prototype.arguments\f[R] \f[I](deprecated)\f[R]
\f[I](non-standard)\f[R]
.RS 2
.IP \[bu] 2
Represents the arguments passed to this function.
For strict, arrow, async, and generator functions, accessing the
\f[V]arguments\f[R] property throws a \f[V]TypeError\f[R].
Use the \f[V]arguments\f[R] object inside function closures instead.
.RE
.IP \[bu] 2
\f[V]Function.prototype.caller\f[R] \f[I](deprecated)\f[R]
\f[I](non-standard)\f[R]
.RS 2
.IP \[bu] 2
Represents the function that invoked this function.
For strict, arrow, async, and generator functions, accessing the
\f[V]caller\f[R] property throws a \f[V]TypeError\f[R].
.RE
.IP \[bu] 2
\f[V]Function.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]Function\f[R] instances, the initial value is the
\f[V]Function\f[R] constructor.
.RE
.PP
These properties are own properties of each \f[V]Function\f[R] instance.
.IP \[bu] 2
\f[V]displayName\f[R] \f[I](non-standard)\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
The display name of the function.
.RE
.IP \[bu] 2
\f[V]length\f[R]
.RS 2
.IP \[bu] 2
Specifies the number of arguments expected by the function.
.RE
.IP \[bu] 2
\f[V]name\f[R]
.RS 2
.IP \[bu] 2
The name of the function.
.RE
.IP \[bu] 2
\f[V]prototype\f[R]
.RS 2
.IP \[bu] 2
Used when the function is used as a constructor with the \f[V]new\f[R]
operator.
It will become the new object\[cq]s prototype.
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]Function.prototype.apply()\f[R]
.RS 2
.IP \[bu] 2
Calls a function with a given \f[V]this\f[R] value and optional
arguments provided as an array (or an array-like object).
.RE
.IP \[bu] 2
\f[V]Function.prototype.bind()\f[R]
.RS 2
.IP \[bu] 2
Creates a new function that, when called, has its \f[V]this\f[R] keyword
set to a provided value, optionally with a given sequence of arguments
preceding any provided when the new function is called.
.RE
.IP \[bu] 2
\f[V]Function.prototype.call()\f[R]
.RS 2
.IP \[bu] 2
Calls a function with a given \f[V]this\f[R] value and optional
arguments.
.RE
.IP \[bu] 2
\f[V]Function.prototype.toString()\f[R]
.RS 2
.IP \[bu] 2
Returns a string representing the source code of the function.
Overrides the \f[V]Object.prototype.toString\f[R] method.
.RE
.IP \[bu] 2
\f[V]Function.prototype[\[at]\[at]hasInstance]()\f[R]
.RS 2
.IP \[bu] 2
Specifies the default procedure for determining if a constructor
function recognizes an object as one of the constructor\[cq]s instances.
Called by the \f[V]instanceof\f[R] operator.
.RE
.SH Examples
.SS Difference between Function constructor and function declaration
.PP
Functions created with the \f[V]Function\f[R] constructor do not create
closures to their creation contexts; they always are created in the
global scope.
When running them, they will only be able to access their own local
variables and global ones, not the ones from the scope in which the
\f[V]Function\f[R] constructor was created.
This is different from using \f[V]eval()\f[R] with code for a function
expression.
.IP
.nf
\f[C]
// Create a global property with \[ga]var\[ga]
var x = 10;

function createFunction1() {
  const x = 20;
  return new Function(\[dq]return x;\[dq]); // this \[ga]x\[ga] refers to global \[ga]x\[ga]
}

function createFunction2() {
  const x = 20;
  function f() {
    return x; // this \[ga]x\[ga] refers to the local \[ga]x\[ga] above
  }
  return f;
}

const f1 = createFunction1();
console.log(f1()); // 10
const f2 = createFunction2();
console.log(f2()); // 20
\f[R]
.fi
.PP
While this code works in web browsers, \f[V]f1()\f[R] will produce a
\f[V]ReferenceError\f[R] in Node.js, as \f[V]x\f[R] will not be found.
This is because the top-level scope in Node is not the global scope, and
\f[V]x\f[R] will be local to the module.
.SH See also
.IP \[bu] 2
\f[V]function\f[R] declaration
.IP \[bu] 2
\f[V]function\f[R] expression
.IP \[bu] 2
\f[V]AsyncFunction\f[R]
.IP \[bu] 2
\f[V]AsyncGeneratorFunction\f[R]
.IP \[bu] 2
\f[V]GeneratorFunction\f[R]
.IP \[bu] 2
\f[V]Functions\f[R]
