.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "AsyncGenerator.throw" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]throw()\f[B]\f[R] method of \f[V]AsyncGenerator\f[R]
instances acts as if a \f[V]throw\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which informs
the generator of an error condition and allows it to handle the error,
or perform cleanup and close itself.
.SH Syntax
.IP
.nf
\f[C]
asyncGeneratorObject.throw(exception)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]exception\f[R]
.RS 2
.IP \[bu] 2
The exception to throw.
For debugging purposes, it is useful to make it an \f[V]instanceof\f[R]
\f[V]Error\f[R].
.RE
.SS Return value
.PP
If the thrown error is not caught, it will return a \f[V]Promise\f[R]
which rejects with the exception passed in.
.PP
If the exception is caught by a \f[V]try...catch\f[R] and the generator
resumes to yield more values, it will return a \f[V]Promise\f[R] which
resolves with an \f[V]Object\f[R] with two properties:
.IP \[bu] 2
\f[V]done\f[R]
.RS 2
.IP \[bu] 2
A boolean value:
.RS 2
.IP \[bu] 2
\f[V]true\f[R] if the generator function\[cq]s control flow has reached
the end.
.IP \[bu] 2
\f[V]false\f[R] if the generator function is able to produce more
values.
.RE
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
The value yielded from the next \f[V]yield\f[R] expression.
.RE
.SH Examples
.SS Using throw()
.PP
The following example shows a simple generator and an error that is
thrown using the \f[V]throw\f[R] method.
An error can be caught by a \f[V]try...catch\f[R] block as usual.
.IP
.nf
\f[C]
// An async task. Pretend it\[aq]s doing something more useful
// in practice.
function sleep(time) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, time);
  });
}

async function* createAsyncGenerator() {
  while (true) {
    try {
      await sleep(500);
      yield 42;
    } catch (e) {
      console.error(e);
    }
  }
}

const asyncGen = createAsyncGenerator();
asyncGen.next(1).then((res) => console.log(res)); // { value: 42, done: false }
asyncGen
  .throw(new Error(\[dq]Something went wrong\[dq])) // Error: Something went wrong
  .then((res) => console.log(res)); // { value: 42, done: false }
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]async function*\f[R]
.IP \[bu] 2
Iterators and generators
