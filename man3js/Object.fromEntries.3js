.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Object.fromEntries" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Object.fromEntries()\f[B]\f[R] static method transforms a
list of key-value pairs into an object.
.SH Syntax
.IP
.nf
\f[C]
Object.fromEntries(iterable)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]iterable\f[R]
.RS 2
.IP \[bu] 2
An iterable, such as an \f[V]Array\f[R] or \f[V]Map\f[R], containing a
list of objects.
Each object should have two properties:
.RS 2
.IP \[bu] 2
\f[V]0\f[R]
.RS 2
.IP \[bu] 2
A string or symbol representing the property key.
.RE
.IP \[bu] 2
\f[V]1\f[R]
.RS 2
.IP \[bu] 2
The property value.
.RE
.PP
Typically, this object is implemented as a two-element array, with the
first element being the property key and the second element being the
property value.
.RE
.RE
.SS Return value
.PP
A new object whose properties are given by the entries of the iterable.
.SH Description
.PP
The \f[V]Object.fromEntries()\f[R] method takes a list of key-value
pairs and returns a new object whose properties are given by those
entries.
The \f[V]iterable\f[R] argument is expected to be an object that
implements an \f[V]\[at]\[at]iterator\f[R] method.
The method returns an iterator object that produces two-element
array-like objects.
The first element is a value that will be used as a property key, and
the second element is the value to associate with that property key.
.PP
\f[V]Object.fromEntries()\f[R] performs the reverse of
\f[V]Object.entries()\f[R], except that \f[V]Object.entries()\f[R] only
returns string-keyed properties, while \f[V]Object.fromEntries()\f[R]
can also create symbol-keyed properties.
.RS
.PP
\f[B]Note:\f[R] Unlike \f[V]Array.from()\f[R],
\f[V]Object.fromEntries()\f[R] does not use the value of \f[V]this\f[R],
so calling it on another constructor does not create objects of that
type.
.RE
.SH Examples
.SS Converting a Map to an Object
.PP
With \f[V]Object.fromEntries\f[R], you can convert from \f[V]Map\f[R] to
\f[V]Object\f[R]:
.IP
.nf
\f[C]
const map = new Map([
  [\[dq]foo\[dq], \[dq]bar\[dq]],
  [\[dq]baz\[dq], 42],
]);
const obj = Object.fromEntries(map);
console.log(obj); // { foo: \[dq]bar\[dq], baz: 42 }
\f[R]
.fi
.SS Converting an Array to an Object
.PP
With \f[V]Object.fromEntries\f[R], you can convert from \f[V]Array\f[R]
to \f[V]Object\f[R]:
.IP
.nf
\f[C]
const arr = [
  [\[dq]0\[dq], \[dq]a\[dq]],
  [\[dq]1\[dq], \[dq]b\[dq]],
  [\[dq]2\[dq], \[dq]c\[dq]],
];
const obj = Object.fromEntries(arr);
console.log(obj); // { 0: \[dq]a\[dq], 1: \[dq]b\[dq], 2: \[dq]c\[dq] }
\f[R]
.fi
.SS Object transformations
.PP
With \f[V]Object.fromEntries\f[R], its reverse method
\f[V]Object.entries()\f[R], and array manipulation methods, you are able
to transform objects like this:
.IP
.nf
\f[C]
const object1 = { a: 1, b: 2, c: 3 };

const object2 = Object.fromEntries(
  Object.entries(object1).map(([key, val]) => [key, val * 2]),
);

console.log(object2);
// { a: 2, b: 4, c: 6 }
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Object.fromEntries\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
\f[V]Object.entries()\f[R]
.IP \[bu] 2
\f[V]Object.keys()\f[R]
.IP \[bu] 2
\f[V]Object.values()\f[R]
.IP \[bu] 2
\f[V]Object.prototype.propertyIsEnumerable()\f[R]
.IP \[bu] 2
\f[V]Object.create()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.entries()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.keys()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.values()\f[R]
