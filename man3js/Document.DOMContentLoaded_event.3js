.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Document.DOMContentLoaded_event" "JS" "August 4, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.DOMContentLoaded_event \- Document: DOMContentLoaded event
.SH SYNOPSIS
The \f[B]\f[CB]DOMContentLoaded\f[B]\f[R] event fires when the HTML
document has been completely parsed, and all deferred scripts
(\f[CR]<script defer src=\[dq]\&...\[dq]>\f[R] and
\f[CR]<script type=\[dq]module\[dq]>\f[R]) have downloaded and executed.
It doesn\[cq]t wait for other things like images, subframes, and async
scripts to finish loading.
.PP
\f[CR]DOMContentLoaded\f[R] does not wait for stylesheets to load,
however deferred scripts \f[I]do\f[R] wait for stylesheets, and the
\f[CR]DOMContentLoaded\f[R] event is queued after deferred scripts.
Also, scripts which aren\[cq]t deferred or async
(e.g.\ \f[CR]<script>\f[R]) will wait for already\-parsed stylesheets to
load.
.PP
A different event, \f[CR]load\f[R], should be used only to detect a
fully\-loaded page.
It is a common mistake to use \f[CR]load\f[R] where
\f[CR]DOMContentLoaded\f[R] would be more appropriate.
.PP
This event is not cancelable.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]DOMContentLoaded\[dq], (event) => {});

onDOMContentLoaded = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
.SS Basic usage
.IP
.EX
document.addEventListener(\[dq]DOMContentLoaded\[dq], (event) => {
  console.log(\[dq]DOM fully loaded and parsed\[dq]);
});
.EE
.SS Delaying DOMContentLoaded
.IP
.EX
<script>
  document.addEventListener(\[dq]DOMContentLoaded\[dq], (event) => {
    console.log(\[dq]DOM fully loaded and parsed\[dq]);
  });

  for (let i = 0; i < 1_000_000_000; i++);
  // This synchronous script is going to delay parsing of the DOM,
  // so the DOMContentLoaded event is going to launch later.
</script>
.EE
.SS Checking whether loading is already complete
\f[CR]DOMContentLoaded\f[R] may fire before your script has a chance to
run, so it is wise to check before adding a listener.
.IP
.EX
function doSomething() {
  console.info(\[dq]DOM loaded\[dq]);
}

if (document.readyState === \[dq]loading\[dq]) {
  // Loading hasn\[aq]t finished yet
  document.addEventListener(\[dq]DOMContentLoaded\[dq], doSomething);
} else {
  // \[ga]DOMContentLoaded\[ga] has already fired
  doSomething();
}
.EE
.RS
.PP
\f[B]Note:\f[R] There\[cq]s no race condition here \[em] it\[cq]s not
possible for the document to be loaded between the \f[CR]if\f[R] check
and the \f[CR]addEventListener()\f[R] call.
JavaScript has run\-to\-completion semantics, which means if the
document is loading at one particular tick of the event loop, it
can\[cq]t become loaded until the next cycle, at which time the
\f[CR]doSomething\f[R] handler is already attached and will be fired.
.RE
.SS Live example
.SS HTML
.IP
.EX
<div class=\[dq]controls\[dq]>
  <button id=\[dq]reload\[dq] type=\[dq]button\[dq]>Reload</button>
</div>

<div class=\[dq]event\-log\[dq]>
  <label for=\[dq]eventLog\[dq]>Event log:</label>
  <textarea
    readonly
    class=\[dq]event\-log\-contents\[dq]
    rows=\[dq]8\[dq]
    cols=\[dq]30\[dq]
    id=\[dq]eventLog\[dq]></textarea>
</div>
.EE
.SS JavaScript
.IP
.EX
const log = document.querySelector(\[dq].event\-log\-contents\[dq]);
const reload = document.querySelector(\[dq]#reload\[dq]);

reload.addEventListener(\[dq]click\[dq], () => {
  log.textContent = \[dq]\[dq];
  setTimeout(() => {
    window.location.reload(true);
  }, 200);
});

window.addEventListener(\[dq]load\[dq], (event) => {
  log.textContent += \[dq]load\[rs]n\[dq];
});

document.addEventListener(\[dq]readystatechange\[dq], (event) => {
  log.textContent += \[ga]readystate: ${document.readyState}\[rs]n\[ga];
});

document.addEventListener(\[dq]DOMContentLoaded\[dq], (event) => {
  log.textContent += \[dq]DOMContentLoaded\[rs]n\[dq];
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]load\f[R], \f[CR]readystatechange\f[R],
\f[CR]beforeunload\f[R], \f[CR]unload\f[R]
