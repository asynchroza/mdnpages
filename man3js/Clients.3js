.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Clients" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clients \- Clients
.SH SYNOPSIS
The \f[CR]Clients\f[R] interface provides access to \f[CR]Client\f[R]
objects.
Access it via \[ga]\f[CR]self\f[R].clients\[ga] within a service worker.
.SH INSTANCE METHODS
.TP
\f[B]Clients.get()\f[R]
Returns a \f[CR]Promise\f[R] for a \f[CR]Client\f[R] matching a given
\f[CR]id\f[R].
.TP
\f[B]Clients.matchAll()\f[R]
Returns a \f[CR]Promise\f[R] for an array of \f[CR]Client\f[R] objects.
An options argument allows you to control the types of clients returned.
.TP
\f[B]Clients.openWindow()\f[R]
Opens a new browser window for a given URL and returns a
\f[CR]Promise\f[R] for the new \f[CR]WindowClient\f[R].
.TP
\f[B]Clients.claim()\f[R]
Allows an active service worker to set itself as the
\f[CR]controller\f[R] for all clients within its \f[CR]scope\f[R].
.SH EXAMPLES
The following example shows an existing chat window or creates a new one
when the user clicks a notification.
.IP
.EX
addEventListener(\[dq]notificationclick\[dq], (event) => {
  event.waitUntil(
    (async () => {
      const allClients = await clients.matchAll({
        includeUncontrolled: true,
      });

      let chatClient;

      // Let\[aq]s see if we already have a chat window open:
      for (const client of allClients) {
        const url = new URL(client.url);

        if (url.pathname === \[dq]/chat/\[dq]) {
          // Excellent, let\[aq]s use it!
          client.focus();
          chatClient = client;
          break;
        }
      }

      // If we didn\[aq]t find an existing chat window,
      // open a new one:
      if (!chatClient) {
        chatClient = await clients.openWindow(\[dq]/chat/\[dq]);
      }

      // Message the client:
      chatClient.postMessage(\[dq]New chat messages!\[dq]);
    })(),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
