.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.group" "JS" "April 17, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.group - Array.prototype.group()
.SH SYNOPSIS
The \f[B]\f[CB]group()\f[B]\f[R] method groups the elements of the
calling array according to the string values returned by a provided
testing function.
The returned object has separate properties for each group, containing
arrays with the elements in the group.
.PP
This method should be used when group names can be represented by
strings.
If you need to group elements using a key that is some arbitrary value,
use \f[CR]Array.prototype.groupToMap()\f[R] instead.
.SH SYNTAX
.IP
.EX
group(callbackFn)
group(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a value that can get coerced into a property key
(string or symbol) indicating the group of the current element.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]group()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
A \f[CR]null\f[R]-prototype object with properties for all groups, each
assigned to an array containing the elements of the associated group.
.SH DESCRIPTION
The \f[CR]group()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array, returning a string or symbol (values that are neither type
are coerced to strings) indicating the group of the element.
A new property and array is created in the result object for each unique
group name that is returned by the callback.
Each element is added to the array in the property that corresponds to
its group.
.PP
\f[CR]callbackFn\f[R] is invoked for \f[I]every\f[R] index of the array,
not just those with assigned values.
Empty slots in sparse arrays behave the same as \f[CR]undefined\f[R].
.PP
The \f[CR]group()\f[R] method is a copying method.
It does not alter \f[CR]this\f[R] but instead returns an object of
arrays that contains the same elements as the ones from the original
array.
However, the function provided as \f[CR]callbackFn\f[R] can mutate the
array.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[CR]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[CR]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[CR]group()\f[R] began.
.IP \[bu] 2
Changes to already-visited indexes do not cause \f[CR]callbackFn\f[R] to
be invoked on them again.
.IP \[bu] 2
If an existing, yet-unvisited element of the array is changed by
\f[CR]callbackFn\f[R], its value passed to the \f[CR]callbackFn\f[R]
will be the value at the time that element gets visited.
Deleted elements are visited as if they were \f[CR]undefined\f[R].
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard-to-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The returned object references the \f[I]same\f[R] elements as the
original array (not deep copies).
Changing the internal structure of these elements will be reflected in
both the original array and the returned object.
.PP
The \f[CR]group()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Using group()
First we define an array containing objects representing an inventory of
different foodstuffs.
Each food has a \f[CR]type\f[R] and a \f[CR]quantity\f[R].
.IP
.EX
const inventory = [
  { name: \[dq]asparagus\[dq], type: \[dq]vegetables\[dq], quantity: 5 },
  { name: \[dq]bananas\[dq], type: \[dq]fruit\[dq], quantity: 0 },
  { name: \[dq]goat\[dq], type: \[dq]meat\[dq], quantity: 23 },
  { name: \[dq]cherries\[dq], type: \[dq]fruit\[dq], quantity: 5 },
  { name: \[dq]fish\[dq], type: \[dq]meat\[dq], quantity: 22 },
];
.EE
.PP
The code below groups the elements by the value of their \f[CR]type\f[R]
property.
.IP
.EX
const result = inventory.group(({ type }) => type);

/* Result is:
{
  vegetables: [
    { name: \[aq]asparagus\[aq], type: \[aq]vegetables\[aq], quantity: 5 },
  ],
  fruit: [
    { name: \[dq]bananas\[dq], type: \[dq]fruit\[dq], quantity: 0 },
    { name: \[dq]cherries\[dq], type: \[dq]fruit\[dq], quantity: 5 }
  ],
  meat: [
    { name: \[dq]goat\[dq], type: \[dq]meat\[dq], quantity: 23 },
    { name: \[dq]fish\[dq], type: \[dq]meat\[dq], quantity: 22 }
  ]
}
*/
.EE
.PP
The arrow function just returns the \f[CR]type\f[R] of each array
element each time it is called.
Note that the function argument \f[CR]{ type }\f[R] is a basic example
of object destructuring syntax for function arguments.
This unpacks the \f[CR]type\f[R] property of an object passed as a
parameter, and assigns it to a variable named \f[CR]type\f[R] in the
body of the function.
This is a very succinct way to access the relevant values of elements
within a function.
.PP
We can also create groups inferred from values in one or more properties
of the elements.
Below is a very similar example that puts the items into \f[CR]ok\f[R]
or \f[CR]restock\f[R] groups based on the value of the
\f[CR]quantity\f[R] field.
.IP
.EX
function myCallback({ quantity }) {
  return quantity > 5 ? \[dq]ok\[dq] : \[dq]restock\[dq];
}

const result2 = inventory.group(myCallback);

/* Result is:
{
  restock: [
    { name: \[dq]asparagus\[dq], type: \[dq]vegetables\[dq], quantity: 5 },
    { name: \[dq]bananas\[dq], type: \[dq]fruit\[dq], quantity: 0 },
    { name: \[dq]cherries\[dq], type: \[dq]fruit\[dq], quantity: 5 }
  ],
  ok: [
    { name: \[dq]goat\[dq], type: \[dq]meat\[dq], quantity: 23 },
    { name: \[dq]fish\[dq], type: \[dq]meat\[dq], quantity: 22 }
  ]
}
*/
.EE
.SS Using group() on sparse arrays
When used on sparse arrays, the \f[CR]group()\f[R] method iterates empty
slots as if they have the value \f[CR]undefined\f[R].
.IP
.EX
console.log([1, , 3].group((x) => x)); // { 1: [1], undefined: [undefined], 3: [3] }
.EE
.SS Calling group() on non-array objects
The \f[CR]group()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each integer index.
.IP
.EX
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
};
console.log(Array.prototype.group.call(arrayLike, (x) => x % 2));
// { 0: [2, 4], 1: [3] }
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.prototype.group\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#array-grouping)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.groupToMap()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.reduce()\f[R]
.IP \[bu] 2
\f[CR]Object.fromEntries()\f[R]
