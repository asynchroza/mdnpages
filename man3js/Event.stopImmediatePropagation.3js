.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Event.stopImmediatePropagation" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Event.stopImmediatePropagation \- Event: stopImmediatePropagation()
method
.SH SYNOPSIS
The \f[B]\f[CB]stopImmediatePropagation()\f[B]\f[R] method of the
\f[CR]Event\f[R] interface prevents other listeners of the same event
from being called.
.PP
If several listeners are attached to the same element for the same event
type, they are called in the order in which they were added.
If \f[CR]stopImmediatePropagation()\f[R] is invoked during one such
call, no remaining listeners will be called, either on that element or
any other element.
.SH SYNTAX
.IP
.EX
event.stopImmediatePropagation()
.EE
.SH EXAMPLES
.SS Comparing event\-stopping functions
The example below has three buttons inside of three nested divs.
Each button has three event listeners registered for click events, and
each div has an event listener, also registered for click events.
.IP \[bu] 2
The top button allows normal event propagation.
.IP \[bu] 2
The middle button calls \f[CR]stopPropagation()\f[R] in its first event
handler.
.IP \[bu] 2
The bottom button calls \f[CR]stopImmediatePropagation()\f[R] in its
first event handler.
.SS HTML
.IP
.EX
<h2>Click on the buttons</h2>
<div>
  outer div<br />
  <div>
    middle div<br />
    <div>
      inner div<br />
      <button>allow propagation</button><br />
      <button id=\[dq]stopPropagation\[dq]>stop propagation</button><br />
      <button id=\[dq]stopImmediatePropagation\[dq]>immediate stop propagation</button>
    </div>
  </div>
</div>
<pre></pre>
.EE
.SS CSS
.IP
.EX
div {
  display: inline\-block;
  padding: 10px;
  background\-color: #fff;
  border: 2px solid #000;
  margin: 10px;
}

button {
  width: 100px;
  color: #008;
  padding: 5px;
  background\-color: #fff;
  border: 2px solid #000;
  border\-radius: 30px;
  margin: 5px;
}
.EE
.SS JavaScript
.IP
.EX
const outElem = document.querySelector(\[dq]pre\[dq]);

/* Clear the output */
document.addEventListener(
  \[dq]click\[dq],
  () => {
    outElem.textContent = \[dq]\[dq];
  },
  true,
);

/* Set event listeners for the buttons */
document.querySelectorAll(\[dq]button\[dq]).forEach((elem) => {
  for (let i = 1; i <= 3; i++) {
    elem.addEventListener(\[dq]click\[dq], (evt) => {
      /* Do any propagation stopping in first event handler */
      if (i === 1 && elem.id) {
        evt[elem.id]();
        outElem.textContent += \[ga]Event handler for event 1 calling ${elem.id}()\[rs]n\[ga];
      }

      outElem.textContent += \[ga]Click event ${i} processed on \[dq]${elem.textContent}\[dq] button\[rs]n\[ga];
    });
  }
});

/* Set event listeners for the divs */
document
  .querySelectorAll(\[dq]div\[dq])
  .forEach((elem) =>
    elem.addEventListener(
      \[dq]click\[dq],
      (evt) =>
        (outElem.textContent += \[ga]Click event processed on \[dq]${elem.firstChild.data.trim()}\[dq]\[rs]n\[ga]),
    ),
  );
.EE
.SS Result
Each click\-event handler displays a status message when it is called.
If you press the middle button, you will see that
\f[CR]stopPropagation()\f[R] allows all of the event handlers registered
for clicks on that button to execute but prevents execution of the
click\-event handlers for the divs, which would normally follow.
However, if you press the bottom button,
\f[CR]stopImmediatePropagation()\f[R] stops all propagation after the
event that called it.
