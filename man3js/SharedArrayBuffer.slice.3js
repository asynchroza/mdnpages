.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "SharedArrayBuffer.slice" "JS" "December 14, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SharedArrayBuffer.slice - SharedArrayBuffer.prototype.slice()
.SH SYNOPSIS
The \f[B]\f[CB]slice()\f[B]\f[R] method of \f[CR]SharedArrayBuffer\f[R]
instances returns a new \f[CR]SharedArrayBuffer\f[R] whose contents are
a copy of this \f[CR]SharedArrayBuffer\f[R]\[cq]s bytes from
\f[CR]start\f[R], inclusive, up to \f[CR]end\f[R], exclusive.
If either \f[CR]start\f[R] or \f[CR]end\f[R] is negative, it refers to
an index from the end of the array, as opposed to from the beginning.
.SH SYNTAX
.IP
.EX
slice()
slice(start)
slice(start, end)
.EE
.SS Parameters
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Zero-based index at which to start extraction, converted to an integer.
.RS
.IP \[bu] 2
Negative index counts back from the end of the buffer \[em] if
\f[CR]start < 0\f[R], \f[CR]start + buffer.length\f[R] is used.
.IP \[bu] 2
If \f[CR]start < -buffer.length\f[R] or \f[CR]start\f[R] is omitted,
\f[CR]0\f[R] is used.
.IP \[bu] 2
If \f[CR]start >= buffer.length\f[R], nothing is extracted.
.RE
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Zero-based index at which to end extraction, converted to an integer.
\f[CR]slice()\f[R] extracts up to but not including \f[CR]end\f[R].
.RS
.IP \[bu] 2
Negative index counts back from the end of the buffer \[em] if
\f[CR]end < 0\f[R], \f[CR]end + buffer.length\f[R] is used.
.IP \[bu] 2
If \f[CR]end < -buffer.length\f[R], \f[CR]0\f[R] is used.
.IP \[bu] 2
If \f[CR]end >= buffer.length\f[R] or \f[CR]end\f[R] is omitted,
\f[CR]buffer.length\f[R] is used, causing all elements until the end to
be extracted.
.IP \[bu] 2
If \f[CR]end\f[R] is positioned before or at \f[CR]start\f[R] after
normalization, nothing is extracted.
.RE
.SS Return value
A new \f[CR]SharedArrayBuffer\f[R] containing the extracted elements.
.SH EXAMPLES
.SS Using slice()
.IP
.EX
const sab = new SharedArrayBuffer(1024);
sab.slice(); // SharedArrayBuffer { byteLength: 1024 }
sab.slice(2); // SharedArrayBuffer { byteLength: 1022 }
sab.slice(-2); // SharedArrayBuffer { byteLength: 2 }
sab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SharedArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer.prototype.slice()\f[R]
