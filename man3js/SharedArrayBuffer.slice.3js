.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "SharedArrayBuffer.slice" "JS" "April 28, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SharedArrayBuffer.slice - SharedArrayBuffer.prototype.slice()
.SH SYNOPSIS
The \f[B]\f[CB]slice()\f[B]\f[R] method of \f[CR]SharedArrayBuffer\f[R]
instances returns a new \f[CR]SharedArrayBuffer\f[R] whose contents are
a copy of this \f[CR]SharedArrayBuffer\f[R]\[cq]s bytes from begin,
inclusive, up to end, exclusive.
If either begin or end is negative, it refers to an index from the end
of the array, as opposed to from the beginning.
This method has the same algorithm as
\f[CR]Array.prototype.slice()\f[R].
.SH SYNTAX
.IP
.EX
slice()
slice(begin)
slice(begin, end)
.EE
.SS Parameters
.TP
\f[B]begin\f[R] \f[I](optional)\f[R]
Zero-based index at which to begin extraction.
.RS
.PP
A negative index can be used, indicating an offset from the end of the
sequence.
\f[CR]slice(-2)\f[R] extracts the last two elements in the sequence.
.PP
If \f[CR]begin\f[R] is undefined, \f[CR]slice\f[R] begins from index
\f[CR]0\f[R].
.RE
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Zero-based index \f[I]before\f[R] which to end extraction.
\f[CR]slice\f[R] extracts up to but not including \f[CR]end\f[R].
.RS
.PP
For example, \f[CR]slice(1,4)\f[R] extracts the second element through
the fourth element (elements indexed 1, 2, and 3).
.PP
A negative index can be used, indicating an offset from the end of the
sequence.
\f[CR]slice(2,-1)\f[R] extracts the third element through the
second-to-last element in the sequence.
.PP
If \f[CR]end\f[R] is omitted, \f[CR]slice\f[R] extracts through the end
of the sequence (\f[CR]sab.byteLength\f[R]).
.RE
.SS Return value
A new \f[CR]SharedArrayBuffer\f[R] containing the extracted elements.
.SH EXAMPLES
.SS Using slice()
.IP
.EX
const sab = new SharedArrayBuffer(1024);
sab.slice(); // SharedArrayBuffer { byteLength: 1024 }
sab.slice(2); // SharedArrayBuffer { byteLength: 1022 }
sab.slice(-2); // SharedArrayBuffer { byteLength: 2 }
sab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SharedArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.slice()\f[R]
