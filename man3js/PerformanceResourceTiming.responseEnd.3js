.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PerformanceResourceTiming.responseEnd" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.responseEnd \- PerformanceResourceTiming:
responseEnd property
.SH SYNOPSIS
The \f[B]\f[CB]responseEnd\f[B]\f[R] read\-only property returns a
\f[CR]timestamp\f[R] immediately after the browser receives the last
byte of the resource or immediately before the transport connection is
closed, whichever comes first.
.PP
Unlike many other \f[CR]PerformanceResourceTiming\f[R] properties, the
\f[CR]responseEnd\f[R] property is available for cross\-origin requests
without the need of the \f[CR]Timing\-Allow\-Origin\f[R] HTTP response
header.
.SH VALUE
A \f[CR]DOMHighResTimeStamp\f[R] immediately after the browser receives
the last byte of the resource or immediately before the transport
connection is closed, whichever comes first.
.SH EXAMPLES
.SS Measuring time to fetch (without redirects)
The \f[CR]responseEnd\f[R] and \f[CR]fetchStart\f[R] properties can be
used to measure the overall time it took to fetch the final resource
(without redirects).
If you want to include redirects, the overall time to fetch is provided
in the \f[CR]duration\f[R] property.
.IP
.EX
const timeToFetch = entry.responseEnd \- entry.fetchStart;
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
const observer = new PerformanceObserver((list) => {
  list.getEntries().forEach((entry) => {
    const timeToFetch = entry.responseEnd \- entry.fetchStart;
    if (timeToFetch > 0) {
      console.log(\[ga]${entry.name}: Time to fetch: ${timeToFetch}ms\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: true });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
const resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) => {
  const timeToFetch = entry.responseEnd \- entry.fetchStart;
  if (timeToFetch > 0) {
    console.log(\[ga]${entry.name}: Time to fetch: ${timeToFetch}ms\[ga]);
  }
});
.EE
