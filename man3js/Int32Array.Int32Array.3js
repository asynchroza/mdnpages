.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Int32Array.Int32Array" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Int32Array()\f[B]\f[R] constructor creates
\f[V]Int32Array\f[R] objects.
The contents are initialized to \f[V]0\f[R].
.SH Syntax
.IP
.nf
\f[C]
new Int32Array()
new Int32Array(length)
new Int32Array(typedArray)
new Int32Array(object)

new Int32Array(buffer)
new Int32Array(buffer, byteOffset)
new Int32Array(buffer, byteOffset, length)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]Int32Array()\f[R] can only be constructed with
\f[V]new\f[R].
Attempting to call it without \f[V]new\f[R] throws a
\f[V]TypeError\f[R].
.RE
.SS Parameters
.PP
See \f[V]TypedArray\f[R].
.SS Exceptions
.PP
See \f[V]TypedArray\f[R].
.SH Examples
.SS Different ways to create an Int32Array
.IP
.nf
\f[C]
// From a length
const int32 = new Int32Array(2);
int32[0] = 42;
console.log(int32[0]); // 42
console.log(int32.length); // 2
console.log(int32.BYTES_PER_ELEMENT); // 4

// From an array
const x = new Int32Array([21, 31]);
console.log(x[1]); // 31

// From another TypedArray
const y = new Int32Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
const buffer = new ArrayBuffer(32);
const z = new Int32Array(buffer, 4, 4);
console.log(z.byteOffset); // 4

// From an iterable
const iterable = (function* () {
  yield* [1, 2, 3];
})();
const int32FromIterable = new Int32Array(iterable);
console.log(int32FromIterable);
// Int32Array [1, 2, 3]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Int32Array\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]ArrayBuffer\f[R]
.IP \[bu] 2
\f[V]DataView\f[R]
