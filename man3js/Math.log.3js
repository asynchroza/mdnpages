.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.log" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Math.log()\f[B]\f[R] static method returns the natural
logarithm (base e) of a number.
That is
.PP
∀x>0,𝙼𝚊𝚝𝚑.𝚕𝚘𝚐(𝚡)=ln(x)=the unique\ y\ such that\ ey=xx > 0,; = (x) = y
e\[ha]y = x
.SH Syntax
.IP
.nf
\f[C]
Math.log(x)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]x\f[R]
.RS 2
.IP \[bu] 2
A number greater than or equal to 0.
.RE
.SS Return value
.PP
The natural logarithm (base e) of \f[V]x\f[R].
If \f[V]x\f[R] is ±0, returns \f[V]-Infinity\f[R].
If \f[V]x < 0\f[R], returns \f[V]NaN\f[R].
.SH Description
.PP
Because \f[V]log()\f[R] is a static method of \f[V]Math\f[R], you always
use it as \f[V]Math.log()\f[R], rather than as a method of a
\f[V]Math\f[R] object you created (\f[V]Math\f[R] is not a constructor).
.PP
If you need the natural log of 2 or 10, use the constants
\f[V]Math.LN2\f[R] or \f[V]Math.LN10\f[R].
If you need a logarithm to base 2 or 10, use \f[V]Math.log2()\f[R] or
\f[V]Math.log10()\f[R].
If you need a logarithm to other bases, use
\f[V]Math.log(x) / Math.log(otherBase)\f[R] as in the example below; you
might want to precalculate \f[V]1 / Math.log(otherBase)\f[R] since
multiplication in \f[V]Math.log(x) * constant\f[R] is much faster.
.PP
Beware that positive numbers very close to 1 can suffer from loss of
precision and make its natural logarithm less accurate.
In this case, you may want to use \f[V]Math.log1p\f[R] instead.
.SH Examples
.SS Using Math.log()
.IP
.nf
\f[C]
Math.log(-1); // NaN
Math.log(-0); // -Infinity
Math.log(0); // -Infinity
Math.log(1); // 0
Math.log(10); // 2.302585092994046
Math.log(Infinity); // Infinity
\f[R]
.fi
.SS Using Math.log() with a different base
.PP
The following function returns the logarithm of \f[V]y\f[R] with base
\f[V]x\f[R] (i.e.\ logxy_x y):
.IP
.nf
\f[C]
function getBaseLog(x, y) {
  return Math.log(y) / Math.log(x);
}
\f[R]
.fi
.PP
If you run \f[V]getBaseLog(10, 1000)\f[R], it returns
\f[V]2.9999999999999996\f[R] due to floating-point rounding, but still
very close to the actual answer of 3.
.SH See also
.IP \[bu] 2
\f[V]Math.exp()\f[R]
.IP \[bu] 2
\f[V]Math.log1p()\f[R]
.IP \[bu] 2
\f[V]Math.log10()\f[R]
.IP \[bu] 2
\f[V]Math.log2()\f[R]
.IP \[bu] 2
\f[V]Math.pow()\f[R]
