.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AudioBufferSourceNode.playbackRate" "JS" "November 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioBufferSourceNode.playbackRate \- AudioBufferSourceNode:
playbackRate property
.SH SYNOPSIS
The \f[B]\f[CB]playbackRate\f[B]\f[R] property of the
\f[CR]AudioBufferSourceNode\f[R] interface Is a k\-rate
\f[CR]AudioParam\f[R] that defines the speed at which the audio asset
will be played.
.PP
A value of 1.0 indicates it should play at the same speed as its
sampling rate, values less than 1.0 cause the sound to play more slowly,
while values greater than 1.0 result in audio playing faster than
normal.
The default value is \f[CR]1.0\f[R].
When set to another value, the \f[CR]AudioBufferSourceNode\f[R]
resamples the audio before sending it to the output.
.SH VALUE
An \f[CR]AudioParam\f[R] whose \f[CR]value\f[R] is a floating\-point
value indicating the playback rate of the audio as a decimal proportion
of the original sampling rate.
.PP
Consider a sound buffer containing audio sampled at 44.1 kHz (44,100
samples per second).
Let\[cq]s see what a few values of \f[CR]playbackRate\f[R] do:
.IP \[bu] 2
A \f[CR]playbackRate\f[R] of 1.0 plays the audio at full speed, or
44,100 Hz.
.IP \[bu] 2
A \f[CR]playbackRate\f[R] of 0.5 plays the audio at half speed, or
22,050 Hz.
.IP \[bu] 2
A \f[CR]playbackRate\f[R] of 2.0 doubles the audio\[cq]s playback rate
to 88,200 Hz.
.SH EXAMPLES
.SS Setting \f[CR]playbackRate\f[R]
In this example, when the user presses \[lq]Play\[rq], we load an audio
track, decode it, and put it into an \f[CR]AudioBufferSourceNode\f[R].
.PP
The example then sets the \f[CR]loop\f[R] property to \f[CR]true\f[R],
so the track loops, and plays the track.
.PP
The user can set the \f[CR]playbackRate\f[R] property using a range
control.
.RS
.PP
\f[B]Note:\f[R] You can \c
.UR
https://mdn.github.io/webaudio-examples/audio-buffer-source-node/playbackrate/
run the full example live
.UE \c
\ (or \c
.UR
https://github.com/mdn/webaudio-examples/tree/main/audio-buffer-source-node/playbackrate
view the source
.UE \c
\&.)
.RE
.IP
.EX
let audioCtx;
let buffer;
let source;

const play = document.getElementById(\[dq]play\[dq]);
const stop = document.getElementById(\[dq]stop\[dq]);

const playbackControl = document.getElementById(\[dq]playback\-rate\-control\[dq]);
const playbackValue = document.getElementById(\[dq]playback\-rate\-value\[dq]);

async function loadAudio() {
  try {
    // Load an audio file
    const response = await fetch(\[dq]rnb\-lofi\-melody\-loop.wav\[dq]);
    // Decode it
    buffer = await audioCtx.decodeAudioData(await response.arrayBuffer());
  } catch (err) {
    console.error(\[ga]Unable to fetch the audio file. Error: ${err.message}\[ga]);
  }
}

play.addEventListener(\[dq]click\[dq], async () => {
  if (!audioCtx) {
    audioCtx = new AudioContext();
    await loadAudio();
  }
  source = audioCtx.createBufferSource();
  source.buffer = buffer;
  source.connect(audioCtx.destination);
  source.loop = true;
  source.playbackRate.value = playbackControl.value;
  source.start();
  play.disabled = true;
  stop.disabled = false;
  playbackControl.disabled = false;
});

stop.addEventListener(\[dq]click\[dq], () => {
  source.stop();
  play.disabled = false;
  stop.disabled = true;
  playbackControl.disabled = true;
});

playbackControl.oninput = () => {
  source.playbackRate.value = playbackControl.value;
  playbackValue.textContent = playbackControl.value;
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
.IP \[bu] 2
Web Audio API
