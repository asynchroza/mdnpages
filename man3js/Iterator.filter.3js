.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Iterator.filter" "JS" "August 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.filter - Iterator.prototype.filter()
.SH SYNOPSIS
The \f[B]\f[CB]filter()\f[B]\f[R] method of \f[CR]Iterator\f[R]
instances returns a new iterator helper that yields only those elements
of the iterator for which the provided callback function returns
\f[CR]true\f[R].
.SH SYNTAX
.IP
.EX
filter(callbackFn)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element produced by the iterator.
It should return a truthy value to make the element yielded by the
iterator helper, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed.
.TP
\f[B]index\f[R]
The index of the current element being processed.
.RE
.SS Return value
A new iterator helper.
Each time the iterator helper\[cq]s \f[CR]next()\f[R] method is called,
it returns the next element in the iterator for which the callback
function returns \f[CR]true\f[R].
When the underlying iterator is completed, the iterator helper is also
completed (the \f[CR]next()\f[R] method produces
\f[CR]{ value: undefined, done: true }\f[R]).
.SH DESCRIPTION
The main advantage of iterator helpers over array methods is their
ability to work with infinite iterators.
With infinite iterators, \f[CR]filter()\f[R] allows you to iterate over
only those elements that satisfy a given condition.
.SH EXAMPLES
.SS Using filter()
The following example creates an iterator that yields terms in the
Fibonacci sequence, and then reads the first few terms that are even:
.IP
.EX
function* fibonacci() {
  let current = 1;
  let next = 1;
  while (true) {
    yield current;
    [current, next] = [next, current + next];
  }
}

const seq = fibonacci().filter((x) => x % 2 === 0);
console.log(seq.next().value); // 2
console.log(seq.next().value); // 8
console.log(seq.next().value); // 34
.EE
.SS Using filter() with a for\&...of loop
\f[CR]filter()\f[R] is most convenient when you are not hand-rolling the
iterator.
Because iterators are also iterable, you can iterate the returned helper
with a \f[CR]for...of\f[R] loop:
.IP
.EX
for (const n of fibonacci().filter((x) => x % 2 === 0)) {
  console.log(n);
  if (n > 30) {
    break;
  }
}

// Logs:
// 2
// 8
// 34
.EE
.PP
This is equivalent to:
.IP
.EX
for (const n of fibonacci()) {
  if (n % 2 !== 0) {
    continue;
  }
  console.log(n);
  if (n > 30) {
    break;
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Iterator.prototype.filter\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#iterator-helpers)
.IP \[bu] 2
\f[CR]Iterator\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.map()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.reduce()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.filter()\f[R]
