.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.toString" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Symbol.toString - Symbol.prototype.toString()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toString()\f[B]\f[R] method returns a string representing
the specified symbol value.
.SH SYNTAX
.IP
.nf
\f[C]
toString()
\f[R]
.fi
.SS Return value
.PP
A string representing the specified symbol value.
.SH DESCRIPTION
.PP
The \f[V]Symbol\f[R] object overrides the \f[V]toString\f[R] method of
\f[V]Object\f[R]; it does not inherit
\f[V]Object.prototype.toString()\f[R].
For \f[V]Symbol\f[R] values, the \f[V]toString\f[R] method returns a
descriptive string in the form \f[V]\[dq]Symbol(description)\[dq]\f[R],
where \f[V]description\f[R] is the symbol\[cq]s description.
.PP
The \f[V]toString()\f[R] method requires its \f[V]this\f[R] value to be
a \f[V]Symbol\f[R] primitive or wrapper object.
It throws a \f[V]TypeError\f[R] for other \f[V]this\f[R] values without
attempting to coerce them to symbol values.
.PP
Because \f[V]Symbol\f[R] has a \f[V][\[at]\[at]toPrimitive]()\f[R]
method, that method always takes priority over \f[V]toString()\f[R] when
a \f[V]Symbol\f[R] object is coerced to a string.
However, because \f[V]Symbol.prototype[\[at]\[at]toPrimitive]()\f[R]
returns a symbol primitive, and symbol primitives throw a
\f[V]TypeError\f[R] when implicitly converted to a string, the
\f[V]toString()\f[R] method is never implicitly called by the language.
To stringify a symbol, you must explicitly call its \f[V]toString()\f[R]
method or use the \f[V]String()\f[R] function.
.SH EXAMPLES
.SS Using toString()
.IP
.nf
\f[C]
Symbol(\[dq]desc\[dq]).toString(); // \[dq]Symbol(desc)\[dq]

// well-known symbols
Symbol.iterator.toString(); // \[dq]Symbol(Symbol.iterator)\[dq]

// global symbols
Symbol.for(\[dq]foo\[dq]).toString(); // \[dq]Symbol(foo)\[dq]
\f[R]
.fi
.SS Implicitly calling toString()
.PP
The only way to make JavaScript implicitly call \f[V]toString()\f[R]
instead of \f[V][\[at]\[at]toPrimitive]()\f[R] on a symbol wrapper
object is by deleting the \f[V]\[at]\[at]toPrimitive\f[R] method first.
.RS
.PP
\f[B]Warning:\f[R] You should not do this in practice.
Never mutate built-in objects unless you know exactly what you\[cq]re
doing.
.RE
.IP
.nf
\f[C]
delete Symbol.prototype[Symbol.toPrimitive];
console.log(\[ga]${Object(Symbol(\[dq]foo\[dq]))}\[ga]); // \[dq]Symbol(foo)\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Object.prototype.toString()\f[R]
