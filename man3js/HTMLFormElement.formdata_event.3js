.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "HTMLFormElement.formdata_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLFormElement.formdata_event \- HTMLFormElement: formdata event
.SH SYNOPSIS
The \f[B]\f[CB]formdata\f[B]\f[R] event fires after the entry list
representing the form\[cq]s data is constructed.
This happens when the form is submitted, but can also be triggered by
the invocation of a \f[CR]FormData()\f[R] constructor.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]formdata\[dq], (event) => {});

onformdata = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]FormDataEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Inherits properties from its parent interface,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]FormDataEvent.formData\f[R]
Contains the \f[CR]FormData\f[R] object representing the data contained
in the form when the event was fired.
.SH EXAMPLES
.IP
.EX
// grab reference to form

const formElem = document.querySelector(\[dq]form\[dq]);

// submit handler

formElem.addEventListener(\[dq]submit\[dq], (e) => {
  // on form submission, prevent default
  e.preventDefault();

  console.log(formElem.querySelector(\[aq]input[name=\[dq]field1\[dq]]\[aq])); // FOO
  console.log(formElem.querySelector(\[aq]input[name=\[dq]field2\[dq]]\[aq])); // BAR

  // construct a FormData object, which fires the formdata event
  const formData = new FormData(formElem);
  // formdata gets modified by the formdata event
  console.log(formData.get(\[dq]field1\[dq])); // foo
  console.log(formData.get(\[dq]field2\[dq])); // bar
});

// formdata handler to retrieve data

formElem.addEventListener(\[dq]formdata\[dq], (e) => {
  console.log(\[dq]formdata fired\[dq]);

  // modifies the form data
  const formData = e.formData;
  // formdata gets modified by the formdata event
  formData.set(\[dq]field1\[dq], formData.get(\[dq]field1\[dq]).toLowerCase());
  formData.set(\[dq]field2\[dq], formData.get(\[dq]field2\[dq]).toLowerCase());
});
.EE
.PP
The \f[CR]onformdata\f[R] version would look like this:
.IP
.EX
formElem.onformdata = (e) => {
  console.log(\[dq]formdata fired\[dq]);

  // modifies the form data
  const formData = e.formData;
  formData.set(\[dq]field1\[dq], formData.get(\[dq]field1\[dq]).toLowerCase());
  formData.set(\[dq]field2\[dq], formData.get(\[dq]field2\[dq]).toLowerCase());
};
.EE
.SH SEE ALSO
.IP \[bu] 2
HTML \f[CR]<form>\f[R] element
.IP \[bu] 2
\f[CR]FormDataEvent\f[R]
