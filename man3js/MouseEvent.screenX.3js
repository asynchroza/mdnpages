.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MouseEvent.screenX" "JS" "November 15, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MouseEvent.screenX \- MouseEvent: screenX property
.SH SYNOPSIS
The \f[B]\f[CB]screenX\f[B]\f[R] read\-only property of the
\f[CR]MouseEvent\f[R] interface provides the horizontal coordinate
(offset) of the mouse pointer in screen coordinates.
.RS
.PP
\f[B]Note:\f[R] In a multiscreen environment, screens aligned
horizontally will be treated as a single device, and so the range of the
\f[CR]screenX\f[R] value will increase to the combined width of the
screens.
.RE
.SH VALUE
A \f[CR]double\f[R] floating point value.
.PP
Early versions of the spec defined this as an integer referring to the
number of pixels.
.SH EXAMPLES
This example displays your mouse\[cq]s coordinates whenever you trigger
the \f[CR]mousemove\f[R] event.
.SS HTML
.IP
.EX
<p>Move your mouse to see its position.</p>
<p id=\[dq]screen\-log\[dq]></p>
.EE
.SS JavaScript
.IP
.EX
let screenLog = document.querySelector(\[dq]#screen\-log\[dq]);
document.addEventListener(\[dq]mousemove\[dq], logKey);

function logKey(e) {
  screenLog.innerText = \[ga]
    Screen X/Y: ${e.screenX}, ${e.screenY}
    Client X/Y: ${e.clientX}, ${e.clientY}\[ga];
}
.EE
.SS Result
.SS Routing an event
When you trap events on the window, document, or other roomy elements,
you can get the coordinates of that event (e.g., a click) and route it
properly, as the following example demonstrates:
.IP
.EX
function checkClickMap(e) {
  if (e.screenX < 50) doRedButton();
  if (50 <= e.screenX && e.screenX < 100) doYellowButton();
  if (e.screenX >= 100) doRedButton();
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MouseEvent\f[R]
.IP \[bu] 2
\f[CR]screenY\f[R]
.IP \[bu] 2
\f[CR]clientX\f[R] / \f[CR]clientY\f[R]
.IP \[bu] 2
Coordinate systems
