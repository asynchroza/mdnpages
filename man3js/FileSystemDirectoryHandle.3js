.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FileSystemDirectoryHandle" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemDirectoryHandle \- FileSystemDirectoryHandle
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]FileSystemDirectoryHandle\f[B]\f[R] interface of the File
System API provides a handle to a file system directory.
.PP
The interface can be accessed via the
\f[CR]window.showDirectoryPicker()\f[R],
\f[CR]StorageManager.getDirectory()\f[R],
\f[CR]DataTransferItem.getAsFileSystemHandle()\f[R], and
\f[CR]FileSystemDirectoryHandle.getDirectoryHandle()\f[R] methods.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent,
\f[CI]FileSystemHandle\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]FileSystemHandle\f[I].\f[R]
.PP
Regular methods:
.TP
\f[B]FileSystemDirectoryHandle.getDirectoryHandle()\f[R]
Returns a \f[CR]Promise\f[R] fulfilled with a
\f[CR]FileSystemDirectoryHandle\f[R] for a subdirectory with the
specified name within the directory handle on which the method is
called.
.TP
\f[B]FileSystemDirectoryHandle.getFileHandle()\f[R]
Returns a \f[CR]Promise\f[R] fulfilled with a
\f[CR]FileSystemFileHandle\f[R] for a file with the specified name,
within the directory the method is called.
.TP
\f[B]FileSystemDirectoryHandle.removeEntry()\f[R]
Attempts to asynchronously remove an entry if the directory handle
contains a file or directory called the name specified.
.TP
\f[B]FileSystemDirectoryHandle.resolve()\f[R]
Returns a \f[CR]Promise\f[R] fulfilled with an \f[CR]Array\f[R] of
directory names from the parent handle to the specified child entry,
with the name of the child entry as the last array item.
.PP
Asynchronous iterator methods:
.TP
\f[B]FileSystemDirectoryHandle.entries()\f[R]
Returns a new \f[I]async iterator\f[R] of a given object\[cq]s own
enumerable property \f[CR][key, value]\f[R] pairs.
.TP
\f[B]FileSystemDirectoryHandle.keys()\f[R]
Returns a new \f[I]async iterator\f[R] containing the keys for each item
in \f[CR]FileSystemDirectoryHandle\f[R].
.TP
\f[B]FileSystemDirectoryHandle.values()\f[R]
Returns a new \f[I]async iterator\f[R] containing the values for each
index in the \f[CR]FileSystemDirectoryHandle\f[R] object.
.TP
\f[B]FileSystemDirectoryHandle[\[at]\[at]asyncIterator]()\f[R]
Returns the \f[CR]entries\f[R] function by default.
.SH EXAMPLES
.SS Return directory handle
The following example returns a directory handle with the specified
name; if the directory does not already exist it is created.
.IP
.EX
const dirName = \[dq]directoryToGetName\[dq];

// assuming we have a directory handle: \[aq]currentDirHandle\[aq]
const subDir = currentDirHandle.getDirectoryHandle(dirName, { create: true });
.EE
.SS Return file path
The following asynchronous function uses \f[CR]resolve()\f[R] to find
the path to a chosen file, relative to a specified directory handle.
.IP
.EX
async function returnPathDirectories(directoryHandle) {
  // Get a file handle by showing a file picker:
  const handle = await self.showOpenFilePicker();
  if (!handle) {
    // User cancelled, or otherwise failed to open a file.
    return;
  }

  // Check if handle exists inside our directory handle
  const relativePaths = await directoryHandle.resolve(handle);

  if (relativePath === null) {
    // Not inside directory handle
  } else {
    // relativePath is an array of names, giving the relative path

    for (const name of relativePaths) {
      // log each entry
      console.log(name);
    }
  }
}
.EE
.SS Return handles for all files in a directory
The following example scans recursively through a directory to return
\f[CR]FileSystemFileHandle\f[R] objects for each file in that directory:
.IP
.EX
async function* getFilesRecursively(entry) {
  if (entry.kind === \[dq]file\[dq]) {
    const file = await entry.getFile();
    if (file !== null) {
      file.relativePath = getRelativePath(entry);
      yield file;
    }
  } else if (entry.kind === \[dq]directory\[dq]) {
    for await (const handle of entry.values()) {
      yield* getFilesRecursively(handle);
    }
  }
}
for await (const fileHandle of getFilesRecursively(directoryHandle)) {
  console.log(fileHandle);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR
https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
