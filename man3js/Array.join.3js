.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.join" "JS" "April 17, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.join - Array.prototype.join()
.SH SYNOPSIS
The \f[B]\f[CB]join()\f[B]\f[R] method creates and returns a new string
by concatenating all of the elements in an array (or an array-like
object), separated by commas or a specified separator string.
If the array has only one item, then that item will be returned without
using the separator.
.SH SYNTAX
.IP
.EX
join()
join(separator)
.EE
.SS Parameters
.TP
\f[B]separator\f[R] \f[I](optional)\f[R]
Specifies a string to separate each pair of adjacent elements of the
array.
The separator is converted to a string if necessary.
If omitted, the array elements are separated with a comma (\[lq],\[rq]).
If \f[CR]separator\f[R] is an empty string, all elements are joined
without any characters in between them.
.SS Return value
A string with all array elements joined.
If \f[CR]arr.length\f[R] is \f[CR]0\f[R], the empty string is returned.
.SH DESCRIPTION
The string conversions of all array elements are joined into one string.
If an element is \f[CR]undefined\f[R], \f[CR]null\f[R], it is converted
to an empty string instead of the string \f[CR]\[dq]null\[dq]\f[R] or
\f[CR]\[dq]undefined\[dq]\f[R].
.PP
The \f[CR]join\f[R] method is accessed internally by
\f[CR]Array.prototype.toString()\f[R] with no arguments.
Overriding \f[CR]join\f[R] of an array instance will override its
\f[CR]toString\f[R] behavior as well.
.PP
When used on sparse arrays, the \f[CR]join()\f[R] method iterates empty
slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]join()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Joining an array four different ways
The following example creates an array, \f[CR]a\f[R], with three
elements, then joins the array four times: using the default separator,
then a comma and a space, then a plus and an empty string.
.IP
.EX
const a = [\[dq]Wind\[dq], \[dq]Water\[dq], \[dq]Fire\[dq]];
a.join(); // \[aq]Wind,Water,Fire\[aq]
a.join(\[dq], \[dq]); // \[aq]Wind, Water, Fire\[aq]
a.join(\[dq] + \[dq]); // \[aq]Wind + Water + Fire\[aq]
a.join(\[dq]\[dq]); // \[aq]WindWaterFire\[aq]
.EE
.SS Using join() on sparse arrays
\f[CR]join()\f[R] treats empty slots the same as \f[CR]undefined\f[R]
and produces an extra separator:
.IP
.EX
console.log([1, , 3].join()); // \[aq]1,,3\[aq]
console.log([1, undefined, 3].join()); // \[aq]1,,3\[aq]
.EE
.SS Calling join() on non-array objects
The \f[CR]join()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each integer index.
.IP
.EX
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
};
console.log(Array.prototype.join.call(arrayLike));
// 2,3,4
console.log(Array.prototype.join.call(arrayLike, \[dq].\[dq]));
// 2.3.4
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.prototype.join\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.toString()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.join()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.split()\f[R]
