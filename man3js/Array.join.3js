.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.join" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]join()\f[B]\f[R] method creates and returns a new string
by concatenating all of the elements in an array (or an array-like
object), separated by commas or a specified separator string.
If the array has only one item, then that item will be returned without
using the separator.
.SH Syntax
.IP
.nf
\f[C]
join()
join(separator)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]separator\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Specifies a string to separate each pair of adjacent elements of the
array.
The separator is converted to a string if necessary.
If omitted, the array elements are separated with a comma (\[lq],\[rq]).
If \f[V]separator\f[R] is an empty string, all elements are joined
without any characters in between them.
.RE
.SS Return value
.PP
A string with all array elements joined.
If \f[V]arr.length\f[R] is \f[V]0\f[R], the empty string is returned.
.SH Description
.PP
The string conversions of all array elements are joined into one string.
If an element is \f[V]undefined\f[R], \f[V]null\f[R], it is converted to
an empty string instead of the string \f[V]\[dq]null\[dq]\f[R] or
\f[V]\[dq]undefined\[dq]\f[R].
.PP
The \f[V]join\f[R] method is accessed internally by
\f[V]Array.prototype.toString()\f[R] with no arguments.
Overriding \f[V]join\f[R] of an array instance will override its
\f[V]toString\f[R] behavior as well.
.PP
When used on sparse arrays, the \f[V]join()\f[R] method iterates empty
slots as if they have the value \f[V]undefined\f[R].
.PP
The \f[V]join()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH Examples
.SS Joining an array four different ways
.PP
The following example creates an array, \f[V]a\f[R], with three
elements, then joins the array four times: using the default separator,
then a comma and a space, then a plus and an empty string.
.IP
.nf
\f[C]
const a = [\[dq]Wind\[dq], \[dq]Water\[dq], \[dq]Fire\[dq]];
a.join(); // \[aq]Wind,Water,Fire\[aq]
a.join(\[dq], \[dq]); // \[aq]Wind, Water, Fire\[aq]
a.join(\[dq] + \[dq]); // \[aq]Wind + Water + Fire\[aq]
a.join(\[dq]\[dq]); // \[aq]WindWaterFire\[aq]
\f[R]
.fi
.SS Using join() on sparse arrays
.PP
\f[V]join()\f[R] treats empty slots the same as \f[V]undefined\f[R] and
produces an extra separator:
.IP
.nf
\f[C]
console.log([1, , 3].join()); // \[aq]1,,3\[aq]
console.log([1, undefined, 3].join()); // \[aq]1,,3\[aq]
\f[R]
.fi
.SS Calling join() on non-array objects
.PP
The \f[V]join()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and then accesses each integer index.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
};
console.log(Array.prototype.join.call(arrayLike));
// 2,3,4
console.log(Array.prototype.join.call(arrayLike, \[dq].\[dq]));
// 2.3.4
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.join\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toString()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.join()\f[R]
.IP \[bu] 2
\f[V]String.prototype.split()\f[R]
