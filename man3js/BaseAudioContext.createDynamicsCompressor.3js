.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "BaseAudioContext.createDynamicsCompressor" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BaseAudioContext.createDynamicsCompressor \- BaseAudioContext:
createDynamicsCompressor() method
.SH SYNOPSIS
The \f[CR]createDynamicsCompressor()\f[R] method of the
\f[CR]BaseAudioContext\f[R] Interface is used to create a
\f[CR]DynamicsCompressorNode\f[R], which can be used to apply
compression to an audio signal.
.PP
Compression lowers the volume of the loudest parts of the signal and
raises the volume of the softest parts.
Overall, a louder, richer, and fuller sound can be achieved.
It is especially important in games and musical applications where large
numbers of individual sounds are played simultaneously, where you want
to control the overall signal level and help avoid clipping (distorting)
of the audio output.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]DynamicsCompressorNode()\f[R] constructor is
the recommended way to create a \f[CR]DynamicsCompressorNode\f[R]; see
Creating an AudioNode.
.RE
.SH SYNTAX
.IP
.EX
createDynamicsCompressor()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]DynamicsCompressorNode\f[R].
.SH EXAMPLES
The code below demonstrates a simple usage of
\f[CR]createDynamicsCompressor()\f[R] to add compression to an audio
track.
For a more complete example, have a look at our \c
.UR https://mdn.github.io/webaudio-examples/compressor-example/
basic Compressor example
.UE \c
\ (\c
.UR
https://github.com/mdn/webaudio-examples/tree/main/compressor-example
view the source code
.UE \c
).
.IP
.EX
// Create a MediaElementAudioSourceNode
// Feed the HTMLMediaElement into it
const source = audioCtx.createMediaElementSource(myAudio);

// Create a compressor node
const compressor = audioCtx.createDynamicsCompressor();
compressor.threshold.setValueAtTime(\-50, audioCtx.currentTime);
compressor.knee.setValueAtTime(40, audioCtx.currentTime);
compressor.ratio.setValueAtTime(12, audioCtx.currentTime);
compressor.attack.setValueAtTime(0, audioCtx.currentTime);
compressor.release.setValueAtTime(0.25, audioCtx.currentTime);

// connect the AudioBufferSourceNode to the destination
source.connect(audioCtx.destination);

button.onclick = () => {
  const active = button.getAttribute(\[dq]data\-active\[dq]);
  if (active === \[dq]false\[dq]) {
    button.setAttribute(\[dq]data\-active\[dq], \[dq]true\[dq]);
    button.textContent = \[dq]Remove compression\[dq];

    source.disconnect(audioCtx.destination);
    source.connect(compressor);
    compressor.connect(audioCtx.destination);
  } else if (active === \[dq]true\[dq]) {
    button.setAttribute(\[dq]data\-active\[dq], \[dq]false\[dq]);
    button.textContent = \[dq]Add compression\[dq];

    source.disconnect(compressor);
    compressor.disconnect(audioCtx.destination);
    source.connect(audioCtx.destination);
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
