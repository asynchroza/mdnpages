.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Atomics.wait" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Atomics.wait()\f[B]\f[R] static method verifies that a
given position in an \f[V]Int32Array\f[R] still contains a given value
and if so sleeps, awaiting a wake-up notification or times out.
It returns a string which is either \f[V]\[dq]ok\[dq]\f[R],
\f[V]\[dq]not-equal\[dq]\f[R], or \f[V]\[dq]timed-out\[dq]\f[R].
.RS
.PP
\f[B]Note:\f[R] This operation only works with a shared
\f[V]Int32Array\f[R] or \f[V]BigInt64Array\f[R] and may not be allowed
on the main thread.
For a non-blocking, asynchronous version of this method, see
\f[V]Atomics.waitAsync()\f[R].
.RE
.SH Syntax
.IP
.nf
\f[C]
Atomics.wait(typedArray, index, value)
Atomics.wait(typedArray, index, value, timeout)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]typedArray\f[R]
.RS 2
.IP \[bu] 2
A shared \f[V]Int32Array\f[R] or \f[V]BigInt64Array\f[R].
.RE
.IP \[bu] 2
\f[V]index\f[R]
.RS 2
.IP \[bu] 2
The position in the \f[V]typedArray\f[R] to wait on.
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
The expected value to test.
.RE
.IP \[bu] 2
\f[V]timeout\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Time to wait in milliseconds.
\f[V]Infinity\f[R], if no time is provided.
.RE
.SS Return value
.PP
A string which is either \f[V]\[dq]ok\[dq]\f[R],
\f[V]\[dq]not-equal\[dq]\f[R], or \f[V]\[dq]timed-out\[dq]\f[R].
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]typedArray\f[R] is not a shared \f[V]Int32Array\f[R].
.RE
.IP \[bu] 2
\f[V]RangeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]index\f[R] is out of bounds in the \f[V]typedArray\f[R].
.RE
.SH Examples
.SS Using wait()
.PP
Given a shared \f[V]Int32Array\f[R]:
.IP
.nf
\f[C]
const sab = new SharedArrayBuffer(1024);
const int32 = new Int32Array(sab);
\f[R]
.fi
.PP
A reading thread is sleeping and waiting on location 0 which is expected
to be 0.
As long as that is true, it will not go on.
However, once the writing thread has stored a new value, it will be
notified by the writing thread and return the new value (123).
.IP
.nf
\f[C]
Atomics.wait(int32, 0, 0);
console.log(int32[0]); // 123
\f[R]
.fi
.PP
A writing thread stores a new value and notifies the waiting thread once
it has written:
.IP
.nf
\f[C]
console.log(int32[0]); // 0;
Atomics.store(int32, 0, 123);
Atomics.notify(int32, 0, 1);
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Atomics\f[R]
.IP \[bu] 2
\f[V]Atomics.waitAsync()\f[R]
.IP \[bu] 2
\f[V]Atomics.notify()\f[R]
