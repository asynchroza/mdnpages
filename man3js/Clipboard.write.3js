.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Clipboard.write" "JS" "January 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.write \- Clipboard: write() method
.SH SYNOPSIS
The \f[CR]Clipboard\f[R] method \f[B]\f[CB]write()\f[B]\f[R] writes
arbitrary data, such as images, to the clipboard.
This can be used to implement cut and copy functionality.
.PP
The \f[CR]\[dq]clipboard\-write\[dq]\f[R] permission of the Permissions
API, is granted automatically to pages when they are in the active tab.
.RS
.PP
\f[B]Note:\f[R] Browser support for the asynchronous clipboard APIs is
still in the process of being implemented.
Be sure to check the compatibility table as well as Clipboard
availability for more information.
.RE
.RS
.PP
\f[B]Note:\f[R] For parity with Google Chrome, Firefox only allows this
function to work with text, HTML, and PNG data.
.RE
.SH SYNTAX
.IP
.EX
write(data)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
An array of \f[CR]ClipboardItem\f[R] objects containing data to be
written to the clipboard.
.SS Return value
A \f[CR]Promise\f[R] which is resolved when the data has been written to
the clipboard.
The promise is rejected if the clipboard is unable to complete the
clipboard access.
.SH EXAMPLES
This example function replaces the current contents of the clipboard
with a specified string.
.IP
.EX
function setClipboard(text) {
  const type = \[dq]text/plain\[dq];
  const blob = new Blob([text], { type });
  const data = [new ClipboardItem({ [type]: blob })];

  navigator.clipboard.write(data).then(
    () => {
      /* success */
    },
    () => {
      /* failure */
    },
  );
}
.EE
.PP
The code begins by creating a new a \f[CR]Blob\f[R] object.
This object is required to construct a \f[CR]ClipboardItem\f[R] object
which is sent to the clipboard.
The \f[CR]Blob\f[R] constructor takes in the content we want to copy and
its type.
This \f[CR]Blob\f[R] object can be derived from many sources; for
example, a canvas.
.PP
Next, we create a new \f[CR]ClipboardItem\f[R] object into which the
blob will be placed for sending to the clipboard.
The key of the object passed to the \f[CR]ClipboardItem\f[R] constructor
indicates the content type, the value indicates the content.
Then \f[CR]write()\f[R] is called, specifying both a fulfillment
function and an error function.
.SS Example of copying canvas contents to the clipboard
.IP
.EX
function copyCanvasContentsToClipboard(canvas, onDone, onError) {
  canvas.toBlob((blob) => {
    let data = [new ClipboardItem({ [blob.type]: blob })];

    navigator.clipboard.write(data).then(
      () => {
        onDone();
      },
      (err) => {
        onError(err);
      },
    );
  });
}
.EE
.RS
.PP
\f[B]Note:\f[R] You can only pass in one clipboard item at a time.
.RE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
