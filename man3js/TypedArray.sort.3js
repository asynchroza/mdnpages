.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.sort" "JS" "September 14, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.sort - TypedArray.prototype.sort()
.SH SYNOPSIS
The \f[B]\f[CB]sort()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances sorts the elements of a typed array \f[I]in
place (https://en.wikipedia.org/wiki/In-place_algorithm)\f[R] and
returns the reference to the same typed array, now sorted.
This method has the same algorithm as \f[CR]Array.prototype.sort()\f[R],
except that it sorts the values numerically instead of as strings by
default.
.SH SYNTAX
.IP
.EX
sort()
sort(compareFn)
.EE
.SS Parameters
.TP
\f[B]compareFn\f[R] \f[I](optional)\f[R]
A function that defines the sort order.
The return value should be a number whose sign indicates the relative
order of the two elements: negative if \f[CR]a\f[R] is less than
\f[CR]b\f[R], positive if \f[CR]a\f[R] is greater than \f[CR]b\f[R], and
zero if they are equal.
\f[CR]NaN\f[R] is treated as \f[CR]0\f[R].
The function is called with the following arguments:
.RS
.TP
\f[B]a\f[R]
The first element for comparison.
Will never be \f[CR]undefined\f[R].
.TP
\f[B]b\f[R]
The second element for comparison.
Will never be \f[CR]undefined\f[R].
.PP
If omitted, the typed array elements are sorted according to numeric
value.
.RE
.SS Return value
The reference to the original typed array, now sorted.
Note that the typed array is sorted \f[I]in
place (https://en.wikipedia.org/wiki/In-place_algorithm)\f[R], and no
copy is made.
.SH DESCRIPTION
See \f[CR]Array.prototype.sort()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Using sort()
For more examples, see also the \f[CR]Array.prototype.sort()\f[R]
method.
.IP
.EX
let numbers = new Uint8Array([40, 1, 5, 200]);
numbers.sort();
// Uint8Array [ 1, 5, 40, 200 ]
// Unlike plain Arrays, a compare function is not required
// to sort the numbers numerically.

// Regular Arrays require a compare function to sort numerically:
numbers = [40, 1, 5, 200];
numbers.sort();
// [1, 200, 40, 5]

numbers.sort((a, b) => a - b); // compare numbers
// [ 1, 5, 40, 200 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.sort\f[R] with modern behavior
like stable sort in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.reverse()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.toSorted()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.sort()\f[R]
