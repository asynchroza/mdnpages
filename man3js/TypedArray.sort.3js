.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.sort" "JS" "May 1, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.sort - TypedArray.prototype.sort()
.SH SYNOPSIS
The \f[B]\f[CB]sort()\f[B]\f[R] method sorts the elements of a typed
array numerically \f[I]in place\f[R] and returns the typed array.
This method has the same algorithm as \f[CR]Array.prototype.sort()\f[R],
except that it sorts the values numerically instead of as strings by
default.
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH SYNTAX
.IP
.EX
sort()
sort(compareFn)
.EE
.SS Parameters
.TP
\f[B]compareFunction\f[R] \f[I](optional)\f[R]
A function that defines the sort order.
The return value should be a number whose positivity indicates the
relative order of the two elements.
The function is called with the following arguments:
.RS
.TP
\f[B]a\f[R]
The first element for comparison.
Will never be \f[CR]undefined\f[R].
.TP
\f[B]b\f[R]
The second element for comparison.
Will never be \f[CR]undefined\f[R].
.PP
If omitted, the array elements are converted to strings, then sorted
according to each character\[cq]s Unicode code point value.
.RE
.SS Return value
The sorted typed array.
.SH EXAMPLES
.SS Using sort
For more examples, see also the \f[CR]Array.prototype.sort()\f[R]
method.
.IP
.EX
let numbers = new Uint8Array([40, 1, 5, 200]);
numbers.sort();
// Uint8Array [ 1, 5, 40, 200 ]
// Unlike plain Arrays, a compare function is not required
// to sort the numbers numerically.

// Regular Arrays require a compare function to sort numerically:
numbers = [40, 1, 5, 200];
numbers.sort();
// [1, 200, 40, 5]

numbers.sort((a, b) => a - b); // compare numbers
// [ 1, 5, 40, 200 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.sort\f[R] with modern behavior
like stable sort in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[CR]Array.prototype.sort()\f[R]
