.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.setYear" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
\f[I](deprecated)\f[R]
.PP
The \f[B]\f[VB]setYear()\f[B]\f[R] method sets the year for a specified
date according to local time.
.PP
However, the way the legacy \f[V]setYear()\f[R] method sets year values
is different from how the preferred \f[V]setFullYear()\f[R] method sets
year values \[em] and in some cases, also different from how
\f[V]new Date()\f[R] and \f[V]Date.parse()\f[R] set year values.
Specifically, given two-digit numbers, such as \f[V]22\f[R] and
\f[V]61\f[R]:
.IP \[bu] 2
\f[V]setYear()\f[R] interprets any two-digit number as an offset to
\f[V]1900\f[R]; so \f[V]date.setYear(22)\f[R] results in the year value
being set to \f[V]1922\f[R], and \f[V]date.setYear(61)\f[R] results in
the year value being set to \f[V]1961\f[R].
(In contrast, while \f[V]new Date(61, 1)\f[R] also results in the year
value being set to \f[V]1961\f[R], \f[V]new Date(\[dq]2/1/22\[dq])\f[R]
results in the year value being set to \f[V]2022\f[R]; and similarly for
\f[V]Date.parse()\f[R]).
.IP \[bu] 2
\f[V]setFullYear()\f[R] does no special interpretation but instead uses
the literal two-digit value as-is to set the year; so
\f[V]date.setFullYear(61)\f[R] results in the year value being set to
\f[V]0061\f[R], and \f[V]date.setFullYear(22)\f[R] results in the year
value being set to \f[V]0022\f[R].
.PP
Because of those differences in behavior, you should no longer use the
legacy \f[V]setYear()\f[R] method, but should instead use the preferred
\f[V]setFullYear()\f[R] method.
.SH Syntax
.IP
.nf
\f[C]
setYear(yearValue)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]yearValue\f[R]
.RS 2
.IP \[bu] 2
An integer.
.RE
.SS Return value
.PP
Changes the \f[V]Date\f[R] object in place, and returns its new
timestamp.
If \f[V]yearValue\f[R] is \f[V]NaN\f[R] (or other values that get
coerced to \f[V]NaN\f[R], such as \f[V]undefined\f[R]), the date is set
to Invalid Date and \f[V]NaN\f[R] is returned.
.SH Description
.PP
If \f[V]yearValue\f[R] is a number between 0 and 99 (inclusive), then
the year for \f[V]dateObj\f[R] is set to \f[V]1900 + yearValue\f[R].
Otherwise, the year for \f[V]dateObj\f[R] is set to \f[V]yearValue\f[R].
.SH Examples
.SS Using setYear()
.PP
The first two lines set the year to 1996.
The third sets the year to 2000.
.IP
.nf
\f[C]
const theBigDay = new Date();

theBigDay.setYear(96);
theBigDay.setYear(1996);
theBigDay.setYear(2000);
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Date.prototype.setYear\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-date)
.IP \[bu] 2
\f[V]Date.prototype.getFullYear()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.getUTCFullYear()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.setFullYear()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.setUTCFullYear()\f[R]
