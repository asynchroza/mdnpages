.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Proxy.Proxy.ownKeys" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.ownKeys - handler.ownKeys()
.SH SYNOPSIS
The \f[B]\f[CB]handler.ownKeys()\f[B]\f[R] method is a trap for the
\f[CR][[OwnPropertyKeys]]\f[R] object internal method, which is used by
operations such as \f[CR]Object.keys()\f[R],
\f[CR]Reflect.ownKeys()\f[R], etc.
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  ownKeys(target) {
  }
});
.EE
.SS Parameters
The following parameter is passed to the \f[CR]ownKeys()\f[R] method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.SS Return value
The \f[CR]ownKeys()\f[R] method must return an enumerable object.
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \[bu] 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[CR]Object.getOwnPropertySymbols()\f[R]
.IP \[bu] 2
\f[CR]Object.keys()\f[R]
.IP \[bu] 2
\f[CR]Reflect.ownKeys()\f[R]
.PP
Or any other operation that invokes the \f[CR][[OwnPropertyKeys]]\f[R]
internal method.
.SS Invariants
If the following invariants are violated, the trap throws a
\f[CR]TypeError\f[R] when invoked.
.IP \[bu] 2
The result of \f[CR]ownKeys()\f[R] must be an array.
.IP \[bu] 2
The type of each array element is either a \f[CR]String\f[R] or a
\f[CR]Symbol\f[R].
.IP \[bu] 2
The result List must contain the keys of all non-configurable own
properties of the target object.
.IP \[bu] 2
If the target object is not extensible, then the result List must
contain all the keys of the own properties of the target object and no
other values.
.SH EXAMPLES
.SS Trapping of getOwnPropertyNames
The following code traps \f[CR]Object.getOwnPropertyNames()\f[R].
.IP
.EX
const p = new Proxy(
  {},
  {
    ownKeys(target) {
      console.log(\[dq]called\[dq]);
      return [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
    },
  },
);

console.log(Object.getOwnPropertyNames(p));
// \[dq]called\[dq]
// [ \[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq] ]
.EE
.PP
The following code violates an invariant.
.PP
\f[B]Bad\f[R]
.IP
.EX
const obj = {};
Object.defineProperty(obj, \[dq]a\[dq], {
  configurable: false,
  enumerable: true,
  value: 10,
});

const p = new Proxy(obj, {
  ownKeys(target) {
    return [123, 12.5, true, false, undefined, null, {}, []];
  },
});

console.log(Object.getOwnPropertyNames(p));

// TypeError: proxy [[OwnPropertyKeys]] must return an array
// with only string and symbol elements
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Proxy\f[R]
.IP \[bu] 2
\f[CR]Proxy()\f[R] constructor
.IP \[bu] 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[CR]Reflect.ownKeys()\f[R]
