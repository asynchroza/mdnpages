.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WritableStreamDefaultWriter.ready" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStreamDefaultWriter.ready \- WritableStreamDefaultWriter: ready
property
.SH SYNOPSIS
The \f[B]\f[CB]ready\f[B]\f[R] read\-only property of the
\f[CR]WritableStreamDefaultWriter\f[R] interface returns a
\f[CR]Promise\f[R] that resolves when the desired size of the
stream\[cq]s internal queue transitions from non\-positive to positive,
signaling that it is no longer applying backpressure.
.SH VALUE
A \f[CR]Promise\f[R].
.SH EXAMPLES
The following example shows two uses of the \f[CR]ready\f[R] property.
The first uses \f[CR]ready\f[R] to ensure that the
\f[CR]WritableStream\f[R] is done writing and thus able to receive data
before sending a binary chunk.
The second also checks whether the \f[CR]WritableStream\f[R] is done
writing, but this time because the writing must be finished before the
writer can be closed.
.IP
.EX
function sendMessage(message, writableStream) {
  // defaultWriter is of type WritableStreamDefaultWriter
  const defaultWriter = writableStream.getWriter();
  const encoder = new TextEncoder();
  const encoded = encoder.encode(message, { stream: true });
  encoded.forEach((chunk) => {
    // Make sure the stream and its writer are able to
    //   receive data.
    defaultWriter.ready
      .then(() => defaultWriter.write(chunk))
      .then(() => {
        console.log(\[dq]Chunk written to sink.\[dq]);
      })
      .catch((err) => {
        console.error(\[ga]Chunk error: ${err}\[ga]);
      });
    // Call ready again to ensure that all chunks are written
    //   before closing the writer.
    defaultWriter.ready
      .then(() => defaultWriter.close())
      .then(() => {
        console.log(\[dq]All chunks written\[dq]);
      })
      .catch((err) => {
        console.error(\[ga]Stream error: ${err}\[ga]);
      });
  });
}
.EE
