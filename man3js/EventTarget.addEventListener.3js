.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "EventTarget.addEventListener" "JS" "December 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
EventTarget.addEventListener \- EventTarget: addEventListener() method
.SH SYNOPSIS
The \f[B]\f[CB]addEventListener()\f[B]\f[R] method of the
\f[CR]EventTarget\f[R] interface sets up a function that will be called
whenever the specified event is delivered to the target.
.PP
Common targets are \f[CR]Element\f[R], or its children,
\f[CR]Document\f[R], and \f[CR]Window\f[R], but the target may be any
object that supports events (such as \f[CR]IDBRequest\f[R]).
.RS
.PP
\f[B]Note:\f[R] The \f[CR]addEventListener()\f[R] method is the
\f[I]recommended\f[R] way to register an event listener.
The benefits are as follows:
.IP \[bu] 2
It allows adding more than one handler for an event.
This is particularly useful for libraries, JavaScript modules, or any
other kind of code that needs to work well with other libraries or
extensions.
.IP \[bu] 2
In contrast to using an \f[CR]onXYZ\f[R] property, it gives you
finer\-grained control of the phase when the listener is activated
(capturing vs.\ bubbling).
.IP \[bu] 2
It works on any event target, not just HTML or SVG elements.
.RE
.PP
The method \f[CR]addEventListener()\f[R] works by adding a function, or
an object that implements \f[CR]EventListener\f[R], to the list of event
listeners for the specified event type on the \f[CR]EventTarget\f[R] on
which it\[cq]s called.
If the function or object is already in the list of event listeners for
this target, the function or object is not added a second time.
.RS
.PP
\f[B]Note:\f[R] If a particular anonymous function is in the list of
event listeners registered for a certain target, and then later in the
code, an identical anonymous function is given in an
\f[CR]addEventListener\f[R] call, the second function will
\f[I]also\f[R] be added to the list of event listeners for that target.
.PP
Indeed, anonymous functions are not identical even if defined using the
\f[I]same\f[R] unchanging source\-code called repeatedly, \f[B]even if
in a loop\f[R].
.PP
Repeatedly defining the same unnamed function in such cases can be
problematic.
(See Memory issues, below.)
.RE
.PP
If an event listener is added to an \f[CR]EventTarget\f[R] from inside
another listener \[em] that is, during the processing of the event \[em]
that event will not trigger the new listener.
However, the new listener may be triggered during a later stage of event
flow, such as during the bubbling phase.
.SH SYNTAX
.IP
.EX
addEventListener(type, listener)
addEventListener(type, listener, options)
addEventListener(type, listener, useCapture)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A case\-sensitive string representing the event type to listen for.
.TP
\f[B]listener\f[R]
The object that receives a notification (an object that implements the
\f[CR]Event\f[R] interface) when an event of the specified type occurs.
This must be \f[CR]null\f[R], an object with a \f[CR]handleEvent()\f[R]
method, or a JavaScript function.
See The event listener callback for details on the callback itself.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that specifies characteristics about the event listener.
The available options are:
.RS
.TP
\f[B]capture\f[R] \f[I](optional)\f[R]
A boolean value indicating that events of this type will be dispatched
to the registered \f[CR]listener\f[R] before being dispatched to any
\f[CR]EventTarget\f[R] beneath it in the DOM tree.
If not specified, defaults to \f[CR]false\f[R].
.TP
\f[B]once\f[R] \f[I](optional)\f[R]
A boolean value indicating that the \f[CR]listener\f[R] should be
invoked at most once after being added.
If \f[CR]true\f[R], the \f[CR]listener\f[R] would be automatically
removed when invoked.
If not specified, defaults to \f[CR]false\f[R].
.TP
\f[B]passive\f[R] \f[I](optional)\f[R]
A boolean value that, if \f[CR]true\f[R], indicates that the function
specified by \f[CR]listener\f[R] will never call
\f[CR]preventDefault()\f[R].
If a passive listener does call \f[CR]preventDefault()\f[R], the user
agent will do nothing other than generate a console warning.
.RS
.PP
If this option is not specified it defaults to \f[CR]false\f[R] \[en]
except that in browsers other than Safari, it defaults to
\f[CR]true\f[R] for \f[CR]wheel\f[R], \f[CR]mousewheel\f[R],
\f[CR]touchstart\f[R] and \f[CR]touchmove\f[R] events.
See Using passive listeners to learn more.
.RE
.TP
\f[B]signal\f[R] \f[I](optional)\f[R]
An \f[CR]AbortSignal\f[R].
The listener will be removed when the given \f[CR]AbortSignal\f[R]
object\[cq]s \f[CR]abort()\f[R] method is called.
If not specified, no \f[CR]AbortSignal\f[R] is associated with the
listener.
.RE
.TP
\f[B]useCapture\f[R] \f[I](optional)\f[R]
A boolean value indicating whether events of this type will be
dispatched to the registered \f[CR]listener\f[R] \f[I]before\f[R] being
dispatched to any \f[CR]EventTarget\f[R] beneath it in the DOM tree.
Events that are bubbling upward through the tree will not trigger a
listener designated to use capture.
Event bubbling and capturing are two ways of propagating events that
occur in an element that is nested within another element, when both
elements have registered a handle for that event.
The event propagation mode determines the order in which elements
receive the event.
See \c
.UR https://www.w3.org/TR/DOM-Level-3-Events/#event-flow
DOM Level 3 Events
.UE \c
\ and \c
.UR https://www.quirksmode.org/js/events_order.html#link4
JavaScript Event order
.UE \c
\ for a detailed explanation.
If not specified, \f[CR]useCapture\f[R] defaults to \f[CR]false\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] For event listeners attached to the event target, the
event is in the target phase, rather than the capturing and bubbling
phases.
Event listeners in the \f[I]capturing\f[R] phase are called before event
listeners in any non\-capturing phases.
.RE
.RE
.TP
\f[B]wantsUntrusted\f[R] \f[I](optional)\f[R] \f[I](non\-standard)\f[R]
A Firefox (Gecko)\-specific parameter.
If \f[CR]true\f[R], the listener receives synthetic events dispatched by
web content (the default is \f[CR]false\f[R] for browser chrome and
\f[CR]true\f[R] for regular web pages).
This parameter is useful for code found in add\-ons, as well as the
browser itself.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH USAGE NOTES
.SS The event listener callback
The event listener can be specified as either a callback function or an
object whose \f[CR]handleEvent()\f[R] method serves as the callback
function.
.PP
The callback function itself has the same parameters and return value as
the \f[CR]handleEvent()\f[R] method; that is, the callback accepts a
single parameter: an object based on \f[CR]Event\f[R] describing the
event that has occurred, and it returns nothing.
.PP
For example, an event handler callback that can be used to handle both
\f[CR]fullscreenchange\f[R] and \f[CR]fullscreenerror\f[R] might look
like this:
.IP
.EX
function handleEvent(event) {
  if (event.type === \[dq]fullscreenchange\[dq]) {
    /* handle a full screen toggle */
  } else {
    /* handle a full screen toggle error */
  }
}
.EE
.SS Safely detecting option support
In older versions of the DOM specification, the third parameter of
\f[CR]addEventListener()\f[R] was a Boolean value indicating whether or
not to use capture.
Over time, it became clear that more options were needed.
Rather than adding more parameters to the function (complicating things
enormously when dealing with optional values), the third parameter was
changed to an object that can contain various properties defining the
values of options to configure the process of removing the event
listener.
.PP
Because older browsers (as well as some not\-too\-old browsers) still
assume the third parameter is a Boolean, you need to build your code to
handle this scenario intelligently.
You can do this by using feature detection for each of the options
you\[cq]re interested in.
.PP
For example, if you want to check for the \f[CR]passive\f[R] option:
.IP
.EX
let passiveSupported = false;

try {
  const options = {
    get passive() {
      // This function will be called when the browser
      // attempts to access the passive property.
      passiveSupported = true;
      return false;
    },
  };

  window.addEventListener(\[dq]test\[dq], null, options);
  window.removeEventListener(\[dq]test\[dq], null, options);
} catch (err) {
  passiveSupported = false;
}
.EE
.PP
This creates an \f[CR]options\f[R] object with a getter function for the
\f[CR]passive\f[R] property; the getter sets a flag,
\f[CR]passiveSupported\f[R], to \f[CR]true\f[R] if it gets called.
That means that if the browser checks the value of the
\f[CR]passive\f[R] property on the \f[CR]options\f[R] object,
\f[CR]passiveSupported\f[R] will be set to \f[CR]true\f[R]; otherwise,
it will remain \f[CR]false\f[R].
We then call \f[CR]addEventListener()\f[R] to set up a fake event
handler, specifying those options, so that the options will be checked
if the browser recognizes an object as the third parameter.
Then, we call \f[CR]removeEventListener()\f[R] to clean up after
ourselves.
(Note that \f[CR]handleEvent()\f[R] is ignored on event listeners that
aren\[cq]t called.)
.PP
You can check whether any option is supported this way.
Just add a getter for that option using code similar to what is shown
above.
.PP
Then, when you want to create an actual event listener that uses the
options in question, you can do something like this:
.IP
.EX
someElement.addEventListener(
  \[dq]mouseup\[dq],
  handleMouseUp,
  passiveSupported ? { passive: true } : false,
);
.EE
.PP
Here we\[cq]re adding a listener for the \f[CR]mouseup\f[R] event on the
element \f[CR]someElement\f[R].
For the third parameter, if \f[CR]passiveSupported\f[R] is
\f[CR]true\f[R], we\[cq]re specifying an \f[CR]options\f[R] object with
\f[CR]passive\f[R] set to \f[CR]true\f[R]; otherwise, we know that we
need to pass a Boolean, and we pass \f[CR]false\f[R] as the value of the
\f[CR]useCapture\f[R] parameter.
.PP
You can learn more in the Implementing feature detection documentation
and the explainer about \c
.UR
https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
\f[CR]EventListenerOptions\f[R]
.UE \c
\ from the \c
.UR https://wicg.github.io/admin/charter.html
Web Incubator Community Group
.UE \c
\&.
.SS The value of \[lq]this\[rq] within the handler
It is often desirable to reference the element on which the event
handler was fired, such as when using a generic handler for a set of
similar elements.
.PP
When attaching a handler function to an element using
\f[CR]addEventListener()\f[R], the value of \f[CR]this\f[R] inside the
handler will be a reference to the element.
It will be the same as the value of the \f[CR]currentTarget\f[R]
property of the event argument that is passed to the handler.
.IP
.EX
my_element.addEventListener(\[dq]click\[dq], function (e) {
  console.log(this.className); // logs the className of my_element
  console.log(e.currentTarget === this); // logs \[ga]true\[ga]
});
.EE
.PP
As a reminder, arrow functions do not have their own \f[CR]this\f[R]
context.
.IP
.EX
my_element.addEventListener(\[dq]click\[dq], (e) => {
  console.log(this.className); // WARNING: \[ga]this\[ga] is not \[ga]my_element\[ga]
  console.log(e.currentTarget === this); // logs \[ga]false\[ga]
});
.EE
.PP
If an event handler (for example, \f[CR]onclick\f[R]) is specified on an
element in the HTML source, the JavaScript code in the attribute value
is effectively wrapped in a handler function that binds the value of
\f[CR]this\f[R] in a manner consistent with the
\f[CR]addEventListener()\f[R]; an occurrence of \f[CR]this\f[R] within
the code represents a reference to the element.
.IP
.EX
<table id=\[dq]my_table\[dq] onclick=\[dq]console.log(this.id);\[dq]>
  <!\-\- \[ga]this\[ga] refers to the table; logs \[aq]my_table\[aq] \-\->
  \&...
</table>
.EE
.PP
Note that the value of \f[CR]this\f[R] inside a function, \f[I]called
by\f[R] the code in the attribute value, behaves as per standard rules.
This is shown in the following example:
.IP
.EX
<script>
  function logID() {
    console.log(this.id);
  }
</script>
<table id=\[dq]my_table\[dq] onclick=\[dq]logID();\[dq]>
  <!\-\- when called, \[ga]this\[ga] will refer to the global object \-\->
  \&...
</table>
.EE
.PP
The value of \f[CR]this\f[R] within \f[CR]logID()\f[R] is a reference to
the global object \f[CR]Window\f[R] (or \f[CR]undefined\f[R] in the case
of strict mode.
.SS Specifying \[lq]this\[rq] using bind()
The \f[CR]Function.prototype.bind()\f[R] method lets you establish a
fixed \f[CR]this\f[R] context for all subsequent calls \[em] bypassing
problems where it\[cq]s unclear what \f[CR]this\f[R] will be, depending
on the context from which your function was called.
Note, however, that you\[cq]ll need to keep a reference to the listener
around so you can remove it later.
.PP
This is an example with and without \f[CR]bind()\f[R]:
.IP
.EX
class Something {
  name = \[dq]Something Good\[dq];
  constructor(element) {
    // bind causes a fixed \[ga]this\[ga] context to be assigned to \[ga]onclick2\[ga]
    this.onclick2 = this.onclick2.bind(this);
    element.addEventListener(\[dq]click\[dq], this.onclick1, false);
    element.addEventListener(\[dq]click\[dq], this.onclick2, false); // Trick
  }
  onclick1(event) {
    console.log(this.name); // undefined, as \[ga]this\[ga] is the element
  }
  onclick2(event) {
    console.log(this.name); // \[aq]Something Good\[aq], as \[ga]this\[ga] is bound to the Something instance
  }
}

const s = new Something(document.body);
.EE
.PP
Another solution is using a special function called
\f[CR]handleEvent()\f[R] to catch any events:
.IP
.EX
class Something {
  name = \[dq]Something Good\[dq];
  constructor(element) {
    // Note that the listeners in this case are \[ga]this\[ga], not this.handleEvent
    element.addEventListener(\[dq]click\[dq], this, false);
    element.addEventListener(\[dq]dblclick\[dq], this, false);
  }
  handleEvent(event) {
    console.log(this.name); // \[aq]Something Good\[aq], as this is bound to newly created object
    switch (event.type) {
      case \[dq]click\[dq]:
        // some code here\&...
        break;
      case \[dq]dblclick\[dq]:
        // some code here\&...
        break;
    }
  }
}

const s = new Something(document.body);
.EE
.PP
Another way of handling the reference to \f[CR]this\f[R] is to use an
arrow function, which doesn\[cq]t create a separate \f[CR]this\f[R]
context.
.IP
.EX
class SomeClass {
  name = \[dq]Something Good\[dq];

  register() {
    window.addEventListener(\[dq]keydown\[dq], (e) => {
      this.someMethod(e);
    });
  }

  someMethod(e) {
    console.log(this.name);
    switch (e.keyCode) {
      case 5:
        // some code here\&...
        break;
      case 6:
        // some code here\&...
        break;
    }
  }
}

const myObject = new SomeClass();
myObject.register();
.EE
.SS Getting data into and out of an event listener
It may seem that event listeners are like islands, and that it is
extremely difficult to pass them any data, much less to get any data
back from them after they execute.
Event listeners only take one argument, the Event Object, which is
automatically passed to the listener, and the return value is ignored.
So how can we get data in and back out of them?
There are a number of good methods for doing this.
.SS Getting data into an event listener using \[lq]this\[rq]
As mentioned above, you can use \f[CR]Function.prototype.bind()\f[R] to
pass a value to an event listener via the \f[CR]this\f[R] reference
variable.
.IP
.EX
const myButton = document.getElementById(\[dq]my\-button\-id\[dq]);
const someString = \[dq]Data\[dq];

myButton.addEventListener(\[dq]click\[dq], passIntoEvtListener.bind(someString));

//function declaration for event listener
function passIntoEvtListener(e) {
  console.log(\[dq]Expected Value:\[dq], this); // Expected Value: \[aq]Data\[aq]
  console.log(\[dq]current target:\[dq], e.currentTarget.id); // current target: my\-button\-id
}
.EE
.PP
This method is suitable when you don\[cq]t need to know which HTML
element the event listener fired on programmatically from within the
event listener.
The primary benefit to doing this is that the event listener receives
the data in much the same way that it would if you were to actually pass
it through its argument list.
.SS Getting data into an event listener using the outer scope property
When an outer scope contains a variable declaration (with
\f[CR]const\f[R], \f[CR]let\f[R]), all the inner functions declared in
that scope have access to that variable (look here for information on
outer/inner functions, and here for information on variable scope).
Therefore, one of the simplest ways to access data from outside of an
event listener is to make it accessible to the scope in which the event
listener is declared.
.IP
.EX
const myButton = document.getElementById(\[dq]my\-button\-id\[dq]);
let someString = \[dq]Data\[dq];

myButton.addEventListener(\[dq]click\[dq], () => {
  console.log(someString); // Expected Value: \[aq]Data\[aq]

  someString = \[dq]Data Again\[dq];
});

console.log(someString); // Expected Value: \[aq]Data\[aq] (will never output \[aq]Data Again\[aq])
.EE
.RS
.PP
\f[B]Note:\f[R] Although inner scopes have access to \f[CR]const\f[R],
\f[CR]let\f[R] variables from outer scopes, you cannot expect any
changes to these variables to be accessible after the event listener
definition, within the same outer scope.
Why?
Because by the time the event listener would execute, the scope in which
it was defined would have already finished executing.
.RE
.SS Getting data into and out of an event listener using objects
Unlike most functions in JavaScript, objects are retained in memory as
long as a variable referencing them exists in memory.
This, and the fact that objects can have properties, and that they can
be passed around by reference, makes them likely candidates for sharing
data among scopes.
Let\[cq]s explore this.
.RS
.PP
\f[B]Note:\f[R] Functions in JavaScript are actually objects.
(Hence they too can have properties, and will be retained in memory even
after they finish executing if assigned to a variable that persists in
memory.)
.RE
.PP
Because object properties can be used to store data in memory as long as
a variable referencing the object exists in memory, you can actually use
them to get data into an event listener, and any changes to the data
back out after an event handler executes.
Consider this example.
.IP
.EX
const myButton = document.getElementById(\[dq]my\-button\-id\[dq]);
const someObject = { aProperty: \[dq]Data\[dq] };

myButton.addEventListener(\[dq]click\[dq], () => {
  console.log(someObject.aProperty); // Expected Value: \[aq]Data\[aq]

  someObject.aProperty = \[dq]Data Again\[dq]; // Change the value
});

setInterval(() => {
  if (someObject.aProperty === \[dq]Data Again\[dq]) {
    console.log(\[dq]Data Again: True\[dq]);
    someObject.aProperty = \[dq]Data\[dq]; // Reset value to wait for next event execution
  }
}, 5000);
.EE
.PP
In this example, even though the scope in which both the event listener
and the interval function are defined would have finished executing
before the original value of \f[CR]someObject.aProperty\f[R] would have
changed, because \f[CR]someObject\f[R] persists in memory (by
\f[I]reference\f[R]) in both the event listener and interval function,
both have access to the same data (i.e.\ when one changes the data, the
other can respond to the change).
.RS
.PP
\f[B]Note:\f[R] Objects are stored in variables by reference, meaning
only the memory location of the actual data is stored in the variable.
Among other things, this means variables that \[lq]store\[rq] objects
can actually affect other variables that get assigned (\[lq]store\[rq])
the same object reference.
When two variables reference the same object (e.g.,
\f[CR]let a = b = {aProperty: \[aq]Yeah\[aq]};\f[R]), changing the data
in either variable will affect the other.
.RE
.RS
.PP
\f[B]Note:\f[R] Because objects are stored in variables by reference,
you can return an object from a function to keep it alive (preserve it
in memory so you don\[cq]t lose the data) after that function stops
executing.
.RE
.SS Memory issues
.IP
.EX
const elts = document.getElementsByTagName(\[dq]*\[dq]);

// Case 1
for (const elt of elts) {
  elt.addEventListener(
    \[dq]click\[dq],
    (e) => {
      // Do something
    },
    false,
  );
}

// Case 2
function processEvent(e) {
  // Do something
}

for (const elt of elts) {
  elt.addEventListener(\[dq]click\[dq], processEvent, false);
}
.EE
.PP
In the first case above, a new (anonymous) handler function is created
with each iteration of the loop.
In the second case, the same previously declared function is used as an
event handler, which results in smaller memory consumption because there
is only one handler function created.
Moreover, in the first case, it is not possible to call
\f[CR]removeEventListener()\f[R] because no reference to the anonymous
function is kept (or here, not kept to any of the multiple anonymous
functions the loop might create.)
In the second case, it\[cq]s possible to do
\f[CR]myElement.removeEventListener(\[dq]click\[dq], processEvent, false)\f[R]
because \f[CR]processEvent\f[R] is the function reference.
.PP
Actually, regarding memory consumption, the lack of keeping a function
reference is not the real issue; rather it is the lack of keeping a
\f[I]static\f[R] function reference.
.SS Using passive listeners
If an event has a default action \[em] for example, a \f[CR]wheel\f[R]
event that scrolls the container by default \[em] the browser is in
general unable to start the default action until the event listener has
finished, because it doesn\[cq]t know in advance whether the event
listener might cancel the default action by calling
\f[CR]Event.preventDefault()\f[R].
If the event listener takes too long to execute, this can cause a
noticeable delay, also known as jank, before the default action can be
executed.
.PP
By setting the \f[CR]passive\f[R] option to \f[CR]true\f[R], an event
listener declares that it will not cancel the default action, so the
browser can start the default action immediately, without waiting for
the listener to finish.
If the listener does then call \f[CR]Event.preventDefault()\f[R], this
will have no effect.
.PP
The specification for \f[CR]addEventListener()\f[R] defines the default
value for the \f[CR]passive\f[R] option as always being
\f[CR]false\f[R].
However, to realize the scroll performance benefits of passive listeners
in legacy code, browsers other than Safari have changed the default
value of the \f[CR]passive\f[R] option to \f[CR]true\f[R] for the
\f[CR]wheel\f[R], \f[CR]mousewheel\f[R], \f[CR]touchstart\f[R] and
\f[CR]touchmove\f[R] events on the document\-level nodes
\f[CR]Window\f[R], \f[CR]Document\f[R], and \f[CR]Document.body\f[R].
That prevents the event listener from canceling the event, so it
can\[cq]t block page rendering while the user is scrolling.
.RS
.PP
\f[B]Note:\f[R] See the compatibility table below if you need to know
which browsers (and/or which versions of those browsers) implement this
altered behavior.
.RE
.PP
Because of that, when you want to override that behavior and ensure the
\f[CR]passive\f[R] option is \f[CR]false\f[R] in all browsers, you must
explicitly set the option to \f[CR]false\f[R] (rather than relying on
the default).
.PP
You don\[cq]t need to worry about the value of \f[CR]passive\f[R] for
the basic \f[CR]scroll\f[R] event.
Since it can\[cq]t be canceled, event listeners can\[cq]t block page
rendering anyway.
.PP
See Improving scroll performance using passive listeners for an example
showing the effect of passive listeners.
.SS Older browsers
In older browsers that don\[cq]t support the \f[CR]options\f[R]
parameter to \f[CR]addEventListener()\f[R], attempting to use it
prevents the use of the \f[CR]useCapture\f[R] argument without proper
use of feature detection.
.SH EXAMPLES
.SS Add a simple listener
This example demonstrates how to use \f[CR]addEventListener()\f[R] to
watch for mouse clicks on an element.
.SS HTML
.IP
.EX
<table id=\[dq]outside\[dq]>
  <tr>
    <td id=\[dq]t1\[dq]>one</td>
  </tr>
  <tr>
    <td id=\[dq]t2\[dq]>two</td>
  </tr>
</table>
.EE
.SS JavaScript
.IP
.EX
// Function to change the content of t2
function modifyText() {
  const t2 = document.getElementById(\[dq]t2\[dq]);
  const isNodeThree = t2.firstChild.nodeValue === \[dq]three\[dq];
  t2.firstChild.nodeValue = isNodeThree ? \[dq]two\[dq] : \[dq]three\[dq];
}

// Add event listener to table
const el = document.getElementById(\[dq]outside\[dq]);
el.addEventListener(\[dq]click\[dq], modifyText, false);
.EE
.PP
In this code, \f[CR]modifyText()\f[R] is a listener for \f[CR]click\f[R]
events registered using \f[CR]addEventListener()\f[R].
A click anywhere in the table bubbles up to the handler and runs
\f[CR]modifyText()\f[R].
.SS Result
.SS Add an abortable listener
This example demonstrates how to add an \f[CR]addEventListener()\f[R]
that can be aborted with an \f[CR]AbortSignal\f[R].
.SS HTML
.IP
.EX
<table id=\[dq]outside\[dq]>
  <tr>
    <td id=\[dq]t1\[dq]>one</td>
  </tr>
  <tr>
    <td id=\[dq]t2\[dq]>two</td>
  </tr>
</table>
.EE
.SS JavaScript
.IP
.EX
// Add an abortable event listener to table
const controller = new AbortController();
const el = document.getElementById(\[dq]outside\[dq]);
el.addEventListener(\[dq]click\[dq], modifyText, { signal: controller.signal });

// Function to change the content of t2
function modifyText() {
  const t2 = document.getElementById(\[dq]t2\[dq]);
  if (t2.firstChild.nodeValue === \[dq]three\[dq]) {
    t2.firstChild.nodeValue = \[dq]two\[dq];
  } else {
    t2.firstChild.nodeValue = \[dq]three\[dq];
    controller.abort(); // remove listener after value reaches \[dq]three\[dq]
  }
}
.EE
.PP
In the example above, we modify the code in the previous example such
that after the second row\[cq]s content changes to \[lq]three\[rq], we
call \f[CR]abort()\f[R] from the \f[CR]AbortController\f[R] we passed to
the \f[CR]addEventListener()\f[R] call.
That results in the value remaining as \[lq]three\[rq] forever because
we no longer have any code listening for a click event.
.SS Result
.SS Event listener with anonymous function
Here, we\[cq]ll take a look at how to use an anonymous function to pass
parameters into the event listener.
.SS HTML
.IP
.EX
<table id=\[dq]outside\[dq]>
  <tr>
    <td id=\[dq]t1\[dq]>one</td>
  </tr>
  <tr>
    <td id=\[dq]t2\[dq]>two</td>
  </tr>
</table>
.EE
.SS JavaScript
.IP
.EX
// Function to change the content of t2
function modifyText(new_text) {
  const t2 = document.getElementById(\[dq]t2\[dq]);
  t2.firstChild.nodeValue = new_text;
}

// Function to add event listener to table
const el = document.getElementById(\[dq]outside\[dq]);
el.addEventListener(
  \[dq]click\[dq],
  function () {
    modifyText(\[dq]four\[dq]);
  },
  false,
);
.EE
.PP
Notice that the listener is an anonymous function that encapsulates code
that is then, in turn, able to send parameters to the
\f[CR]modifyText()\f[R] function, which is responsible for actually
responding to the event.
.SS Result
.SS Event listener with an arrow function
This example demonstrates a simple event listener implemented using
arrow function notation.
.SS HTML
.IP
.EX
<table id=\[dq]outside\[dq]>
  <tr>
    <td id=\[dq]t1\[dq]>one</td>
  </tr>
  <tr>
    <td id=\[dq]t2\[dq]>two</td>
  </tr>
</table>
.EE
.SS JavaScript
.IP
.EX
// Function to change the content of t2
function modifyText(new_text) {
  const t2 = document.getElementById(\[dq]t2\[dq]);
  t2.firstChild.nodeValue = new_text;
}

// Add event listener to table with an arrow function
const el = document.getElementById(\[dq]outside\[dq]);
el.addEventListener(
  \[dq]click\[dq],
  () => {
    modifyText(\[dq]four\[dq]);
  },
  false,
);
.EE
.SS Result
Please note that while anonymous and arrow functions are similar, they
have different \f[CR]this\f[R] bindings.
While anonymous (and all traditional JavaScript functions) create their
own \f[CR]this\f[R] bindings, arrow functions inherit the
\f[CR]this\f[R] binding of the containing function.
.PP
That means that the variables and constants available to the containing
function are also available to the event handler when using an arrow
function.
.SS Example of options usage
.SS HTML
.IP
.EX
<div class=\[dq]outer\[dq]>
  outer, once & none\-once
  <div class=\[dq]middle\[dq] target=\[dq]_blank\[dq]>
    middle, capture & none\-capture
    <a class=\[dq]inner1\[dq] href=\[dq]https://www.mozilla.org\[dq] target=\[dq]_blank\[dq]>
      inner1, passive & preventDefault(which is not allowed)
    </a>
    <a class=\[dq]inner2\[dq] href=\[dq]https://developer.mozilla.org/\[dq] target=\[dq]_blank\[dq]>
      inner2, none\-passive & preventDefault(not open new page)
    </a>
  </div>
</div>
.EE
.SS CSS
.IP
.EX
\&.outer,
\&.middle,
\&.inner1,
\&.inner2 {
  display: block;
  width: 520px;
  padding: 15px;
  margin: 15px;
  text\-decoration: none;
}
\&.outer {
  border: 1px solid red;
  color: red;
}
\&.middle {
  border: 1px solid green;
  color: green;
  width: 460px;
}
\&.inner1,
\&.inner2 {
  border: 1px solid purple;
  color: purple;
  width: 400px;
}
.EE
.SS JavaScript
.IP
.EX
const outer = document.querySelector(\[dq].outer\[dq]);
const middle = document.querySelector(\[dq].middle\[dq]);
const inner1 = document.querySelector(\[dq].inner1\[dq]);
const inner2 = document.querySelector(\[dq].inner2\[dq]);

const capture = {
  capture: true,
};
const noneCapture = {
  capture: false,
};
const once = {
  once: true,
};
const noneOnce = {
  once: false,
};
const passive = {
  passive: true,
};
const nonePassive = {
  passive: false,
};

outer.addEventListener(\[dq]click\[dq], onceHandler, once);
outer.addEventListener(\[dq]click\[dq], noneOnceHandler, noneOnce);
middle.addEventListener(\[dq]click\[dq], captureHandler, capture);
middle.addEventListener(\[dq]click\[dq], noneCaptureHandler, noneCapture);
inner1.addEventListener(\[dq]click\[dq], passiveHandler, passive);
inner2.addEventListener(\[dq]click\[dq], nonePassiveHandler, nonePassive);

function onceHandler(event) {
  alert(\[dq]outer, once\[dq]);
}
function noneOnceHandler(event) {
  alert(\[dq]outer, none\-once, default\[dq]);
}
function captureHandler(event) {
  //event.stopImmediatePropagation();
  alert(\[dq]middle, capture\[dq]);
}
function noneCaptureHandler(event) {
  alert(\[dq]middle, none\-capture, default\[dq]);
}
function passiveHandler(event) {
  // Unable to preventDefault inside passive event listener invocation.
  event.preventDefault();
  alert(\[dq]inner1, passive, open new page\[dq]);
}
function nonePassiveHandler(event) {
  event.preventDefault();
  //event.stopPropagation();
  alert(\[dq]inner2, none\-passive, default, not open new page\[dq]);
}
.EE
.SS Result
Click the outer, middle, inner containers respectively to see how the
options work.
.PP
Before using a particular value in the \f[CR]options\f[R] object,
it\[cq]s a good idea to ensure that the user\[cq]s browser supports it,
since these are an addition that not all browsers have supported
historically.
See Safely detecting option support for details.
.SS Event listener with multiple options
You can set more than one of the options in the \f[CR]options\f[R]
parameter.
In the following example we are setting two options:
.IP \[bu] 2
\f[CR]passive\f[R], to assert that the handler will not call
\f[CR]preventDefault()\f[R]
.IP \[bu] 2
\f[CR]once\f[R], to ensure that the event handler will only be called
once.
.SS HTML
.IP
.EX
<button id=\[dq]example\-button\[dq]>You have not clicked this button.</button>
<button id=\[dq]reset\-button\[dq]>Click this button to reset the first button.</button>
.EE
.SS JavaScript
.IP
.EX
const buttonToBeClicked = document.getElementById(\[dq]example\-button\[dq]);

const resetButton = document.getElementById(\[dq]reset\-button\[dq]);

// the text that the button is initialized with
const initialText = buttonToBeClicked.textContent;

// the text that the button contains after being clicked
const clickedText = \[dq]You have clicked this button.\[dq];

// we hoist the event listener callback function
// to prevent having duplicate listeners attached
function eventListener() {
  buttonToBeClicked.textContent = clickedText;
}

function addListener() {
  buttonToBeClicked.addEventListener(\[dq]click\[dq], eventListener, {
    passive: true,
    once: true,
  });
}

// when the reset button is clicked, the example button is reset,
// and allowed to have its state updated again
resetButton.addEventListener(\[dq]click\[dq], () => {
  buttonToBeClicked.textContent = initialText;
  addListener();
});

addListener();
.EE
.SS Result
.SS Improving scroll performance using passive listeners
The following example shows the effect of setting \f[CR]passive\f[R].
It includes a \f[CR]<div>\f[R] that contains some text, and a check box.
.SS HTML
.IP
.EX
<div id=\[dq]container\[dq]>
  <p>
    But down there it would be dark now, and not the lovely lighted aquarium she
    imagined it to be during the daylight hours, eddying with schools of tiny,
    delicate animals floating and dancing slowly to their own serene currents
    and creating the look of a living painting. That was wrong, in any case. The
    ocean was different from an aquarium, which was an artificial environment.
    The ocean was a world. And a world is not art. Dorothy thought about the
    living things that moved in that world: large, ruthless and hungry. Like us
    up here.
  </p>
</div>

<div>
  <input type=\[dq]checkbox\[dq] id=\[dq]passive\[dq] name=\[dq]passive\[dq] checked />
  <label for=\[dq]passive\[dq]>passive</label>
</div>
.EE
.PP
\f[CR]css hidden container {   width: 150px;   height: 200px;   overflow: scroll;   margin: 2rem 0;   padding: 0.4rem;   border: 1px solid black; }\f[R]
.SS JavaScript
The code adds a listener to the container\[cq]s \f[CR]wheel\f[R] event,
which by default scrolls the container.
The listener runs a long\-running operation.
Initially the listener is added with the \f[CR]passive\f[R] option, and
whenever the checkbox is toggled, the code toggles the
\f[CR]passive\f[R] option.
.IP
.EX
const passive = document.querySelector(\[dq]#passive\[dq]);
passive.addEventListener(\[dq]change\[dq], (event) => {
  container.removeEventListener(\[dq]wheel\[dq], wheelHandler);
  container.addEventListener(\[dq]wheel\[dq], wheelHandler, {
    passive: passive.checked,
    once: true,
  });
});

const container = document.querySelector(\[dq]#container\[dq]);
container.addEventListener(\[dq]wheel\[dq], wheelHandler, {
  passive: true,
  once: true,
});

function wheelHandler() {
  function isPrime(n) {
    for (let c = 2; c <= Math.sqrt(n); ++c) {
      if (n % c === 0) {
        return false;
      }
    }
    return true;
  }

  const quota = 1000000;
  const primes = [];
  const maximum = 1000000;

  while (primes.length < quota) {
    const candidate = Math.floor(Math.random() * (maximum + 1));
    if (isPrime(candidate)) {
      primes.push(candidate);
    }
  }

  console.log(primes);
}
.EE
.SS Result
The effect is that:
.IP \[bu] 2
Initially, the listener is passive, so trying to scroll the container
with the wheel is immediate.
.IP \[bu] 2
If you uncheck \[lq]passive\[rq] and try to scroll the container using
the wheel, then there is a noticeable delay before the container
scrolls, because the browser has to wait for the long\-running listener
to finish.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]EventTarget.removeEventListener()\f[R]
.IP \[bu] 2
Creating and triggering custom events
.IP \[bu] 2
\c
.UR https://www.quirksmode.org/js/this.html
More details on the use of \f[CR]this\f[R] in event handlers
.UE \c
