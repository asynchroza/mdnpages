.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "XRInputSource.targetRayMode" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRInputSource.targetRayMode \- XRInputSource: targetRayMode property
.SH SYNOPSIS
The read\-only \f[CR]XRInputSource\f[R] property
\f[B]\f[CB]targetRayMode\f[B]\f[R] indicates the method by which the
target ray for the input source should be generated and how it should be
presented to the user.
.PP
Typically a target ray is drawn from the source of the targeting system
along the target ray in the direction in which the user is looking or
pointing.
The style of the ray is generally up to you, as is the method for
indicating the endpoint of the ray.
The targeted point or object might be indicated by drawing a shape or
highlighting the targeted surface or object.
.PP
A target ray emitted by a hand controller:
[IMAGE: A screenshot showing a target ray being emitted by a hand
controller]
A screenshot showing a target ray being emitted by a hand controller
.PP
The target ray can be anything from a simple line (ideally fading over
distance) to an animated effect, such as the science\-fiction
\[lq]phaser\[rq] style shown in the screenshot above.
.SH VALUE
A string indicating which method to use when generating and presenting
the target ray to the user.
The possible values are:
.TP
\f[B]gaze\f[R]
The user is using a gaze\-tracking system (or \f[B]gaze input\f[R])
which detects the direction in which the user is looking.
The target ray will be drawn originating at the viewer\[cq]s eyes and
will follow the direction in which they\[cq]re looking.
.TP
\f[B]screen\f[R]
The direction of the target ray is indicated using a tap on a touch
screen, mouse, or other tactile input device.
.TP
\f[B]tracked\-pointer\f[R]
Targeting is being performed using a handheld device or hand\-tracking
system which the user points in the direction of the target.
The target ray extends from the hand (or the object in the hand) in the
targeted direction.
The direction is determined using platform\-specific rules, though if no
such rules exist, the direction is chosen by assuming the user is
pointing their index finger straight out from their hand.
.SH USAGE NOTES
The input source\[cq]s \f[CR]targetRaySpace\f[R] indicates the position
and orientation of the target ray, and can be used to determine where to
render the ray.
.SH EXAMPLES
This fragment of code shows part of a function to be called once every
frame.
It looks for inputs which have a non\-\f[CR]null\f[R]
\f[CR]targetRaySpace\f[R].
Inputs which have a value for this property represent inputs that
project a target ray outward from the user.
.PP
For each such input, this example looks for inputs whose
\f[CR]targetRayMode\f[R] is \f[CR]tracked\-pointer\f[R], indicating that
the input is in fact intended to represent a targeting device rather
than a gazing device, screen tap, or mouse click.
For tracked pointers, a function \f[CR]myRenderTargetRayAsBeam()\f[R] is
called to render a beam from the input controller\[cq]s virtual position
outward in the direction it\[cq]s pointing.
.PP
The code should continue to perform tasks such as drawing controllers or
any objects representative of the user\[cq]s hands\[cq] positions in the
virtual space, as well as any other input\-related tasks.
.IP
.EX
function updateInputSources(session, frame, refSpace) {
  for (const source of session.getInputSources()) {
    const targetRayPose = frame.getPose(inputSource.targetRaySpace, refSpace);

    if (targetRayPose) {
      if (source.targetRayMode === \[dq]tracked\-pointer\[dq]) {
        myRenderTargetRayAsBeam(targetRayPose);
      }
    }

    // \&...
  }
}
.EE
.PP
See the article Inputs and input sources for more details and a more
complete example.
.SH SEE ALSO
.IP \[bu] 2
WebXR Device API
.IP \[bu] 2
Inputs and input sources
.IP \[bu] 2
Using gamepads in WebXR applications
