.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransfer.types" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.types \- DataTransfer: types property
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.types\f[B]\f[R] read\-only property returns
the available types that exist in the \f[CR]items\f[R].
.SH VALUE
An array of the data formats used in the drag operation.
Each format is a string which is generally a MIME type such as
\f[CR]text/plain\f[R] or \f[CR]text/html\f[R].
If the drag operation included no data, this list will be empty.
If any files are included in the drag operation, then one of the types
will be the string \f[CR]Files\f[R].
.SH EXAMPLES
This example shows the use of the \f[CR]types\f[R] and \f[CR]items\f[R]
properties.
.IP
.EX
<!doctype html>
<html lang=\[dq]en\[dq]>
  <title>Examples of DataTransfer.{types,items} properties</title>
  <meta content=\[dq]width=device\-width\[dq] />
  <style>
    div {
      margin: 0em;
      padding: 2em;
    }
    #target {
      border: 1px solid black;
    }
  </style>
  <script>
    function dragstart_handler(ev) {
      console.log(\[dq]dragStart: target.id = \[dq] + ev.target.id);

      // Add this element\[aq]s id to the drag payload so the drop handler will
      // know which element to add to its tree
      ev.dataTransfer.setData(\[dq]text/plain\[dq], ev.target.id);
      ev.dataTransfer.effectAllowed = \[dq]move\[dq];
    }

    function drop_handler(ev) {
      console.log(\[dq]drop: target.id = \[dq] + ev.target.id);
      ev.preventDefault();

      // Get the id of the target and add the moved element to the target\[aq]s DOM
      const data = ev.dataTransfer.getData(\[dq]text\[dq]);
      ev.target.appendChild(document.getElementById(data));

      // Print each format type
      for (let i = 0; i < ev.dataTransfer.types.length; i++) {
        console.log(\[ga]\&... types[${i}] = ${ev.dataTransfer.types[i]}\[ga]);
      }

      // Print each item\[aq]s \[dq]kind\[dq] and \[dq]type\[dq]
      for (let i = 0; i < ev.dataTransfer.items.length; i++) {
        console.log(
          \[ga]\&... items[${i}].kind = ${ev.dataTransfer.items[i].kind}; type = ${ev.dataTransfer.items[i].type}\[ga],
        );
      }
    }

    function dragover_handler(ev) {
      console.log(\[dq]dragOver\[dq]);
      ev.preventDefault();
      // Set the dropEffect to move
      ev.dataTransfer.dropEffect = \[dq]move\[dq];
    }
  </script>
  <body>
    <h1>
      Examples of <code>DataTransfer</code>.{<code>types</code>,
      <code>items</code>} properties
    </h1>
    <ul>
      <li id=\[dq]i1\[dq] ondragstart=\[dq]dragstart_handler(event);\[dq] draggable=\[dq]true\[dq]>
        Drag Item 1 to the Drop Zone
      </li>
      <li id=\[dq]i2\[dq] ondragstart=\[dq]dragstart_handler(event);\[dq] draggable=\[dq]true\[dq]>
        Drag Item 2 to the Drop Zone
      </li>
    </ul>
    <div
      id=\[dq]target\[dq]
      ondrop=\[dq]drop_handler(event);\[dq]
      ondragover=\[dq]dragover_handler(event);\[dq]>
      Drop Zone
    </div>
  </body>
</html>
.EE
.SH SEE ALSO
.IP \[bu] 2
Drag and drop
.IP \[bu] 2
Drag Operations
.IP \[bu] 2
Recommended Drag Types
.IP \[bu] 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
