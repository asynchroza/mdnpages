.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Error.Error" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Error()\f[B]\f[R] constructor creates \f[V]Error\f[R]
objects.
.SH Syntax
.IP
.nf
\f[C]
new Error()
new Error(message)
new Error(message, options)
new Error(message, fileName)
new Error(message, fileName, lineNumber)

Error()
Error(message)
Error(message, options)
Error(message, fileName)
Error(message, fileName, lineNumber)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]Error()\f[R] can be called with or without
\f[V]new\f[R].
Both create a new \f[V]Error\f[R] instance.
.RE
.SS Parameters
.IP \[bu] 2
\f[V]message\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A human-readable description of the error.
.RE
.IP \[bu] 2
\f[V]options\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An object that has the following properties:
.RS 2
.IP \[bu] 2
\f[V]cause\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A value indicating the specific cause of the error, reflected in the
\f[V]cause\f[R] property.
When catching and re-throwing an error with a more-specific or useful
error message, this property can be used to pass the original error.
.RE
.RE
.RE
.IP \[bu] 2
\f[V]fileName\f[R] \f[I](optional)\f[R] \f[I](non-standard)\f[R]
.RS 2
.IP \[bu] 2
The path to the file that raised this error, reflected in the
\f[V]fileName\f[R] property.
Defaults to the name of the file containing the code that called the
\f[V]Error()\f[R] constructor.
.RE
.IP \[bu] 2
\f[V]lineNumber\f[R] \f[I](optional)\f[R] \f[I](non-standard)\f[R]
.RS 2
.IP \[bu] 2
The line number within the file on which the error was raised, reflected
in the \f[V]lineNumber\f[R] property.
Defaults to the line number containing the \f[V]Error()\f[R] constructor
invocation.
.RE
.SH Examples
.SS Function call or new construction
.PP
When \f[V]Error\f[R] is used like a function, that is without
\f[V]new\f[R], it will return an \f[V]Error\f[R] object.
Therefore, a mere call to \f[V]Error\f[R] will produce the same output
that constructing an \f[V]Error\f[R] object via the \f[V]new\f[R]
keyword would.
.IP
.nf
\f[C]
const x = Error(\[dq]I was created using a function call!\[dq]);

// above has the same functionality as following
const y = new Error(\[aq]I was constructed via the \[dq]new\[dq] keyword!\[aq]);
\f[R]
.fi
.SS Rethrowing an error with a cause
.PP
It is sometimes useful to catch an error and re-throw it with a new
message.
In this case you should pass the original error into the constructor for
the new \f[V]Error\f[R], as shown.
.IP
.nf
\f[C]
try {
  frameworkThatCanThrow();
} catch (err) {
  throw new Error(\[dq]New error message\[dq], { cause: err });
}
\f[R]
.fi
.PP
For a more detailed example see Error > Differentiate between similar
errors.
.SS Omitting options argument
.PP
JavaScript only tries to read \f[V]options.cause\f[R] if
\f[V]options\f[R] is an object \[em] this avoids ambiguity with the
other non-standard \f[V]Error(message, fileName, lineNumber)\f[R]
signature, which requires the second parameter to be a string.
If you omit \f[V]options\f[R], pass a primitive value as
\f[V]options\f[R], or pass an object without the \f[V]cause\f[R]
property, then the created \f[V]Error\f[R] object will have no
\f[V]cause\f[R] property.
.IP
.nf
\f[C]
// Omitting options
const error1 = new Error(\[dq]Error message\[dq]);
console.log(\[dq]cause\[dq] in error1); // false

// Passing a primitive value
const error2 = new Error(\[dq]Error message\[dq], \[dq]\[dq]);
console.log(\[dq]cause\[dq] in error2); // false

// Passing an object without a cause property
const error3 = new Error(\[dq]Error message\[dq], { details: \[dq]http error\[dq] });
console.log(\[dq]cause\[dq] in error3); // false
\f[R]
.fi
.SH See also
.IP \[bu] 2
A polyfill of
\f[V]Error\f[R] (https://github.com/zloirock/core-js#ecmascript-error)
with modern behavior like support \f[V]cause\f[R] is available in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js)
.IP \[bu] 2
\f[V]throw\f[R]
.IP \[bu] 2
\f[V]try...catch\f[R]
.IP \[bu] 2
Error causes (https://v8.dev/features/error-cause) (v8.dev/features)
