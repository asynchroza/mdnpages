.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Function.arguments" "JS" "April 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Function.arguments - Function.prototype.arguments
.SH SYNOPSIS
*(deprecated)**(non-standard)*
.RS
.PP
\f[B]Note:\f[R] The \f[CR]arguments\f[R] property of \f[CR]Function\f[R]
objects is deprecated.
The recommended way to access the \f[CR]arguments\f[R] object is to
refer to the variable \f[CR]arguments\f[R] available within functions.
.RE
.PP
The \f[B]\f[CB]arguments\f[B]\f[R] accessor property of
\f[CR]Function\f[R] instances returns the arguments passed to this
function.
For strict, arrow, async, and generator functions, accessing the
\f[CR]arguments\f[R] property throws a \f[CR]TypeError\f[R].
.SH DESCRIPTION
The value of \f[CR]arguments\f[R] is an array-like object corresponding
to the arguments passed to a function.
.PP
In the case of recursion, i.e.\ if function \f[CR]f\f[R] appears several
times on the call stack, the value of \f[CR]f.arguments\f[R] represents
the arguments corresponding to the most recent invocation of the
function.
.PP
The value of the \f[CR]arguments\f[R] property is normally
\f[CR]null\f[R] if there is no outstanding invocation of the function in
progress (that is, the function has been called but has not yet
returned).
.PP
Note that the only behavior specified by the ECMAScript specification is
that \f[CR]Function.prototype\f[R] has an initial \f[CR]arguments\f[R]
accessor that unconditionally throws a \f[CR]TypeError\f[R] for any
\f[CR]get\f[R] or \f[CR]set\f[R] request (known as a \[lq]poison pill
accessor\[rq]), and that implementations are not allowed to change this
semantic for any function except non-strict plain functions.
The actual behavior of the \f[CR]arguments\f[R] property, if it\[cq]s
anything other than throwing an error, is implementation-defined.
For example, Chrome defines it as an own data property, while Firefox
and Safari extend the initial poison-pill
\f[CR]Function.prototype.arguments\f[R] accessor to specially handle
\f[CR]this\f[R] values that are non-strict functions.
.IP
.EX
(function f() {
  if (Object.hasOwn(f, \[dq]arguments\[dq])) {
    console.log(
      \[dq]arguments is an own property with descriptor\[dq],
      Object.getOwnPropertyDescriptor(f, \[dq]arguments\[dq]),
    );
  } else {
    console.log(
      \[dq]f doesn\[aq]t have an own property named arguments. Trying to get f.[[Prototype]].arguments\[dq],
    );
    console.log(
      Object.getOwnPropertyDescriptor(
        Object.getPrototypeOf(f),
        \[dq]arguments\[dq],
      ).get.call(f),
    );
  }
})();

// In Chrome:
// arguments is an own property with descriptor {value: Arguments(0), writable: false, enumerable: false, configurable: false}

// In Firefox:
// f doesn\[aq]t have an own property named arguments. Trying to get f.[[Prototype]].arguments
// Arguments { \&... }
.EE
.SH EXAMPLES
.SS Using the arguments property
.IP
.EX
function f(n) {
  g(n - 1);
}

function g(n) {
  console.log(\[ga]before: ${g.arguments[0]}\[ga]);
  if (n > 0) {
    f(n);
  }
  console.log(\[ga]after: ${g.arguments[0]}\[ga]);
}

f(2);

console.log(\[ga]returned: ${g.arguments}\[ga]);

// Logs:
// before: 1
// before: 0
// after: 0
// after: 1
// returned: null
.EE
