.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Scheduler" "JS" "March 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Scheduler \- Scheduler
.SH SYNOPSIS
The \f[B]\f[CB]Scheduler\f[B]\f[R] interface of the Prioritized Task
Scheduling API provides the \f[CR]Scheduler.postTask()\f[R] method that
can be used for adding prioritized tasks to be scheduled.
.PP
A \f[CR]Scheduler\f[R] can be accessed from the global object
\f[CR]Window\f[R] or \f[CR]WorkerGlobalScope\f[R]
(\f[CR]this.scheduler\f[R]).
.SH INSTANCE PROPERTIES
None.
.SH INSTANCE METHODS
.TP
\f[B]Scheduler.postTask()\f[R]
Adds a task to the scheduler as a callback, optionally specifying a
priority, delay, and/or a signal for aborting the task.
.SH EXAMPLES
If the feature is defined, an instance of this object is returned by the
global \f[CR]this\f[R] in both workers and the main thread.
The only property of the interface is the \f[CR]postTask()\f[R] method,
which is used to post the task and returns a promise.
.PP
The code below shows a simple task that resolves with the text `Task
executing'.
This text is logged on success.
The code also shows a \f[CR]catch\f[R] block, which would be required in
more complex code to handle when a task is aborted or throws an error.
.IP
.EX
if (\[dq]scheduler\[dq] in this) {
  // Post task with default priority: \[aq]user\-visible\[aq] (no other options)
  // When the task resolves, Promise.then() logs the result.
  scheduler
    .postTask(() => \[dq]Task executing\[dq])
    .then((taskResult) => console.log(\[ga]${taskResult}\[ga])) // Log result
    .catch((error) => console.error(\[ga]Error: ${error}\[ga])); // Log errors
}
.EE
.PP
For more comprehensive example code see Prioritized Task Scheduling API
> Examples.
