.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PublicKeyCredential.response" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.response \- PublicKeyCredential: response property
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]response\f[B]\f[R] read\-only property of the
\f[CR]PublicKeyCredential\f[R] interface is an
\f[CR]AuthenticatorResponse\f[R] object which is sent from the
authenticator to the user agent for the creation/fetching of
credentials.
The information contained in this response will be used by the relying
party\[cq]s server to verify the demand is legitimate.
.PP
An \f[CR]AuthenticatorResponse\f[R] is either:
.IP \[bu] 2
an \f[CR]AuthenticatorAttestationResponse\f[R] (when the
\f[CR]PublicKeyCredential\f[R] is created via
\f[CR]CredentialsContainer.create()\f[R])
.IP \[bu] 2
an \f[CR]AuthenticatorAssertionResponse\f[R] (when the
\f[CR]PublicKeyCredential\f[R] is obtained via
\f[CR]CredentialsContainer.get()\f[R]).
.PP
In order to validate the \f[I]creation\f[R] of credentials, a relying
party\[cq]s server needs both:
.IP \[bu] 2
this response
.IP \[bu] 2
the extensions of the client (given by
\f[CR]PublicKeyCredential.getClientExtensionResults()\f[R]) to validate
the demand.
.RS
.PP
\f[B]Note:\f[R] When validating the fetching of existing credentials,
the whole \f[CR]PublicKeyCredential\f[R] object and the client
extensions are necessary for the relying party\[cq]s server.
.RE
.RS
.PP
\f[B]Note:\f[R] This property may only be used in top\-level contexts
and will not be available in an \f[CR]<iframe>\f[R] for example.
.RE
.SH VALUE
An \f[CR]AuthenticatorResponse\f[R] object containing the data a relying
party\[cq]s script will receive and which should be sent to the relying
party\[cq]s server in order to validate the demand for creation or
fetching.
This object contains data from the client
(\f[CR]AuthenticatorResponse/clientDataJSON\f[R]) and from the
authenticator.
.SH EXAMPLES
.IP
.EX
const options = {
  challenge: new Uint8Array(16) /* from the server */,
  rp: {
    name: \[dq]Example CORP\[dq],
    id: \[dq]login.example.com\[dq],
  },
  user: {
    id: new Uint8Array(16) /* from the server */,
    name: \[dq]canand\[at]example.com\[dq],
    displayName: \[dq]Carina Anand\[dq],
  },
  pubKeyCredParams: [
    {
      type: \[dq]public\-key\[dq],
      alg: \-7,
    },
  ],
};

navigator.credentials
  .create({ publicKey: options })
  .then((pubKeyCredential) => {
    const response = pubKeyCredential.response;
    const clientExtResults = pubKeyCredential.getClientExtensionResults();
    // Send response and client extensions to the server so that it can validate
    // and create credentials
  })
  .catch((err) => {
    // Deal with any error
  });
.EE
