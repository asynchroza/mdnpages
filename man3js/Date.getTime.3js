.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.getTime" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Date.getTime - Date.prototype.getTime()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]getTime()\f[B]\f[R] method of \f[V]Date\f[R] instances
returns the number of milliseconds for this date since the epoch, which
is defined as the midnight at the beginning of January 1, 1970, UTC.
.SH SYNTAX
.IP
.nf
\f[C]
getTime()
\f[R]
.fi
.SS Return value
.PP
A number representing the timestamp, in milliseconds, of this date.
Returns \f[V]NaN\f[R] if the date is invalid.
.SH DESCRIPTION
.PP
\f[V]Date\f[R] objects are fundamentally represented by a timestamp, and
this method allows you to retrieve the timestamp.
You can use this method to help assign a date and time to another
\f[V]Date\f[R] object.
This method is functionally equivalent to the \f[V]valueOf()\f[R]
method.
.SS Reduced time precision
.PP
To offer protection against timing attacks and fingerprinting, the
precision of \f[V]new Date().getTime()\f[R] might get rounded depending
on browser settings.
In Firefox, the \f[V]privacy.reduceTimerPrecision\f[R] preference is
enabled by default and defaults to 2ms.
You can also enable \f[V]privacy.resistFingerprinting\f[R], in which
case the precision will be 100ms or the value of
\f[V]privacy.resistFingerprinting.reduceTimerPrecision.microseconds\f[R],
whichever is larger.
.IP
.nf
\f[C]
// reduced time precision (2ms) in Firefox 60
new Date().getTime();
// 1519211809934
// 1519211810362
// 1519211811670
// \&...

// reduced time precision with \[ga]privacy.resistFingerprinting\[ga] enabled
new Date().getTime();
// 1519129853500
// 1519129858900
// 1519129864400
// \&...
\f[R]
.fi
.SH EXAMPLES
.SS Using getTime() for copying dates
.PP
Constructing a date object with the identical time value.
.IP
.nf
\f[C]
// Since month is zero based, birthday will be January 10, 1995
const birthday = new Date(1994, 12, 10);
const copy = new Date();
copy.setTime(birthday.getTime());
\f[R]
.fi
.SS Measuring execution time
.PP
Subtracting two subsequent \f[V]getTime()\f[R] calls on newly generated
\f[V]Date\f[R] objects, give the time span between these two calls.
This can be used to calculate the executing time of some operations.
See also \f[V]Date.now()\f[R] to prevent instantiating unnecessary
\f[V]Date\f[R] objects.
.IP
.nf
\f[C]
let end, start;

start = new Date();
for (let i = 0; i < 1000; i++) {
  Math.sqrt(i);
}
end = new Date();

console.log(\[ga]Operation took ${end.getTime() - start.getTime()} msec\[ga]);
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] In browsers that support the
\f[V]Web Performance API\f[R]\[cq]s high-resolution time feature,
\f[V]Performance.now()\f[R] can provide more reliable and precise
measurements of elapsed time than \f[V]Date.now()\f[R].
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[V]Date.prototype.setTime()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.valueOf()\f[R]
.IP \[bu] 2
\f[V]Date.now()\f[R]
