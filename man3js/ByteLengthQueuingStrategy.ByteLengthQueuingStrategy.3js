.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ByteLengthQueuingStrategy.ByteLengthQueuingStrategy" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ByteLengthQueuingStrategy.ByteLengthQueuingStrategy \-
ByteLengthQueuingStrategy: ByteLengthQueuingStrategy() constructor
.SH SYNOPSIS
The \f[B]\f[CB]ByteLengthQueuingStrategy()\f[B]\f[R] constructor creates
and returns a \f[CR]ByteLengthQueuingStrategy\f[R] object instance.
.SH SYNTAX
.IP
.EX
new ByteLengthQueuingStrategy(highWaterMark)
.EE
.SS Parameters
An object with the following property:
.TP
\f[B]highWaterMark\f[R]
The total number of bytes that can be contained in the internal queue
before backpressure is applied.
.RS
.PP
Unlike \f[CR]CountQueuingStrategy()\f[R] where the
\f[CR]highWaterMark\f[R] parameter specifies a simple count of the
number of chunks, with \f[CR]ByteLengthQueuingStrategy()\f[R], the
\f[CR]highWaterMark\f[R] parameter specifies a number of \f[I]bytes\f[R]
\[em] specifically, given a stream of chunks, how many bytes worth of
those chunks (rather than a count of how many of those chunks) can be
contained in the internal queue before backpressure is applied.
.RE
.SS Return value
An instance of the \f[CR]ByteLengthQueuingStrategy\f[R] object.
.SS Exceptions
None.
.SH EXAMPLES
.IP
.EX
const queuingStrategy = new ByteLengthQueuingStrategy({
  highWaterMark: 1 * 1024,
});

const readableStream = new ReadableStream(
  {
    start(controller) {
      // \&...
    },
    pull(controller) {
      // \&...
    },
    cancel(err) {
      console.log(\[dq]stream error:\[dq], err);
    },
  },
  queuingStrategy,
);

const size = queuingStrategy.size(chunk);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ByteLengthQueuingStrategy\f[R] interface
