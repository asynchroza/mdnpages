.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.\[at]\[at]species" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
TypedArray.\[at]\[at]species - TypedArray[\[at]\[at]species]
.SH SYNOPSIS
.PP
The \f[B]\f[VB]TypedArray[\[at]\[at]species]\f[B]\f[R] static accessor
property returns the constructor used to construct return values from
typed array methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[V]\[at]\[at]species\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are investigating whether to remove this
feature (https://github.com/tc39/proposal-rm-builtin-subclassing).
Avoid relying on it if possible.
.RE
.SH SYNTAX
.IP
.nf
\f[C]
TypedArray[Symbol.species]
\f[R]
.fi
.SS Return value
.PP
The value of the constructor (\f[V]this\f[R]) on which
\f[V]get \[at]\[at]species\f[R] was called.
The return value is used to construct return values from typed array
methods that create new typed arrays.
.SH DESCRIPTION
.PP
The \f[V]\[at]\[at]species\f[R] accessor property returns the default
constructor for typed array objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.nf
\f[C]
// Hypothetical underlying implementation for illustration
class TypedArray {
  static get [Symbol.species]() {
    return this;
  }
}
\f[R]
.fi
.PP
Because of this polymorphic implementation, \f[V]\[at]\[at]species\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.nf
\f[C]
class SubTypedArray extends Int8Array {}
SubTypedArray[Symbol.species] === SubTypedArray; // true
\f[R]
.fi
.PP
When calling typed array methods that do not mutate the existing array
but return a new array instance (for example, \f[V]filter()\f[R] and
\f[V]map()\f[R]), the array\[cq]s
\f[V]constructor[\[at]\[at]species]\f[R] will be accessed.
The returned constructor will be used to construct the return value of
the typed array method.
.PP
However, unlike \f[V]Array[\[at]\[at]species]\f[R], when using
\f[V]\[at]\[at]species\f[R] to create new typed arrays, the language
will make sure that the newly created array is a proper typed array and
has the same content type as the original array \[em] for example, you
can\[cq]t create a \f[V]BigInt64Array\f[R] from a
\f[V]Float64Array\f[R], or create a non-BigInt array from a BigInt
array.
Doing so throws a \f[V]TypeError\f[R].
.IP
.nf
\f[C]
class BadArray extends Int8Array {
  static get [Symbol.species]() {
    return Array;
  }
}
new BadArray(1).map(() => 0); // TypeError: Method %TypedArray%.prototype.map called on incompatible receiver [object Array]

class BadArray2 extends Int8Array {
  static get [Symbol.species]() {
    return BigInt64Array;
  }
}
new BadArray2(1).map(() => 0n); // TypeError: TypedArray.prototype.map constructed typed array of different content type from |this|
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] Due to a bug in both
SpiderMonkey (https://bugzil.la/1640194) and V8, the content type match
is not checked.
Only Safari will throw a \f[V]TypeError\f[R] in the second example.
.RE
.SH EXAMPLES
.SS Species in ordinary objects
.PP
The \f[V]\[at]\[at]species\f[R] property returns the default constructor
function, which is one of the typed array constructors itself for any
given typed array constructor.
.IP
.nf
\f[C]
Int8Array[Symbol.species]; // function Int8Array()
Uint8Array[Symbol.species]; // function Uint8Array()
Float32Array[Symbol.species]; // function Float32Array()
\f[R]
.fi
.SS Species in derived objects
.PP
In an instance of a custom \f[V]TypedArray\f[R] subclass, such as
\f[V]MyTypedArray\f[R], the \f[V]MyTypedArray\f[R] species is the
\f[V]MyTypedArray\f[R] constructor.
However, you might want to overwrite this, in order to return a parent
typed array object in your derived class methods:
.IP
.nf
\f[C]
class MyTypedArray extends Uint8Array {
  // Overwrite MyTypedArray species to the parent Uint8Array constructor
  static get [Symbol.species]() {
    return Uint8Array;
  }
}
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]TypedArray\f[R]
.IP \[bu] 2
\f[V]Symbol.species\f[R]
