.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.keys" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.keys - Array.prototype.keys()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]keys()\f[B]\f[R] method returns a new \f[I]array
iterator\f[R] object that contains the keys for each index in the array.
.SH SYNTAX
.IP
.nf
\f[C]
keys()
\f[R]
.fi
.SS Return value
.PP
A new iterable iterator object.
.SH DESCRIPTION
.PP
When used on sparse arrays, the \f[V]keys()\f[R] method iterates empty
slots as if they have the value \f[V]undefined\f[R].
.PP
The \f[V]keys()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Using keys() on sparse arrays
.PP
Unlike \f[V]Object.keys()\f[R], which only includes keys that actually
exist in the array, the \f[V]keys()\f[R] iterator doesn\[cq]t ignore
holes representing missing properties.
.IP
.nf
\f[C]
const arr = [\[dq]a\[dq], , \[dq]c\[dq]];
const sparseKeys = Object.keys(arr);
const denseKeys = [...arr.keys()];
console.log(sparseKeys); // [\[aq]0\[aq], \[aq]2\[aq]]
console.log(denseKeys); // [0, 1, 2]
\f[R]
.fi
.SS Calling keys() on non-array objects
.PP
The \f[V]keys()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and then yields all integer indices between 0 and
\f[V]length - 1\f[R].
No index access actually happens.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
};
for (const entry of Array.prototype.keys.call(arrayLike)) {
  console.log(entry);
}
// 0
// 1
// 2
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.keys\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.entries()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.values()\f[R]
.IP \[bu] 2
\f[V]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.keys()\f[R]
.IP \[bu] 2
Iteration protocols
