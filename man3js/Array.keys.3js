.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Array.keys" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.keys - Array.prototype.keys()
.SH SYNOPSIS
The \f[B]\f[CB]keys()\f[B]\f[R] method of \f[CR]Array\f[R] instances
returns a new \f[I]array iterator\f[R] object that contains the keys for
each index in the array.
.SH SYNTAX
.IP
.EX
keys()
.EE
.SS Parameters
None.
.SS Return value
A new iterable iterator object.
.SH DESCRIPTION
When used on sparse arrays, the \f[CR]keys()\f[R] method iterates empty
slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]keys()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Using keys() on sparse arrays
Unlike \f[CR]Object.keys()\f[R], which only includes keys that actually
exist in the array, the \f[CR]keys()\f[R] iterator doesn\[cq]t ignore
holes representing missing properties.
.IP
.EX
const arr = [\[dq]a\[dq], , \[dq]c\[dq]];
const sparseKeys = Object.keys(arr);
const denseKeys = [...arr.keys()];
console.log(sparseKeys); // [\[aq]0\[aq], \[aq]2\[aq]]
console.log(denseKeys); // [0, 1, 2]
.EE
.SS Calling keys() on non-array objects
The \f[CR]keys()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then yields all integer indices between 0 and
\f[CR]length - 1\f[R].
No index access actually happens.
.IP
.EX
const arrayLike = {
  length: 3,
};
for (const entry of Array.prototype.keys.call(arrayLike)) {
  console.log(entry);
}
// 0
// 1
// 2
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Array.prototype.keys\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.values()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.keys()\f[R]
.IP \[bu] 2
Iteration protocols
