.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.localeCompare" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]localeCompare()\f[B]\f[R] method returns a number
indicating whether a reference string comes before, or after, or is the
same as the given string in sort order.
In implementations with \f[V]Intl.Collator\f[R] API support, this method
simply calls \f[V]Intl.Collator\f[R].
.PP
When comparing large numbers of strings, such as in sorting large
arrays, it is better to create an \f[V]Intl.Collator\f[R] object and use
the function provided by its \f[V]compare()\f[R] method.
.SH Syntax
.IP
.nf
\f[C]
localeCompare(compareString)
localeCompare(compareString, locales)
localeCompare(compareString, locales, options)
\f[R]
.fi
.SS Parameters
.PP
The \f[V]locales\f[R] and \f[V]options\f[R] parameters customize the
behavior of the function and let applications specify the language whose
formatting conventions should be used.
.PP
In implementations that support the \f[V]Intl.Collator\f[R] API, these
parameters correspond exactly to the \f[V]Intl.Collator()\f[R]
constructor\[cq]s parameters.
Implementations without \f[V]Intl.Collator\f[R] support are asked to
ignore both parameters, making the comparison result returned entirely
implementation-dependent \[em] it\[cq]s only required to be
\f[I]consistent\f[R].
.IP \[bu] 2
\f[V]compareString\f[R]
.RS 2
.IP \[bu] 2
The string against which the \f[V]referenceStr\f[R] is compared.
All values are coerced to strings, so omitting it or passing
\f[V]undefined\f[R] causes \f[V]localeCompare()\f[R] to compare against
the string \f[V]\[dq]undefined\[dq]\f[R], which is rarely what you want.
.RE
.IP \[bu] 2
\f[V]locales\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A string with a BCP 47 language tag, or an array of such strings.
Corresponds to the \f[V]locales\f[R] parameter of the
\f[V]Intl.Collator()\f[R] constructor.
.RS 2
.PP
In implementations without \f[V]Intl.Collator\f[R] support, this
parameter is ignored and the host\[cq]s locale is usually used.
.RE
.RE
.IP \[bu] 2
\f[V]options\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An object adjusting the output format.
Corresponds to the \f[V]options\f[R] parameter of the
\f[V]Intl.Collator()\f[R] constructor.
.RS 2
.PP
In implementations without \f[V]Intl.Collator\f[R] support, this
parameter is ignored.
.RE
.RE
.PP
See the \f[V]Intl.Collator()\f[R] constructor for details on the
\f[V]locales\f[R] and \f[V]options\f[R] parameters and how to use them.
.SS Return value
.PP
A \f[B]negative\f[R] number if \f[V]referenceStr\f[R] occurs before
\f[V]compareString\f[R]; \f[B]positive\f[R] if the
\f[V]referenceStr\f[R] occurs after \f[V]compareString\f[R]; \f[V]0\f[R]
if they are equivalent.
.PP
In implementations with \f[V]Intl.Collator\f[R], this is equivalent to
\f[V]new Intl.Collator(locales, options).compare(referenceStr, compareString)\f[R].
.SH Description
.PP
Returns an integer indicating whether the \f[V]referenceStr\f[R] comes
before, after or is equivalent to the \f[V]compareString\f[R].
.IP \[bu] 2
Negative when the \f[V]referenceStr\f[R] occurs before
\f[V]compareString\f[R]
.IP \[bu] 2
Positive when the \f[V]referenceStr\f[R] occurs after
\f[V]compareString\f[R]
.IP \[bu] 2
Returns \f[V]0\f[R] if they are equivalent
.RS
.PP
\f[B]Warning:\f[R] Do not rely on exact return values of \f[V]-1\f[R] or
\f[V]1\f[R]!
.PP
Negative and positive integer results vary between browsers (as well as
between browser versions) because the ECMAScript specification only
mandates negative and positive values.
Some browsers may return \f[V]-2\f[R] or \f[V]2\f[R], or even some other
negative or positive value.
.RE
.SH Examples
.SS Using localeCompare()
.IP
.nf
\f[C]
// The letter \[dq]a\[dq] is before \[dq]c\[dq] yielding a negative value
\[dq]a\[dq].localeCompare(\[dq]c\[dq]); // -2 or -1 (or some other negative value)

// Alphabetically the word \[dq]check\[dq] comes after \[dq]against\[dq] yielding a positive value
\[dq]check\[dq].localeCompare(\[dq]against\[dq]); // 2 or 1 (or some other positive value)

// \[dq]a\[dq] and \[dq]a\[dq] are equivalent yielding a neutral value of zero
\[dq]a\[dq].localeCompare(\[dq]a\[dq]); // 0
\f[R]
.fi
.SS Sort an array
.PP
\f[V]localeCompare()\f[R] enables case-insensitive sorting for an array.
.IP
.nf
\f[C]
const items = [\[dq]réservé\[dq], \[dq]Premier\[dq], \[dq]Cliché\[dq], \[dq]communiqué\[dq], \[dq]café\[dq], \[dq]Adieu\[dq]];
items.sort((a, b) => a.localeCompare(b, \[dq]fr\[dq], { ignorePunctuation: true }));
// [\[aq]Adieu\[aq], \[aq]café\[aq], \[aq]Cliché\[aq], \[aq]communiqué\[aq], \[aq]Premier\[aq], \[aq]réservé\[aq]]
\f[R]
.fi
.SS Check browser support for extended arguments
.PP
The \f[V]locales\f[R] and \f[V]options\f[R] arguments are not supported
in all browsers yet.
.PP
To check whether an implementation supports them, use the
\f[V]\[dq]i\[dq]\f[R] argument (a requirement that illegal language tags
are rejected) and look for a \f[V]RangeError\f[R] exception:
.IP
.nf
\f[C]
function localeCompareSupportsLocales() {
  try {
    \[dq]foo\[dq].localeCompare(\[dq]bar\[dq], \[dq]i\[dq]);
  } catch (e) {
    return e.name === \[dq]RangeError\[dq];
  }
  return false;
}
\f[R]
.fi
.SS Using locales
.PP
The results provided by \f[V]localeCompare()\f[R] vary between
languages.
In order to get the sort order of the language used in the user
interface of your application, make sure to specify that language (and
possibly some fallback languages) using the \f[V]locales\f[R] argument:
.IP
.nf
\f[C]
console.log(\[dq]ä\[dq].localeCompare(\[dq]z\[dq], \[dq]de\[dq])); // a negative value: in German, ä sorts before z
console.log(\[dq]ä\[dq].localeCompare(\[dq]z\[dq], \[dq]sv\[dq])); // a positive value: in Swedish, ä sorts after z
\f[R]
.fi
.SS Using options
.PP
The results provided by \f[V]localeCompare()\f[R] can be customized
using the \f[V]options\f[R] argument:
.IP
.nf
\f[C]
// in German, ä has a as the base letter
console.log(\[dq]ä\[dq].localeCompare(\[dq]a\[dq], \[dq]de\[dq], { sensitivity: \[dq]base\[dq] })); // 0

// in Swedish, ä and a are separate base letters
console.log(\[dq]ä\[dq].localeCompare(\[dq]a\[dq], \[dq]sv\[dq], { sensitivity: \[dq]base\[dq] })); // a positive value
\f[R]
.fi
.SS Numeric sorting
.IP
.nf
\f[C]
// by default, \[dq]2\[dq] > \[dq]10\[dq]
console.log(\[dq]2\[dq].localeCompare(\[dq]10\[dq])); // 1

// numeric using options:
console.log(\[dq]2\[dq].localeCompare(\[dq]10\[dq], undefined, { numeric: true })); // -1

// numeric using locales tag:
console.log(\[dq]2\[dq].localeCompare(\[dq]10\[dq], \[dq]en-u-kn-true\[dq])); // -1
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Intl.Collator\f[R]
