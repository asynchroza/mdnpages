.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "RTCPeerConnection.close" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.close \- RTCPeerConnection: close() method
.SH SYNOPSIS
The \f[B]\f[CB]RTCPeerConnection.close()\f[B]\f[R] method closes the
current peer connection.
.SH SYNTAX
.IP
.EX
close()
.EE
.PP
\f[I]This method has no parameters, and returns nothing.\f[R]
.PP
Calling this method terminates the RTCPeerConnection\[cq]s ICE agent,
ending any ongoing ICE processing and any active streams.
This also releases any resources in use by the ICE agent, including TURN
permissions.
All \f[CR]RTCRtpSender\f[R] objects are considered to be stopped once
this returns (they may still be in the process of stopping, but for all
intents and purposes, they\[cq]re stopped).
.PP
Once this method returns, the signaling state as returned by
\f[CR]RTCPeerConnection.signalingState\f[R] is \f[CR]closed\f[R].
.PP
Make sure that you \f[CR]delete\f[R] all references to the previous
\f[CR]RTCPeerConnection\f[R] before attempting to create a new one that
connects to the same remote peer, as not doing so might result in some
errors depending on the browser.
.SH EXAMPLE
.IP
.EX
const pc = new RTCPeerConnection();
const dc = pc.createDataChannel(\[dq]my channel\[dq]);

dc.onmessage = (event) => {
  console.log(\[ga]received: ${event.data}\[ga]);
  pc.close(); // We decided to close after the first received message
};

dc.onopen = () => {
  console.log(\[dq]datachannel open\[dq]);
};

dc.onclose = () => {
  console.log(\[dq]datachannel close\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC
.IP \[bu] 2
\f[CR]RTCPeerConnection\f[R]
.IP \[bu] 2
\f[CR]RTCPeerConnection.signalingState\f[R]
