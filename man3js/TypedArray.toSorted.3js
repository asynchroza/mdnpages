.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.toSorted" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]toSorted()\f[B]\f[R] method is the copying version of the
\f[V]sort()\f[R] method.
It returns a new array with the elements sorted in ascending order.
This method has the same algorithm as
\f[V]Array.prototype.toSorted()\f[R], except that it sorts the values
numerically instead of as strings by default.
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH Syntax
.IP
.nf
\f[C]
// Functionless
toSorted()

// Arrow function
toSorted((a, b) => { /* \&... */ })

// Compare function
toSorted(compareFn)

// Inline compare function
toSorted(function compareFn(a, b) { /* \&... */ })
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]compareFn\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Specifies a function that defines the sort order.
.RE
.SS Return value
.PP
A new typed array with the elements sorted in ascending order.
.SH Examples
.SS Sorting an array
.PP
For more examples, see also the \f[V]Array.prototype.sort()\f[R] method.
.IP
.nf
\f[C]
const numbers = new Uint8Array([40, 1, 5, 200]);
const numberSorted = numbers.toSorted();
console.log(numberSorted); // Uint8Array [ 1, 5, 40, 200 ]
// Unlike plain Arrays, a compare function is not required
// to sort the numbers numerically.
console.log(numbers); // Uint8Array [ 40, 1, 5, 200 ]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]TypedArray.prototype.toSorted\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#change-array-by-copy)
.IP \[bu] 2
\f[V]Array.prototype.toSorted()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.sort()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.toReversed()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.with()\f[R]
