.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Object.entries" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Object.entries()\f[B]\f[R] static method returns an array
of a given object\[cq]s own enumerable string-keyed property key-value
pairs.
.SH Syntax
.IP
.nf
\f[C]
Object.entries(obj)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]obj\f[R]
.RS 2
.IP \[bu] 2
An object.
.RE
.SS Return value
.PP
An array of the given object\[cq]s own enumerable string-keyed property
key-value pairs.
Each key-value pair is an array with two elements: the first element is
the property key (which is always a string), and the second element is
the property value.
.SH Description
.PP
\f[V]Object.entries()\f[R] returns an array whose elements are arrays
corresponding to the enumerable string-keyed property key-value pairs
found directly upon \f[V]object\f[R].
This is the same as iterating with a \f[V]for...in\f[R] loop, except
that a \f[V]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[V]Object.entries()\f[R] is the
same as that provided by a \f[V]for...in\f[R] loop.
.PP
If you only need the property keys, use \f[V]Object.keys()\f[R] instead.
If you only need the property values, use \f[V]Object.values()\f[R]
instead.
.SH Examples
.SS Using Object.entries()
.IP
.nf
\f[C]
const obj = { foo: \[dq]bar\[dq], baz: 42 };
console.log(Object.entries(obj)); // [ [\[aq]foo\[aq], \[aq]bar\[aq]], [\[aq]baz\[aq], 42] ]

// Array-like object
const obj = { 0: \[dq]a\[dq], 1: \[dq]b\[dq], 2: \[dq]c\[dq] };
console.log(Object.entries(obj)); // [ [\[aq]0\[aq], \[aq]a\[aq]], [\[aq]1\[aq], \[aq]b\[aq]], [\[aq]2\[aq], \[aq]c\[aq]] ]

// Array-like object with random key ordering
const anObj = { 100: \[dq]a\[dq], 2: \[dq]b\[dq], 7: \[dq]c\[dq] };
console.log(Object.entries(anObj)); // [ [\[aq]2\[aq], \[aq]b\[aq]], [\[aq]7\[aq], \[aq]c\[aq]], [\[aq]100\[aq], \[aq]a\[aq]] ]

// getFoo is a non-enumerable property
const myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        return this.foo;
      },
    },
  },
);
myObj.foo = \[dq]bar\[dq];
console.log(Object.entries(myObj)); // [ [\[aq]foo\[aq], \[aq]bar\[aq]] ]
\f[R]
.fi
.SS Using Object.entries() on primitives
.PP
Non-object arguments are coerced to objects.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.nf
\f[C]
// Strings have indices as enumerable own properties
console.log(Object.entries(\[dq]foo\[dq])); // [ [\[aq]0\[aq], \[aq]f\[aq]], [\[aq]1\[aq], \[aq]o\[aq]], [\[aq]2\[aq], \[aq]o\[aq]] ]

// Other primitives have no own properties
console.log(Object.entries(100)); // []
\f[R]
.fi
.SS Converting an Object to a Map
.PP
The \f[V]Map()\f[R] constructor accepts an iterable of
\f[V]entries\f[R].
With \f[V]Object.entries\f[R], you can easily convert from
\f[V]Object\f[R] to \f[V]Map\f[R]:
.IP
.nf
\f[C]
const obj = { foo: \[dq]bar\[dq], baz: 42 };
const map = new Map(Object.entries(obj));
console.log(map); // Map(2) {\[dq]foo\[dq] => \[dq]bar\[dq], \[dq]baz\[dq] => 42}
\f[R]
.fi
.SS Iterating through an Object
.PP
Using array destructuring, you can iterate through objects easily.
.IP
.nf
\f[C]
// Using for...of loop
const obj = { a: 5, b: 7, c: 9 };
for (const [key, value] of Object.entries(obj)) {
  console.log(\[ga]${key} ${value}\[ga]); // \[dq]a 5\[dq], \[dq]b 7\[dq], \[dq]c 9\[dq]
}

// Using array methods
Object.entries(obj).forEach(([key, value]) => {
  console.log(\[ga]${key} ${value}\[ga]); // \[dq]a 5\[dq], \[dq]b 7\[dq], \[dq]c 9\[dq]
});
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Object.entries\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
Enumerability and ownership of properties
.IP \[bu] 2
\f[V]Object.keys()\f[R]
.IP \[bu] 2
\f[V]Object.values()\f[R]
.IP \[bu] 2
\f[V]Object.prototype.propertyIsEnumerable()\f[R]
.IP \[bu] 2
\f[V]Object.create()\f[R]
.IP \[bu] 2
\f[V]Object.fromEntries()\f[R]
.IP \[bu] 2
\f[V]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.entries()\f[R]
