.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.replaceAll" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
String.replaceAll - String.prototype.replaceAll()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]replaceAll()\f[B]\f[R] method returns a new string with
all matches of a \f[V]pattern\f[R] replaced by a \f[V]replacement\f[R].
The \f[V]pattern\f[R] can be a string or a \f[V]RegExp\f[R], and the
\f[V]replacement\f[R] can be a string or a function to be called for
each match.
The original string is left unchanged.
.SH SYNTAX
.IP
.nf
\f[C]
replaceAll(pattern, replacement)
\f[R]
.fi
.SS Parameters
.TP
\f[B]pattern\f[R]
Can be a string or an object with a \f[V]Symbol.replace\f[R] method
\[em] the typical example being a regular expression.
Any value that doesn\[cq]t have the \f[V]Symbol.replace\f[R] method will
be coerced to a string.
.RS
.PP
If \f[V]pattern\f[R] is a regex, then it must have the global
(\f[V]g\f[R]) flag set, or a \f[V]TypeError\f[R] is thrown.
.RE
.TP
\f[B]replacement\f[R]
Can be a string or a function.
The replacement has the same semantics as that of
\f[V]String.prototype.replace()\f[R].
.SS Return value
.PP
A new string, with all matches of a pattern replaced by a replacement.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the \f[V]pattern\f[R] is a regex that does not have the global
(\f[V]g\f[R]) flag set (its \f[V]flags\f[R] property does not contain
\f[V]\[dq]g\[dq]\f[R]).
.SH DESCRIPTION
.PP
This method does not mutate the string value it\[cq]s called on.
It returns a new string.
.PP
Unlike \f[V]replace()\f[R], this method would replace all occurrences of
a string, not just the first one.
This is especially useful if the string is not statically known, as
calling the \f[V]RegExp()\f[R] constructor without escaping special
characters may unintentionally change its semantics.
.IP
.nf
\f[C]
function unsafeRedactName(text, name) {
  return text.replace(new RegExp(name, \[dq]g\[dq]), \[dq][REDACTED]\[dq]);
}
function safeRedactName(text, name) {
  return text.replaceAll(name, \[dq][REDACTED]\[dq]);
}

const report =
  \[dq]A hacker called ha.*er used special characters in their name to breach the system.\[dq];

console.log(unsafeRedactName(report, \[dq]ha.*er\[dq])); // \[dq]A [REDACTED]s in their name to breach the system.\[dq]
console.log(safeRedactName(report, \[dq]ha.*er\[dq])); // \[dq]A hacker called [REDACTED] used special characters in their name to breach the system.\[dq]
\f[R]
.fi
.PP
If \f[V]pattern\f[R] is an object with a \f[V]Symbol.replace\f[R] method
(including \f[V]RegExp\f[R] objects), that method is called with the
target string and \f[V]replacement\f[R] as arguments.
Its return value becomes the return value of \f[V]replaceAll()\f[R].
In this case the behavior of \f[V]replaceAll()\f[R] is entirely encoded
by the \f[V]\[at]\[at]replace\f[R] method, and therefore will have the
same result as \f[V]replace()\f[R] (apart from the extra input
validation that the regex is global).
.PP
If the \f[V]pattern\f[R] is an empty string, the replacement will be
inserted in between every UTF-16 code unit, similar to \f[V]split()\f[R]
behavior.
.IP
.nf
\f[C]
\[dq]xxx\[dq].replaceAll(\[dq]\[dq], \[dq]_\[dq]); // \[dq]_x_x_x_\[dq]
\f[R]
.fi
.PP
For more information about how regex properties (especially the sticky
flag) interact with \f[V]replaceAll()\f[R], see
\f[V]RegExp.prototype[\[at]\[at]replace]()\f[R].
.SH EXAMPLES
.SS Using replaceAll()
.IP
.nf
\f[C]
\[dq]aabbcc\[dq].replaceAll(\[dq]b\[dq], \[dq].\[dq]);
// \[aq]aa..cc\[aq]
\f[R]
.fi
.SS Non-global regex throws
.PP
When using a regular expression search value, it must be global.
This won\[cq]t work:
.PP
\f[B]Bad\f[R]
.IP
.nf
\f[C]
\[dq]aabbcc\[dq].replaceAll(/b/, \[dq].\[dq]);
// TypeError: replaceAll must be called with a global RegExp
\f[R]
.fi
.PP
This will work:
.PP
\f[B]Good\f[R]
.IP
.nf
\f[C]
\[dq]aabbcc\[dq].replaceAll(/b/g, \[dq].\[dq]);
(\[dq]aa..cc\[dq]);
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]String.prototype.replaceAll\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[V]String.prototype.replace()\f[R]
.IP \[bu] 2
\f[V]String.prototype.match()\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.exec()\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.test()\f[R]
