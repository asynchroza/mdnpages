'\" t
.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Symbol.unscopables" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.unscopables \- Symbol.unscopables
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.unscopables\f[B]\f[R] static data property
represents the well\-known symbol \f[CR]\[at]\[at]unscopables\f[R].
The \f[CR]with\f[R] statement looks up this symbol on the scope object
for a property containing a collection of properties that should not
become bindings within the \f[CR]with\f[R] environment.
.SH VALUE
The well\-known symbol \f[CR]\[at]\[at]unscopables\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
The \f[CR]\[at]\[at]unscopables\f[R] symbol (accessed via
\f[CR]Symbol.unscopables\f[R]) can be defined on any object to exclude
property names from being exposed as lexical variables in
\f[CR]with\f[R] environment bindings.
Note that when using strict mode, \f[CR]with\f[R] statements are not
available, and this symbol is likely not needed.
.PP
Setting a property of the \f[CR]\[at]\[at]unscopables\f[R] object to
\f[CR]true\f[R] (or any truthy value) will make the corresponding
property of the \f[CR]with\f[R] scope object \f[I]unscopable\f[R] and
therefore won\[cq]t be introduced to the \f[CR]with\f[R] body scope.
Setting a property to \f[CR]false\f[R] (or any falsy value) will make it
\f[I]scopable\f[R] and thus appear as lexical scope variables.
.PP
When deciding whether \f[CR]x\f[R] is unscopable, the entire prototype
chain of the \f[CR]\[at]\[at]unscopables\f[R] property is looked up for
a property called \f[CR]x\f[R].
This means if you declared \f[CR]\[at]\[at]unscopables\f[R] as a plain
object, \f[CR]Object.prototype\f[R] properties like \f[CR]toString\f[R]
would become unscopable as well, which may cause backward
incompatibility for legacy code assuming those properties are normally
scoped (see an example below).
You are advised to make your custom \f[CR]\[at]\[at]unscopables\f[R]
property have \f[CR]null\f[R] as its prototype, like
\f[CR]Array.prototype[\[at]\[at]unscopables]\f[R] does.
.PP
This protocol is also utilized by DOM APIs, such as
\f[CR]Element.prototype.append()\f[R].
.SH EXAMPLES
.SS Scoping in with statements
The following code works fine in ES5 and below.
However, in ECMAScript 2015 and later, the
\f[CR]Array.prototype.keys()\f[R] method was introduced.
That means that inside a \f[CR]with\f[R] environment, \[lq]keys\[rq]
would now be the method and not the variable.
That\[cq]s why the \f[CR]\[at]\[at]unscopables\f[R] symbol was
introduced.
A built\-in \f[CR]\[at]\[at]unscopables\f[R] setting is implemented as
\f[CR]Array.prototype[\[at]\[at]unscopables]\f[R] to prevent some of the
Array methods being scoped into the \f[CR]with\f[R] statement.
.IP
.EX
var keys = [];

with (Array.prototype) {
  keys.push(\[dq]something\[dq]);
}
.EE
.SS Unscopables in objects
You can also set \f[CR]\[at]\[at]unscopables\f[R] for your own objects.
.IP
.EX
const obj = {
  foo: 1,
  bar: 2,
  baz: 3,
};

obj[Symbol.unscopables] = {
  // Make the object have \[ga]null\[ga] prototype to prevent
  // \[ga]Object.prototype\[ga] methods from being unscopable
  __proto__: null,
  // \[ga]foo\[ga] will be scopable
  foo: false,
  // \[ga]bar\[ga] will be unscopable
  bar: true,
  // \[ga]baz\[ga] is omitted; because \[ga]undefined\[ga] is falsy, it is also scopable (default)
};

with (obj) {
  console.log(foo); // 1
  console.log(bar); // ReferenceError: bar is not defined
  console.log(baz); // 3
}
.EE
.SS Avoid using a non\-null\-prototype object as \[at]\[at]unscopables
Declaring \f[CR]\[at]\[at]unscopables\f[R] as a plain object without
eliminating its prototype may cause subtle bugs.
Consider the following code working before
\f[CR]\[at]\[at]unscopables\f[R]:
.IP
.EX
const character = {
  name: \[dq]Yoda\[dq],
  toString: function () {
    return \[dq]Use with statements, you must not\[dq];
  },
};

with (character) {
  console.log(name + \[aq] says: \[dq]\[aq] + toString() + \[aq]\[dq]\[aq]); // Yoda says: \[dq]Use with statements, you must not\[dq]
}
.EE
.PP
To preserve backward compatibility, you decided to add an
\f[CR]\[at]\[at]unscopables\f[R] property when adding more properties to
\f[CR]character\f[R].
You may na√Øvely do it like:
.PP
\f[B]Bad\f[R]
.IP
.EX
const character = {
  name: \[dq]Yoda\[dq],
  toString: function () {
    return \[dq]Use with statements, you must not\[dq];
  },
  student: \[dq]Luke\[dq],
  [Symbol.unscopables]: {
    // Make \[ga]student\[ga] unscopable
    student: true,
  },
};
.EE
.PP
However, the code above now breaks:
.IP
.EX
with (character) {
  console.log(name + \[aq] says: \[dq]\[aq] + toString() + \[aq]\[dq]\[aq]); // Yoda says: \[dq][object Undefined]\[dq]
}
.EE
.PP
This is because when looking up
\f[CR]character[Symbol.unscopables].toString\f[R], it returns
\f[CR]Object.prototype.toString()\f[R], which is a truthy value, thus
making the \f[CR]toString()\f[R] call in the \f[CR]with()\f[R] statement
reference \f[CR]globalThis.toString()\f[R] instead \[em] and because
it\[cq]s called without a \f[CR]this\f[R], \f[CR]this\f[R] is
\f[CR]undefined\f[R], making it return \f[CR][object Undefined]\f[R].
.PP
Even when the method is not overridden by \f[CR]character\f[R], making
it unscopable will change the value of \f[CR]this\f[R].
.IP
.EX
const proto = {};
const obj = { __proto__: proto };

with (proto) {
  console.log(isPrototypeOf(obj)); // true; \[ga]isPrototypeOf\[ga] is scoped and \[ga]this\[ga] is \[ga]proto\[ga]
}

proto[Symbol.unscopables] = {};

with (proto) {
  console.log(isPrototypeOf(obj)); // TypeError: Cannot convert undefined or null to object
  // \[ga]isPrototypeOf\[ga] is unscoped and \[ga]this\[ga] is undefined
}
.EE
.PP
To fix this, always make sure \f[CR]\[at]\[at]unscopables\f[R] only
contains properties you wish to be unscopable, without
\f[CR]Object.prototype\f[R] properties.
.PP
\f[B]Good\f[R]
.IP
.EX
const character = {
  name: \[dq]Yoda\[dq],
  toString: function () {
    return \[dq]Use with statements, you must not\[dq];
  },
  student: \[dq]Luke\[dq],
  [Symbol.unscopables]: {
    // Make the object have \[ga]null\[ga] prototype to prevent
    // \[ga]Object.prototype\[ga] methods from being unscopable
    __proto__: null,
    // Make \[ga]student\[ga] unscopable
    student: true,
  },
};
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]unscopables]\f[R]
.IP \[bu] 2
\f[CR]with\f[R]
.IP \[bu] 2
\f[CR]Element.prototype.append()\f[R]
