.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ServiceWorkerGlobalScope.notificationclick_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerGlobalScope.notificationclick_event \-
ServiceWorkerGlobalScope: notificationclick event
.SH SYNOPSIS
The \f[B]\f[CB]notificationclick\f[B]\f[R] event is fired to indicate
that a system notification spawned by
\f[CR]ServiceWorkerRegistration.showNotification()\f[R] has been
clicked.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]notificationclick\[dq], (event) => {});

onnotificationclick = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]NotificationEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Inherits properties from its ancestor, \f[CI]Event\f[I]\f[R].
.TP
\f[B]NotificationEvent.notification\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Notification\f[R] object representing the notification
that was clicked to fire the event.
.TP
\f[B]NotificationEvent.action\f[R] \f[I](read\-only)\f[R]
Returns the string ID of the notification button the user clicked.
This value returns an empty string if the user clicked the notification
somewhere other than an action button, or the notification does not have
a button.
.SH EXAMPLES
You can use the \f[CR]notificationclick\f[R] event in an
\f[CR]addEventListener\f[R] method:
.IP
.EX
self.addEventListener(\[dq]notificationclick\[dq], (event) => {
  console.log(\[dq]On notification click: \[dq], event.notification.tag);
  event.notification.close();

  // This looks to see if the current is already open and
  // focuses if it is
  event.waitUntil(
    clients
      .matchAll({
        type: \[dq]window\[dq],
      })
      .then((clientList) => {
        for (const client of clientList) {
          if (client.url === \[dq]/\[dq] && \[dq]focus\[dq] in client) return client.focus();
        }
        if (clients.openWindow) return clients.openWindow(\[dq]/\[dq]);
      }),
  );
});
.EE
.PP
Or use the \f[CR]onnotificationclick\f[R] event handler property:
.IP
.EX
self.onnotificationclick = (event) => {
  console.log(\[dq]On notification click: \[dq], event.notification.tag);
  event.notification.close();

  // This looks to see if the current is already open and
  // focuses if it is
  event.waitUntil(
    clients
      .matchAll({
        type: \[dq]window\[dq],
      })
      .then((clientList) => {
        for (const client of clientList) {
          if (client.url === \[dq]/\[dq] && \[dq]focus\[dq] in client) return client.focus();
        }
        if (clients.openWindow) return clients.openWindow(\[dq]/\[dq]);
      }),
  );
};
.EE
.PP
You can handle event actions using \f[CR]event.action\f[R] within a
\f[CR]notificationclick\f[R] event handler:
.IP
.EX
navigator.serviceWorker.register(\[dq]sw.js\[dq]);
Notification.requestPermission().then((result) => {
  if (result === \[dq]granted\[dq]) {
    navigator.serviceWorker.ready.then((registration) => {
      // Show a notification that includes an action titled Archive.
      registration.showNotification(\[dq]New mail from Alice\[dq], {
        actions: [
          {
            action: \[dq]archive\[dq],
            title: \[dq]Archive\[dq],
          },
        ],
      });
    });
  }
});

self.addEventListener(
  \[dq]notificationclick\[dq],
  (event) => {
    event.notification.close();
    if (event.action === \[dq]archive\[dq]) {
      // User selected the Archive action.
      archiveEmail();
    } else {
      // User selected (e.g., clicked in) the main body of notification.
      clients.openWindow(\[dq]/inbox\[dq]);
    }
  },
  false,
);
.EE
.SH SEE ALSO
.IP \[bu] 2
Service Worker API
.IP \[bu] 2
Notifications API
