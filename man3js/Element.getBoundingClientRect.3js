.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.getBoundingClientRect" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.getBoundingClientRect \- Element: getBoundingClientRect() method
.SH SYNOPSIS
The \f[B]\f[CB]Element.getBoundingClientRect()\f[B]\f[R] method returns
a \f[CR]DOMRect\f[R] object providing information about the size of an
element and its position relative to the viewport.
.SH SYNTAX
.IP
.EX
getBoundingClientRect()
.EE
.SS Parameters
None.
.SS Return value
The returned value is a \f[CR]DOMRect\f[R] object which is the smallest
rectangle which contains the entire element, including its padding and
border\-width.
The \f[CR]left\f[R], \f[CR]top\f[R], \f[CR]right\f[R],
\f[CR]bottom\f[R], \f[CR]x\f[R], \f[CR]y\f[R], \f[CR]width\f[R], and
\f[CR]height\f[R] properties describe the position and size of the
overall rectangle in pixels.
Properties other than \f[CR]width\f[R] and \f[CR]height\f[R] are
relative to the top\-left of the viewport.
[IMAGE: DOMRect object that is the smallest rectangle containing the
entire element.]
DOMRect object that is the smallest rectangle containing the entire
element.
.PP
The \f[CR]width\f[R] and \f[CR]height\f[R] properties of the
\f[CR]DOMRect\f[R] object returned by the method include the
\f[CR]padding\f[R] and \f[CR]border\-width\f[R], not only the content
width/height.
In the standard box model, this would be equal to the \f[CR]width\f[R]
or \f[CR]height\f[R] property of the element + \f[CR]padding\f[R] +
\f[CR]border\-width\f[R].
But if \f[CR]box\-sizing: border\-box\f[R] is set for the element this
would be directly equal to its \f[CR]width\f[R] or \f[CR]height\f[R].
.PP
The returned value can be thought of as the union of the rectangles
returned by \f[CR]getClientRects()\f[R] for the element, i.e., the CSS
border\-boxes associated with the element.
.PP
Empty border\-boxes are completely ignored.
If all the element\[cq]s border\-boxes are empty, then a rectangle is
returned with a \f[CR]width\f[R] and \f[CR]height\f[R] of zero and where
the \f[CR]top\f[R] and \f[CR]left\f[R] are the top\-left of the
border\-box for the first CSS box (in content order) for the element.
.PP
The amount of scrolling that has been done of the viewport area (or any
other scrollable element) is taken into account when computing the
bounding rectangle.
This means that the rectangle\[cq]s boundary edges (\f[CR]top\f[R],
\f[CR]right\f[R], \f[CR]bottom\f[R], \f[CR]left\f[R]) change their
values every time the scrolling position changes (because their values
are relative to the viewport and not absolute).
.PP
If you need the bounding rectangle relative to the top\-left corner of
the document, just add the current scrolling position to the
\f[CR]top\f[R] and \f[CR]left\f[R] properties (these can be obtained
using \f[CR]window.scrollY\f[R] and \f[CR]window.scrollX\f[R]) to get a
bounding rectangle which is independent from the current scrolling
position.
.SH EXAMPLES
.SS Basic
This simple example retrieves the \f[CR]DOMRect\f[R] object representing
the bounding client rect of a simple \f[CR]<div>\f[R] element, and
prints out its properties below it.
.IP
.EX
<div></div>
.EE
.IP
.EX
div {
  width: 400px;
  height: 200px;
  padding: 20px;
  margin: 50px auto;
  background: purple;
}
.EE
.IP
.EX
let elem = document.querySelector(\[dq]div\[dq]);
let rect = elem.getBoundingClientRect();
for (const key in rect) {
  if (typeof rect[key] !== \[dq]function\[dq]) {
    let para = document.createElement(\[dq]p\[dq]);
    para.textContent = \[ga]${key} : ${rect[key]}\[ga];
    document.body.appendChild(para);
  }
}
.EE
.PP
Notice how the \f[CR]width\f[R]/\f[CR]height\f[R] are equal to its
\f[CR]width\f[R]/\f[CR]height\f[R] + \f[CR]padding\f[R].
.PP
Also note how the values of \f[CR]x\f[R]/\f[CR]left\f[R],
\f[CR]y\f[R]/\f[CR]top\f[R], \f[CR]right\f[R], and \f[CR]bottom\f[R] are
equal to the absolute distance from the relevant edge of the viewport to
that side of the element, in each case.
.SS Scrolling
This example demonstrates how bounding client rect is changing when
document is scrolled.
.IP
.EX
<div id=\[dq]example\[dq]></div>
<div id=\[dq]controls\[dq]></div>
.EE
.IP
.EX
div#example {
  width: 400px;
  height: 200px;
  padding: 20px;
  margin: 50px auto;
  background: purple;
}

body {
  padding\-bottom: 1000px;
}
p {
  margin: 0;
}
.EE
.IP
.EX
function update() {
  const container = document.getElementById(\[dq]controls\[dq]);
  const elem = document.getElementById(\[dq]example\[dq]);
  const rect = elem.getBoundingClientRect();

  container.innerHTML = \[dq]\[dq];
  for (const key in rect) {
    if (typeof rect[key] !== \[dq]function\[dq]) {
      let para = document.createElement(\[dq]p\[dq]);
      para.textContent = \[ga]${key} : ${rect[key]}\[ga];
      container.appendChild(para);
    }
  }
}

document.addEventListener(\[dq]scroll\[dq], update);
update();
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]getClientRects()\f[R]
.IP \[bu] 2
\c
.UR https://msdn.microsoft.com/library/ms536433(VS.85).aspx
MSDN: \f[CR]getBoundingClientRect\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://msdn.microsoft.com/library/hh826029(VS.85).aspx
MSDN: \f[CR]ClientRect\f[R]
.UE \c
, an earlier version of \f[CR]DOMRect\f[R]
