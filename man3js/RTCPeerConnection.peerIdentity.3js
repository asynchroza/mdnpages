.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "RTCPeerConnection.peerIdentity" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.peerIdentity \- RTCPeerConnection: peerIdentity
property
.SH SYNOPSIS
The read\-only \f[CR]RTCPeerConnection\f[R] property
\f[B]\f[CB]peerIdentity\f[B]\f[R] returns a JavaScript
\f[CR]Promise\f[R] that resolves to an \f[CR]RTCIdentityAssertion\f[R]
which contains a string identifying the remote peer.
Once this promise resolves successfully, the resulting identity is the
\f[B]target peer identity\f[R] and cannot change for the duration of the
connection.
.SH VALUE
A JavaScript \f[CR]Promise\f[R] which resolves to an
\f[CR]RTCIdentityAssertion\f[R] that describes the remote peer\[cq]s
identity.
.PP
If an error occurs while attempting to validate an incoming identity
assertion (that is, the information describing a peer\[cq]s identity),
the promise is rejected.
If there isn\[cq]t already a target peer identity,
\f[CR]peerIdentity\f[R] is set to a newly created promise and the
process begins again, until the process succeeds or no further attempts
to authenticate occur.
.RS
.PP
\f[B]Note:\f[R] The promise returned by
\f[CR]setRemoteDescription()\f[R] cannot resolve until any target peer
identity that\[cq]s been set is validated.
If the identity hasn\[cq]t been validated yet, the promise returned by
\f[CR]setRemoteDescription()\f[R] will be rejected.
If there\[cq]s no target peer identity,
\f[CR]setRemoteDescription()\f[R] doesn\[cq]t need to wait for
validation to occur before it resolves.
.RE
.SH EXAMPLES
In this example, a function, \f[CR]getIdentityAssertion()\f[R], is
created which asynchronously waits for the peer\[cq]s identity to be
verified, then returns the identity to the caller.
If an error occurs and the promise is rejected, this logs the error to
the console and returns \f[CR]null\f[R] to the caller.
.IP
.EX
let pc = new RTCPeerConnection();

// \&...

async function getIdentityAssertion(pc) {
  try {
    const identity = await pc.peerIdentity;
    return identity;
  } catch (err) {
    console.log(\[dq]Error identifying remote peer: \[dq], err);
    return null;
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
