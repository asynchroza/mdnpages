.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FileReader.abort_event" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileReader.abort_event \- FileReader: abort event
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]abort\f[B]\f[R] event is fired when a read has been
aborted: for instance because the program called
\f[CR]FileReader.abort()\f[R].
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]abort\[dq], (event) => {});

onabort = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]ProgressEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]ProgressEvent.lengthComputable\f[R] \f[I](read\-only)\f[R]
A boolean flag indicating if the total work to be done, and the amount
of work already done, by the underlying process is calculable.
In other words, it tells if the progress is measurable or not.
.TP
\f[B]ProgressEvent.loaded\f[R] \f[I](read\-only)\f[R]
A 64\-bit unsigned integer value indicating the amount of work already
performed by the underlying process.
The ratio of work done can be calculated by dividing \f[CR]total\f[R] by
the value of this property.
When downloading a resource using HTTP, this only counts the body of the
HTTP message, and doesn\[cq]t include headers and other overhead.
.TP
\f[B]ProgressEvent.total\f[R] \f[I](read\-only)\f[R]
A 64\-bit unsigned integer representing the total amount of work that
the underlying process is in the progress of performing.
When downloading a resource using HTTP, this is the
\f[CR]Content\-Length\f[R] (the size of the body of the message), and
doesn\[cq]t include the headers and other overhead.
.SH EXAMPLES
.SS Live example
.SS HTML
.IP
.EX
<div class=\[dq]example\[dq]>
  <div class=\[dq]file\-select\[dq]>
    <label for=\[dq]avatar\[dq]>Choose a profile picture:</label>
    <input
      type=\[dq]file\[dq]
      id=\[dq]avatar\[dq]
      name=\[dq]avatar\[dq]
      accept=\[dq]image/png, image/jpeg\[dq] />
  </div>

  <img src=\[dq]\[dq] class=\[dq]preview\[dq] height=\[dq]200\[dq] alt=\[dq]Image preview\[dq] />

  <div class=\[dq]event\-log\[dq]>
    <label for=\[dq]eventLog\[dq]>Event log:</label>
    <textarea readonly class=\[dq]event\-log\-contents\[dq] id=\[dq]eventLog\[dq]></textarea>
  </div>
</div>
.EE
.SS JavaScript
.IP
.EX
const fileInput = document.querySelector(\[aq]input[type=\[dq]file\[dq]]\[aq]);
const preview = document.querySelector(\[dq]img.preview\[dq]);
const eventLog = document.querySelector(\[dq].event\-log\-contents\[dq]);
const reader = new FileReader();

function handleEvent(event) {
  eventLog.textContent += \[ga]${event.type}: ${event.loaded} bytes transferred\[rs]n\[ga];

  if (event.type === \[dq]load\[dq]) {
    preview.src = reader.result;
  }
}

function addListeners(reader) {
  reader.addEventListener(\[dq]loadstart\[dq], handleEvent);
  reader.addEventListener(\[dq]load\[dq], handleEvent);
  reader.addEventListener(\[dq]loadend\[dq], handleEvent);
  reader.addEventListener(\[dq]progress\[dq], handleEvent);
  reader.addEventListener(\[dq]error\[dq], handleEvent);
  reader.addEventListener(\[dq]abort\[dq], handleEvent);
}

function handleSelected(e) {
  eventLog.textContent = \[dq]\[dq];
  const selectedFile = fileInput.files[0];
  if (selectedFile) {
    addListeners(reader);
    reader.readAsDataURL(selectedFile);
  }
  reader.abort();
}

fileInput.addEventListener(\[dq]change\[dq], handleSelected);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]loadstart\f[R], \f[CR]loadend\f[R],
\f[CR]progress\f[R], \f[CR]error\f[R], \f[CR]load\f[R].
