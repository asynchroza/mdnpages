.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.getAttributeNames" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.getAttributeNames \- Element: getAttributeNames() method
.SH SYNOPSIS
The \f[B]\f[CB]getAttributeNames()\f[B]\f[R] method of the
\f[CR]Element\f[R] interface returns the attribute names of the element
as an \f[CR]Array\f[R] of strings.
If the element has no attributes it returns an empty array.
.PP
Using \f[CR]getAttributeNames()\f[R] along with
\f[CR]getAttribute()\f[R], is a memory\-efficient and performant
alternative to accessing \f[CR]Element.attributes\f[R].
.PP
The names returned by \f[B]\f[CB]getAttributeNames()\f[B]\f[R] are
\f[I]qualified\f[R] attribute names, meaning that attributes with a
namespace prefix have their names returned with that namespace prefix
(\f[I]not\f[R] the actual namespace), followed by a colon, followed by
the attribute name (for example, \f[B]\f[CB]xlink:href\f[B]\f[R]), while
any attributes which have no namespace prefix have their names returned
as\-is (for example, \f[B]\f[CB]href\f[B]\f[R]).
.SH SYNTAX
.IP
.EX
getAttributeNames()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
The following example shows how:
.IP \[bu] 2
For an attribute which has a namespace prefix,
\f[CR]getAttributeNames()\f[R] returns that namespace prefix along with
the attribute name.
.IP \[bu] 2
For an attribute which has no namespace prefix,
\f[CR]getAttributeNames()\f[R] returns just the attribute name, as\-is.
.PP
It\[cq]s important to understand that:
.IP "1." 3
An attribute can be present in the DOM with a namespace but lacking a
namespace prefix.
.IP "2." 3
For an attribute in the DOM that has a namespace but lacks a namespace
prefix, \f[CR]getAttributeNames()\f[R] will return just the attribute
name, with no indication that the attribute is in a namespace.
.PP
The example below includes such a \[lq]namespaced but without a
namespace prefix\[rq] case.
.IP
.EX
const element = document.createElement(\[dq]a\[dq]);

// set \[dq]href\[dq] attribute with no namespace and no namespace prefix
element.setAttribute(\[dq]href\[dq], \[dq]https://example.com\[dq]);
// set \[dq]href\[dq] attribute with namespace and also \[dq]xlink\[dq] namespace prefix
element.setAttributeNS(
  \[dq]http://www.w3.org/1999/xlink\[dq],
  \[dq]xlink:href\[dq],
  \[dq]https://example.com\[dq],
);
// set \[dq]show\[dq] attribute with namespace but no namespace prefix
element.setAttributeNS(\[dq]http://www.w3.org/1999/xlink\[dq], \[dq]show\[dq], \[dq]new\[dq]);

// Iterate over element\[aq]s attributes
for (const name of element.getAttributeNames()) {
  const value = element.getAttribute(name);
  console.log(name, value);
}

// logs:
// href https://example.com
// xlink:href https://example.com
// show new
.EE
