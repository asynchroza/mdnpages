.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CanvasRenderingContext2D.resetTransform" "JS" "June 20, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.resetTransform \- CanvasRenderingContext2D:
resetTransform() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.resetTransform()\f[B]\f[R]
method of the Canvas 2D API resets the current transform to the identity
matrix.
.SH SYNTAX
.IP
.EX
resetTransform()
.EE
.SH EXAMPLES
.SS Resetting the matrix
This example draws a rotated rectangle after modifying the matrix, and
then resets the matrix using the \f[CR]resetTransform()\f[R] method.
.SS HTML
.IP
.EX
<canvas id=\[dq]canvas\[dq]></canvas>
.EE
.SS JavaScript
The \f[CR]rotate()\f[R] method rotates the transformation matrix by 45Â°.
The \f[CR]fillRect()\f[R] method draws a filled rectangle, adjusted
according to that matrix.
.IP
.EX
const canvas = document.getElementById(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

// Draw a rotated rectangle
ctx.rotate((45 * Math.PI) / 180);
ctx.fillRect(60, 0, 100, 30);

// Reset transformation matrix to the identity matrix
ctx.resetTransform();
.EE
.SS Result
.SS Continuing with a regular matrix
Whenever you\[cq]re done drawing transformed shapes, you should call
\f[CR]resetTransform()\f[R] before rendering anything else.
In this example, the first two shapes are drawn with a skew
transformation, and the last two are drawn with the identity (regular)
transformation.
.SS HTML
.IP
.EX
<canvas id=\[dq]canvas\[dq]></canvas>
.EE
.SS JavaScript
.IP
.EX
const canvas = document.getElementById(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

// Skewed rectangles
ctx.transform(1, 0, 1.7, 1, 0, 0);
ctx.fillStyle = \[dq]gray\[dq];
ctx.fillRect(40, 40, 50, 20);
ctx.fillRect(40, 90, 50, 20);

// Non\-skewed rectangles
ctx.resetTransform();
ctx.fillStyle = \[dq]red\[dq];
ctx.fillRect(40, 40, 50, 20);
ctx.fillRect(40, 90, 50, 20);
.EE
.SS Result
The skewed rectangles are gray, and the non\-skewed rectangles are red.
.SH POLYFILL
You can also use the \f[CR]setTransform()\f[R] method to reset the
current transform to the identity matrix, like so:
.IP
.EX
ctx.setTransform(1, 0, 0, 1, 0, 0);
.EE
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
