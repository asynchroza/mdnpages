.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PerformanceNavigationTiming.unloadEventStart" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceNavigationTiming.unloadEventStart \-
PerformanceNavigationTiming: unloadEventStart property
.SH SYNOPSIS
The \f[B]\f[CB]unloadEventStart\f[B]\f[R] read\-only property returns a
\f[CR]DOMHighResTimeStamp\f[R] representing the time immediately before
the current document\[cq]s \f[CR]unload\f[R] event handler starts.
.SH VALUE
The \f[CR]unloadEventStart\f[R] property can have the following values:
.IP \[bu] 2
A \f[CR]DOMHighResTimeStamp\f[R] representing the time immediately
before the current document\[cq]s \f[CR]unload\f[R] event handler
starts.
.IP \[bu] 2
\f[CR]0\f[R] if there is no previous document.
.IP \[bu] 2
\f[CR]0\f[R] if the previous page was on another origin.
.SH EXAMPLES
.SS Measuring \f[CR]unload\f[R] event handler time
The \f[CR]unloadEventStart\f[R] property can be used to measure how long
it takes process the\f[CR]unload\f[R] event handler.
.PP
This is useful to measure the time of long running \f[CR]unload\f[R]
event handlers.
.IP
.EX
window.addEventListener(\[dq]unload\[dq], (event) => {
  // Some long running code
});
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]navigation\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
const observer = new PerformanceObserver((list) => {
  list.getEntries().forEach((entry) => {
    const unloadEventTime = entry.unloadEventEnd \- entry.unloadEventStart;
    if (unloadEventTime > 0) {
      console.log(
        \[ga]${entry.name}: unload event handler time: ${unloadEventTime}ms\[ga],
      );
    }
  });
});

observer.observe({ type: \[dq]navigation\[dq], buffered: true });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]navigation\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
const entries = performance.getEntriesByType(\[dq]navigation\[dq]);
entries.forEach((entry) => {
  const loadEventTime = entry.unloadEventEnd \- entry.unloadEventStart;
  if (unloadEventTime > 0) {
    console.log(\[ga]${entry.name}:
      load event handler time: ${unloadEventTime}ms\[ga]);
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]unload\f[R] event
