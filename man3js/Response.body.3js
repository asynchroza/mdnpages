.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Response.body" "JS" "September 14, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.body \- Response: body property
.SH SYNOPSIS
The \f[B]\f[CB]body\f[B]\f[R] read\-only property of the
\f[CR]Response\f[R] interface is a \f[CR]ReadableStream\f[R] of the body
contents.
.SH VALUE
A \f[CR]ReadableStream\f[R], or else \f[CR]null\f[R] for any
\f[CR]Response\f[R] object constructed with a null \f[CR]body\f[R]
property, or for any actual HTTP response that has no body.
.PP
The stream is a readable byte stream, which supports zero\-copy reading
using a \f[CR]ReadableStreamBYOBReader\f[R].
.RS
.PP
\f[B]Note:\f[R] Current browsers don\[cq]t actually conform to the spec
requirement to set the \f[CR]body\f[R] property to \f[CR]null\f[R] for
responses with no body (for example, responses to \f[CR]HEAD\f[R]
requests, or \f[CR]204 No Content\f[R] responses).
.RE
.SH EXAMPLES
.SS Copying an image
In our \c
.UR https://mdn.github.io/dom-examples/streams/simple-pump/
simple stream pump
.UE \c
\ example we fetch an image, expose the response\[cq]s stream using
\f[CR]response.body\f[R], create a reader using
\f[CR]ReadableStream.getReader()\f[R], then enqueue that stream\[cq]s
chunks into a second, custom readable stream \[em] effectively creating
an identical copy of the image.
.IP
.EX
const image = document.getElementById(\[dq]target\[dq]);

// Fetch the original image
fetch(\[dq]./tortoise.png\[dq])
  // Retrieve its body as ReadableStream
  .then((response) => response.body)
  .then((body) => {
    const reader = body.getReader();

    return new ReadableStream({
      start(controller) {
        return pump();

        function pump() {
          return reader.read().then(({ done, value }) => {
            // When no more data needs to be consumed, close the stream
            if (done) {
              controller.close();
              return;
            }

            // Enqueue the next data chunk into our target stream
            controller.enqueue(value);
            return pump();
          });
        }
      },
    });
  })
  .then((stream) => new Response(stream))
  .then((response) => response.blob())
  .then((blob) => URL.createObjectURL(blob))
  .then((url) => console.log((image.src = url)))
  .catch((err) => console.error(err));
.EE
.SS Creating a BYOB reader
In this example we construct a \f[CR]ReadableStreamBYOBReader\f[R] from
the body using
\f[CR]ReadableStream.getReader({mode: \[aq]byob\[aq]})\f[R].
We can then use this reader to implement zero copy transfer of the
response data.
.IP
.EX
async function getProducts(url) {
  const response = await fetch(url);
  const reader = response.body.getReader({ mode: \[dq]byob\[dq] });
  // read the response
}

getProducts(
  \[dq]https://mdn.github.io/learning\-area/javascript/apis/fetching\-data/can\-store/products.json\[dq],
);
.EE
.SH SEE ALSO
.IP \[bu] 2
Fetch API
.IP \[bu] 2
Streams API
.IP \[bu] 2
ServiceWorker API
