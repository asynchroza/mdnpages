.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.push" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]push()\f[B]\f[R] method adds the specified elements to
the end of an array and returns the new length of the array.
.SH Syntax
.IP
.nf
\f[C]
push()
push(element0)
push(element0, element1)
push(element0, element1, /* \&... ,*/ elementN)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]elementN\f[R]
.RS 2
.IP \[bu] 2
The element(s) to add to the end of the array.
.RE
.SS Return value
.PP
The new \f[V]length\f[R] property of the object upon which the method
was called.
.SH Description
.PP
The \f[V]push()\f[R] method appends values to an array.
.PP
\f[V]Array.prototype.unshift()\f[R] has similar behavior to
\f[V]push()\f[R], but applied to the start of an array.
.PP
The \f[V]push()\f[R] method is a mutating method.
It changes the length and the content of \f[V]this\f[R].
In case you want the value of \f[V]this\f[R] to be the same, but return
a new array with elements appended to the end, you can use
\f[V]arr.concat([element0, element1, /* ... ,*/ elementN])\f[R] instead.
Notice that the elements are wrapped in an extra array \[em] otherwise,
if the element is an array itself, it would be spread instead of pushed
as a single element due to the behavior of \f[V]concat()\f[R].
.PP
The \f[V]push()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH Examples
.SS Adding elements to an array
.PP
The following code creates the \f[V]sports\f[R] array containing two
elements, then appends two elements to it.
The \f[V]total\f[R] variable contains the new length of the array.
.IP
.nf
\f[C]
const sports = [\[dq]soccer\[dq], \[dq]baseball\[dq]];
const total = sports.push(\[dq]football\[dq], \[dq]swimming\[dq]);

console.log(sports); // [\[aq]soccer\[aq], \[aq]baseball\[aq], \[aq]football\[aq], \[aq]swimming\[aq]]
console.log(total); // 4
\f[R]
.fi
.SS Merging two arrays
.PP
This example uses \f[V]spread syntax\f[R] to push all elements from a
second array into the first one.
.IP
.nf
\f[C]
const vegetables = [\[dq]parsnip\[dq], \[dq]potato\[dq]];
const moreVegs = [\[dq]celery\[dq], \[dq]beetroot\[dq]];

// Merge the second array into the first one
vegetables.push(...moreVegs);

console.log(vegetables); // [\[aq]parsnip\[aq], \[aq]potato\[aq], \[aq]celery\[aq], \[aq]beetroot\[aq]]
\f[R]
.fi
.PP
Merging two arrays can also be done with the \f[V]concat()\f[R] method.
.SS Calling push() on non-array objects
.PP
The \f[V]push()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
It then sets each index of \f[V]this\f[R] starting at \f[V]length\f[R]
with the arguments passed to \f[V]push()\f[R].
Finally, it sets the \f[V]length\f[R] to the previous length plus the
number of pushed elements.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  2: 4,
};
Array.prototype.push.call(arrayLike, 1, 2);
console.log(arrayLike);
// { \[aq]2\[aq]: 4, \[aq]3\[aq]: 1, \[aq]4\[aq]: 2, length: 5, unrelated: \[aq]foo\[aq] }

const plainObj = {};
// There\[aq]s no length property, so the length is 0
Array.prototype.push.call(plainObj, 1, 2);
console.log(plainObj);
// { \[aq]0\[aq]: 1, \[aq]1\[aq]: 2, length: 2 }
\f[R]
.fi
.SS Using an object in an array-like fashion
.PP
As mentioned above, \f[V]push\f[R] is intentionally generic, and we can
use that to our advantage.
\f[V]Array.prototype.push\f[R] can work on an object just fine, as this
example shows.
.PP
Note that we don\[cq]t create an array to store a collection of objects.
Instead, we store the collection on the object itself and use
\f[V]call\f[R] on \f[V]Array.prototype.push\f[R] to trick the method
into thinking we are dealing with an array\[em]and it just works, thanks
to the way JavaScript allows us to establish the execution context in
any way we want.
.IP
.nf
\f[C]
const obj = {
  length: 0,

  addElem(elem) {
    // obj.length is automatically incremented
    // every time an element is added.
    [].push.call(this, elem);
  },
};

// Let\[aq]s add some empty objects just to illustrate.
obj.addElem({});
obj.addElem({});
console.log(obj.length); // 2
\f[R]
.fi
.PP
Note that although \f[V]obj\f[R] is not an array, the method
\f[V]push\f[R] successfully incremented \f[V]obj\f[R]\[cq]s
\f[V]length\f[R] property just like if we were dealing with an actual
array.
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.push\f[R] in \f[V]core-js\f[R] with
fixes of this
method (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.pop()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.shift()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.unshift()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.concat()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.splice()\f[R]
