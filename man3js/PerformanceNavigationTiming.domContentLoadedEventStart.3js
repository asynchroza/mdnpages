.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PerformanceNavigationTiming.domContentLoadedEventStart" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceNavigationTiming.domContentLoadedEventStart \-
PerformanceNavigationTiming: domContentLoadedEventStart property
.SH SYNOPSIS
The \f[B]\f[CB]domContentLoadedEventStart\f[B]\f[R] read\-only property
returns a \f[CR]DOMHighResTimeStamp\f[R] representing the time
immediately before the current document\[cq]s
\f[CR]DOMContentLoaded\f[R] event handler starts.
.PP
Typically frameworks and libraries wait for the
\f[CR]DOMContentLoaded\f[R] event before starting to run their code.
We can use the \f[CR]domContentLoadedEventStart\f[R] and the
\f[CR]domContentLoadedEventEnd\f[R] properties to calculate how long
this takes to run.
.SH VALUE
A \f[CR]DOMHighResTimeStamp\f[R] representing the time immediately
before the current document\[cq]s \f[CR]DOMContentLoaded\f[R] event
handler starts.
.SH EXAMPLES
.SS Measuring \f[CR]DOMContentLoaded\f[R] event handler time
The \f[CR]domContentLoadedEventStart\f[R] property can be used to
measure how long it takes process the \f[CR]DOMContentLoaded\f[R] event
handler.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]navigation\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
const observer = new PerformanceObserver((list) => {
  list.getEntries().forEach((entry) => {
    const domContentLoadedTime =
      entry.domContentLoadedEventEnd \- entry.domContentLoadedEventStart;
    console.log(
      \[ga]${entry.name}: DOMContentLoaded processing time: ${domContentLoadedTime}ms\[ga],
    );
  });
});

observer.observe({ type: \[dq]navigation\[dq], buffered: true });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]navigation\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
const entries = performance.getEntriesByType(\[dq]navigation\[dq]);
entries.forEach((entry) => {
  const domContentLoadedTime =
    entry.domContentLoadedEventEnd \- entry.domContentLoadedEventStart;
  console.log(
    \[ga]${entry.name}: DOMContentLoaded processing time: ${domContentLoadedTime}ms\[ga],
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
DOMContentLoaded
