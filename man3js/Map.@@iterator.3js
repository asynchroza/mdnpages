.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Map.\[at]\[at]iterator" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB][\[at]\[at]iterator]()\f[B]\f[R] method of \f[V]Map\f[R]
instances implements the iterable protocol and allows maps to be
consumed by most syntaxes expecting iterables, such as the spread syntax
and \f[V]for...of\f[R] loops.
It returns a map iterator object that yields the key-value pairs of the
map in insertion order.
.PP
The initial value of this property is the same function object as the
initial value of the \f[V]Map.prototype.entries\f[R] property.
.SH Syntax
.IP
.nf
\f[C]
map[Symbol.iterator]()
\f[R]
.fi
.SS Return value
.PP
The same return value as \f[V]Map.prototype.entries()\f[R]: a new
iterable iterator object that yields the key-value pairs of the map.
.SH Examples
.SS Iteration using for\&...of loop
.PP
Note that you seldom need to call this method directly.
The existence of the \f[V]\[at]\[at]iterator\f[R] method makes
\f[V]Map\f[R] objects iterable, and iterating syntaxes like the
\f[V]for...of\f[R] loop automatically calls this method to obtain the
iterator to loop over.
.IP
.nf
\f[C]
const myMap = new Map();
myMap.set(\[dq]0\[dq], \[dq]foo\[dq]);
myMap.set(1, \[dq]bar\[dq]);
myMap.set({}, \[dq]baz\[dq]);

for (const entry of myMap) {
  console.log(entry);
}
// [\[dq]0\[dq], \[dq]foo\[dq]]
// [1, \[dq]bar\[dq]]
// [{}, \[dq]baz\[dq]]

for (const [key, value] of myMap) {
  console.log(\[ga]${key}: ${value}\[ga]);
}
// 0: foo
// 1: bar
// [Object]: baz
\f[R]
.fi
.SS Manually hand-rolling the iterator
.PP
You may still manually call the \f[V]next()\f[R] method of the returned
iterator object to achieve maximum control over the iteration process.
.IP
.nf
\f[C]
const myMap = new Map();
myMap.set(\[dq]0\[dq], \[dq]foo\[dq]);
myMap.set(1, \[dq]bar\[dq]);
myMap.set({}, \[dq]baz\[dq]);

const mapIter = myMap[Symbol.iterator]();

console.log(mapIter.next().value); // [\[dq]0\[dq], \[dq]foo\[dq]]
console.log(mapIter.next().value); // [1, \[dq]bar\[dq]]
console.log(mapIter.next().value); // [Object, \[dq]baz\[dq]]
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Map.prototype.entries()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.keys()\f[R]
.IP \[bu] 2
\f[V]Map.prototype.values()\f[R]
