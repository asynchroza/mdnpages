.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CanvasRenderingContext2D.getContextAttributes" "JS" "August 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.getContextAttributes \-
CanvasRenderingContext2D: getContextAttributes() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.getContextAttributes()\f[B]\f[R]
method returns an object that contains attributes used by the context.
.PP
Note that context attributes may be requested when creating the context
with \f[CR]HTMLCanvasElement.getContext()\f[R], but the attributes that
are actually supported and used may differ.
.SH SYNTAX
.IP
.EX
getContextAttributes()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]CanvasRenderingContext2DSettings\f[R] object that contains the
actual context parameters.
It has the following members:
.TP
\f[B]alpha\f[R] \f[I](optional)\f[R]
A Boolean indicating if the canvas contains an alpha channel.
If \f[CR]false\f[R], the backdrop is always opaque, which can speed up
drawing of transparent content and images.
.TP
\f[B]colorSpace\f[R] \f[I](optional)\f[R]
Specifies the color space of the rendering context.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]srgb\f[R]: denotes the \c
.UR https://en.wikipedia.org/wiki/SRGB
sRGB color space
.UE \c
.IP \[bu] 2
\f[CR]display\-p3\f[R]: denotes the \c
.UR https://en.wikipedia.org/wiki/DCI-P3
display\-p3 color space
.UE \c
.RE
.TP
\f[B]desynchronized\f[R] \f[I](optional)\f[R]
A Boolean indicating the user agent reduced the latency by
desynchronizing the canvas paint cycle from the event loop.
.TP
\f[B]willReadFrequently\f[R] \f[I](optional)\f[R]
A Boolean indicating whether or not this canvas uses software
acceleration (instead of hardware acceleration) to support frequent
read\-back operations via\f[CR]getImageData()\f[R].
.SH EXAMPLES
This example shows how you can specify context attributes when creating
a canvas context, and then call \f[CR]getContextAttributes()\f[R] to
read back the actual parameters that the browser used.
.PP
\f[CR]html hidden <pre id=\[dq]log\[dq]></pre>\f[R]
.PP
\f[CR]js hidden const logElement = document.getElementById(\[dq]log\[dq]); function log(text) {   logElement.innerText += text; }\f[R]
.PP
First we create a context using
\f[CR]HTMLCanvasElement.getContext()\f[R], specifying just one context
attribute.
.IP
.EX
let canvas = document.createElement(\[dq]canvas\[dq]);
let ctx = canvas.getContext(\[dq]2d\[dq], { alpha: false });
.EE
.PP
If the \f[CR]getContextAttributes()\f[R] method is supported, we use it
to read back the actual attributes used by the browser (including those
we explicitly specified):
.IP
.EX
if (ctx.getContextAttributes) {
  const attributes = ctx.getContextAttributes();
  log(JSON.stringify(attributes));
} else {
  log(\[dq]CanvasRenderingContext2D.getContextAttributes() is not supported\[dq]);
}
.EE
.PP
Depending on the attributes supported by the browser, the log below
should display a string that looks something like:
\f[CR]{alpha: false, colorSpace: \[aq]srgb\[aq], desynchronized: false, willReadFrequently: false}\f[R]
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLCanvasElement.getContext()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getContextAttributes()\f[R]
