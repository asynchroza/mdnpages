.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.fill" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.fill - Array.prototype.fill()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]fill()\f[B]\f[R] method changes all elements in an array
to a static value, from a start index (default \f[V]0\f[R]) to an end
index (default \f[V]array.length\f[R]).
It returns the modified array.
.SH SYNTAX
.IP
.nf
\f[C]
fill(value)
fill(value, start)
fill(value, start, end)
\f[R]
.fi
.SS Parameters
.TP
\f[B]value\f[R]
Value to fill the array with.
Note all elements in the array will be this exact value: if
\f[V]value\f[R] is an object, each slot in the array will reference that
object.
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Zero-based index at which to start filling, converted to an integer.
.RS
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]start < 0\f[R], \f[V]start + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]start < -array.length\f[R] or \f[V]start\f[R] is omitted,
\f[V]0\f[R] is used.
.IP \[bu] 2
If \f[V]start >= array.length\f[R], no index is filled.
.RE
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Zero-based index at which to end filling, converted to an integer.
\f[V]fill()\f[R] fills up to but not including \f[V]end\f[R].
.RS
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]end < 0\f[R], \f[V]end + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]end < -array.length\f[R], \f[V]0\f[R] is used.
.IP \[bu] 2
If \f[V]end >= array.length\f[R] or \f[V]end\f[R] is omitted,
\f[V]array.length\f[R] is used, causing all indices until the end to be
filled.
.IP \[bu] 2
If \f[V]end\f[R] is positioned before or at \f[V]start\f[R] after
normalization, no index is filled.
.RE
.SS Return value
.PP
The modified array, filled with \f[V]value\f[R].
.SH DESCRIPTION
.PP
The \f[V]fill()\f[R] method is a mutating method.
It does not alter the length of \f[V]this\f[R], but it will change the
content of \f[V]this\f[R].
.PP
The \f[V]fill()\f[R] method fills empty slots in sparse arrays with
\f[V]value\f[R] as well.
.PP
The \f[V]fill()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.RS
.PP
\f[B]Note:\f[R] Using \f[V]Array.prototype.fill()\f[R] on an empty array
(\f[V]length = 0\f[R]) would not modify it as the array has nothing to
be modified.
To use \f[V]Array.prototype.fill()\f[R] when declaring an array, make
sure the array has non-zero \f[V]length\f[R].
See example.
.RE
.SH EXAMPLES
.SS Using fill
.IP
.nf
\f[C]
console.log([1, 2, 3].fill(4)); // [4, 4, 4]
console.log([1, 2, 3].fill(4, 1)); // [1, 4, 4]
console.log([1, 2, 3].fill(4, 1, 2)); // [1, 4, 3]
console.log([1, 2, 3].fill(4, 1, 1)); // [1, 2, 3]
console.log([1, 2, 3].fill(4, 3, 3)); // [1, 2, 3]
console.log([1, 2, 3].fill(4, -3, -2)); // [4, 2, 3]
console.log([1, 2, 3].fill(4, NaN, NaN)); // [1, 2, 3]
console.log([1, 2, 3].fill(4, 3, 5)); // [1, 2, 3]
console.log(Array(3).fill(4)); // [4, 4, 4]

// A single object, referenced by each slot of the array:
const arr = Array(3).fill({}); // [{}, {}, {}]
arr[0].hi = \[dq]hi\[dq]; // [{ hi: \[dq]hi\[dq] }, { hi: \[dq]hi\[dq] }, { hi: \[dq]hi\[dq] }]
\f[R]
.fi
.SS Using fill() to create a matrix of all 1
.PP
This example shows how to create a matrix of all 1, like the
\f[V]ones()\f[R] function of Octave or MATLAB.
.IP
.nf
\f[C]
const arr = new Array(3);
for (let i = 0; i < arr.length; i++) {
  arr[i] = new Array(4).fill(1); // Creating an array of size 4 and filled of 1
}
arr[0][0] = 10;
console.log(arr[0][0]); // 10
console.log(arr[1][0]); // 1
console.log(arr[2][0]); // 1
\f[R]
.fi
.SS Using fill() to populate an empty array
.PP
This example shows how to populate an array, setting all elements to a
specific value.
The \f[V]end\f[R] parameter does not have to be specified.
.IP
.nf
\f[C]
const tempGirls = Array(5).fill(\[dq]girl\[dq], 0);
\f[R]
.fi
.PP
Note that the array was initially a sparse array with no assigned
indices.
\f[V]fill()\f[R] is still able to fill this array.
.SS Calling fill() on non-array objects
.PP
The \f[V]fill()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and sets the value of each integer property from
\f[V]start\f[R] to \f[V]end\f[R].
.IP
.nf
\f[C]
const arrayLike = { length: 2 };
console.log(Array.prototype.fill.call(arrayLike, 1));
// { \[aq]0\[aq]: 1, \[aq]1\[aq]: 1, length: 2 }
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.fill\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.fill()\f[R]
