.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AudioWorkletGlobalScope.currentTime" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioWorkletGlobalScope.currentTime \- AudioWorkletGlobalScope:
currentTime property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]currentTime\f[B]\f[R] property of the
\f[CR]AudioWorkletGlobalScope\f[R] interface returns a double that
represents the ever\-increasing context time of the audio block being
processed.
It is equal to the \f[CR]currentTime\f[R] property of the
\f[CR]BaseAudioContext\f[R] the worklet belongs to.
.SH VALUE
A floating\-point number representing the time.
.SH EXAMPLES
The \f[CR]AudioWorkletProcessor\f[R] has access to the specific
\f[CR]AudioWorkletGlobalScope\f[R] properties:
.IP
.EX
// AudioWorkletProcessor defined in : test\-processor.js
class TestProcessor extends AudioWorkletProcessor {
  constructor() {
    super();

    // Logs the current sample\-frame and time at the moment of instantiation.
    // They are accessible from the AudioWorkletGlobalScope.
    console.log(currentFrame);
    console.log(currentTime);
  }

  // The process method is required \- output silence,
  // which the outputs are already filled with.
  process(inputs, outputs, parameters) {
    return true;
  }
}

// Logs the sample rate, that is not going to change ever,
// because it\[aq]s a read\-only property of a BaseAudioContext
// and is set only during its instantiation.
console.log(sampleRate);

// You can declare any variables and use them in your processors
// for example it may be an ArrayBuffer with a wavetable.
const usefulVariable = 42;
console.log(usefulVariable);

registerProcessor(\[dq]test\-processor\[dq], TestProcessor);
.EE
.PP
The main script loads the processor, creates an instance of
\f[CR]AudioWorkletNode\f[R], passes the name of the processor to it, and
connects the node to an audio graph.
We should see the output of \f[CR]console.log()\f[R] calls in the
console:
.IP
.EX
const audioContext = new AudioContext();
await audioContext.audioWorklet.addModule(\[dq]test\-processor.js\[dq]);
const testNode = new AudioWorkletNode(audioContext, \[dq]test\-processor\[dq]);
testNode.connect(audioContext.destination);
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Audio API
.IP \[bu] 2
Using the Web Audio API
