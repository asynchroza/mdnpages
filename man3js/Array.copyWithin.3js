.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.copyWithin" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]copyWithin()\f[B]\f[R] method shallow copies part of an
array to another location in the same array and returns it without
modifying its length.
.SH Syntax
.IP
.nf
\f[C]
copyWithin(target)
copyWithin(target, start)
copyWithin(target, start, end)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
Zero-based index at which to copy the sequence to, converted to an
integer.
.RS 2
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]target < 0\f[R], \f[V]target + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]target < -array.length\f[R], \f[V]0\f[R] is used.
.IP \[bu] 2
If \f[V]target >= array.length\f[R], nothing is copied.
.IP \[bu] 2
If \f[V]target\f[R] is positioned after \f[V]start\f[R] after
normalization, copying only happens until the end of
\f[V]array.length\f[R] (in other words, \f[V]copyWithin()\f[R] never
extends the array).
.RE
.RE
.IP \[bu] 2
\f[V]start\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Zero-based index at which to start copying elements from, converted to
an integer.
.RS 2
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]start < 0\f[R], \f[V]start + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]start < -array.length\f[R] or \f[V]start\f[R] is omitted,
\f[V]0\f[R] is used.
.IP \[bu] 2
If \f[V]start >= array.length\f[R], nothing is copied.
.RE
.RE
.IP \[bu] 2
\f[V]end\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Zero-based index at which to end copying elements from, converted to an
integer.
\f[V]copyWithin()\f[R] copies up to but not including \f[V]end\f[R].
.RS 2
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]end < 0\f[R], \f[V]end + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]end < -array.length\f[R], \f[V]0\f[R] is used.
.IP \[bu] 2
If \f[V]end >= array.length\f[R] or \f[V]end\f[R] is omitted,
\f[V]array.length\f[R] is used, causing all elements until the end to be
copied.
.IP \[bu] 2
If \f[V]end\f[R] is positioned before or at \f[V]start\f[R] after
normalization, nothing is copied.
.RE
.RE
.SS Return value
.PP
The modified array.
.SH Description
.PP
The \f[V]copyWithin()\f[R] method works like C and C++\[cq]s
\f[V]memmove\f[R], and is a high-performance method to shift the data of
an \f[V]Array\f[R].
This especially applies to the \f[V]TypedArray\f[R] method of the same
name.
The sequence is copied and pasted as one operation; the pasted sequence
will have the copied values even when the copy and paste region overlap.
.PP
The \f[V]copyWithin()\f[R] method is a mutating method.
It does not alter the length of \f[V]this\f[R], but it will change the
content of \f[V]this\f[R] and create new properties or delete existing
properties, if necessary.
.PP
The \f[V]copyWithin()\f[R] method preserves empty slots.
If the region to be copied from is sparse, the empty slots\[cq]
corresponding new indices are deleted and also become empty slots.
.PP
The \f[V]copyWithin()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH Examples
.SS Using copyWithin()
.IP
.nf
\f[C]
console.log([1, 2, 3, 4, 5].copyWithin(-2));
// [1, 2, 3, 1, 2]

console.log([1, 2, 3, 4, 5].copyWithin(0, 3));
// [4, 5, 3, 4, 5]

console.log([1, 2, 3, 4, 5].copyWithin(0, 3, 4));
// [4, 2, 3, 4, 5]

console.log([1, 2, 3, 4, 5].copyWithin(-2, -3, -1));
// [1, 2, 3, 3, 4]
\f[R]
.fi
.SS Using copyWithin() on sparse arrays
.PP
\f[V]copyWithin()\f[R] will propagate empty slots.
.IP
.nf
\f[C]
console.log([1, , 3].copyWithin(2, 1, 2)); // [1, empty, empty]
\f[R]
.fi
.SS Calling copyWithin() on non-array objects
.PP
The \f[V]copyWithin()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and then manipulates the integer indices involved.
.IP
.nf
\f[C]
const arrayLike = {
  length: 5,
  3: 1,
};
console.log(Array.prototype.copyWithin.call(arrayLike, 0, 3));
// { \[aq]0\[aq]: 1, \[aq]3\[aq]: 1, length: 5 }
console.log(Array.prototype.copyWithin.call(arrayLike, 3, 1));
// { \[aq]0\[aq]: 1, length: 5 }
// The \[aq]3\[aq] property is deleted because the copied source is an empty slot
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.copyWithin\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.copyWithin()\f[R]
