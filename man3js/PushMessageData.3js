.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PushMessageData" "JS" "March 1, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushMessageData \- PushMessageData
.SH SYNOPSIS
The \f[B]\f[CB]PushMessageData\f[B]\f[R] interface of the Push API
provides methods which let you retrieve the push data sent by a server
in various formats.
.PP
Unlike the similar methods in the Fetch API, which only allow the method
to be invoked once, these methods can be called multiple times.
.PP
Messages received through the Push API are sent encrypted by push
services and then automatically decrypted by browsers before they are
made accessible through the methods of the \f[CR]PushMessageData\f[R]
interface.
.SH INSTANCE PROPERTIES
None.
.SH INSTANCE METHODS
.TP
\f[B]PushMessageData.arrayBuffer()\f[R]
Extracts the data as an \f[CR]ArrayBuffer\f[R] object.
.TP
\f[B]PushMessageData.blob()\f[R]
Extracts the data as a \f[CR]Blob\f[R] object.
.TP
\f[B]PushMessageData.json()\f[R]
Extracts the data as a JSON object.
.TP
\f[B]PushMessageData.text()\f[R]
Extracts the data as a plain text string.
.SH EXAMPLES
.IP
.EX
self.addEventListener(\[dq]push\[dq], (event) => {
  const obj = event.data.json();

  if (obj.action === \[dq]subscribe\[dq] || obj.action === \[dq]unsubscribe\[dq]) {
    fireNotification(obj, event);
    port.postMessage(obj);
  } else if (obj.action === \[dq]init\[dq] || obj.action === \[dq]chatMsg\[dq]) {
    port.postMessage(obj);
  }
});
.EE
