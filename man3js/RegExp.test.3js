.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "RegExp.test" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.test - RegExp.prototype.test()
.SH SYNOPSIS
The \f[B]\f[CB]test()\f[B]\f[R] method of \f[CR]RegExp\f[R] instances
executes a search with this regular expression for a match between a
regular expression and a specified string.
Returns \f[CR]true\f[R] if there is a match; \f[CR]false\f[R] otherwise.
.PP
JavaScript \f[CR]RegExp\f[R] objects are \f[B]stateful\f[R] when they
have the \f[CR]global\f[R] or \f[CR]sticky\f[R] flags set (e.g.,
\f[CR]/foo/g\f[R] or \f[CR]/foo/y\f[R]).
They store a \f[CR]lastIndex\f[R] from the previous match.
Using this internally, \f[CR]test()\f[R] can be used to iterate over
multiple matches in a string of text (with capture groups).
.SH SYNTAX
.IP
.EX
test(str)
.EE
.SS Parameters
.TP
\f[B]str\f[R]
The string against which to match the regular expression.
All values are coerced to strings, so omitting it or passing
\f[CR]undefined\f[R] causes \f[CR]test()\f[R] to search for the string
\f[CR]\[dq]undefined\[dq]\f[R], which is rarely what you want.
.SS Return value
\f[CR]true\f[R] if there is a match between the regular expression and
the string \f[CR]str\f[R].
Otherwise, \f[CR]false\f[R].
.SH DESCRIPTION
Use \f[CR]test()\f[R] whenever you want to know whether a pattern is
found in a string.
\f[CR]test()\f[R] returns a boolean, unlike the
\f[CR]String.prototype.search()\f[R] method (which returns the index of
a match, or \f[CR]-1\f[R] if not found).
.PP
To get more information (but with slower execution), use the
\f[CR]exec()\f[R] method.
(This is similar to the \f[CR]String.prototype.match()\f[R] method.)
.PP
As with \f[CR]exec()\f[R] (or in combination with it), \f[CR]test()\f[R]
called multiple times on the same global regular expression instance
will advance past the previous match.
.SH EXAMPLES
.SS Using test()
Simple example that tests if \f[CR]\[dq]hello\[dq]\f[R] is contained at
the very beginning of a string, returning a boolean result.
.IP
.EX
const str = \[dq]hello world!\[dq];
const result = /\[ha]hello/.test(str);

console.log(result); // true
.EE
.PP
The following example logs a message which depends on the success of the
test:
.IP
.EX
function testInput(re, str) {
  const midstring = re.test(str) ? \[dq]contains\[dq] : \[dq]does not contain\[dq];
  console.log(\[ga]${str} ${midstring} ${re.source}\[ga]);
}
.EE
.SS Using test() on a regex with the \[lq]global\[rq] flag
When a regex has the global flag set, \f[CR]test()\f[R] will advance the
\f[CR]lastIndex\f[R] of the regex.
(\f[CR]RegExp.prototype.exec()\f[R] also advances the
\f[CR]lastIndex\f[R] property.)
.PP
Further calls to \f[CR]test(str)\f[R] will resume searching
\f[CR]str\f[R] starting from \f[CR]lastIndex\f[R].
The \f[CR]lastIndex\f[R] property will continue to increase each time
\f[CR]test()\f[R] returns \f[CR]true\f[R].
.RS
.PP
\f[B]Note:\f[R] As long as \f[CR]test()\f[R] returns \f[CR]true\f[R],
\f[CR]lastIndex\f[R] will \f[I]not\f[R] reset\[em]even when testing a
different string!
.RE
.PP
When \f[CR]test()\f[R] returns \f[CR]false\f[R], the calling regex\[cq]s
\f[CR]lastIndex\f[R] property will reset to \f[CR]0\f[R].
.PP
The following example demonstrates this behavior:
.IP
.EX
const regex = /foo/g; // the \[dq]global\[dq] flag is set

// regex.lastIndex is at 0
regex.test(\[dq]foo\[dq]); // true

// regex.lastIndex is now at 3
regex.test(\[dq]foo\[dq]); // false

// regex.lastIndex is at 0
regex.test(\[dq]barfoo\[dq]); // true

// regex.lastIndex is at 6
regex.test(\[dq]foobar\[dq]); // false

// regex.lastIndex is at 0
regex.test(\[dq]foobarfoo\[dq]); // true

// regex.lastIndex is at 3
regex.test(\[dq]foobarfoo\[dq]); // true

// regex.lastIndex is at 9
regex.test(\[dq]foobarfoo\[dq]); // false

// regex.lastIndex is at 0
// (...and so on)
.EE
.SH SEE ALSO
.IP \[bu] 2
Regular expressions guide
.IP \[bu] 2
\f[CR]RegExp\f[R]
