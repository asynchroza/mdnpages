.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.test" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
RegExp.test - RegExp.prototype.test()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]test()\f[B]\f[R] method executes a search for a match
between a regular expression and a specified string.
Returns \f[V]true\f[R] if there is a match; \f[V]false\f[R] otherwise.
.PP
JavaScript \f[V]RegExp\f[R] objects are \f[B]stateful\f[R] when they
have the \f[V]global\f[R] or \f[V]sticky\f[R] flags set (e.g.,
\f[V]/foo/g\f[R] or \f[V]/foo/y\f[R]).
They store a \f[V]lastIndex\f[R] from the previous match.
Using this internally, \f[V]test()\f[R] can be used to iterate over
multiple matches in a string of text (with capture groups).
.SH SYNTAX
.IP
.nf
\f[C]
test(str)
\f[R]
.fi
.SS Parameters
.TP
\f[B]str\f[R]
The string against which to match the regular expression.
All values are coerced to strings, so omitting it or passing
\f[V]undefined\f[R] causes \f[V]test()\f[R] to search for the string
\f[V]\[dq]undefined\[dq]\f[R], which is rarely what you want.
.SS Returns
.PP
\f[V]true\f[R] if there is a match between the regular expression and
the string \f[V]str\f[R].
Otherwise, \f[V]false\f[R].
.SH DESCRIPTION
.PP
Use \f[V]test()\f[R] whenever you want to know whether a pattern is
found in a string.
\f[V]test()\f[R] returns a boolean, unlike the
\f[V]String.prototype.search()\f[R] method (which returns the index of a
match, or \f[V]-1\f[R] if not found).
.PP
To get more information (but with slower execution), use the
\f[V]exec()\f[R] method.
(This is similar to the \f[V]String.prototype.match()\f[R] method.)
.PP
As with \f[V]exec()\f[R] (or in combination with it), \f[V]test()\f[R]
called multiple times on the same global regular expression instance
will advance past the previous match.
.SH EXAMPLES
.SS Using test()
.PP
Simple example that tests if \f[V]\[dq]hello\[dq]\f[R] is contained at
the very beginning of a string, returning a boolean result.
.IP
.nf
\f[C]
const str = \[dq]hello world!\[dq];
const result = /\[ha]hello/.test(str);

console.log(result); // true
\f[R]
.fi
.PP
The following example logs a message which depends on the success of the
test:
.IP
.nf
\f[C]
function testInput(re, str) {
  const midstring = re.test(str) ? \[dq]contains\[dq] : \[dq]does not contain\[dq];
  console.log(\[ga]${str} ${midstring} ${re.source}\[ga]);
}
\f[R]
.fi
.SS Using test() on a regex with the \[lq]global\[rq] flag
.PP
When a regex has the global flag set, \f[V]test()\f[R] will advance the
\f[V]lastIndex\f[R] of the regex.
(\f[V]RegExp.prototype.exec()\f[R] also advances the \f[V]lastIndex\f[R]
property.)
.PP
Further calls to \f[V]test(str)\f[R] will resume searching \f[V]str\f[R]
starting from \f[V]lastIndex\f[R].
The \f[V]lastIndex\f[R] property will continue to increase each time
\f[V]test()\f[R] returns \f[V]true\f[R].
.RS
.PP
\f[B]Note:\f[R] As long as \f[V]test()\f[R] returns \f[V]true\f[R],
\f[V]lastIndex\f[R] will \f[I]not\f[R] reset\[em]even when testing a
different string!
.RE
.PP
When \f[V]test()\f[R] returns \f[V]false\f[R], the calling regex\[cq]s
\f[V]lastIndex\f[R] property will reset to \f[V]0\f[R].
.PP
The following example demonstrates this behavior:
.IP
.nf
\f[C]
const regex = /foo/g; // the \[dq]global\[dq] flag is set

// regex.lastIndex is at 0
regex.test(\[dq]foo\[dq]); // true

// regex.lastIndex is now at 3
regex.test(\[dq]foo\[dq]); // false

// regex.lastIndex is at 0
regex.test(\[dq]barfoo\[dq]); // true

// regex.lastIndex is at 6
regex.test(\[dq]foobar\[dq]); // false

// regex.lastIndex is at 0
regex.test(\[dq]foobarfoo\[dq]); // true

// regex.lastIndex is at 3
regex.test(\[dq]foobarfoo\[dq]); // true

// regex.lastIndex is at 9
regex.test(\[dq]foobarfoo\[dq]); // false

// regex.lastIndex is at 0
// (...and so on)
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Regular Expressions chapter in the JavaScript Guide
.IP \[bu] 2
\f[V]RegExp\f[R]
