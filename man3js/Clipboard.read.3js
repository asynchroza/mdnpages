.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Clipboard.read" "JS" "January 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.read \- Clipboard: read() method
.SH SYNOPSIS
The \f[B]\f[CB]read()\f[B]\f[R] method of the \f[CR]Clipboard\f[R]
interface requests a copy of the clipboard\[cq]s contents, delivering
the data to the returned \f[CR]Promise\f[R] when the promise is
resolved.
Unlike \f[CR]readText()\f[R], the \f[CR]read()\f[R] method can return
arbitrary data, such as images.
This method can also return text.
.RS
.PP
\f[B]Note:\f[R] The asynchronous Clipboard and Permissions APIs are
still in the process of being integrated into most browsers, so they
often deviate from the official rules for permissions and the like.
Be sure to review the compatibility table before using these methods.
.RE
.SH SYNTAX
.IP
.EX
read()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that resolves with an array of
\f[CR]ClipboardItem\f[R] objects containing the clipboard\[cq]s
contents.
The promise is rejected if permission to access the clipboard is not
granted.
.SH SECURITY
Transient user activation is required.
The user has to interact with the page or a UI element in order for this
feature to work.
.PP
To read from the clipboard, you must first have the
\f[CR]\[dq]clipboard\-read\[dq]\f[R] permission.
.SH EXAMPLES
.SS Reading image data
This example uses the \f[CR]read()\f[R] method to read image data from
the clipboard.
.PP
Try copying the butterfly image on the left using the \[lq]Copy
image\[rq] context menu item, then click in the empty frame on the
right.
.PP
The example will check or ask for permission to read the clipboard, then
fetch the image data and display the image data in the empty frame.
.RS
.PP
\f[B]Note:\f[R] At this time, while Firefox does implement
\f[CR]read()\f[R], it does not recognize the
\f[CR]\[dq]clipboard\-read\[dq]\f[R] permission, so attempting to use
the Permissions API to manage access to the API will not work.
.RE
.SS HTML
.IP
.EX
<img id=\[dq]source\[dq] src=\[dq]butterfly.jpg\[dq] alt=\[dq]A butterfly\[dq] />
<img id=\[dq]destination\[dq] />
.EE
.SS CSS
.IP
.EX
img {
  height: 100px;
  width: 100px;
  margin: 0 1rem;
  border: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
const destinationImage = document.querySelector(\[dq]#destination\[dq]);
destinationImage.addEventListener(\[dq]click\[dq], pasteImage);

async function pasteImage() {
  try {
    const permission = await navigator.permissions.query({
      name: \[dq]clipboard\-read\[dq],
    });
    if (permission.state === \[dq]denied\[dq]) {
      throw new Error(\[dq]Not allowed to read clipboard.\[dq]);
    }
    const clipboardContents = await navigator.clipboard.read();
    for (const item of clipboardContents) {
      if (!item.types.includes(\[dq]image/png\[dq])) {
        throw new Error(\[dq]Clipboard contains non\-image data.\[dq]);
      }
      const blob = await item.getType(\[dq]image/png\[dq]);
      destinationImage.src = URL.createObjectURL(blob);
    }
  } catch (error) {
    console.error(error.message);
  }
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
