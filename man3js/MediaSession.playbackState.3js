.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MediaSession.playbackState" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaSession.playbackState \- MediaSession: playbackState property
.SH SYNOPSIS
The \f[B]\f[CB]playbackState\f[B]\f[R] property of the
\f[CR]MediaSession\f[R] interface indicates whether the current media
session is playing or paused.
.SH VALUE
A string indicating the current playback state of the media session.
The value may be one of the following:
.TP
\f[B]none\f[R]
The browsing context doesn\[cq]t currently know the current playback
state, or the playback state is not available at this time.
.TP
\f[B]paused\f[R]
The browser\[cq]s media session is currently paused.
Playback may be resumed.
.TP
\f[B]playing\f[R]
The browser\[cq]s media session is currently playing media, which can be
paused.
.SH EXAMPLE
The following example sets up two functions for playing and pausing,
then uses them as callbacks with the relevant action handlers.
Each function harnesses the \f[CR]playbackState\f[R] property to
indicate whether the audio is playing or paused.
.IP
.EX
const actionHandlers = [
  // play
  [
    \[dq]play\[dq],
    async () => {
      // play our audio
      await audioEl.play();
      // set playback state
      navigator.mediaSession.playbackState = \[dq]playing\[dq];
      // update our status element
      updateStatus(allMeta[index], \[dq]Action: play  |  Track is playing\&...\[dq]);
    },
  ],
  [
    \[dq]pause\[dq],
    () => {
      // pause out audio
      audioEl.pause();
      // set playback state
      navigator.mediaSession.playbackState = \[dq]paused\[dq];
      // update our status element
      updateStatus(allMeta[index], \[dq]Action: pause  |  Track has been paused\&...\[dq]);
    },
  ],
];

for (const [action, handler] of actionHandlers) {
  try {
    navigator.mediaSession.setActionHandler(action, handler);
  } catch (error) {
    console.log(\[ga]The media session action \[dq]${action}\[dq] is not supported yet.\[ga]);
  }
}
.EE
