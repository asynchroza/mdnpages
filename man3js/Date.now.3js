.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Date.now" "JS" "June 1, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.now - Date.now()
.SH SYNOPSIS
The \f[B]\f[CB]Date.now()\f[B]\f[R] static method returns the number of
milliseconds elapsed since the epoch, which is defined as the midnight
at the beginning of January 1, 1970, UTC.
.SH SYNTAX
.IP
.EX
Date.now()
.EE
.SS Return value
A number representing the timestamp, in milliseconds, of the current
time.
.SH DESCRIPTION
.SS Reduced time precision
To offer protection against timing attacks and fingerprinting, the
precision of \f[CR]Date.now()\f[R] might get rounded depending on
browser settings.
In Firefox, the \f[CR]privacy.reduceTimerPrecision\f[R] preference is
enabled by default and defaults to 2ms.
You can also enable \f[CR]privacy.resistFingerprinting\f[R], in which
case the precision will be 100ms or the value of
\f[CR]privacy.resistFingerprinting.reduceTimerPrecision.microseconds\f[R],
whichever is larger.
.IP
.EX
// reduced time precision (2ms) in Firefox 60
Date.now();
// 1519211809934
// 1519211810362
// 1519211811670
// \&...

// reduced time precision with \[ga]privacy.resistFingerprinting\[ga] enabled
Date.now();
// 1519129853500
// 1519129858900
// 1519129864400
// \&...
.EE
.SH EXAMPLES
.SS Measuring time elapsed
You can use \f[CR]Date.now()\f[R] to get the current time in
milliseconds, then subtract a previous time to find out how much time
elapsed between the two calls.
.IP
.EX
const start = Date.now();
doSomeLongRunningProcess();
console.log(\[ga]Time elapsed: ${Date.now() - start} ms\[ga]);
.EE
.PP
For more complex scenarios, you may want to use the performance API
instead.
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Date.now\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-date)
.IP \[bu] 2
\f[CR]Performance.now()\f[R]
.IP \[bu] 2
\f[CR]console.time()\f[R]
.IP \[bu] 2
\f[CR]console.timeEnd()\f[R]
