.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "SharedArrayBuffer.growable" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]growable\f[B]\f[R] accessor property of
\f[V]SharedArrayBuffer\f[R] instances returns whether this
\f[V]SharedArrayBuffer\f[R] can be grow or not.
.SH Description
.PP
The \f[V]growable\f[R] property is an accessor property whose set
accessor function is \f[V]undefined\f[R], meaning that you can only read
this property.
The value is established when the array is constructed.
If a \f[V]maxByteLength\f[R] option was set in the constructor,
\f[V]growable\f[R] will return \f[V]true\f[R]; if not, it will return
\f[V]false\f[R].
.SH Examples
.SS Using growable
.PP
In this example, we create a 8-byte buffer that is growable to a max
length of 16 bytes, then check its \f[V]growable\f[R] property, growing
it if \f[V]growable\f[R] returns \f[V]true\f[R]:
.IP
.nf
\f[C]
const buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });

if (buffer.growable) {
  console.log(\[dq]SAB is growable!\[dq]);
  buffer.grow(12);
}
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]SharedArrayBuffer\f[R]
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.grow()\f[R]
.IP \[bu] 2
\f[V]SharedArrayBuffer.prototype.maxByteLength\f[R]
