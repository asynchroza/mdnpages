.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "FinalizationRegistry.register" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
FinalizationRegistry.register -
FinalizationRegistry.prototype.register()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]register()\f[B]\f[R] method registers an value with a
\f[V]FinalizationRegistry\f[R] instance so that if the value is
garbage-collected, the registry\[cq]s callback may get called.
.SH SYNTAX
.IP
.nf
\f[C]
register(target, heldValue)
register(target, heldValue, unregisterToken)
\f[R]
.fi
.SS Parameters
.TP
\f[B]target\f[R]
The target value to register.
.TP
\f[B]heldValue\f[R]
The value to pass to the finalizer for this \f[V]target\f[R].
This cannot be the \f[V]target\f[R] itself but can be anything else,
including functions and primitives.
.TP
\f[B]unregisterToken\f[R] \f[I](optional)\f[R]
A token that may be used with the \f[V]unregister\f[R] method later to
unregister the target value.
If provided (and not \f[V]undefined\f[R]), this must be an object or a
non-registered symbol.
If not provided, the target cannot be unregistered.
.SS Return value
.PP
\f[V]undefined\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if one of the following is true:
.RS
.IP \[bu] 2
\f[V]target\f[R] is not an object or a non-registered symbol (object as
opposed to primitives; functions are objects as well)
.IP \[bu] 2
\f[V]target\f[R] is the same as \f[V]heldvalue\f[R]
(\f[V]target === heldValue\f[R])
.IP \[bu] 2
\f[V]unregisterToken\f[R] is not an object or a non-registered symbol
.RE
.SH DESCRIPTION
.PP
See the Avoid where possible and Notes on cleanup callbacks sections of
the \f[V]FinalizationRegistry\f[R] page for important caveats.
.SH EXAMPLES
.SS Using register
.PP
The following registers the value referenced by \f[V]target\f[R],
passing in the held value \f[V]\[dq]some value\[dq]\f[R] and passing the
target itself as the unregistration token:
.IP
.nf
\f[C]
registry.register(target, \[dq]some value\[dq], target);
\f[R]
.fi
.PP
The following registers the value referenced by \f[V]target\f[R],
passing in another object as the held value, and not passing in any
unregistration token (which means \f[V]target\f[R] can\[cq]t be
unregistered):
.IP
.nf
\f[C]
registry.register(target, { useful: \[dq]info about target\[dq] });
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]FinalizationRegistry\f[R]
