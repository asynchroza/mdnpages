.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Object.values" "JS" "March 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.values - Object.values()
.SH SYNOPSIS
The \f[B]\f[CB]Object.values()\f[B]\f[R] static method returns an array
of a given object\[cq]s own enumerable string-keyed property values.
.SH SYNTAX
.IP
.EX
Object.values(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
An object.
.SS Return value
An array containing the given object\[cq]s own enumerable string-keyed
property values.
.SH DESCRIPTION
\f[CR]Object.values()\f[R] returns an array whose elements are values of
enumerable string-keyed properties found directly upon
\f[CR]object\f[R].
This is the same as iterating with a \f[CR]for...in\f[R] loop, except
that a \f[CR]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[CR]Object.values()\f[R] is the
same as that provided by a \f[CR]for...in\f[R] loop.
.PP
If you need the property keys, use \f[CR]Object.keys()\f[R] instead.
If you need both the property keys and values, use
\f[CR]Object.entries()\f[R] instead.
.SH EXAMPLES
.SS Using Object.values()
.IP
.EX
const obj = { foo: \[dq]bar\[dq], baz: 42 };
console.log(Object.values(obj)); // [\[aq]bar\[aq], 42]

// Array-like object
const arrayLikeObj1 = { 0: \[dq]a\[dq], 1: \[dq]b\[dq], 2: \[dq]c\[dq] };
console.log(Object.values(arrayLikeObj1)); // [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq]]

// Array-like object with random key ordering
// When using numeric keys, the values are returned in the keys\[aq] numerical order
const arrayLikeObj2 = { 100: \[dq]a\[dq], 2: \[dq]b\[dq], 7: \[dq]c\[dq] };
console.log(Object.values(arrayLikeObj2)); // [\[aq]b\[aq], \[aq]c\[aq], \[aq]a\[aq]]

// getFoo is a non-enumerable property
const myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        return this.foo;
      },
    },
  },
);
myObj.foo = \[dq]bar\[dq];
console.log(Object.values(myObj)); // [\[aq]bar\[aq]]
.EE
.SS Using Object.values() on primitives
Non-object arguments are coerced to objects.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.EX
// Strings have indices as enumerable own properties
console.log(Object.values(\[dq]foo\[dq])); // [\[aq]f\[aq], \[aq]o\[aq], \[aq]o\[aq]]

// Other primitives have no own properties
console.log(Object.values(100)); // []
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Object.values\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
Enumerability and ownership of properties
.IP \[bu] 2
\f[CR]Object.keys()\f[R]
.IP \[bu] 2
\f[CR]Object.entries()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \[bu] 2
\f[CR]Object.create()\f[R]
.IP \[bu] 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.values()\f[R]
