.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CryptoKey.extractable" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CryptoKey.extractable \- CryptoKey: extractable property
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The read\-only \f[B]\f[CB]extractable\f[B]\f[R] property of the
\f[CR]CryptoKey\f[R] interface indicates whether or not the key may be
extracted using \f[CR]SubtleCrypto.exportKey()\f[R] or
\f[CR]SubtleCrypto.wrapKey()\f[R].
.PP
If the key cannot be exported, \f[CR]exportKey()\f[R] or
\f[CR]wrapKey()\f[R] will throw an exception if used to extract it.
.SH VALUE
A boolean value that is \f[CR]true\f[R] if the key can be exported and
\f[CR]false\f[R] if not.
.SH EXAMPLES
In this example, the \f[I]Export\f[R] button is disabled, and no
listener added, if the key cannot be exported.
.IP
.EX
// Export the given key and write it into the \[dq]exported\-key\[dq] space.
async function exportCryptoKey(key) {
  const exported = await window.crypto.subtle.exportKey(\[dq]raw\[dq], key);
  const exportedKeyBuffer = new Uint8Array(exported);

  const exportKeyOutput = document.querySelector(\[dq].exported\-key\[dq]);
  exportKeyOutput.textContent = \[ga][${exportedKeyBuffer}]\[ga];
}

// Enable or disable the exportButton if the key is extractable or not
function setExportButton(key) {
  const exportButton = document.querySelector(\[dq].raw\[dq]);

  // Disable the button if the key is not extractable
  exportButton.disabled = !key.extractable;
  if (key.extractable) {
    // Add an event listener to extract the key
    exportButton.addEventListener(\[dq]click\[dq], () => {
      exportCryptoKey(key);
    });
  }
}

// Generate an encrypt/decrypt secret key,
// then enable and set up an event listener on the \[dq]Export\[dq] button.
window.crypto.subtle
  .generateKey(
    {
      name: \[dq]AES\-GCM\[dq],
      length: 256,
    },
    true,
    [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
  )
  .then(setExportButton(key));
.EE
