.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.expm1" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Math.expm1()\f[B]\f[R] static method returns e raised to
the power of a number, subtracted by 1.
That is
.PP
𝙼𝚊𝚝𝚑.𝚎𝚡𝚙𝚖𝟷(𝚡)=ex−1 = \[ha]x - 1
.SH Syntax
.IP
.nf
\f[C]
Math.expm1(x)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]x\f[R]
.RS 2
.IP \[bu] 2
A number.
.RE
.SS Return value
.PP
A number representing ex - 1, where e is the base of the natural
logarithm.
.SH Description
.PP
For very small values of \f[I]x\f[R], adding 1 can reduce or eliminate
precision.
The double floats used in JS give you about 15 digits of precision.
1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and
therefore exactly 1.0 in that arithmetic, because digits past 15 are
rounded off.
.PP
When you calculate ex\[ha]x where x is a number very close to 0, you
should get an answer very close to 1 + x, because limx→0ex−1x=1_{x } =
1.
If you calculate \f[V]Math.exp(1.1111111111e-15) - 1\f[R], you should
get an answer close to \f[V]1.1111111111e-15\f[R].
Instead, due to the highest significant figure in the result of
\f[V]Math.exp\f[R] being the units digit \f[V]1\f[R], the final value
ends up being \f[V]1.1102230246251565e-15\f[R], with only 3 correct
digits.
If, instead, you calculate \f[V]Math.exp1m(1.1111111111e-15)\f[R], you
will get a much more accurate answer \f[V]1.1111111111000007e-15\f[R],
with 11 correct digits of precision.
.PP
Because \f[V]expm1()\f[R] is a static method of \f[V]Math\f[R], you
always use it as \f[V]Math.expm1()\f[R], rather than as a method of a
\f[V]Math\f[R] object you created (\f[V]Math\f[R] is not a constructor).
.SH Examples
.SS Using Math.expm1()
.IP
.nf
\f[C]
Math.expm1(-Infinity); // -1
Math.expm1(-1); // -0.6321205588285577
Math.expm1(-0); // -0
Math.expm1(0); // 0
Math.expm1(1); // 1.718281828459045
Math.expm1(Infinity); // Infinity
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Math.expm1\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-math)
.IP \[bu] 2
\f[V]Math.E\f[R]
.IP \[bu] 2
\f[V]Math.exp()\f[R]
.IP \[bu] 2
\f[V]Math.log()\f[R]
.IP \[bu] 2
\f[V]Math.log10()\f[R]
.IP \[bu] 2
\f[V]Math.log1p()\f[R]
.IP \[bu] 2
\f[V]Math.log2()\f[R]
.IP \[bu] 2
\f[V]Math.pow()\f[R]
