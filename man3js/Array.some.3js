.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.some" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]some()\f[B]\f[R] method tests whether at least one
element in the array passes the test implemented by the provided
function.
It returns true if, in the array, it finds an element for which the
provided function returns true; otherwise it returns false.
It doesn\[cq]t modify the array.
.SH Syntax
.IP
.nf
\f[C]
some(callbackFn)
some(callbackFn, thisArg)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]callbackFn\f[R]
.RS 2
.IP \[bu] 2
A function to execute for each element in the array.
It should return a truthy value to indicate the element passes the test,
and a falsy value otherwise.
The function is called with the following arguments:
.RS 2
.IP \[bu] 2
\f[V]element\f[R]
.RS 2
.IP \[bu] 2
The current element being processed in the array.
.RE
.IP \[bu] 2
\f[V]index\f[R]
.RS 2
.IP \[bu] 2
The index of the current element being processed in the array.
.RE
.IP \[bu] 2
\f[V]array\f[R]
.RS 2
.IP \[bu] 2
The array \f[V]some()\f[R] was called upon.
.RE
.RE
.RE
.IP \[bu] 2
\f[V]thisArg\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A value to use as \f[V]this\f[R] when executing \f[V]callbackFn\f[R].
See iterative methods.
.RE
.SS Return value
.PP
\f[V]true\f[R] if the callback function returns a truthy value for at
least one element in the array.
Otherwise, \f[V]false\f[R].
.SH Description
.PP
The \f[V]some()\f[R] method is an iterative method.
It calls a provided \f[V]callbackFn\f[R] function once for each element
in an array, until the \f[V]callbackFn\f[R] returns a truthy value.
If such an element is found, \f[V]some()\f[R] immediately returns
\f[V]true\f[R] and stops iterating through the array.
Otherwise, if \f[V]callbackFn\f[R] returns a falsy value for all
elements, \f[V]some()\f[R] returns \f[V]false\f[R].
.PP
\f[V]some()\f[R] acts like the \[lq]there exists\[rq] quantifier in
mathematics.
In particular, for an empty array, it returns \f[V]false\f[R] for any
condition.
.PP
\f[V]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
\f[V]some()\f[R] does not mutate the array on which it is called, but
the function provided as \f[V]callbackFn\f[R] can.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[V]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[V]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[V]some()\f[R] began.
.IP \[bu] 2
Changes to already-visited indexes do not cause \f[V]callbackFn\f[R] to
be invoked on them again.
.IP \[bu] 2
If an existing, yet-unvisited element of the array is changed by
\f[V]callbackFn\f[R], its value passed to the \f[V]callbackFn\f[R] will
be the value at the time that element gets visited.
Deleted elements are not visited.
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard-to-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The \f[V]some()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH Examples
.SS Testing value of array elements
.PP
The following example tests whether any element in the array is bigger
than 10.
.IP
.nf
\f[C]
function isBiggerThan10(element, index, array) {
  return element > 10;
}

[2, 5, 8, 1, 4].some(isBiggerThan10); // false
[12, 5, 8, 1, 4].some(isBiggerThan10); // true
\f[R]
.fi
.SS Testing array elements using arrow functions
.PP
Arrow functions provide a shorter syntax for the same test.
.IP
.nf
\f[C]
[2, 5, 8, 1, 4].some((x) => x > 10); // false
[12, 5, 8, 1, 4].some((x) => x > 10); // true
\f[R]
.fi
.SS Checking whether a value exists in an array
.PP
To mimic the function of the \f[V]includes()\f[R] method, this custom
function returns \f[V]true\f[R] if the element exists in the array:
.IP
.nf
\f[C]
const fruits = [\[dq]apple\[dq], \[dq]banana\[dq], \[dq]mango\[dq], \[dq]guava\[dq]];

function checkAvailability(arr, val) {
  return arr.some((arrVal) => val === arrVal);
}

checkAvailability(fruits, \[dq]kela\[dq]); // false
checkAvailability(fruits, \[dq]banana\[dq]); // true
\f[R]
.fi
.SS Converting any value to Boolean
.IP
.nf
\f[C]
const TRUTHY_VALUES = [true, \[dq]true\[dq], 1];

function getBoolean(value) {
  if (typeof value === \[dq]string\[dq]) {
    value = value.toLowerCase().trim();
  }

  return TRUTHY_VALUES.some((t) => t === value);
}

getBoolean(false); // false
getBoolean(\[dq]false\[dq]); // false
getBoolean(1); // true
getBoolean(\[dq]true\[dq]); // true
\f[R]
.fi
.SS Using some() on sparse arrays
.PP
\f[V]some()\f[R] will not run its predicate on empty slots.
.IP
.nf
\f[C]
console.log([1, , 3].some((x) => x === undefined)); // false
console.log([1, , 1].some((x) => x !== 1)); // false
console.log([1, undefined, 1].some((x) => x !== 1)); // true
\f[R]
.fi
.SS Calling some() on non-array objects
.PP
The \f[V]some()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and then accesses each integer index until the end is
reached or \f[V]callbackFn\f[R] returns \f[V]true\f[R].
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
};
console.log(Array.prototype.some.call(arrayLike, (x) => typeof x === \[dq]number\[dq]));
// false
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.some\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.every()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.includes()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.some()\f[R]
