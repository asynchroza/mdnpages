.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.splice" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]splice()\f[B]\f[R] method changes the contents of an
array by removing or replacing existing elements and/or adding new
elements in place (https://en.wikipedia.org/wiki/In-place_algorithm).
.PP
To create a new array with a segment removed and/or replaced without
mutating the original array, use \f[V]toSpliced()\f[R].
To access part of an array without modifying it, see \f[V]slice()\f[R].
.SH Syntax
.IP
.nf
\f[C]
splice(start)
splice(start, deleteCount)
splice(start, deleteCount, item1)
splice(start, deleteCount, item1, item2, itemN)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]start\f[R]
.RS 2
.IP \[bu] 2
Zero-based index at which to start changing the array, converted to an
integer.
.RS 2
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]start < 0\f[R], \f[V]start + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]start < -array.length\f[R], \f[V]0\f[R] is used.
.IP \[bu] 2
If \f[V]start >= array.length\f[R], no element will be deleted, but the
method will behave as an adding function, adding as many elements as
provided.
.IP \[bu] 2
If \f[V]start\f[R] is omitted (and \f[V]splice()\f[R] is called with no
arguments), nothing is deleted.
This is different from passing \f[V]undefined\f[R], which is converted
to \f[V]0\f[R].
.RE
.RE
.IP \[bu] 2
\f[V]deleteCount\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An integer indicating the number of elements in the array to remove from
\f[V]start\f[R].
.RS 2
.PP
If \f[V]deleteCount\f[R] is omitted, or if its value is greater than or
equal to the number of elements after the position specified by
\f[V]start\f[R], then all the elements from \f[V]start\f[R] to the end
of the array will be deleted.
However, if you wish to pass any \f[V]itemN\f[R] parameter, you should
pass \f[V]Infinity\f[R] as \f[V]deleteCount\f[R] to delete all elements
after \f[V]start\f[R], because an explicit \f[V]undefined\f[R] gets
converted to \f[V]0\f[R].
.PP
If \f[V]deleteCount\f[R] is \f[V]0\f[R] or negative, no elements are
removed.
In this case, you should specify at least one new element (see below).
.RE
.RE
.IP \[bu] 2
\f[V]item1\f[R], \&..., \f[V]itemN\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
The elements to add to the array, beginning from \f[V]start\f[R].
.RS 2
.PP
If you do not specify any elements, \f[V]splice()\f[R] will only remove
elements from the array.
.RE
.RE
.SS Return value
.PP
An array containing the deleted elements.
.PP
If only one element is removed, an array of one element is returned.
.PP
If no elements are removed, an empty array is returned.
.SH Description
.PP
The \f[V]splice()\f[R] method is a mutating method.
It may change the content of \f[V]this\f[R].
If the specified number of elements to insert differs from the number of
elements being removed, the array\[cq]s \f[V]length\f[R] will be changed
as well.
At the same time, it uses \f[V]\[at]\[at]species\f[R] to create a new
array instance to be returned.
.PP
If the deleted portion is sparse, the array returned by
\f[V]splice()\f[R] is sparse as well, with those corresponding indices
being empty slots.
.PP
The \f[V]splice()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH Examples
.SS Remove 0 (zero) elements before index 2, and insert \[lq]drum\[rq]
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(2, 0, \[dq]drum\[dq]);

// myFish is [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]drum\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]]
// removed is [], no elements removed
\f[R]
.fi
.SS Remove 0 (zero) elements before index 2, and insert \[lq]drum\[rq] and \[lq]guitar\[rq]
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(2, 0, \[dq]drum\[dq], \[dq]guitar\[dq]);

// myFish is [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]drum\[dq], \[dq]guitar\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]]
// removed is [], no elements removed
\f[R]
.fi
.SS Remove 1 element at index 3
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]drum\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(3, 1);

// myFish is [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]drum\[dq], \[dq]sturgeon\[dq]]
// removed is [\[dq]mandarin\[dq]]
\f[R]
.fi
.SS Remove 1 element at index 2, and insert \[lq]trumpet\[rq]
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]drum\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(2, 1, \[dq]trumpet\[dq]);

// myFish is [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]trumpet\[dq], \[dq]sturgeon\[dq]]
// removed is [\[dq]drum\[dq]]
\f[R]
.fi
.SS Remove 2 elements from index 0, and insert \[lq]parrot\[rq], \[lq]anemone\[rq] and \[lq]blue\[rq]
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]trumpet\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(0, 2, \[dq]parrot\[dq], \[dq]anemone\[dq], \[dq]blue\[dq]);

// myFish is [\[dq]parrot\[dq], \[dq]anemone\[dq], \[dq]blue\[dq], \[dq]trumpet\[dq], \[dq]sturgeon\[dq]]
// removed is [\[dq]angel\[dq], \[dq]clown\[dq]]
\f[R]
.fi
.SS Remove 2 elements, starting from index 2
.IP
.nf
\f[C]
const myFish = [\[dq]parrot\[dq], \[dq]anemone\[dq], \[dq]blue\[dq], \[dq]trumpet\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(2, 2);

// myFish is [\[dq]parrot\[dq], \[dq]anemone\[dq], \[dq]sturgeon\[dq]]
// removed is [\[dq]blue\[dq], \[dq]trumpet\[dq]]
\f[R]
.fi
.SS Remove 1 element from index -2
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(-2, 1);

// myFish is [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]sturgeon\[dq]]
// removed is [\[dq]mandarin\[dq]]
\f[R]
.fi
.SS Remove all elements, starting from index 2
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]mandarin\[dq], \[dq]sturgeon\[dq]];
const removed = myFish.splice(2);

// myFish is [\[dq]angel\[dq], \[dq]clown\[dq]]
// removed is [\[dq]mandarin\[dq], \[dq]sturgeon\[dq]]
\f[R]
.fi
.SS Using splice() on sparse arrays
.PP
The \f[V]splice()\f[R] method preserves the array\[cq]s sparseness.
.IP
.nf
\f[C]
const arr = [1, , 3, 4, , 6];
console.log(arr.splice(1, 2)); // [empty, 3]
console.log(arr); // [1, 4, empty, 6]
\f[R]
.fi
.SS Calling splice() on non-array objects
.PP
The \f[V]splice()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
It then updates the integer-keyed properties and the \f[V]length\f[R]
property as needed.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  0: 5,
  2: 4,
};
console.log(Array.prototype.splice.call(arrayLike, 0, 1, 2, 3));
// [ 5 ]
console.log(arrayLike);
// { \[aq]0\[aq]: 2, \[aq]1\[aq]: 3, \[aq]3\[aq]: 4, length: 4, unrelated: \[aq]foo\[aq] }
\f[R]
.fi
.SH See also
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.concat()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.push()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.pop()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.shift()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.slice()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toSpliced()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.unshift()\f[R]
