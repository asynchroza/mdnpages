.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "TypedArray.copyWithin" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.copyWithin - TypedArray.prototype.copyWithin()
.SH SYNOPSIS
The \f[B]\f[CB]copyWithin()\f[B]\f[R] method copies the sequence of
array elements within the array to the position starting at
\f[CR]target\f[R].
The copy is taken from the index positions of the second and third
arguments \f[CR]start\f[R] and \f[CR]end\f[R].
The \f[CR]end\f[R] argument is optional and defaults to the length of
the array.
This method has the same algorithm as
\f[CR]Array.prototype.copyWithin\f[R].
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH SYNTAX
.IP
.EX
copyWithin(target, start)
copyWithin(target, start, end)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
Target start index position where to copy the elements to.
.TP
\f[B]start\f[R]
Source start index position where to start copying elements from.
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Optional.
Source end index position where to end copying elements from.
.SS Return value
The modified array.
.SH DESCRIPTION
See \f[CR]Array.prototype.copyWithin\f[R] for more details.
.SH EXAMPLES
.SS Using copyWithin
.IP
.EX
const buffer = new ArrayBuffer(8);
const uint8 = new Uint8Array(buffer);
uint8.set([1, 2, 3]);
console.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]
uint8.copyWithin(3, 0, 3);
console.log(uint8); // Uint8Array [ 1, 2, 3, 1, 2, 3, 0, 0 ]
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]TypedArray.prototype.copyWithin\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[CR]TypedArray\f[R]
