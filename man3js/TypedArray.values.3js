.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.values" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
TypedArray.values - TypedArray.prototype.values()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]values()\f[B]\f[R] method returns a new \f[I]array
iterator\f[R] object that contains the values for each index in the
array.
.SH SYNTAX
.IP
.nf
\f[C]
values()
\f[R]
.fi
.SS Return value
.PP
A new iterable iterator object.
.SH EXAMPLES
.SS Iteration using for\&...of loop
.IP
.nf
\f[C]
const arr = new Uint8Array([10, 20, 30, 40, 50]);
const values = arr.values();
for (const n of values) {
  console.log(n);
}
\f[R]
.fi
.SS Alternative iteration
.IP
.nf
\f[C]
const arr = new Uint8Array([10, 20, 30, 40, 50]);
const values = arr.values();
console.log(values.next().value); // 10
console.log(values.next().value); // 20
console.log(values.next().value); // 30
console.log(values.next().value); // 40
console.log(values.next().value); // 50
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]TypedArray.prototype.values\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]TypedArray\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.entries()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.keys()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
