.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.concat" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]concat()\f[B]\f[R] method is used to merge two or more
arrays.
This method does not change the existing arrays, but instead returns a
new array.
.SH Syntax
.IP
.nf
\f[C]
concat()
concat(value0)
concat(value0, value1)
concat(value0, value1, /* \&... ,*/ valueN)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]valueN\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Arrays and/or values to concatenate into a new array.
If all \f[V]valueN\f[R] parameters are omitted, \f[V]concat\f[R] returns
a shallow copy of the existing array on which it is called.
See the description below for more details.
.RE
.SS Return value
.PP
A new \f[V]Array\f[R] instance.
.SH Description
.PP
The \f[V]concat\f[R] method creates a new array.
The array will first be populated by the elements in the object on which
it is called.
Then, for each argument, its value will be concatenated into the array
\[em] for normal objects or primitives, the argument itself will become
an element of the final array; for arrays or array-like objects with the
property \f[V]Symbol.isConcatSpreadable\f[R] set to a truthy value, each
element of the argument will be independently added to the final array.
The \f[V]concat\f[R] method does not recurse into nested array
arguments.
.PP
The \f[V]concat()\f[R] method is a copying method.
It does not alter \f[V]this\f[R] or any of the arrays provided as
arguments but instead returns a shallow copy that contains the same
elements as the ones from the original arrays.
.PP
The \f[V]concat()\f[R] method preserves empty slots if any of the source
arrays is sparse.
.PP
The \f[V]concat()\f[R] method is generic.
The \f[V]this\f[R] value is treated in the same way as the other
arguments (except it will be converted to an object first), which means
plain objects will be directly prepended to the resulting array, while
array-like objects with truthy \f[V]\[at]\[at]isConcatSpreadable\f[R]
will be spread into the resulting array.
.SH Examples
.SS Concatenating two arrays
.PP
The following code concatenates two arrays:
.IP
.nf
\f[C]
const letters = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
const numbers = [1, 2, 3];

const alphaNumeric = letters.concat(numbers);
console.log(alphaNumeric);
// results in [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], 1, 2, 3]
\f[R]
.fi
.SS Concatenating three arrays
.PP
The following code concatenates three arrays:
.IP
.nf
\f[C]
const num1 = [1, 2, 3];
const num2 = [4, 5, 6];
const num3 = [7, 8, 9];

const numbers = num1.concat(num2, num3);

console.log(numbers);
// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]
\f[R]
.fi
.SS Concatenating values to an array
.PP
The following code concatenates three values to an array:
.IP
.nf
\f[C]
const letters = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];

const alphaNumeric = letters.concat(1, [2, 3]);

console.log(alphaNumeric);
// results in [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], 1, 2, 3]
\f[R]
.fi
.SS Concatenating nested arrays
.PP
The following code concatenates nested arrays and demonstrates retention
of references:
.IP
.nf
\f[C]
const num1 = [[1]];
const num2 = [2, [3]];

const numbers = num1.concat(num2);

console.log(numbers);
// results in [[1], 2, [3]]

// modify the first element of num1
num1[0].push(4);

console.log(numbers);
// results in [[1, 4], 2, [3]]
\f[R]
.fi
.SS Concatenating array-like objects with Symbol.isConcatSpreadable
.PP
\f[V]concat\f[R] does not treat all array-like objects as arrays by
default \[em] only if \f[V]Symbol.isConcatSpreadable\f[R] is set to a
truthy value (e.g.\ \f[V]true\f[R]).
.IP
.nf
\f[C]
const obj1 = { 0: 1, 1: 2, 2: 3, length: 3 };
const obj2 = { 0: 1, 1: 2, 2: 3, length: 3, [Symbol.isConcatSpreadable]: true };
console.log([0].concat(obj1, obj2));
// [ 0, { \[aq]0\[aq]: 1, \[aq]1\[aq]: 2, \[aq]2\[aq]: 3, length: 3 }, 1, 2, 3 ]
\f[R]
.fi
.SS Using concat() on sparse arrays
.PP
If any of the source arrays is sparse, the resulting array will also be
sparse:
.IP
.nf
\f[C]
console.log([1, , 3].concat([4, 5])); // [1, empty, 3, 4, 5]
console.log([1, 2].concat([3, , 5])); // [1, 2, 3, empty, 5]
\f[R]
.fi
.SS Calling concat() on non-array objects
.PP
If the \f[V]this\f[R] value is not an array, it is converted to an
object and then treated in the same way as the arguments for
\f[V]concat()\f[R].
In this case the return value is always a plain new array.
.IP
.nf
\f[C]
console.log(Array.prototype.concat.call({}, 1, 2, 3)); // [{}, 1, 2, 3]
console.log(Array.prototype.concat.call(1, 2, 3)); // [ [Number: 1], 2, 3 ]
const arrayLike = { [Symbol.isConcatSpreadable]: true, length: 2, 0: 1, 1: 2 };
console.log(Array.prototype.concat.call(arrayLike, 3, 4)); // [1, 2, 3, 4]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.concat\f[R] in \f[V]core-js\f[R] with
fixes and implementation of modern behavior like
\f[V]Symbol.isConcatSpreadable\f[R]
support (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.push()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.unshift()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.splice()\f[R]
.IP \[bu] 2
\f[V]String.prototype.concat()\f[R]
.IP \[bu] 2
\f[V]Symbol.isConcatSpreadable\f[R]
