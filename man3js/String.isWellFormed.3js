.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.isWellFormed" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
String.isWellFormed - String.prototype.isWellFormed()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]isWellFormed()\f[B]\f[R] method of \f[V]String\f[R]
values returns a boolean indicating whether this string contains any
lone surrogates.
.SH SYNTAX
.IP
.nf
\f[C]
isWellFormed()
\f[R]
.fi
.SS Return value
.PP
Returns \f[V]true\f[R] if this string does not contain any lone
surrogates, \f[V]false\f[R] otherwise.
.SH DESCRIPTION
.PP
Strings in JavaScript are UTF-16 encoded.
UTF-16 encoding has the concept of \f[I]surrogate pairs\f[R], which is
introduced in detail in the UTF-16 characters, Unicode code points, and
grapheme clusters section.
.PP
\f[V]isWellFormed()\f[R] allows you to test whether a string is
well-formed (i.e.\ does not contain any lone surrogates).
Compared to a custom implementation, \f[V]isWellFormed()\f[R] is more
efficient, as engines can directly access the internal representation of
strings.
If you need to convert a string to a well-formed string, use the
\f[V]toWellFormed()\f[R] method.
\f[V]isWellFormed()\f[R] allows you to handle ill-formed strings
differently from well-formed strings, such as throwing an error or
marking it as invalid.
.SH EXAMPLES
.SS Using isWellFormed()
.IP
.nf
\f[C]
const strings = [
  // Lone high surrogate
  \[dq]ab\[rs]uD800\[dq],
  \[dq]ab\[rs]uD800c\[dq],
  // Lone low surrogate
  \[dq]\[rs]uDFFFab\[dq],
  \[dq]c\[rs]uDFFFab\[dq],
  // Well-formed
  \[dq]abc\[dq],
  \[dq]ab\[rs]uD83D\[rs]uDE04c\[dq],
];

for (const str of strings) {
  console.log(str.isWellFormed());
}
// Logs:
// false
// false
// false
// false
// true
// true
\f[R]
.fi
.SS Avoiding errors in encodeURI()
.PP
\f[V]encodeURI\f[R] throws an error if the string passed is not
well-formed.
This can be avoided by using \f[V]isWellFormed()\f[R] to test the string
before passing it to \f[V]encodeURI()\f[R].
.IP
.nf
\f[C]
const illFormed = \[dq]https://example.com/search?q=\[rs]uD800\[dq];

try {
  encodeURI(illFormed);
} catch (e) {
  console.log(e); // URIError: URI malformed
}

if (illFormed.isWellFormed()) {
  console.log(encodeURI(illFormed));
} else {
  console.warn(\[dq]Ill-formed strings encountered.\[dq]); // Ill-formed strings encountered.
}
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]String.prototype.isWellFormed\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#well-formed-unicode-strings)
.IP \[bu] 2
\f[V]String.prototype.toWellFormed()\f[R]
.IP \[bu] 2
\f[V]String.prototype.normalize()\f[R]
