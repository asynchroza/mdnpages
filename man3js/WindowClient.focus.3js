.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WindowClient.focus" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WindowClient.focus \- WindowClient: focus() method
.SH SYNOPSIS
The \f[B]\f[CB]focus()\f[B]\f[R] method of the \f[CR]WindowClient\f[R]
interface gives user input focus to the current client and returns a
\f[CR]Promise\f[R] that resolves to the existing
\f[CR]WindowClient\f[R].
.SH SYNTAX
.IP
.EX
focus()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that resolves to the existing
\f[CR]WindowClient\f[R].
.SS Exceptions
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
The promise is rejected with this exception if none of the windows in
the app\[cq]s origin have transient activation.
.SH SECURITY REQUIREMENTS
.IP \[bu] 2
At least one window in the app\[cq]s origin must have transient
activation.
.SH EXAMPLES
.IP
.EX
self.addEventListener(\[dq]notificationclick\[dq], (event) => {
  console.log(\[dq]On notification click: \[dq], event.notification.tag);
  event.notification.close();

  // This looks to see if the current is already open and
  // focuses if it is
  event.waitUntil(
    clients
      .matchAll({
        type: \[dq]window\[dq],
      })
      .then((clientList) => {
        for (const client of clientList) {
          if (client.url === \[dq]/\[dq] && \[dq]focus\[dq] in client) return client.focus();
        }
        if (clients.openWindow) return clients.openWindow(\[dq]/\[dq]);
      }),
  );
});
.EE
