.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CustomElementRegistry.whenDefined" "JS" "September 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CustomElementRegistry.whenDefined \- CustomElementRegistry:
whenDefined() method
.SH SYNOPSIS
The \f[B]\f[CB]whenDefined()\f[B]\f[R] method of the
\f[CR]CustomElementRegistry\f[R] interface returns a \f[CR]Promise\f[R]
that resolves when the named element is defined.
.SH SYNTAX
.IP
.EX
whenDefined(name)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
The name of the custom element.
.SS Return value
A \f[CR]Promise\f[R] that fulfills with the custom element\[cq]s
constructor when a custom element becomes defined with the given name.
If a custom element has already been defined with the name, the promise
will immediately fulfill.
.PP
The promise is rejected with a \f[CR]SyntaxError\f[R]
\f[CR]DOMException\f[R] if the name is not a \c
.UR
https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
valid custom element name
.UE \c
\&.
.SH EXAMPLES
This example uses \f[CR]whenDefined()\f[R] to detect when the custom
elements that make up a menu are defined.
The menu displays placeholder content until the actual menu content is
ready to display.
.IP
.EX
<nav id=\[dq]menu\-container\[dq]>
  <div class=\[dq]menu\-placeholder\[dq]>Loading\&...</div>
  <nav\-menu>
    <menu\-item>Item 1</menu\-item>
    <menu\-item>Item 2</menu\-item>
    \&...
    <menu\-item>Item N</menu\-item>
  </nav\-menu>
</nav>
.EE
.IP
.EX
const container = document.getElementById(\[dq]menu\-container\[dq]);
const placeholder = container.querySelector(\[dq].menu\-placeholder\[dq]);
// Fetch all the children of menu that are not yet defined.
const undefinedElements = container.querySelectorAll(\[dq]:not(:defined)\[dq]);

async function removePlaceholder() {
  const promises = [...undefinedElements].map((button) =>
    customElements.whenDefined(button.localName),
  );

  // Wait for all the children to be upgraded
  await Promise.all(promises);
  // then remove the placeholder
  container.removeChild(placeholder);
}

removePlaceholder();
.EE
