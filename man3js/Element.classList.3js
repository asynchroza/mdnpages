.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.classList" "JS" "May 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.classList \- Element: classList property
.SH SYNOPSIS
The \f[B]\f[CB]Element.classList\f[B]\f[R] is a read\-only property that
returns a live \f[CR]DOMTokenList\f[R] collection of the
\f[CR]class\f[R] attributes of the element.
This can then be used to manipulate the class list.
.PP
Using \f[CR]classList\f[R] is a convenient alternative to accessing an
element\[cq]s list of classes as a space\-delimited string via
\f[CR]element.className\f[R].
.SH VALUE
A \f[CR]DOMTokenList\f[R] representing the contents of the element\[cq]s
\f[CR]class\f[R] attribute.
If the \f[CR]class\f[R] attribute is not set or empty, it returns an
empty \f[CR]DOMTokenList\f[R], i.e.\ a \f[CR]DOMTokenList\f[R] with the
\f[CR]length\f[R] property equal to \f[CR]0\f[R].
.PP
Although the \f[CR]classList\f[R] property itself is read\-only, you can
modify its associated \f[CR]DOMTokenList\f[R] using the
\f[CR]add()\f[R], \f[CR]remove()\f[R], \f[CR]replace()\f[R], and
\f[CR]toggle()\f[R] methods.
.PP
You can test whether the element contains a given class using the
\f[CR]classList.contains()\f[R] method.
.SH EXAMPLES
.IP
.EX
const div = document.createElement(\[dq]div\[dq]);
div.className = \[dq]foo\[dq];

// our starting state: <div class=\[dq]foo\[dq]></div>
console.log(div.outerHTML);

// use the classList API to remove and add classes
div.classList.remove(\[dq]foo\[dq]);
div.classList.add(\[dq]anotherclass\[dq]);

// <div class=\[dq]anotherclass\[dq]></div>
console.log(div.outerHTML);

// if visible is set remove it, otherwise add it
div.classList.toggle(\[dq]visible\[dq]);

// add/remove visible, depending on test conditional, i less than 10
div.classList.toggle(\[dq]visible\[dq], i < 10);

// false
console.log(div.classList.contains(\[dq]foo\[dq]));

// add or remove multiple classes
div.classList.add(\[dq]foo\[dq], \[dq]bar\[dq], \[dq]baz\[dq]);
div.classList.remove(\[dq]foo\[dq], \[dq]bar\[dq], \[dq]baz\[dq]);

// add or remove multiple classes using spread syntax
const cls = [\[dq]foo\[dq], \[dq]bar\[dq]];
div.classList.add(...cls);
div.classList.remove(...cls);

// replace class \[dq]foo\[dq] with class \[dq]bar\[dq]
div.classList.replace(\[dq]foo\[dq], \[dq]bar\[dq]);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]element.className\f[R]
.IP \[bu] 2
\f[CR]DOMTokenList\f[R]
.IP \[bu] 2
\c
.UR https://github.com/eligrey/classList.js
\f[CR]classList.js\f[R]
.UE \c
\ (a cross\-browser JavaScript polyfill that fully implements
\f[CR]element.classList\f[R])
