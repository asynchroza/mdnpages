.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Iterator.find" "JS" "October 15, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.find - Iterator.prototype.find()
.SH SYNOPSIS
The \f[B]\f[CB]find()\f[B]\f[R] method of \f[CR]Iterator\f[R] instances
is similar to \f[CR]Array.prototype.find()\f[R]: it returns the first
element produced by the iterator that satisfies the provided testing
function.
If no values satisfy the testing function, \f[CR]undefined\f[R] is
returned.
.SH SYNTAX
.IP
.EX
find(callbackFn)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element produced by the iterator.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed.
.TP
\f[B]index\f[R]
The index of the current element being processed.
.RE
.SS Return value
The first element produced by the iterator that satisfies the provided
testing function.
Otherwise, \f[CR]undefined\f[R] is returned.
.SH DESCRIPTION
\f[CR]find()\f[R] iterates the iterator and invokes the
\f[CR]callbackFn\f[R] function once for each element.
It returns the element immediately if the callback function returns a
truthy value.
Otherwise, it iterates until the end of the iterator and returns
\f[CR]undefined\f[R].
If \f[CR]find()\f[R] returns an element, the underlying iterator is
closed by calling its \f[CR]return()\f[R] method.
.PP
The main advantage of iterator helpers over array methods is their
ability to work with infinite iterators.
With infinite iterators, \f[CR]find()\f[R] returns the first satisfying
element as soon as it is found.
If the \f[CR]callbackFn\f[R] always returns a falsy value, the method
never returns.
.SH EXAMPLES
.SS Using find()
.IP
.EX
function* fibonacci() {
  let current = 1;
  let next = 1;
  while (true) {
    yield current;
    [current, next] = [next, current + next];
  }
}

const isEven = (x) => x % 2 === 0;
console.log(fibonacci().find(isEven)); // 2

const isNegative = (x) => x < 0;
console.log(fibonacci().take(10).find(isNegative)); // undefined
console.log(fibonacci().find(isNegative)); // Never completes
.EE
.PP
Calling \f[CR]find()\f[R] always closes the underlying iterator, even if
the method early-returns.
The iterator is never left in a half-way state.
.IP
.EX
const seq = fibonacci();
console.log(seq.find(isEven)); // 2
console.log(seq.next()); // { value: undefined, done: true }
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Iterator.prototype.find\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#iterator-helpers)
