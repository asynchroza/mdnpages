.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.getPrototypeOf" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Reflect.getPrototypeOf()\f[B]\f[R] static method is like
\f[V]Object.getPrototypeOf()\f[R].
It returns the prototype of the specified object.
.SH Syntax
.IP
.nf
\f[C]
Reflect.getPrototypeOf(target)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
The target object of which to get the prototype.
.RE
.SS Return value
.PP
The prototype of the given object, which may be an object or
\f[V]null\f[R].
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]target\f[R] is not an object.
.RE
.SH Description
.PP
\f[V]Reflect.getPrototypeOf()\f[R] provides the reflective semantic of
retrieving the prototype of an object.
The only difference with \f[V]Object.getPrototypeOf()\f[R] is how
non-object targets are handled.
\f[V]Reflect.getPrototypeOf()\f[R] throws a \f[V]TypeError\f[R] if the
target is not an object, while \f[V]Object.getPrototypeOf()\f[R] coerces
it to an object.
.PP
\f[V]Reflect.getPrototypeOf()\f[R] invokes the
\f[V][[GetPrototypeOf]]\f[R] object internal method of \f[V]target\f[R].
.SH Examples
.SS Using Reflect.getPrototypeOf()
.IP
.nf
\f[C]
Reflect.getPrototypeOf({}); // Object.prototype
Reflect.getPrototypeOf(Object.prototype); // null
Reflect.getPrototypeOf(Object.create(null)); // null
\f[R]
.fi
.SS Difference with Object.getPrototypeOf()
.IP
.nf
\f[C]
// Same result for Objects
Object.getPrototypeOf({}); // Object.prototype
Reflect.getPrototypeOf({}); // Object.prototype

// Both throw in ES5 for non-Objects
Object.getPrototypeOf(\[dq]foo\[dq]); // Throws TypeError
Reflect.getPrototypeOf(\[dq]foo\[dq]); // Throws TypeError

// In ES2015 only Reflect throws, Object coerces non-Objects
Object.getPrototypeOf(\[dq]foo\[dq]); // String.prototype
Reflect.getPrototypeOf(\[dq]foo\[dq]); // Throws TypeError

// To mimic the Object ES2015 behavior you need to coerce
Reflect.getPrototypeOf(Object(\[dq]foo\[dq])); // String.prototype
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Reflect.getPrototypeOf\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]Object.getPrototypeOf()\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]getPrototypeOf\f[R] handler
