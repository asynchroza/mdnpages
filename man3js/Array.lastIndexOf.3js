.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.lastIndexOf" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.lastIndexOf - Array.prototype.lastIndexOf()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]lastIndexOf()\f[B]\f[R] method returns the last index at
which a given element can be found in the array, or -1 if it is not
present.
The array is searched backwards, starting at \f[V]fromIndex\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
lastIndexOf(searchElement)
lastIndexOf(searchElement, fromIndex)
\f[R]
.fi
.SS Parameters
.TP
\f[B]searchElement\f[R]
Element to locate in the array.
.TP
\f[B]fromIndex\f[R] \f[I](optional)\f[R]
Zero-based index at which to start searching backwards, converted to an
integer.
.RS
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[V]fromIndex < 0\f[R], \f[V]fromIndex + array.length\f[R] is used.
.IP \[bu] 2
If \f[V]fromIndex < -array.length\f[R], the array is not searched and
\f[V]-1\f[R] is returned.
You can think of it conceptually as starting at a nonexistent position
before the beginning of the array and going backwards from there.
There are no array elements on the way, so \f[V]searchElement\f[R] is
never found.
.IP \[bu] 2
If \f[V]fromIndex >= array.length\f[R] or \f[V]fromIndex\f[R] is
omitted, \f[V]array.length - 1\f[R] is used, causing the entire array to
be searched.
You can think of it conceptually as starting at a nonexistent position
beyond the end of the array and going backwards from there.
It eventually reaches the real end position of the array, at which point
it starts searching backwards through the actual array elements.
.RE
.SS Return value
.PP
The last index of the element in the array; \f[B]-1\f[R] if not found.
.SH DESCRIPTION
.PP
The \f[V]lastIndexOf()\f[R] method compares \f[V]searchElement\f[R] to
elements of the array using strict equality (the same algorithm used by
the \f[V]===\f[R] operator).
\f[V]NaN\f[R] values are never compared as equal, so
\f[V]lastIndexOf()\f[R] always returns \f[V]-1\f[R] when
\f[V]searchElement\f[R] is \f[V]NaN\f[R].
.PP
The \f[V]lastIndexOf()\f[R] method skips empty slots in sparse arrays.
.PP
The \f[V]lastIndexOf()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Using lastIndexOf()
.PP
The following example uses \f[V]lastIndexOf()\f[R] to locate values in
an array.
.IP
.nf
\f[C]
const numbers = [2, 5, 9, 2];
numbers.lastIndexOf(2); // 3
numbers.lastIndexOf(7); // -1
numbers.lastIndexOf(2, 3); // 3
numbers.lastIndexOf(2, 2); // 0
numbers.lastIndexOf(2, -2); // 0
numbers.lastIndexOf(2, -1); // 3
\f[R]
.fi
.PP
You cannot use \f[V]lastIndexOf()\f[R] to search for \f[V]NaN\f[R].
.IP
.nf
\f[C]
const array = [NaN];
array.lastIndexOf(NaN); // -1
\f[R]
.fi
.SS Finding all the occurrences of an element
.PP
The following example uses \f[V]lastIndexOf\f[R] to find all the indices
of an element in a given array, using \f[V]push\f[R] to add them to
another array as they are found.
.IP
.nf
\f[C]
const indices = [];
const array = [\[dq]a\[dq], \[dq]b\[dq], \[dq]a\[dq], \[dq]c\[dq], \[dq]a\[dq], \[dq]d\[dq]];
const element = \[dq]a\[dq];
let idx = array.lastIndexOf(element);
while (idx !== -1) {
  indices.push(idx);
  idx = idx > 0 ? array.lastIndexOf(element, idx - 1) : -1;
}

console.log(indices);
// [4, 2, 0]
\f[R]
.fi
.PP
Note that we have to handle the case \f[V]idx === 0\f[R] separately here
because the element will always be found regardless of the
\f[V]fromIndex\f[R] parameter if it is the first element of the array.
This is different from the \f[V]indexOf\f[R] method.
.SS Using lastIndexOf() on sparse arrays
.PP
You cannot use \f[V]lastIndexOf()\f[R] to search for empty slots in
sparse arrays.
.IP
.nf
\f[C]
console.log([1, , 3].lastIndexOf(undefined)); // -1
\f[R]
.fi
.SS Calling lastIndexOf() on non-array objects
.PP
The \f[V]lastIndexOf()\f[R] method reads the \f[V]length\f[R] property
of \f[V]this\f[R] and then accesses each integer index.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 2,
};
console.log(Array.prototype.lastIndexOf.call(arrayLike, 2));
// 2
console.log(Array.prototype.lastIndexOf.call(arrayLike, 5));
// -1
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.lastIndexOf\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findLastIndex()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[V]String.prototype.lastIndexOf()\f[R]
