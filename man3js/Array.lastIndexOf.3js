.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Array.lastIndexOf" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.lastIndexOf \- Array.prototype.lastIndexOf()
.SH SYNOPSIS
The \f[B]\f[CB]lastIndexOf()\f[B]\f[R] method of \f[CR]Array\f[R]
instances returns the last index at which a given element can be found
in the array, or \-1 if it is not present.
The array is searched backwards, starting at \f[CR]fromIndex\f[R].
.SH SYNTAX
.IP
.EX
lastIndexOf(searchElement)
lastIndexOf(searchElement, fromIndex)
.EE
.SS Parameters
.TP
\f[B]searchElement\f[R]
Element to locate in the array.
.TP
\f[B]fromIndex\f[R] \f[I](optional)\f[R]
Zero\-based index at which to start searching backwards, converted to an
integer.
.RS
.IP \[bu] 2
Negative index counts back from the end of the array \[em] if
\f[CR]fromIndex < 0\f[R], \f[CR]fromIndex + array.length\f[R] is used.
.IP \[bu] 2
If \f[CR]fromIndex < \-array.length\f[R], the array is not searched and
\f[CR]\-1\f[R] is returned.
You can think of it conceptually as starting at a nonexistent position
before the beginning of the array and going backwards from there.
There are no array elements on the way, so \f[CR]searchElement\f[R] is
never found.
.IP \[bu] 2
If \f[CR]fromIndex >= array.length\f[R] or \f[CR]fromIndex\f[R] is
omitted, \f[CR]array.length \- 1\f[R] is used, causing the entire array
to be searched.
You can think of it conceptually as starting at a nonexistent position
beyond the end of the array and going backwards from there.
It eventually reaches the real end position of the array, at which point
it starts searching backwards through the actual array elements.
.RE
.SS Return value
The last index of \f[CR]searchElement\f[R] in the array; \f[CR]\-1\f[R]
if not found.
.SH DESCRIPTION
The \f[CR]lastIndexOf()\f[R] method compares \f[CR]searchElement\f[R] to
elements of the array using strict equality (the same algorithm used by
the \f[CR]===\f[R] operator).
\f[CR]NaN\f[R] values are never compared as equal, so
\f[CR]lastIndexOf()\f[R] always returns \f[CR]\-1\f[R] when
\f[CR]searchElement\f[R] is \f[CR]NaN\f[R].
.PP
The \f[CR]lastIndexOf()\f[R] method skips empty slots in sparse arrays.
.PP
The \f[CR]lastIndexOf()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Using lastIndexOf()
The following example uses \f[CR]lastIndexOf()\f[R] to locate values in
an array.
.IP
.EX
const numbers = [2, 5, 9, 2];
numbers.lastIndexOf(2); // 3
numbers.lastIndexOf(7); // \-1
numbers.lastIndexOf(2, 3); // 3
numbers.lastIndexOf(2, 2); // 0
numbers.lastIndexOf(2, \-2); // 0
numbers.lastIndexOf(2, \-1); // 3
.EE
.PP
You cannot use \f[CR]lastIndexOf()\f[R] to search for \f[CR]NaN\f[R].
.IP
.EX
const array = [NaN];
array.lastIndexOf(NaN); // \-1
.EE
.SS Finding all the occurrences of an element
The following example uses \f[CR]lastIndexOf\f[R] to find all the
indices of an element in a given array, using \f[CR]push()\f[R] to add
them to another array as they are found.
.IP
.EX
const indices = [];
const array = [\[dq]a\[dq], \[dq]b\[dq], \[dq]a\[dq], \[dq]c\[dq], \[dq]a\[dq], \[dq]d\[dq]];
const element = \[dq]a\[dq];
let idx = array.lastIndexOf(element);
while (idx !== \-1) {
  indices.push(idx);
  idx = idx > 0 ? array.lastIndexOf(element, idx \- 1) : \-1;
}

console.log(indices);
// [4, 2, 0]
.EE
.PP
Note that we have to handle the case \f[CR]idx === 0\f[R] separately
here because the element will always be found regardless of the
\f[CR]fromIndex\f[R] parameter if it is the first element of the array.
This is different from the \f[CR]indexOf()\f[R] method.
.SS Using lastIndexOf() on sparse arrays
You cannot use \f[CR]lastIndexOf()\f[R] to search for empty slots in
sparse arrays.
.IP
.EX
console.log([1, , 3].lastIndexOf(undefined)); // \-1
.EE
.SS Calling lastIndexOf() on non\-array objects
The \f[CR]lastIndexOf()\f[R] method reads the \f[CR]length\f[R] property
of \f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 2,
  3: 5, // ignored by lastIndexOf() since length is 3
};
console.log(Array.prototype.lastIndexOf.call(arrayLike, 2));
// 2
console.log(Array.prototype.lastIndexOf.call(arrayLike, 5));
// \-1
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.lastIndexOf\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findLastIndex()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.lastIndexOf()\f[R]
