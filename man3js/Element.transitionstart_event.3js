.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.transitionstart_event" "JS" "July 18, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.transitionstart_event \- Element: transitionstart event
.SH SYNOPSIS
The \f[B]\f[CB]transitionstart\f[B]\f[R] event is fired when a CSS
transition has actually started, i.e., after any
\f[CR]transition\-delay\f[R] has ended.
.PP
This event is not cancelable.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]transitionstart\[dq], (event) => {});

ontransitionstart = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]TransitionEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]TransitionEvent.propertyName\f[R] \f[I](read\-only)\f[R]
A string containing the name CSS property associated with the
transition.
.TP
\f[B]TransitionEvent.elapsedTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]float\f[R] giving the amount of time the transition has been
running, in seconds, when this event fired.
This value is not affected by the \f[CR]transition\-delay\f[R] property.
.TP
\f[B]TransitionEvent.pseudoElement\f[R] \f[I](read\-only)\f[R]
A string, starting with \f[CR]::\f[R], containing the name of the
pseudo\-element the animation runs on.
If the transition doesn\[cq]t run on a pseudo\-element but on the
element, an empty string: \f[CR]\[aq]\[aq]\f[R].
.SH EXAMPLES
This code adds a listener to the \f[CR]transitionstart\f[R] event:
.IP
.EX
element.addEventListener(\[dq]transitionstart\[dq], () => {
  console.log(\[dq]Started transitioning\[dq]);
});
.EE
.PP
The same, but using the \f[CR]ontransitionstart\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
element.ontransitionstart = () => {
  console.log(\[dq]Started transitioning\[dq]);
};
.EE
.SS Live example
In the following example, we have a simple \f[CR]<div>\f[R] element,
styled with a transition that includes a delay:
.IP
.EX
<div class=\[dq]transition\[dq]>Hover over me</div>
<div class=\[dq]message\[dq]></div>
.EE
.IP
.EX
\&.transition {
  width: 100px;
  height: 100px;
  background: rgba(255, 0, 0, 1);
  transition\-property: transform, background;
  transition\-duration: 2s;
  transition\-delay: 1s;
}

\&.transition:hover {
  transform: rotate(90deg);
  background: rgba(255, 0, 0, 0);
}
.EE
.PP
To this, we\[cq]ll add some JavaScript to indicate where the
\f[CR]transitionstart\f[R] and \f[CR]transitionrun\f[R] events fire.
.IP
.EX
const transition = document.querySelector(\[dq].transition\[dq]);
const message = document.querySelector(\[dq].message\[dq]);

transition.addEventListener(\[dq]transitionrun\[dq], () => {
  message.textContent = \[dq]transitionrun fired\[dq];
});

transition.addEventListener(\[dq]transitionstart\[dq], () => {
  message.textContent = \[dq]transitionstart fired\[dq];
});

transition.addEventListener(\[dq]transitionend\[dq], () => {
  message.textContent = \[dq]transitionend fired\[dq];
});
.EE
.PP
The difference is that:
.IP \[bu] 2
transitionrun fires when the transition is created (i.e.\ at the start
of any delay).
.IP \[bu] 2
transitionstart fires when the actual animation has begun (i.e.\ at the
end of any delay).
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]TransitionEvent\f[R] interface
.IP \[bu] 2
CSS properties: \f[CR]transition\f[R], \f[CR]transition\-delay\f[R],
\f[CR]transition\-duration\f[R], \f[CR]transition\-property\f[R],
\f[CR]transition\-timing\-function\f[R]
.IP \[bu] 2
Related events: \f[CR]transitionend\f[R], \f[CR]transitionrun\f[R],
\f[CR]transitioncancel\f[R]
