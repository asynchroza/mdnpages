.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Atomics.waitAsync" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Atomics.waitAsync()\f[B]\f[R] static method waits
asynchronously on a shared memory location and returns a
\f[V]Promise\f[R].
.PP
Unlike \f[V]Atomics.wait()\f[R], \f[V]waitAsync\f[R] is non-blocking and
usable on the main thread.
.RS
.PP
\f[B]Note:\f[R] This operation only works with a shared
\f[V]Int32Array\f[R] or \f[V]BigInt64Array\f[R].
.RE
.SH Syntax
.IP
.nf
\f[C]
Atomics.waitAsync(typedArray, index, value)
Atomics.waitAsync(typedArray, index, value, timeout)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]typedArray\f[R]
.RS 2
.IP \[bu] 2
A shared \f[V]Int32Array\f[R] or \f[V]BigInt64Array\f[R].
.RE
.IP \[bu] 2
\f[V]index\f[R]
.RS 2
.IP \[bu] 2
The position in the \f[V]typedArray\f[R] to wait on.
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
The expected value to test.
.RE
.IP \[bu] 2
\f[V]timeout\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
Time to wait in milliseconds.
\f[V]Infinity\f[R], if no time is provided.
.RE
.SS Return value
.PP
An \f[V]Object\f[R] with the following properties:
.IP \[bu] 2
\f[V]async\f[R]
.RS 2
.IP \[bu] 2
A boolean indicating whether the \f[V]value\f[R] property is a
\f[V]Promise\f[R] or not.
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
If \f[V]async\f[R] is \f[V]false\f[R], it will be a string which is
either \f[V]\[dq]not-equal\[dq]\f[R] or \f[V]\[dq]timed-out\[dq]\f[R]
(only when the \f[V]timeout\f[R] parameter is \f[V]0\f[R]).
If \f[V]async\f[R] is \f[V]true\f[R], it will be a \f[V]Promise\f[R]
which is fulfilled with a string value, either \f[V]\[dq]ok\[dq]\f[R] or
\f[V]\[dq]timed-out\[dq]\f[R].
The promise is never rejected.
.RE
.SH Examples
.SS Using waitAsync()
.PP
Given a shared \f[V]Int32Array\f[R].
.IP
.nf
\f[C]
const sab = new SharedArrayBuffer(1024);
const int32 = new Int32Array(sab);
\f[R]
.fi
.PP
A reading thread is sleeping and waiting on location 0 which is expected
to be 0.
The \f[V]result.value\f[R] will be a promise.
.IP
.nf
\f[C]
const result = Atomics.waitAsync(int32, 0, 0, 1000);
// { async: true, value: Promise {<pending>} }
\f[R]
.fi
.PP
In the reading thread or in another thread, the memory location 0 is
called and the promise can be resolved with \f[V]\[dq]ok\[dq]\f[R].
.IP
.nf
\f[C]
Atomics.notify(int32, 0);
// { async: true, value: Promise {<fulfilled>: \[aq]ok\[aq]} }
\f[R]
.fi
.PP
If it isn\[cq]t resolving to \f[V]\[dq]ok\[dq]\f[R], the value in the
shared memory location wasn\[cq]t the expected (the \f[V]value\f[R]
would be \f[V]\[dq]not-equal\[dq]\f[R] instead of a promise) or the
timeout was reached (the promise will resolve to
\f[V]\[dq]time-out\[dq]\f[R]).
.SH See also
.IP \[bu] 2
\f[V]Atomics\f[R]
.IP \[bu] 2
\f[V]Atomics.wait()\f[R]
.IP \[bu] 2
\f[V]Atomics.notify()\f[R]
