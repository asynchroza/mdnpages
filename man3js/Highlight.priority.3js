.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Highlight.priority" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Highlight.priority \- Highlight: priority property
.SH SYNOPSIS
It is possible to create \f[CR]Range\f[R] objects that overlap in a
document.
.PP
When overlapping ranges are used by multiple different
\f[CR]Highlight\f[R] objects, and when those highlights are styled using
\f[CR]::highlight\f[R] pseudo\-elements, this may lead to conflicting
styles.
.PP
If two text ranges overlap and are both highlighted using the CSS Custom
Highlight API, and if they\[cq]re both styled using the \f[CR]color\f[R]
CSS property, the browser needs to decide which color should be used for
styling the text in the overlapping part.
.PP
By default, all highlights have the same priority and the browser
chooses the most recently registered highlight to style the overlapping
parts.
.PP
The \f[CR]priority\f[R] property of the \f[CR]Highlight\f[R] interface
is a \f[CR]Number\f[R] used to change this default behavior and
determine which highlight\[cq]s styles should be used to resolve style
conflicts in overlapping parts.
.PP
Note that all the styles of a highlight are applied and the browser only
needs to resolve conflicts when the same CSS properties are used by
multiple overlapping highlights.
The highlight style conflict resolution also does not depend on the
order in which the \f[CR]::highlight\f[R] pseudo\-elements rules appear
in the source, or whether or not CSS properties are marked as
\f[CR]!important\f[R].
.SH VALUE
An integer.
.SH EXAMPLES
.SS Default priority
.SS HTML
.IP
.EX
<p>Time is an illusion. Lunchtime doubly so.</p>
.EE
.SS CSS
.IP
.EX
::highlight(highlight\-2) {
  color: blue;
}

::highlight(highlight\-1) {
  color: white;
  background: orange;
}
.EE
.SS JavaScript
.IP
.EX
const text = document.querySelector(\[dq]p\[dq]).firstChild;

// Create two overlapping highlights
const range1 = new Range();
range1.setStart(text, 5);
range1.setEnd(text, 25);

const range2 = new Range();
range2.setStart(text, 15);
range2.setEnd(text, 35);

const highlight1 = new Highlight(range1);
const highlight2 = new Highlight(range2);

CSS.highlights.set(\[dq]highlight\-1\[dq], highlight1);
CSS.highlights.set(\[dq]highlight\-2\[dq], highlight2);
.EE
.SS Result
As seen below, by default, the part of the text node where the two
registered highlights overlap is displayed in blue because
\f[CR]highlight\-2\f[R] is registered after \f[CR]highlight\-1\f[R].
The background color defined by \f[CR]highlight\-1\f[R] includes the
entire \f[CR]range1\f[R] range because it does not conflict with another
background color.
.SS Setting priority
.SS HTML
.IP
.EX
<button id=\[dq]prioritize\-1\[dq] type=\[dq]button\[dq]>Prioritize 1</button>
<button id=\[dq]prioritize\-2\[dq] type=\[dq]button\[dq]>Prioritize 2</button>
<button id=\[dq]reset\[dq] type=\[dq]button\[dq]>Reset</button>
<p>Time is an illusion. Lunchtime doubly so.</p>
.EE
.SS CSS
.IP
.EX
::highlight(highlight\-1) {
  background\-color: blue;
  color: white;
}

::highlight(highlight\-2) {
  background\-color: orange;
}
.EE
.SS JavaScript
.IP
.EX
const text = document.querySelector(\[dq]p\[dq]).firstChild;

// Create two overlapping highlights
const range1 = new Range();
range1.setStart(text, 5);
range1.setEnd(text, 25);

const range2 = new Range();
range2.setStart(text, 15);
range2.setEnd(text, 35);

const highlight1 = new Highlight(range1);
const highlight2 = new Highlight(range2);

CSS.highlights.set(\[dq]highlight\-1\[dq], highlight1);
CSS.highlights.set(\[dq]highlight\-2\[dq], highlight2);

// Add buttons to change the highlight priority.
const prioritize1 = document.querySelector(\[dq]#prioritize\-1\[dq]);
const prioritize2 = document.querySelector(\[dq]#prioritize\-2\[dq]);
const reset = document.querySelector(\[dq]#reset\[dq]);

prioritize1.addEventListener(\[dq]click\[dq], () => {
  highlight1.priority = 1;
  highlight2.priority = 0;
});

prioritize2.addEventListener(\[dq]click\[dq], () => {
  highlight1.priority = 0;
  highlight2.priority = 1;
});

reset.addEventListener(\[dq]click\[dq], () => {
  highlight1.priority = 0;
  highlight2.priority = 0;
});
.EE
.SS Result
As seen below, by default, the part of the text node where the two
registered highlights overlap is displayed in blue because
\f[CR]highlight\-2\f[R] is registered after \f[CR]highlight\-1\f[R].
.SH SEE ALSO
.IP \[bu] 2
The CSS Custom Highlight API
.IP \[bu] 2
\c
.UR https://css-tricks.com/css-custom-highlight-api-early-look/
CSS Custom Highlight API: The Future of Highlighting Text Ranges on the
Web
.UE \c
