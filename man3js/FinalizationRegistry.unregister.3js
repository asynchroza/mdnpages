.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "FinalizationRegistry.unregister" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FinalizationRegistry.unregister -
FinalizationRegistry.prototype.unregister()
.SH SYNOPSIS
The \f[B]\f[CB]unregister()\f[B]\f[R] method of
\f[CR]FinalizationRegistry\f[R] instances unregisters a target value
from this \f[CR]FinalizationRegistry\f[R].
.SH SYNTAX
.IP
.EX
unregister(unregisterToken)
.EE
.SS Parameters
.TP
\f[B]unregisterToken\f[R]
The token used with the \f[CR]register()\f[R] method when registering
the target value.
Multiple cells registered with the same \f[CR]unregisterToken\f[R] will
be unregistered together.
.SS Return value
A boolean value that is \f[CR]true\f[R] if at least one cell was
unregistered and \f[CR]false\f[R] if no cell was unregistered.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]unregisterToken\f[R] is not an object or a
non-registered symbol.
.SH DESCRIPTION
When a target value has been reclaimed, it is no longer registered in
the registry.
There is no need to call \f[CR]unregister\f[R] in your cleanup callback.
Only call \f[CR]unregister\f[R] if you haven\[cq]t received a cleanup
callback and no longer need to receive one.
.SH EXAMPLES
.SS Using unregister
This example shows registering a target object using that same object as
the unregister token, then later unregistering it via
\f[CR]unregister\f[R]:
.IP
.EX
class Thingy {
  static #cleanup = (label) => {
    //               \[ha]\[ha]\[ha]\[ha]\[ha]−−−−− held value
    console.error(
      \[ga]The \[dq]release\[dq] method was never called for the object with the label \[dq]${label}\[dq]\[ga],
    );
  };
  #registry = new FinalizationRegistry(Thingy.#cleanup);

  /**
   * Constructs a \[ga]Thingy\[ga] instance.
   * Be sure to call \[ga]release\[ga] when you\[aq]re done with it.
   *
   * \[at]param label A label for the \[ga]Thingy\[ga].
   */
  constructor(label) {
    //                            vvvvv−−−−− held value
    this.#registry.register(this, label, this);
    //          target −−−−−\[ha]\[ha]\[ha]\[ha]         \[ha]\[ha]\[ha]\[ha]−−−−− unregister token
  }

  /**
   * Releases resources held by this \[ga]Thingy\[ga] instance.
   */
  release() {
    this.#registry.unregister(this);
    //                        \[ha]\[ha]\[ha]\[ha]−−−−− unregister token
  }
}
.EE
.PP
This example shows registering a target object using a different object
as its unregister token:
.IP
.EX
class Thingy {
  static #cleanup = (file) => {
    //               \[ha]\[ha]\[ha]\[ha]−−−−− held value
    console.error(
      \[ga]The \[dq]release\[dq] method was never called for the \[dq]Thingy\[dq] for the file \[dq]${file.name}\[dq]\[ga],
    );
  };
  #registry = new FinalizationRegistry(Thingy.#cleanup);
  #file;

  /**
   * Constructs a \[ga]Thingy\[ga] instance for the given file.
   * Be sure to call \[ga]release\[ga] when you\[aq]re done with it.
   *
   * \[at]param filename The name of the file.
   */
  constructor(filename) {
    this.#file = File.open(filename);
    //                            vvvvv−−−−− held value
    this.#registry.register(this, label, this.#file);
    //          target −−−−−\[ha]\[ha]\[ha]\[ha]         \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]−−−−− unregister token
  }

  /**
   * Releases resources held by this \[ga]Thingy\[ga] instance.
   */
  release() {
    if (this.#file) {
      this.#registry.unregister(this.#file);
      //                        \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]−−−−− unregister token
      File.close(this.#file);
      this.#file = null;
    }
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]FinalizationRegistry\f[R]
