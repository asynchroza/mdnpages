.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "FinalizationRegistry.unregister" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]unregister()\f[B]\f[R] method unregisters a target value
from a \f[V]FinalizationRegistry\f[R] instance.
.SH Syntax
.IP
.nf
\f[C]
unregister(unregisterToken)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]unregisterToken\f[R]
.RS 2
.IP \[bu] 2
The token used with the \f[V]register\f[R] method when registering the
target value.
Multiple cells registered with the same \f[V]unregisterToken\f[R] will
be unregistered together.
.RE
.SS Return value
.PP
A boolean value that is \f[V]true\f[R] if at least one cell was
unregistered and \f[V]false\f[R] if no cell was unregistered.
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]unregisterToken\f[R] is not an object or a non-registered
symbol.
.RE
.SH Description
.PP
When a target value has been reclaimed, it is no longer registered in
the registry.
There is no need to call \f[V]unregister\f[R] in your cleanup callback.
Only call \f[V]unregister\f[R] if you haven\[cq]t received a cleanup
callback and no longer need to receive one.
.SH Examples
.SS Using unregister
.PP
This example shows registering a target object using that same object as
the unregister token, then later unregistering it via
\f[V]unregister\f[R]:
.IP
.nf
\f[C]
class Thingy {
  static #cleanup = (label) => {
    //               \[ha]\[ha]\[ha]\[ha]\[ha]−−−−− held value
    console.error(
      \[ga]The \[dq]release\[dq] method was never called for the object with the label \[dq]${label}\[dq]\[ga],
    );
  };
  #registry = new FinalizationRegistry(Thingy.#cleanup);

  /**
   * Constructs a \[ga]Thingy\[ga] instance.
   * Be sure to call \[ga]release\[ga] when you\[aq]re done with it.
   *
   * \[at]param label A label for the \[ga]Thingy\[ga].
   */
  constructor(label) {
    //                            vvvvv−−−−− held value
    this.#registry.register(this, label, this);
    //          target −−−−−\[ha]\[ha]\[ha]\[ha]         \[ha]\[ha]\[ha]\[ha]−−−−− unregister token
  }

  /**
   * Releases resources held by this \[ga]Thingy\[ga] instance.
   */
  release() {
    this.#registry.unregister(this);
    //                        \[ha]\[ha]\[ha]\[ha]−−−−− unregister token
  }
}
\f[R]
.fi
.PP
This example shows registering a target object using a different object
as its unregister token:
.IP
.nf
\f[C]
class Thingy {
  static #cleanup = (file) => {
    //               \[ha]\[ha]\[ha]\[ha]−−−−− held value
    console.error(
      \[ga]The \[dq]release\[dq] method was never called for the \[dq]Thingy\[dq] for the file \[dq]${file.name}\[dq]\[ga],
    );
  };
  #registry = new FinalizationRegistry(Thingy.#cleanup);
  #file;

  /**
   * Constructs a \[ga]Thingy\[ga] instance for the given file.
   * Be sure to call \[ga]release\[ga] when you\[aq]re done with it.
   *
   * \[at]param filename The name of the file.
   */
  constructor(filename) {
    this.#file = File.open(filename);
    //                            vvvvv−−−−− held value
    this.#registry.register(this, label, this.#file);
    //          target −−−−−\[ha]\[ha]\[ha]\[ha]         \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]−−−−− unregister token
  }

  /**
   * Releases resources held by this \[ga]Thingy\[ga] instance.
   */
  release() {
    if (this.#file) {
      this.#registry.unregister(this.#file);
      //                        \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]−−−−− unregister token
      File.close(this.#file);
      this.#file = null;
    }
  }
}
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]FinalizationRegistry\f[R]
