.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.hasIndices" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]hasIndices\f[B]\f[R] accessor property of
\f[V]RegExp\f[R] instances returns whether or not the \f[V]d\f[R] flag
is used with this regular expression.
.SH Description
.PP
\f[V]RegExp.prototype.hasIndices\f[R] has the value \f[V]true\f[R] if
the \f[V]d\f[R] flag was used; otherwise, \f[V]false\f[R].
The \f[V]d\f[R] flag indicates that the result of a regular expression
match should contain the start and end indices of the substrings of each
capture group.
It does not change the regex\[cq]s interpretation or matching behavior
in any way, but only provides additional information in the matching
result.
.PP
This flag primarily affects the return value of \f[V]exec()\f[R].
If the \f[V]d\f[R] flag is present, the array returned by
\f[V]exec()\f[R] has an additional \f[V]indices\f[R] property as
described in the \f[V]exec()\f[R] method\[cq]s return value.
Because all other regex-related methods (such as
\f[V]String.prototype.match()\f[R]) call \f[V]exec()\f[R] internally,
they will also return the indices if the regex has the \f[V]d\f[R] flag.
.PP
The set accessor of \f[V]hasIndices\f[R] is \f[V]undefined\f[R].
You cannot change this property directly.
.SH Examples
.PP
There\[cq]s a more detailed usage example at Groups and backreferences >
Using groups and match indices.
.SS Using hasIndices
.IP
.nf
\f[C]
const str1 = \[dq]foo bar foo\[dq];

const regex1 = /foo/dg;

console.log(regex1.hasIndices); // true

console.log(regex1.exec(str1).indices[0]); // [0, 3]
console.log(regex1.exec(str1).indices[0]); // [8, 11]

const str2 = \[dq]foo bar foo\[dq];

const regex2 = /foo/;

console.log(regex2.hasIndices); // false

console.log(regex2.exec(str2).indices); // undefined
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.exec()\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.dotAll\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.ignoreCase\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.unicode\f[R]
