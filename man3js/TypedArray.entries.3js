.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.entries" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]entries()\f[B]\f[R] method returns a new \f[I]array
iterator\f[R] that contains the key/value pairs for each index in the
array.
.SH Syntax
.IP
.nf
\f[C]
entries()
\f[R]
.fi
.SS Return value
.PP
A new iterable iterator object.
.SH Examples
.SS Iteration using for\&...of loop
.IP
.nf
\f[C]
const array = new Uint8Array([10, 20, 30, 40, 50]);
const arrayEntries = arr.entries();
for (const element of arrayEntries) {
  console.log(element);
}
\f[R]
.fi
.SS Alternative iteration
.IP
.nf
\f[C]
const array = new Uint8Array([10, 20, 30, 40, 50]);
const arrayEntries = arr.entries();

console.log(arrayEntries.next().value); // [0, 10]
console.log(arrayEntries.next().value); // [1, 20]
console.log(arrayEntries.next().value); // [2, 30]
console.log(arrayEntries.next().value); // [3, 40]
console.log(arrayEntries.next().value); // [4, 50]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]TypedArray.prototype.entries\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]TypedArray\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.keys()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.values()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
