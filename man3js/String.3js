.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]String\f[B]\f[R] object is used to represent and
manipulate a sequence of characters.
.SH Description
.PP
Strings are useful for holding data that can be represented in text
form.
Some of the most-used operations on strings are to check their
\f[V]length\f[R], to build and concatenate them using the + and +=
string operators, checking for the existence or location of substrings
with the \f[V]indexOf()\f[R] method, or extracting substrings with the
\f[V]substring()\f[R] method.
.SS Creating strings
.PP
Strings can be created as primitives, from string literals, or as
objects, using the \f[V]String()\f[R] constructor:
.IP
.nf
\f[C]
const string1 = \[dq]A string primitive\[dq];
const string2 = \[aq]Also a string primitive\[aq];
const string3 = \[ga]Yet another string primitive\[ga];
\f[R]
.fi
.IP
.nf
\f[C]
const string4 = new String(\[dq]A String object\[dq]);
\f[R]
.fi
.PP
String primitives and string objects share many behaviors, but have
other important differences and caveats.
See \[lq]String primitives and String objects\[rq] below.
.PP
String literals can be specified using single or double quotes, which
are treated identically, or using the backtick character \[ga].
This last form specifies a template literal: with this form you can
interpolate expressions.
For more information on the syntax of string literals, see lexical
grammar.
.SS Character access
.PP
There are two ways to access an individual character in a string.
The first is the \f[V]charAt()\f[R] method:
.IP
.nf
\f[C]
\[dq]cat\[dq].charAt(1); // gives value \[dq]a\[dq]
\f[R]
.fi
.PP
The other way is to treat the string as an array-like object, where
individual characters correspond to a numerical index:
.IP
.nf
\f[C]
\[dq]cat\[dq][1]; // gives value \[dq]a\[dq]
\f[R]
.fi
.PP
When using bracket notation for character access, attempting to delete
or assign a value to these properties will not succeed.
The properties involved are neither writable nor configurable.
(See \f[V]Object.defineProperty()\f[R] for more information.)
.SS Comparing strings
.PP
Use the less-than and greater-than operators to compare strings:
.IP
.nf
\f[C]
const a = \[dq]a\[dq];
const b = \[dq]b\[dq];
if (a < b) {
  // true
  console.log(\[ga]${a} is less than ${b}\[ga]);
} else if (a > b) {
  console.log(\[ga]${a} is greater than ${b}\[ga]);
} else {
  console.log(\[ga]${a} and ${b} are equal.\[ga]);
}
\f[R]
.fi
.PP
Note that all comparison operators, including \f[V]===\f[R] and
\f[V]==\f[R], compare strings case-sensitively.
A common way to compare strings case-insensitively is to convert both to
the same case (upper or lower) before comparing them.
.IP
.nf
\f[C]
function areEqualCaseInsensitive(str1, str2) {
  return str1.toUpperCase() === str2.toUpperCase();
}
\f[R]
.fi
.PP
The choice of whether to transform by \f[V]toUpperCase()\f[R] or
\f[V]toLowerCase()\f[R] is mostly arbitrary, and neither one is fully
robust when extending beyond the Latin alphabet.
For example, the German lowercase letter \f[V]ß\f[R] and \f[V]ss\f[R]
are both transformed to \f[V]SS\f[R] by \f[V]toUpperCase()\f[R], while
the Turkish letter \f[V]ı\f[R] would be falsely reported as unequal to
\f[V]I\f[R] by \f[V]toLowerCase()\f[R] unless specifically using
\f[V]toLocaleLowerCase(\[dq]tr\[dq])\f[R].
.IP
.nf
\f[C]
const areEqualInUpperCase = (str1, str2) =>
  str1.toUpperCase() === str2.toUpperCase();
const areEqualInLowerCase = (str1, str2) =>
  str1.toLowerCase() === str2.toLowerCase();

areEqualInUpperCase(\[dq]ß\[dq], \[dq]ss\[dq]); // true; should be false
areEqualInLowerCase(\[dq]ı\[dq], \[dq]I\[dq]); // false; should be true
\f[R]
.fi
.PP
A locale-aware and robust solution for testing case-insensitive equality
is to use the \f[V]Intl.Collator\f[R] API or the string\[cq]s
\f[V]localeCompare()\f[R] method \[em] they share the same interface
\[em] with the \f[V]sensitivity\f[R] option set to
\f[V]\[dq]accent\[dq]\f[R] or \f[V]\[dq]base\[dq]\f[R].
.IP
.nf
\f[C]
const areEqual = (str1, str2, locale = \[dq]en-US\[dq]) =>
  str1.localeCompare(str2, locale, { sensitivity: \[dq]accent\[dq] }) === 0;

areEqual(\[dq]ß\[dq], \[dq]ss\[dq], \[dq]de\[dq]); // false
areEqual(\[dq]ı\[dq], \[dq]I\[dq], \[dq]tr\[dq]); // true
\f[R]
.fi
.PP
The \f[V]localeCompare()\f[R] method enables string comparison in a
similar fashion as \f[V]strcmp()\f[R] \[em] it allows sorting strings in
a locale-aware manner.
.SS String primitives and String objects
.PP
Note that JavaScript distinguishes between \f[V]String\f[R] objects and
primitive string values.
(The same is true of \f[V]Boolean\f[R] and \f[V]Numbers\f[R].)
.PP
String literals (denoted by double or single quotes) and strings
returned from \f[V]String\f[R] calls in a non-constructor context (that
is, called without using the \f[V]new\f[R] keyword) are primitive
strings.
In contexts where a method is to be invoked on a primitive string or a
property lookup occurs, JavaScript will automatically wrap the string
primitive and call the method or perform the property lookup on the
wrapper object instead.
.IP
.nf
\f[C]
const strPrim = \[dq]foo\[dq]; // A literal is a string primitive
const strPrim2 = String(1); // Coerced into the string primitive \[dq]1\[dq]
const strPrim3 = String(true); // Coerced into the string primitive \[dq]true\[dq]
const strObj = new String(strPrim); // String with new returns a string wrapper object.

console.log(typeof strPrim); // \[dq]string\[dq]
console.log(typeof strPrim2); // \[dq]string\[dq]
console.log(typeof strPrim3); // \[dq]string\[dq]
console.log(typeof strObj); // \[dq]object\[dq]
\f[R]
.fi
.RS
.PP
\f[B]Warning:\f[R] You should rarely find yourself using
\f[V]String\f[R] as a constructor.
.RE
.PP
String primitives and \f[V]String\f[R] objects also give different
results when using \f[V]eval()\f[R].
Primitives passed to \f[V]eval\f[R] are treated as source code;
\f[V]String\f[R] objects are treated as all other objects are, by
returning the object.
For example:
.IP
.nf
\f[C]
const s1 = \[dq]2 + 2\[dq]; // creates a string primitive
const s2 = new String(\[dq]2 + 2\[dq]); // creates a String object
console.log(eval(s1)); // returns the number 4
console.log(eval(s2)); // returns the string \[dq]2 + 2\[dq]
\f[R]
.fi
.PP
For these reasons, the code may break when it encounters
\f[V]String\f[R] objects when it expects a primitive string instead,
although generally, authors need not worry about the distinction.
.PP
A \f[V]String\f[R] object can always be converted to its primitive
counterpart with the \f[V]valueOf()\f[R] method.
.IP
.nf
\f[C]
console.log(eval(s2.valueOf())); // returns the number 4
\f[R]
.fi
.SS String coercion
.PP
Many built-in operations that expect strings first coerce their
arguments to strings (which is largely why \f[V]String\f[R] objects
behave similarly to string primitives).
The operation (https://tc39.es/ecma262/#sec-tostring) can be summarized
as follows:
.IP \[bu] 2
Strings are returned as-is.
.IP \[bu] 2
\f[V]undefined\f[R] turns into \f[V]\[dq]undefined\[dq]\f[R].
.IP \[bu] 2
\f[V]null\f[R] turns into \f[V]\[dq]null\[dq]\f[R].
.IP \[bu] 2
\f[V]true\f[R] turns into \f[V]\[dq]true\[dq]\f[R]; \f[V]false\f[R]
turns into \f[V]\[dq]false\[dq]\f[R].
.IP \[bu] 2
Numbers are converted with the same algorithm as \f[V]toString(10)\f[R].
.IP \[bu] 2
BigInts are converted with the same algorithm as \f[V]toString(10)\f[R].
.IP \[bu] 2
Symbols throw a \f[V]TypeError\f[R].
.IP \[bu] 2
Objects are first converted to a primitive by calling its
\f[V][\[at]\[at]toPrimitive]()\f[R] (with \f[V]\[dq]string\[dq]\f[R] as
hint), \f[V]toString()\f[R], and \f[V]valueOf()\f[R] methods, in that
order.
The resulting primitive is then converted to a string.
.PP
There are several ways to achieve nearly the same effect in JavaScript.
.IP \[bu] 2
Template literal: \f[V]\[ga]${x}\[ga]\f[R] does exactly the string
coercion steps explained above for the embedded expression.
.IP \[bu] 2
The \f[V]String()\f[R] function: \f[V]String(x)\f[R] uses the same
algorithm to convert \f[V]x\f[R], except that Symbols don\[cq]t throw a
\f[V]TypeError\f[R], but return \f[V]\[dq]Symbol(description)\[dq]\f[R],
where \f[V]description\f[R] is the description of the Symbol.
.IP \[bu] 2
Using the \f[V]+\f[R] operator: \f[V]\[dq]\[dq] + x\f[R] coerces its
operand to a \f[I]primitive\f[R] instead of a \f[I]string\f[R], and, for
some objects, has entirely different behaviors from normal string
coercion.
See its reference page for more details.
.PP
Depending on your use case, you may want to use \f[V]\[ga]${x}\[ga]\f[R]
(to mimic built-in behavior) or \f[V]String(x)\f[R] (to handle symbol
values without throwing an error), but you should not use
\f[V]\[dq]\[dq] + x\f[R].
.SS UTF-16 characters, Unicode code points, and grapheme clusters
.PP
Strings are represented fundamentally as sequences of UTF-16 code
units (https://en.wikipedia.org/wiki/UTF-16).
In UTF-16 encoding, every code unit is exact 16 bits long.
This means there are a maximum of 216, or 65536 possible characters
representable as single UTF-16 code units.
This character set is called the basic multilingual plane
(BMP) (https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane),
and includes the most common characters like the Latin, Greek, Cyrillic
alphabets, as well as many East Asian characters.
Each code unit can be written in a string with \f[V]\[rs]u\f[R] followed
by exactly four hex digits.
.PP
However, the entire Unicode character set is much, much bigger than
65536.
The extra characters are stored in UTF-16 as \f[I]surrogate pairs\f[R],
which are pairs of 16-bit code units that represent a single character.
To avoid ambiguity, the two parts of the pair must be between
\f[V]0xD800\f[R] and \f[V]0xDFFF\f[R], and these code units are not used
to encode single-code-unit characters.
(More precisely, high surrogates have values between \f[V]0xD800\f[R]
and \f[V]0xDBFF\f[R], inclusive, while low surrogates have values
between \f[V]0xDC00\f[R] and \f[V]0xDFFF\f[R], inclusive.)
Each Unicode character, comprised of one or two UTF-16 code units, is
also called a \f[I]Unicode code point\f[R].
Each Unicode code point can be written in a string with
\f[V]\[rs]u{xxxxxx}\f[R] where \f[V]xxxxxx\f[R] represents 1\[en]6 hex
digits.
.PP
A \[lq]lone surrogate\[rq] is a 16-bit code unit satisfying one of the
descriptions below:
.IP \[bu] 2
It is in the range \f[V]0xD800\f[R]\[en]\f[V]0xDBFF\f[R], inclusive
(i.e.\ is a high surrogate), but it is the last code unit in the string,
or the next code unit is not a low surrogate.
.IP \[bu] 2
It is in the range \f[V]0xDC00\f[R]\[en]\f[V]0xDFFF\f[R], inclusive
(i.e.\ is a low surrogate), but it is the first code unit in the string,
or the previous code unit is not a high surrogate.
.PP
Lone surrogates do not represent any Unicode character.
Although most JavaScript built-in methods handle them correctly because
they all work based on UTF-16 code units, lone surrogates are often not
valid values when interacting with other systems \[em] for example,
\f[V]encodeURI()\f[R] will throw a \f[V]URIError\f[R] for lone
surrogates, because URI encoding uses UTF-8 encoding, which does not
have any encoding for lone surrogates.
Strings not containing any lone surrogates are called
\f[I]well-formed\f[R] strings, and are safe to be used with functions
that do not deal with UTF-16 (such as \f[V]encodeURI()\f[R] or
\f[V]TextEncoder\f[R]).
You can check if a string is well-formed with the
\f[V]isWellFormed()\f[R] method, or sanitize lone surrogates with the
\f[V]toWellFormed()\f[R] method.
.PP
On top of Unicode characters, there are certain sequences of Unicode
characters that should be treated as one visual unit, known as a
\f[I]grapheme cluster\f[R].
The most common case is emojis: many emojis that have a range of
variations are actually formed by multiple emojis, usually joined by the
<ZWJ> (\f[V]U+200D\f[R]) character.
.PP
You must be careful which level of characters you are iterating on.
For example, \f[V]split(\[dq]\[dq])\f[R] will split by UTF-16 code units
and will separate surrogate pairs.
String indexes also refer to the index of each UTF-16 code unit.
On the other hand, \f[V]\[at]\[at]iterator()\f[R] iterates by Unicode
code points.
Iterating through grapheme clusters will require some custom code.
.IP
.nf
\f[C]
\[dq]😄\[dq].split(\[dq]\[dq]); // [\[aq]\[rs]ud83d\[aq], \[aq]\[rs]ude04\[aq]]; splits into two lone surrogates

// \[dq]Backhand Index Pointing Right: Dark Skin Tone\[dq]
[...\[dq]👉🏿\[dq]]; // [\[aq]👉\[aq], \[aq]🏿\[aq]]
// splits into the basic \[dq]Backhand Index Pointing Right\[dq] emoji and
// the \[dq]Dark skin tone\[dq] emoji

// \[dq]Family: Man, Boy\[dq]
[...\[dq]👨‍👦\[dq]]; // [ \[aq]👨\[aq], \[aq]‍\[aq], \[aq]👦\[aq] ]
// splits into the \[dq]Man\[dq] and \[dq]Boy\[dq] emoji, joined by a ZWJ

// The United Nations flag
[...\[dq]🇺🇳\[dq]]; // [ \[aq]🇺\[aq], \[aq]🇳\[aq] ]
// splits into two \[dq]region indicator\[dq] letters \[dq]U\[dq] and \[dq]N\[dq].
// All flag emojis are formed by joining two region indicator letters
\f[R]
.fi
.SH Constructor
.IP \[bu] 2
\f[V]String()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]String\f[R] object.
It performs type conversion when called as a function, rather than as a
constructor, which is usually more useful.
.RE
.SH Static methods
.IP \[bu] 2
\f[V]String.fromCharCode()\f[R]
.RS 2
.IP \[bu] 2
Returns a string created by using the specified sequence of Unicode
values.
.RE
.IP \[bu] 2
\f[V]String.fromCodePoint()\f[R]
.RS 2
.IP \[bu] 2
Returns a string created by using the specified sequence of code points.
.RE
.IP \[bu] 2
\f[V]String.raw()\f[R]
.RS 2
.IP \[bu] 2
Returns a string created from a raw template string.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]String.prototype\f[R] and shared by
all \f[V]String\f[R] instances.
.IP \[bu] 2
\f[V]String.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]String\f[R] instances, the initial value is the
\f[V]String\f[R] constructor.
.RE
.PP
These properties are own properties of each \f[V]String\f[R] instance.
.IP \[bu] 2
\f[V]length\f[R]
.RS 2
.IP \[bu] 2
Reflects the \f[V]length\f[R] of the string.
Read-only.
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]String.prototype.at()\f[R]
.RS 2
.IP \[bu] 2
Returns the character (exactly one UTF-16 code unit) at the specified
\f[V]index\f[R].
Accepts negative integers, which count back from the last string
character.
.RE
.IP \[bu] 2
\f[V]String.prototype.charAt()\f[R]
.RS 2
.IP \[bu] 2
Returns the character (exactly one UTF-16 code unit) at the specified
\f[V]index\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.charCodeAt()\f[R]
.RS 2
.IP \[bu] 2
Returns a number that is the UTF-16 code unit value at the given
\f[V]index\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.codePointAt()\f[R]
.RS 2
.IP \[bu] 2
Returns a nonnegative integer Number that is the code point value of the
UTF-16 encoded code point starting at the specified \f[V]pos\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.concat()\f[R]
.RS 2
.IP \[bu] 2
Combines the text of two (or more) strings and returns a new string.
.RE
.IP \[bu] 2
\f[V]String.prototype.endsWith()\f[R]
.RS 2
.IP \[bu] 2
Determines whether a string ends with the characters of the string
\f[V]searchString\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.includes()\f[R]
.RS 2
.IP \[bu] 2
Determines whether the calling string contains \f[V]searchString\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.indexOf()\f[R]
.RS 2
.IP \[bu] 2
Returns the index within the calling \f[V]String\f[R] object of the
first occurrence of \f[V]searchValue\f[R], or \f[V]-1\f[R] if not found.
.RE
.IP \[bu] 2
\f[V]String.prototype.isWellFormed()\f[R]
.RS 2
.IP \[bu] 2
Returns a boolean indicating whether this string contains any lone
surrogates.
.RE
.IP \[bu] 2
\f[V]String.prototype.lastIndexOf()\f[R]
.RS 2
.IP \[bu] 2
Returns the index within the calling \f[V]String\f[R] object of the last
occurrence of \f[V]searchValue\f[R], or \f[V]-1\f[R] if not found.
.RE
.IP \[bu] 2
\f[V]String.prototype.localeCompare()\f[R]
.RS 2
.IP \[bu] 2
Returns a number indicating whether the reference string
\f[V]compareString\f[R] comes before, after, or is equivalent to the
given string in sort order.
.RE
.IP \[bu] 2
\f[V]String.prototype.match()\f[R]
.RS 2
.IP \[bu] 2
Used to match regular expression \f[V]regexp\f[R] against a string.
.RE
.IP \[bu] 2
\f[V]String.prototype.matchAll()\f[R]
.RS 2
.IP \[bu] 2
Returns an iterator of all \f[V]regexp\f[R]\[cq]s matches.
.RE
.IP \[bu] 2
\f[V]String.prototype.normalize()\f[R]
.RS 2
.IP \[bu] 2
Returns the Unicode Normalization Form of the calling string value.
.RE
.IP \[bu] 2
\f[V]String.prototype.padEnd()\f[R]
.RS 2
.IP \[bu] 2
Pads the current string from the end with a given string and returns a
new string of the length \f[V]targetLength\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.padStart()\f[R]
.RS 2
.IP \[bu] 2
Pads the current string from the start with a given string and returns a
new string of the length \f[V]targetLength\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.repeat()\f[R]
.RS 2
.IP \[bu] 2
Returns a string consisting of the elements of the object repeated
\f[V]count\f[R] times.
.RE
.IP \[bu] 2
\f[V]String.prototype.replace()\f[R]
.RS 2
.IP \[bu] 2
Used to replace occurrences of \f[V]searchFor\f[R] using
\f[V]replaceWith\f[R].
\f[V]searchFor\f[R] may be a string or Regular Expression, and
\f[V]replaceWith\f[R] may be a string or function.
.RE
.IP \[bu] 2
\f[V]String.prototype.replaceAll()\f[R]
.RS 2
.IP \[bu] 2
Used to replace all occurrences of \f[V]searchFor\f[R] using
\f[V]replaceWith\f[R].
\f[V]searchFor\f[R] may be a string or Regular Expression, and
\f[V]replaceWith\f[R] may be a string or function.
.RE
.IP \[bu] 2
\f[V]String.prototype.search()\f[R]
.RS 2
.IP \[bu] 2
Search for a match between a regular expression \f[V]regexp\f[R] and the
calling string.
.RE
.IP \[bu] 2
\f[V]String.prototype.slice()\f[R]
.RS 2
.IP \[bu] 2
Extracts a section of a string and returns a new string.
.RE
.IP \[bu] 2
\f[V]String.prototype.split()\f[R]
.RS 2
.IP \[bu] 2
Returns an array of strings populated by splitting the calling string at
occurrences of the substring \f[V]sep\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.startsWith()\f[R]
.RS 2
.IP \[bu] 2
Determines whether the calling string begins with the characters of
string \f[V]searchString\f[R].
.RE
.IP \[bu] 2
\f[V]String.prototype.substr()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
Returns a portion of the string, starting at the specified index and
extending for a given number of characters afterwards.
.RE
.IP \[bu] 2
\f[V]String.prototype.substring()\f[R]
.RS 2
.IP \[bu] 2
Returns a new string containing characters of the calling string from
(or between) the specified index (or indices).
.RE
.IP \[bu] 2
\f[V]String.prototype.toLocaleLowerCase()\f[R]
.RS 2
.IP \[bu] 2
The characters within a string are converted to lowercase while
respecting the current locale.
.RS 2
.PP
For most languages, this will return the same as
\f[V]toLowerCase()\f[R].
.RE
.RE
.IP \[bu] 2
\f[V]String.prototype.toLocaleUpperCase()\f[R]
.RS 2
.IP \[bu] 2
The characters within a string are converted to uppercase while
respecting the current locale.
.RS 2
.PP
For most languages, this will return the same as
\f[V]toUpperCase()\f[R].
.RE
.RE
.IP \[bu] 2
\f[V]String.prototype.toLowerCase()\f[R]
.RS 2
.IP \[bu] 2
Returns the calling string value converted to lowercase.
.RE
.IP \[bu] 2
\f[V]String.prototype.toString()\f[R]
.RS 2
.IP \[bu] 2
Returns a string representing the specified object.
Overrides the \f[V]Object.prototype.toString()\f[R] method.
.RE
.IP \[bu] 2
\f[V]String.prototype.toUpperCase()\f[R]
.RS 2
.IP \[bu] 2
Returns the calling string value converted to uppercase.
.RE
.IP \[bu] 2
\f[V]String.prototype.toWellFormed()\f[R]
.RS 2
.IP \[bu] 2
Returns a string where all lone surrogates of this string are replaced
with the Unicode replacement character U+FFFD.
.RE
.IP \[bu] 2
\f[V]String.prototype.trim()\f[R]
.RS 2
.IP \[bu] 2
Trims whitespace from the beginning and end of the string.
.RE
.IP \[bu] 2
\f[V]String.prototype.trimEnd()\f[R]
.RS 2
.IP \[bu] 2
Trims whitespace from the end of the string.
.RE
.IP \[bu] 2
\f[V]String.prototype.trimStart()\f[R]
.RS 2
.IP \[bu] 2
Trims whitespace from the beginning of the string.
.RE
.IP \[bu] 2
\f[V]String.prototype.valueOf()\f[R]
.RS 2
.IP \[bu] 2
Returns the primitive value of the specified object.
Overrides the \f[V]Object.prototype.valueOf()\f[R] method.
.RE
.IP \[bu] 2
\f[V]String.prototype[\[at]\[at]iterator]()\f[R]
.RS 2
.IP \[bu] 2
Returns a new iterator object that iterates over the code points of a
String value, returning each code point as a String value.
.RE
.SS HTML wrapper methods
.RS
.PP
\f[B]Warning:\f[R] Deprecated.
Avoid these methods.
.PP
They are of limited use, as they are based on a very old HTML standard
and provide only a subset of the currently available HTML tags and
attributes.
Many of them create deprecated or non-standard markup today.
In addition, they do simple string concatenation without any validation
or sanitation, which makes them a potential security threat when
directly inserted using \f[V]innerHTML\f[R].
Use DOM APIs such as \f[V]document.createElement()\f[R] instead.
.RE
.IP \[bu] 2
\f[V]String.prototype.anchor()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<a name=\[dq]name\[dq]>\f[R] (hypertext target)
.RE
.IP \[bu] 2
\f[V]String.prototype.big()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<big>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.blink()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<blink>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.bold()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<b>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.fixed()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<tt>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.fontcolor()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<font color=\[dq]color\[dq]>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.fontsize()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<font size=\[dq]size\[dq]>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.italics()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<i>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.link()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<a href=\[dq]url\[dq]>\f[R] (link to URL)
.RE
.IP \[bu] 2
\f[V]String.prototype.small()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<small>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.strike()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<strike>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.sub()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<sub>\f[R]
.RE
.IP \[bu] 2
\f[V]String.prototype.sup()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
\f[V]<sup>\f[R]
.RE
.PP
Note that these methods do not check if the string itself contains HTML
tags, so it\[cq]s possible to create invalid HTML:
.IP
.nf
\f[C]
\[dq]</b>\[dq].bold(); // <b></b></b>
\f[R]
.fi
.PP
The only escaping they do is to replace \f[V]\[dq]\f[R] in the attribute
value (for \f[V]anchor()\f[R], \f[V]fontcolor()\f[R],
\f[V]fontsize()\f[R], and \f[V]link()\f[R]) with \f[V]&quot;\f[R].
.IP
.nf
\f[C]
\[dq]foo\[dq].anchor(\[aq]\[dq]Hello\[dq]\[aq]); // <a name=\[dq]&quot;Hello&quot;\[dq]>foo</a>
\f[R]
.fi
.SH Examples
.SS String conversion
.PP
It\[cq]s possible to use \f[V]String\f[R] as a more reliable
\f[V]toString()\f[R] alternative, as it works when used on
\f[V]null\f[R] and \f[V]undefined\f[R].
For example:
.IP
.nf
\f[C]
const nullVar = null;
nullVar.toString(); // TypeError: nullVar is null
String(nullVar); // \[dq]null\[dq]

const undefinedVar = undefined;
undefinedVar.toString(); // TypeError: undefinedVar is undefined
String(undefinedVar); // \[dq]undefined\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Text formatting in the JavaScript Guide
.IP \[bu] 2
\f[V]RegExp\f[R]
