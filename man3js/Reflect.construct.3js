.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.construct" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Reflect.construct()\f[B]\f[R] static method is like the
\f[V]new\f[R] operator, but as a function.
It is equivalent to calling \f[V]new target(...args)\f[R].
It gives also the added option to specify a different
\f[V]new.target\f[R] value.
.SH Syntax
.IP
.nf
\f[C]
Reflect.construct(target, argumentsList)
Reflect.construct(target, argumentsList, newTarget)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
The target function to call.
.RE
.IP \[bu] 2
\f[V]argumentsList\f[R]
.RS 2
.IP \[bu] 2
An array-like object specifying the arguments with which
\f[V]target\f[R] should be called.
.RE
.IP \[bu] 2
\f[V]newTarget\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
The value of \f[V]new.target\f[R] operator, which usually specifies the
prototype of the returned object.
If \f[V]newTarget\f[R] is not present, its value defaults to
\f[V]target\f[R].
.RE
.SS Return value
.PP
A new instance of \f[V]target\f[R] (or \f[V]newTarget\f[R], if present),
initialized by \f[V]target\f[R] as a constructor with the given
\f[V]argumentsList\f[R].
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]target\f[R] or \f[V]newTarget\f[R] is not a constructor,
or if \f[V]argumentsList\f[R] is not an object.
.RE
.SH Description
.PP
\f[V]Reflect.apply()\f[R] provides the reflective semantic of a
constructor call.
That is, \f[V]Reflect.construct(target, argumentsList, newTarget)\f[R]
is semantically equivalent to:
.IP
.nf
\f[C]
new target(...argumentsList);
\f[R]
.fi
.PP
Note that when using the \f[V]new\f[R] operator, \f[V]target\f[R] and
\f[V]newTarget\f[R] are always the same constructor \[em] but
\f[V]Reflect.construct()\f[R] allows you to pass a different
\f[V]new.target\f[R] value.
Conceptually, \f[V]newTarget\f[R] is the function on which \f[V]new\f[R]
was called, and \f[V]newTarget.prototype\f[R] will become the
constructed object\[cq]s prototype, while \f[V]target\f[R] is the
constructor that is actually executed to initialize the object.
For example, \f[V]new.target\f[R] may also be different from the
currently executed constructor in class inheritance.
.IP
.nf
\f[C]
class A {
  constructor() {
    console.log(new.target.name);
  }
}
class B extends A {}

new B(); // \[dq]B\[dq]
\f[R]
.fi
.PP
\f[V]Reflect.construct()\f[R] allows you to invoke a constructor with a
variable number of arguments.
(This is also possible with the spread syntax in a normal constructor
call.)
.IP
.nf
\f[C]
const obj = new Foo(...args);
const obj = Reflect.construct(Foo, args);
\f[R]
.fi
.PP
\f[V]Reflect.construct()\f[R] invokes the \f[V][[Construct]]\f[R] object
internal method of \f[V]target\f[R].
.SH Examples
.SS Using Reflect.construct()
.IP
.nf
\f[C]
const d = Reflect.construct(Date, [1776, 6, 4]);
d instanceof Date; // true
d.getFullYear(); // 1776
\f[R]
.fi
.SS Reflect.construct() vs.\ Object.create()
.PP
Prior to the introduction of \f[V]Reflect\f[R], objects could be
constructed using an arbitrary combination of constructors and
prototypes using \f[V]Object.create()\f[R].
.IP
.nf
\f[C]
function OneClass() {
  this.name = \[dq]one\[dq];
}

function OtherClass() {
  this.name = \[dq]other\[dq];
}

const obj2 = Object.create(OtherClass.prototype);
OneClass.apply(obj2, args);

console.log(obj1.name); // \[aq]one\[aq]
console.log(obj2.name); // \[aq]one\[aq]

console.log(obj1 instanceof OneClass); // false
console.log(obj2 instanceof OneClass); // false

console.log(obj1 instanceof OtherClass); // true
console.log(obj2 instanceof OtherClass); // true

// Another example to demonstrate below:

function func1(a, b, c, d) {
  console.log(arguments[3]);
}

function func2(d, e, f, g) {
  console.log(arguments[3]);
}

const obj1 = Reflect.construct(func1, [\[dq]I\[dq], \[dq]Love\[dq], \[dq]my\[dq], \[dq]country\[dq]]);
\f[R]
.fi
.PP
However, while the end result is the same, there is one important
difference in the process.
When using \f[V]Object.create()\f[R] and
\f[V]Function.prototype.apply()\f[R], the \f[V]new.target\f[R] operator
will point to \f[V]undefined\f[R] within the function used as the
constructor, since the \f[V]new\f[R] keyword is not being used to create
the object.
(In fact, it uses the \f[V]apply\f[R] semantic, not \f[V]construct\f[R],
although normal functions happen to operate nearly the same.)
.PP
When invoking \f[V]Reflect.construct()\f[R], on the other hand, the
\f[V]new.target\f[R] operator will point to the \f[V]newTarget\f[R]
parameter if supplied, or \f[V]target\f[R] if not.
.IP
.nf
\f[C]
function OneClass() {
  console.log(\[dq]OneClass\[dq]);
  console.log(new.target);
}
function OtherClass() {
  console.log(\[dq]OtherClass\[dq]);
  console.log(new.target);
}

const obj1 = Reflect.construct(OneClass, args);
// Logs:
// OneClass
// function OneClass { ... }

const obj2 = Reflect.construct(OneClass, args, OtherClass);
// Logs:
// OneClass
// function OtherClass { ... }

const obj3 = Object.create(OtherClass.prototype);
OneClass.apply(obj3, args);
// Output:
//     OneClass
//     undefined
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Reflect.construct\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]new\f[R]
.IP \[bu] 2
\f[V]new.target\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]construct\f[R] handler
