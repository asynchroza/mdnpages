'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Array\f[B]\f[R] object, as with arrays in other
programming languages, enables storing a collection of multiple items
under a single variable name, and has members for performing common
array operations.
.SH Description
.PP
In JavaScript, arrays aren\[cq]t primitives but are instead
\f[V]Array\f[R] objects with the following core characteristics:
.IP \[bu] 2
\f[B]JavaScript arrays are resizable\f[R] and \f[B]can contain a mix of
different data types\f[R].
(When those characteristics are undesirable, use typed arrays instead.)
.IP \[bu] 2
\f[B]JavaScript arrays are not associative arrays\f[R] and so, array
elements cannot be accessed using arbitrary strings as indexes, but must
be accessed using nonnegative integers (or their respective string form)
as indexes.
.IP \[bu] 2
\f[B]JavaScript arrays are
zero-indexed (https://en.wikipedia.org/wiki/Zero-based_numbering)\f[R]:
the first element of an array is at index \f[V]0\f[R], the second is at
index \f[V]1\f[R], and so on \[em] and the last element is at the value
of the array\[cq]s \f[V]length\f[R] property minus \f[V]1\f[R].
.IP \[bu] 2
\f[B]JavaScript array-copy operations create shallow copies\f[R].
(All standard built-in copy operations with \f[I]any\f[R] JavaScript
objects create shallow copies, rather than deep copies).
.SS Array indices
.PP
\f[V]Array\f[R] objects cannot use arbitrary strings as element indexes
(as in an associative
array (https://en.wikipedia.org/wiki/Associative_array)) but must use
nonnegative integers (or their respective string form).
Setting or accessing via non-integers will not set or retrieve an
element from the array list itself, but will set or access a variable
associated with that array\[cq]s object property collection.
The array\[cq]s object properties and list of array elements are
separate, and the array\[cq]s traversal and mutation operations cannot
be applied to these named properties.
.PP
Array elements are object properties in the same way that
\f[V]toString\f[R] is a property (to be specific, however,
\f[V]toString()\f[R] is a method).
Nevertheless, trying to access an element of an array as follows throws
a syntax error because the property name is not valid:
.PP
\f[B]Bad\f[R]
.IP
.nf
\f[C]
console.log(arr.0); // a syntax error
\f[R]
.fi
.PP
JavaScript syntax requires properties beginning with a digit to be
accessed using bracket notation instead of dot notation.
It\[cq]s also possible to quote the array indices (e.g.,
\f[V]years[\[aq]2\[aq]]\f[R] instead of \f[V]years[2]\f[R]), although
usually not necessary.
.PP
The \f[V]2\f[R] in \f[V]years[2]\f[R] is coerced into a string by the
JavaScript engine through an implicit \f[V]toString\f[R] conversion.
As a result, \f[V]\[aq]2\[aq]\f[R] and \f[V]\[aq]02\[aq]\f[R] would
refer to two different slots on the \f[V]years\f[R] object, and the
following example could be \f[V]true\f[R]:
.IP
.nf
\f[C]
console.log(years[\[dq]2\[dq]] !== years[\[dq]02\[dq]]);
\f[R]
.fi
.PP
Only \f[V]years[\[aq]2\[aq]]\f[R] is an actual array index.
\f[V]years[\[aq]02\[aq]]\f[R] is an arbitrary string property that will
not be visited in array iteration.
.SS Relationship between length and numerical properties
.PP
A JavaScript array\[cq]s \f[V]length\f[R] property and numerical
properties are connected.
.PP
Several of the built-in array methods (e.g., \f[V]join()\f[R],
\f[V]slice()\f[R], \f[V]indexOf()\f[R], etc.)
take into account the value of an array\[cq]s \f[V]length\f[R] property
when they\[cq]re called.
.PP
Other methods (e.g., \f[V]push()\f[R], \f[V]splice()\f[R], etc.)
also result in updates to an array\[cq]s \f[V]length\f[R] property.
.IP
.nf
\f[C]
const fruits = [];
fruits.push(\[dq]banana\[dq], \[dq]apple\[dq], \[dq]peach\[dq]);
console.log(fruits.length); // 3
\f[R]
.fi
.PP
When setting a property on a JavaScript array when the property is a
valid array index and that index is outside the current bounds of the
array, the engine will update the array\[cq]s \f[V]length\f[R] property
accordingly:
.IP
.nf
\f[C]
fruits[5] = \[dq]mango\[dq];
console.log(fruits[5]); // \[aq]mango\[aq]
console.log(Object.keys(fruits)); // [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq], \[aq]5\[aq]]
console.log(fruits.length); // 6
\f[R]
.fi
.PP
Increasing the \f[V]length\f[R].
.IP
.nf
\f[C]
fruits.length = 10;
console.log(fruits); // [\[aq]banana\[aq], \[aq]apple\[aq], \[aq]peach\[aq], empty x 2, \[aq]mango\[aq], empty x 4]
console.log(Object.keys(fruits)); // [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq], \[aq]5\[aq]]
console.log(fruits.length); // 10
console.log(fruits[8]); // undefined
\f[R]
.fi
.PP
Decreasing the \f[V]length\f[R] property does, however, delete elements.
.IP
.nf
\f[C]
fruits.length = 2;
console.log(Object.keys(fruits)); // [\[aq]0\[aq], \[aq]1\[aq]]
console.log(fruits.length); // 2
\f[R]
.fi
.PP
This is explained further on the \f[V]Array/length\f[R] page.
.SS Array methods and empty slots
.PP
Empty slots in sparse arrays behave inconsistently between array
methods.
Generally, the older methods will skip empty slots, while newer ones
treat them as \f[V]undefined\f[R].
.PP
Among methods that iterate through multiple elements, the following do
an \f[V]in\f[R] check before accessing the index and do not conflate
empty slots with \f[V]undefined\f[R]:
.IP \[bu] 2
\f[V]concat()\f[R]
.IP \[bu] 2
\f[V]copyWithin()\f[R]
.IP \[bu] 2
\f[V]every()\f[R]
.IP \[bu] 2
\f[V]filter()\f[R]
.IP \[bu] 2
\f[V]flat()\f[R]
.IP \[bu] 2
\f[V]flatMap()\f[R]
.IP \[bu] 2
\f[V]forEach()\f[R]
.IP \[bu] 2
\f[V]indexOf()\f[R]
.IP \[bu] 2
\f[V]lastIndexOf()\f[R]
.IP \[bu] 2
\f[V]map()\f[R]
.IP \[bu] 2
\f[V]reduce()\f[R]
.IP \[bu] 2
\f[V]reduceRight()\f[R]
.IP \[bu] 2
\f[V]reverse()\f[R]
.IP \[bu] 2
\f[V]slice()\f[R]
.IP \[bu] 2
\f[V]some()\f[R]
.IP \[bu] 2
\f[V]sort()\f[R]
.IP \[bu] 2
\f[V]splice()\f[R]
.PP
For exactly how they treat empty slots, see the page for each method.
.PP
These methods treat empty slots as if they are \f[V]undefined\f[R]:
.IP \[bu] 2
\f[V]entries()\f[R]
.IP \[bu] 2
\f[V]fill()\f[R]
.IP \[bu] 2
\f[V]find()\f[R]
.IP \[bu] 2
\f[V]findIndex()\f[R]
.IP \[bu] 2
\f[V]findLast()\f[R]
.IP \[bu] 2
\f[V]findLastIndex()\f[R]
.IP \[bu] 2
\f[V]group()\f[R] \f[I](experimental)\f[R]
.IP \[bu] 2
\f[V]groupToMap()\f[R] \f[I](experimental)\f[R]
.IP \[bu] 2
\f[V]includes()\f[R]
.IP \[bu] 2
\f[V]join()\f[R]
.IP \[bu] 2
\f[V]keys()\f[R]
.IP \[bu] 2
\f[V]toLocaleString()\f[R]
.IP \[bu] 2
\f[V]values()\f[R]
.SS Copying methods and mutating methods
.PP
Some methods do not mutate the existing array that the method was called
on, but instead return a new array.
They do so by first constructing a new array and then populating it with
elements.
The copy always happens \f[I]shallowly\f[R] \[em] the method never
copies anything beyond the initially created array.
Elements of the original array(s) are copied into the new array as
follows:
.IP \[bu] 2
Objects: the object reference is copied into the new array.
Both the original and new array refer to the same object.
That is, if a referenced object is modified, the changes are visible to
both the new and original arrays.
.IP \[bu] 2
Primitive types such as strings, numbers and booleans (not
\f[V]String\f[R], \f[V]Number\f[R], and \f[V]Boolean\f[R] objects):
their values are copied into the new array.
.PP
Other methods mutate the array that the method was called on, in which
case their return value differs depending on the method: sometimes a
reference to the same array, sometimes the length of the new array.
.PP
The following methods create new arrays by accessing
\f[V]this.constructor[Symbol.species]\f[R] to determine the constructor
to use:
.IP \[bu] 2
\f[V]concat()\f[R]
.IP \[bu] 2
\f[V]filter()\f[R]
.IP \[bu] 2
\f[V]flat()\f[R]
.IP \[bu] 2
\f[V]flatMap()\f[R]
.IP \[bu] 2
\f[V]map()\f[R]
.IP \[bu] 2
\f[V]slice()\f[R]
.IP \[bu] 2
\f[V]splice()\f[R] (to construct the array of removed elements
that\[cq]s returned)
.PP
The following methods always create new arrays with the \f[V]Array\f[R]
base constructor:
.IP \[bu] 2
\f[V]toReversed()\f[R]
.IP \[bu] 2
\f[V]toSorted()\f[R]
.IP \[bu] 2
\f[V]toSpliced()\f[R]
.IP \[bu] 2
\f[V]with()\f[R]
.PP
\f[V]group()\f[R] and \f[V]groupToMap()\f[R] do not use
\f[V]\[at]\[at]species\f[R] to create new arrays for each group entry,
but always use the plain \f[V]Array\f[R] constructor.
Conceptually, they are not copying methods either.
.PP
The following table lists the methods that mutate the original array,
and the corresponding non-mutating alternative:
.PP
.TS
tab(@);
lw(31.6n) lw(38.4n).
T{
Mutating method
T}@T{
Non-mutating alternative
T}
_
T{
\f[V]copyWithin()\f[R]
T}@T{
No one-method alternative
T}
T{
\f[V]fill()\f[R]
T}@T{
No one-method alternative
T}
T{
\f[V]pop()\f[R]
T}@T{
\f[V]slice(0, -1)\f[R]
T}
T{
\f[V]push(v1, v2)\f[R]
T}@T{
\f[V]concat([v1, v2])\f[R]
T}
T{
\f[V]reverse()\f[R]
T}@T{
\f[V]toReversed()\f[R]
T}
T{
\f[V]shift()\f[R]
T}@T{
\f[V]slice(1)\f[R]
T}
T{
\f[V]sort()\f[R]
T}@T{
\f[V]toSorted()\f[R]
T}
T{
\f[V]splice()\f[R]
T}@T{
\f[V]toSpliced()\f[R]
T}
T{
\f[V]unshift(v1, v2)\f[R]
T}@T{
\f[V]toSpliced(0, 0, v1, v2)\f[R]
T}
.TE
.PP
An easy way to change a mutating method into a non-mutating alternative
is to use the spread syntax or \f[V]slice()\f[R] to create a copy first:
.IP
.nf
\f[C]
arr.copyWithin(0, 1, 2); // mutates arr
const arr2 = arr.slice().copyWithin(0, 1, 2); // does not mutate arr
const arr3 = [...arr].copyWithin(0, 1, 2); // does not mutate arr
\f[R]
.fi
.SS Iterative methods
.PP
Many array methods take a callback function as an argument.
The callback function is called sequentially and at most once for each
element in the array, and the return value of the callback function is
used to determine the return value of the method.
They all share the same signature:
.IP
.nf
\f[C]
method(callbackFn, thisArg)
\f[R]
.fi
.PP
Where \f[V]callbackFn\f[R] takes three arguments:
.IP \[bu] 2
\f[V]element\f[R]
.RS 2
.IP \[bu] 2
The current element being processed in the array.
.RE
.IP \[bu] 2
\f[V]index\f[R]
.RS 2
.IP \[bu] 2
The index of the current element being processed in the array.
.RE
.IP \[bu] 2
\f[V]array\f[R]
.RS 2
.IP \[bu] 2
The array that the method was called upon.
.RE
.PP
What \f[V]callbackFn\f[R] is expected to return depends on the array
method that was called.
.PP
The \f[V]thisArg\f[R] argument (defaults to \f[V]undefined\f[R]) will be
used as the \f[V]this\f[R] value when calling \f[V]callbackFn\f[R].
The \f[V]this\f[R] value ultimately observable by \f[V]callbackFn\f[R]
is determined according to the usual rules: if \f[V]callbackFn\f[R] is
non-strict, primitive \f[V]this\f[R] values are wrapped into objects,
and \f[V]undefined\f[R]/\f[V]null\f[R] is substituted with
\f[V]globalThis\f[R].
The \f[V]thisArg\f[R] argument is irrelevant for any
\f[V]callbackFn\f[R] defined with an arrow function, as arrow functions
don\[cq]t have their own \f[V]this\f[R] binding.
.PP
All iterative methods are copying and generic, although they behave
differently with empty slots.
.PP
The following methods are iterative:
.IP \[bu] 2
\f[V]every()\f[R]
.IP \[bu] 2
\f[V]filter()\f[R]
.IP \[bu] 2
\f[V]find()\f[R]
.IP \[bu] 2
\f[V]findIndex()\f[R]
.IP \[bu] 2
\f[V]findLast()\f[R]
.IP \[bu] 2
\f[V]findLastIndex()\f[R]
.IP \[bu] 2
\f[V]flatMap()\f[R]
.IP \[bu] 2
\f[V]forEach()\f[R]
.IP \[bu] 2
\f[V]group()\f[R]
.IP \[bu] 2
\f[V]groupToMap()\f[R]
.IP \[bu] 2
\f[V]map()\f[R]
.IP \[bu] 2
\f[V]some()\f[R]
.PP
In particular, \f[V]every()\f[R], \f[V]find()\f[R],
\f[V]findIndex()\f[R], \f[V]findLast()\f[R], \f[V]findLastIndex()\f[R],
and \f[V]some()\f[R] do not always invoke \f[V]callbackFn\f[R] on every
element \[em] they stop iteration as soon as the return value is
determined.
.PP
There are two other methods that take a callback function and run it at
most once for each element in the array, but they have slightly
different signatures from typical iterative methods (for example, they
don\[cq]t accept \f[V]thisArg\f[R]):
.IP \[bu] 2
\f[V]reduce()\f[R]
.IP \[bu] 2
\f[V]reduceRight()\f[R]
.PP
The \f[V]sort()\f[R] method also takes a callback function, but it is
not an iterative method.
It mutates the array in-place, doesn\[cq]t accept \f[V]thisArg\f[R], and
may invoke the callback multiple times on an index.
.SS Generic array methods
.PP
Array methods are always generic \[em] they don\[cq]t access any
internal data of the array object.
They only access the array elements through the \f[V]length\f[R]
property and the indexed elements.
This means that they can be called on array-like objects as well.
.IP
.nf
\f[C]
const arrayLike = {
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  length: 2,
};
console.log(Array.prototype.join.call(arrayLike, \[dq]+\[dq])); // \[aq]a+b\[aq]
\f[R]
.fi
.SS Normalization of the length property
.PP
The \f[V]length\f[R] property is converted to an integer and then
clamped to the range between 0 and 253 - 1.
\f[V]NaN\f[R] becomes \f[V]0\f[R], so even when \f[V]length\f[R] is not
present or is \f[V]undefined\f[R], it behaves as if it has value
\f[V]0\f[R].
.PP
The language avoids setting \f[V]length\f[R] to an unsafe integer.
All built-in methods will throw a \f[V]TypeError\f[R] if
\f[V]length\f[R] will be set to a number greater than 253 - 1.
However, because the \f[V]length\f[R] property of arrays throws an error
if it\[cq]s set to greater than 232, the safe integer threshold is
usually not reached unless the method is called on a non-array object.
.IP
.nf
\f[C]
Array.prototype.flat.call({}); // []
\f[R]
.fi
.PP
Some array methods set the \f[V]length\f[R] property of the array
object.
They always set the value after normalization, so \f[V]length\f[R]
always ends as an integer.
.IP
.nf
\f[C]
const a = { length: 0.7 };
Array.prototype.push.call(a);
console.log(a.length); // 0
\f[R]
.fi
.SS Array-like objects
.PP
The term \f[I]array-like object\f[R] refers to any object that
doesn\[cq]t throw during the \f[V]length\f[R] conversion process
described above.
In practice, such object is expected to actually have a \f[V]length\f[R]
property and to have indexed elements in the range \f[V]0\f[R] to
\f[V]length - 1\f[R].
(If it doesn\[cq]t have all indices, it will be functionally equivalent
to a sparse array.)
.PP
Many DOM objects are array-like \[em] for example, \f[V]NodeList\f[R]
and \f[V]HTMLCollection\f[R].
The \f[V]arguments\f[R] object is also array-like.
You can call array methods on them even if they don\[cq]t have these
methods themselves.
.IP
.nf
\f[C]
function f() {
  console.log(Array.prototype.join.call(arguments, \[dq]+\[dq]));
}

f(\[dq]a\[dq], \[dq]b\[dq]); // \[aq]a+b\[aq]
\f[R]
.fi
.SH Constructor
.IP \[bu] 2
\f[V]Array()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Array\f[R] object.
.RE
.SH Static properties
.IP \[bu] 2
\f[V]Array[\[at]\[at]species]\f[R]
.RS 2
.IP \[bu] 2
Returns the \f[V]Array\f[R] constructor.
.RE
.SH Static methods
.IP \[bu] 2
\f[V]Array.from()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Array\f[R] instance from an iterable or array-like
object.
.RE
.IP \[bu] 2
\f[V]Array.fromAsync()\f[R] \f[I](experimental)\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Array\f[R] instance from an async iterable, iterable,
or array-like object.
.RE
.IP \[bu] 2
\f[V]Array.isArray()\f[R]
.RS 2
.IP \[bu] 2
Returns \f[V]true\f[R] if the argument is an array, or \f[V]false\f[R]
otherwise.
.RE
.IP \[bu] 2
\f[V]Array.of()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Array\f[R] instance with a variable number of
arguments, regardless of number or type of the arguments.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]Array.prototype\f[R] and shared by
all \f[V]Array\f[R] instances.
.IP \[bu] 2
\f[V]Array.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]Array\f[R] instances, the initial value is the \f[V]Array\f[R]
constructor.
.RE
.IP \[bu] 2
\f[V]Array.prototype[\[at]\[at]unscopables]\f[R]
.RS 2
.IP \[bu] 2
Contains property names that were not included in the ECMAScript
standard prior to the ES2015 version and that are ignored for
\f[V]with\f[R] statement-binding purposes.
.RE
.PP
These properties are own properties of each \f[V]Array\f[R] instance.
.IP \[bu] 2
\f[V]length\f[R]
.RS 2
.IP \[bu] 2
Reflects the number of elements in an array.
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]Array.prototype.at()\f[R]
.RS 2
.IP \[bu] 2
Returns the array item at the given index.
Accepts negative integers, which count back from the last item.
.RE
.IP \[bu] 2
\f[V]Array.prototype.concat()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array that is the calling array joined with other array(s)
and/or value(s).
.RE
.IP \[bu] 2
\f[V]Array.prototype.copyWithin()\f[R]
.RS 2
.IP \[bu] 2
Copies a sequence of array elements within an array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.entries()\f[R]
.RS 2
.IP \[bu] 2
Returns a new \f[I]array iterator\f[R] object that contains the
key/value pairs for each index in an array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.every()\f[R]
.RS 2
.IP \[bu] 2
Returns \f[V]true\f[R] if every element in the calling array satisfies
the testing function.
.RE
.IP \[bu] 2
\f[V]Array.prototype.fill()\f[R]
.RS 2
.IP \[bu] 2
Fills all the elements of an array from a start index to an end index
with a static value.
.RE
.IP \[bu] 2
\f[V]Array.prototype.filter()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array containing all elements of the calling array for
which the provided filtering function returns \f[V]true\f[R].
.RE
.IP \[bu] 2
\f[V]Array.prototype.find()\f[R]
.RS 2
.IP \[bu] 2
Returns the value of the first element in the array that satisfies the
provided testing function, or \f[V]undefined\f[R] if no appropriate
element is found.
.RE
.IP \[bu] 2
\f[V]Array.prototype.findIndex()\f[R]
.RS 2
.IP \[bu] 2
Returns the index of the first element in the array that satisfies the
provided testing function, or \f[V]-1\f[R] if no appropriate element was
found.
.RE
.IP \[bu] 2
\f[V]Array.prototype.findLast()\f[R]
.RS 2
.IP \[bu] 2
Returns the value of the last element in the array that satisfies the
provided testing function, or \f[V]undefined\f[R] if no appropriate
element is found.
.RE
.IP \[bu] 2
\f[V]Array.prototype.findLastIndex()\f[R]
.RS 2
.IP \[bu] 2
Returns the index of the last element in the array that satisfies the
provided testing function, or \f[V]-1\f[R] if no appropriate element was
found.
.RE
.IP \[bu] 2
\f[V]Array.prototype.flat()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array with all sub-array elements concatenated into it
recursively up to the specified depth.
.RE
.IP \[bu] 2
\f[V]Array.prototype.flatMap()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array formed by applying a given callback function to each
element of the calling array, and then flattening the result by one
level.
.RE
.IP \[bu] 2
\f[V]Array.prototype.forEach()\f[R]
.RS 2
.IP \[bu] 2
Calls a function for each element in the calling array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.group()\f[R] \f[I](experimental)\f[R]
.RS 2
.IP \[bu] 2
Groups the elements of an array into an object according to the strings
returned by a test function.
.RE
.IP \[bu] 2
\f[V]Array.prototype.groupToMap()\f[R] \f[I](experimental)\f[R]
.RS 2
.IP \[bu] 2
Groups the elements of an array into a \f[V]Map\f[R] according to values
returned by a test function.
.RE
.IP \[bu] 2
\f[V]Array.prototype.includes()\f[R]
.RS 2
.IP \[bu] 2
Determines whether the calling array contains a value, returning
\f[V]true\f[R] or \f[V]false\f[R] as appropriate.
.RE
.IP \[bu] 2
\f[V]Array.prototype.indexOf()\f[R]
.RS 2
.IP \[bu] 2
Returns the first (least) index at which a given element can be found in
the calling array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.join()\f[R]
.RS 2
.IP \[bu] 2
Joins all elements of an array into a string.
.RE
.IP \[bu] 2
\f[V]Array.prototype.keys()\f[R]
.RS 2
.IP \[bu] 2
Returns a new \f[I]array iterator\f[R] that contains the keys for each
index in the calling array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.lastIndexOf()\f[R]
.RS 2
.IP \[bu] 2
Returns the last (greatest) index at which a given element can be found
in the calling array, or \f[V]-1\f[R] if none is found.
.RE
.IP \[bu] 2
\f[V]Array.prototype.map()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array containing the results of invoking a function on
every element in the calling array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.pop()\f[R]
.RS 2
.IP \[bu] 2
Removes the last element from an array and returns that element.
.RE
.IP \[bu] 2
\f[V]Array.prototype.push()\f[R]
.RS 2
.IP \[bu] 2
Adds one or more elements to the end of an array, and returns the new
\f[V]length\f[R] of the array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.reduce()\f[R]
.RS 2
.IP \[bu] 2
Executes a user-supplied \[lq]reducer\[rq] callback function on each
element of the array (from left to right), to reduce it to a single
value.
.RE
.IP \[bu] 2
\f[V]Array.prototype.reduceRight()\f[R]
.RS 2
.IP \[bu] 2
Executes a user-supplied \[lq]reducer\[rq] callback function on each
element of the array (from right to left), to reduce it to a single
value.
.RE
.IP \[bu] 2
\f[V]Array.prototype.reverse()\f[R]
.RS 2
.IP \[bu] 2
Reverses the order of the elements of an array \f[I]in place\f[R].
(First becomes the last, last becomes first.)
.RE
.IP \[bu] 2
\f[V]Array.prototype.shift()\f[R]
.RS 2
.IP \[bu] 2
Removes the first element from an array and returns that element.
.RE
.IP \[bu] 2
\f[V]Array.prototype.slice()\f[R]
.RS 2
.IP \[bu] 2
Extracts a section of the calling array and returns a new array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.some()\f[R]
.RS 2
.IP \[bu] 2
Returns \f[V]true\f[R] if at least one element in the calling array
satisfies the provided testing function.
.RE
.IP \[bu] 2
\f[V]Array.prototype.sort()\f[R]
.RS 2
.IP \[bu] 2
Sorts the elements of an array in place and returns the array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.splice()\f[R]
.RS 2
.IP \[bu] 2
Adds and/or removes elements from an array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.toLocaleString()\f[R]
.RS 2
.IP \[bu] 2
Returns a localized string representing the calling array and its
elements.
Overrides the \f[V]Object.prototype.toLocaleString()\f[R] method.
.RE
.IP \[bu] 2
\f[V]Array.prototype.toReversed()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array with the elements in reversed order, without
modifying the original array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.toSorted()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array with the elements sorted in ascending order, without
modifying the original array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.toSpliced()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array with some elements removed and/or replaced at a
given index, without modifying the original array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.toString()\f[R]
.RS 2
.IP \[bu] 2
Returns a string representing the calling array and its elements.
Overrides the \f[V]Object.prototype.toString()\f[R] method.
.RE
.IP \[bu] 2
\f[V]Array.prototype.unshift()\f[R]
.RS 2
.IP \[bu] 2
Adds one or more elements to the front of an array, and returns the new
\f[V]length\f[R] of the array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.values()\f[R]
.RS 2
.IP \[bu] 2
Returns a new \f[I]array iterator\f[R] object that contains the values
for each index in the array.
.RE
.IP \[bu] 2
\f[V]Array.prototype.with()\f[R]
.RS 2
.IP \[bu] 2
Returns a new array with the element at the given index replaced with
the given value, without modifying the original array.
.RE
.IP \[bu] 2
\f[V]Array.prototype[\[at]\[at]iterator]()\f[R]
.RS 2
.IP \[bu] 2
An alias for the \f[V]values()\f[R] method by default.
.RE
.SH Examples
.PP
This section provides some examples of common array operations in
JavaScript.
.RS
.PP
\f[B]Note:\f[R] If you\[cq]re not yet familiar with array basics,
consider first reading JavaScript First Steps: Arrays, which explains
what arrays are, and includes other examples of common array operations.
.RE
.SS Create an array
.PP
This example shows three ways to create new array: first using array
literal notation, then using the \f[V]Array()\f[R] constructor, and
finally using \f[V]String.prototype.split()\f[R] to build the array from
a string.
.IP
.nf
\f[C]
// \[aq]fruits\[aq] array created using array literal notation.
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
console.log(fruits.length);
// 2

// \[aq]fruits2\[aq] array created using the Array() constructor.
const fruits2 = new Array(\[dq]Apple\[dq], \[dq]Banana\[dq]);
console.log(fruits2.length);
// 2

// \[aq]fruits3\[aq] array created using String.prototype.split().
const fruits3 = \[dq]Apple, Banana\[dq].split(\[dq], \[dq]);
console.log(fruits3.length);
// 2
\f[R]
.fi
.SS Create a string from an array
.PP
This example uses the \f[V]join()\f[R] method to create a string from
the \f[V]fruits\f[R] array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
const fruitsString = fruits.join(\[dq], \[dq]);
console.log(fruitsString);
// \[dq]Apple, Banana\[dq]
\f[R]
.fi
.SS Access an array item by its index
.PP
This example shows how to access items in the \f[V]fruits\f[R] array by
specifying the index number of their position in the array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];

// The index of an array\[aq]s first element is always 0.
fruits[0]; // Apple

// The index of an array\[aq]s second element is always 1.
fruits[1]; // Banana

// The index of an array\[aq]s last element is always one
// less than the length of the array.
fruits[fruits.length - 1]; // Banana

// Using an index number larger than the array\[aq]s length
// returns \[aq]undefined\[aq].
fruits[99]; // undefined
\f[R]
.fi
.SS Find the index of an item in an array
.PP
This example uses the \f[V]indexOf()\f[R] method to find the position
(index) of the string \f[V]\[dq]Banana\[dq]\f[R] in the \f[V]fruits\f[R]
array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
console.log(fruits.indexOf(\[dq]Banana\[dq]));
// 1
\f[R]
.fi
.SS Check if an array contains a certain item
.PP
This example shows two ways to check if the \f[V]fruits\f[R] array
contains \f[V]\[dq]Banana\[dq]\f[R] and \f[V]\[dq]Cherry\[dq]\f[R]:
first with the \f[V]includes()\f[R] method, and then with the
\f[V]indexOf()\f[R] method to test for an index value that\[cq]s not
\f[V]-1\f[R].
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];

fruits.includes(\[dq]Banana\[dq]); // true
fruits.includes(\[dq]Cherry\[dq]); // false

// If indexOf() doesn\[aq]t return -1, the array contains the given item.
fruits.indexOf(\[dq]Banana\[dq]) !== -1; // true
fruits.indexOf(\[dq]Cherry\[dq]) !== -1; // false
\f[R]
.fi
.SS Append an item to an array
.PP
This example uses the \f[V]push()\f[R] method to append a new string to
the \f[V]fruits\f[R] array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
const newLength = fruits.push(\[dq]Orange\[dq]);
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Orange\[dq]]
console.log(newLength);
// 3
\f[R]
.fi
.SS Remove the last item from an array
.PP
This example uses the \f[V]pop()\f[R] method to remove the last item
from the \f[V]fruits\f[R] array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Orange\[dq]];
const removedItem = fruits.pop();
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Banana\[dq]]
console.log(removedItem);
// Orange
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]pop()\f[R] can only be used to remove the last item
from an array.
To remove multiple items from the end of an array, see the next example.
.RE
.SS Remove multiple items from the end of an array
.PP
This example uses the \f[V]splice()\f[R] method to remove the last 3
items from the \f[V]fruits\f[R] array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
const start = -3;
const removedItems = fruits.splice(start);
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Banana\[dq]]
console.log(removedItems);
// [\[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]
\f[R]
.fi
.SS Truncate an array down to just its first N items
.PP
This example uses the \f[V]splice()\f[R] method to truncate the
\f[V]fruits\f[R] array down to just its first 2 items.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
const start = 2;
const removedItems = fruits.splice(start);
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Banana\[dq]]
console.log(removedItems);
// [\[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]
\f[R]
.fi
.SS Remove the first item from an array
.PP
This example uses the \f[V]shift()\f[R] method to remove the first item
from the \f[V]fruits\f[R] array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
const removedItem = fruits.shift();
console.log(fruits);
// [\[dq]Banana\[dq]]
console.log(removedItem);
// Apple
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]shift()\f[R] can only be used to remove the first
item from an array.
To remove multiple items from the beginning of an array, see the next
example.
.RE
.SS Remove multiple items from the beginning of an array
.PP
This example uses the \f[V]splice()\f[R] method to remove the first 3
items from the \f[V]fruits\f[R] array.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Strawberry\[dq], \[dq]Cherry\[dq], \[dq]Banana\[dq], \[dq]Mango\[dq]];
const start = 0;
const deleteCount = 3;
const removedItems = fruits.splice(start, deleteCount);
console.log(fruits);
// [\[dq]Banana\[dq], \[dq]Mango\[dq]]
console.log(removedItems);
// [\[dq]Apple\[dq], \[dq]Strawberry\[dq], \[dq]Cherry\[dq]]
\f[R]
.fi
.SS Add a new first item to an array
.PP
This example uses the \f[V]unshift()\f[R] method to add, at index
\f[V]0\f[R], a new item to the \f[V]fruits\f[R] array \[em] making it
the new first item in the array.
.IP
.nf
\f[C]
const fruits = [\[dq]Banana\[dq], \[dq]Mango\[dq]];
const newLength = fruits.unshift(\[dq]Strawberry\[dq]);
console.log(fruits);
// [\[dq]Strawberry\[dq], \[dq]Banana\[dq], \[dq]Mango\[dq]]
console.log(newLength);
// 3
\f[R]
.fi
.SS Remove a single item by index
.PP
This example uses the \f[V]splice()\f[R] method to remove the string
\f[V]\[dq]Banana\[dq]\f[R] from the \f[V]fruits\f[R] array \[em] by
specifying the index position of \f[V]\[dq]Banana\[dq]\f[R].
.IP
.nf
\f[C]
const fruits = [\[dq]Strawberry\[dq], \[dq]Banana\[dq], \[dq]Mango\[dq]];
const start = fruits.indexOf(\[dq]Banana\[dq]);
const deleteCount = 1;
const removedItems = fruits.splice(start, deleteCount);
console.log(fruits);
// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]
console.log(removedItems);
// [\[dq]Banana\[dq]]
\f[R]
.fi
.SS Remove multiple items by index
.PP
This example uses the \f[V]splice()\f[R] method to remove the strings
\f[V]\[dq]Banana\[dq]\f[R] and \f[V]\[dq]Strawberry\[dq]\f[R] from the
\f[V]fruits\f[R] array \[em] by specifying the index position of
\f[V]\[dq]Banana\[dq]\f[R], along with a count of the number of total
items to remove.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq]];
const start = 1;
const deleteCount = 2;
const removedItems = fruits.splice(start, deleteCount);
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Mango\[dq]]
console.log(removedItems);
// [\[dq]Banana\[dq], \[dq]Strawberry\[dq]]
\f[R]
.fi
.SS Replace multiple items in an array
.PP
This example uses the \f[V]splice()\f[R] method to replace the last 2
items in the \f[V]fruits\f[R] array with new items.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq]];
const start = -2;
const deleteCount = 2;
const removedItems = fruits.splice(start, deleteCount, \[dq]Mango\[dq], \[dq]Cherry\[dq]);
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]
console.log(removedItems);
// [\[dq]Banana\[dq], \[dq]Strawberry\[dq]]
\f[R]
.fi
.SS Iterate over an array
.PP
This example uses a \f[V]for...of\f[R] loop to iterate over the
\f[V]fruits\f[R] array, logging each item to the console.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
for (const fruit of fruits) {
  console.log(fruit);
}
// Apple
// Mango
// Cherry
\f[R]
.fi
.PP
But \f[V]for...of\f[R] is just one of many ways to iterate over any
array; for more ways, see Loops and iteration, and see the documentation
for the \f[V]every()\f[R], \f[V]filter()\f[R], \f[V]flatMap()\f[R],
\f[V]map()\f[R], \f[V]reduce()\f[R], and \f[V]reduceRight()\f[R] methods
\[em] and see the next example, which uses the \f[V]forEach()\f[R]
method.
.SS Call a function on each element in an array
.PP
This example uses the \f[V]forEach()\f[R] method to call a function on
each element in the \f[V]fruits\f[R] array; the function causes each
item to be logged to the console, along with the item\[cq]s index
number.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
fruits.forEach((item, index, array) => {
  console.log(item, index);
});
// Apple 0
// Mango 1
// Cherry 2
\f[R]
.fi
.SS Merge multiple arrays together
.PP
This example uses the \f[V]concat()\f[R] method to merge the
\f[V]fruits\f[R] array with a \f[V]moreFruits\f[R] array, to produce a
new \f[V]combinedFruits\f[R] array.
Notice that \f[V]fruits\f[R] and \f[V]moreFruits\f[R] remain unchanged.
.IP
.nf
\f[C]
const fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq]];
const moreFruits = [\[dq]Mango\[dq], \[dq]Cherry\[dq]];
const combinedFruits = fruits.concat(moreFruits);
console.log(combinedFruits);
// [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]

// The \[aq]fruits\[aq] array remains unchanged.
console.log(fruits);
// [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq]]

// The \[aq]moreFruits\[aq] array also remains unchanged.
console.log(moreFruits);
// [\[dq]Mango\[dq], \[dq]Cherry\[dq]]
\f[R]
.fi
.SS Copy an array
.PP
This example shows three ways to create a new array from the existing
\f[V]fruits\f[R] array: first by using spread syntax, then by using the
\f[V]from()\f[R] method, and then by using the \f[V]slice()\f[R] method.
.IP
.nf
\f[C]
const fruits = [\[dq]Strawberry\[dq], \[dq]Mango\[dq]];

// Create a copy using spread syntax.
const fruitsCopy = [...fruits];
// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]

// Create a copy using the from() method.
const fruitsCopy2 = Array.from(fruits);
// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]

// Create a copy using the slice() method.
const fruitsCopy3 = fruits.slice();
// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]
\f[R]
.fi
.PP
All built-in array-copy operations (spread syntax,
\f[V]Array.from()\f[R], \f[V]Array.prototype.slice()\f[R], and
\f[V]Array.prototype.concat()\f[R]) create shallow copies.
If you instead want a deep copy of an array, you can use
\f[V]JSON.stringify()\f[R] to convert the array to a JSON string, and
then \f[V]JSON.parse()\f[R] to convert the string back into a new array
that\[cq]s completely independent from the original array.
.IP
.nf
\f[C]
const fruitsDeepCopy = JSON.parse(JSON.stringify(fruits));
\f[R]
.fi
.PP
You can also create deep copies using the \f[V]structuredClone()\f[R]
method, which has the advantage of allowing transferable objects in the
source to be \f[I]transferred\f[R] to the new copy, rather than just
cloned.
.PP
Finally, it\[cq]s important to understand that assigning an existing
array to a new variable doesn\[cq]t create a copy of either the array or
its elements.
Instead the new variable is just a reference, or alias, to the original
array; that is, the original array\[cq]s name and the new variable name
are just two names for the exact same object (and so will always
evaluate as strictly equivalent).
Therefore, if you make any changes at all either to the value of the
original array or to the value of the new variable, the other will
change, too:
.IP
.nf
\f[C]
const fruits = [\[dq]Strawberry\[dq], \[dq]Mango\[dq]];
const fruitsAlias = fruits;
// \[aq]fruits\[aq] and \[aq]fruitsAlias\[aq] are the same object, strictly equivalent.
fruits === fruitsAlias; // true
// Any changes to the \[aq]fruits\[aq] array change \[aq]fruitsAlias\[aq] too.
fruits.unshift(\[dq]Apple\[dq], \[dq]Banana\[dq]);
console.log(fruits);
// [\[aq]Apple\[aq], \[aq]Banana\[aq], \[aq]Strawberry\[aq], \[aq]Mango\[aq]]
console.log(fruitsAlias);
// [\[aq]Apple\[aq], \[aq]Banana\[aq], \[aq]Strawberry\[aq], \[aq]Mango\[aq]]
\f[R]
.fi
.SS Grouping the elements of an array
.PP
The \f[V]Array.prototype.group()\f[R] methods can be used to group the
elements of an array, using a test function that returns a string
indicating the group of the current element.
.PP
Here we have a simple inventory array that contains \[lq]food\[rq]
objects that have a \f[V]name\f[R] and a \f[V]type\f[R].
.IP
.nf
\f[C]
const inventory = [
  { name: \[dq]asparagus\[dq], type: \[dq]vegetables\[dq] },
  { name: \[dq]bananas\[dq], type: \[dq]fruit\[dq] },
  { name: \[dq]goat\[dq], type: \[dq]meat\[dq] },
  { name: \[dq]cherries\[dq], type: \[dq]fruit\[dq] },
  { name: \[dq]fish\[dq], type: \[dq]meat\[dq] },
];
\f[R]
.fi
.PP
To use \f[V]group()\f[R], you supply a callback function that is called
with the current element, and optionally the current index and array,
and returns a string indicating the group of the element.
.PP
The code below uses an arrow function to return the \f[V]type\f[R] of
each array element (this uses object destructuring syntax for function
arguments to unpack the \f[V]type\f[R] element from the passed object).
The result is an object that has properties named after the unique
strings returned by the callback.
Each property is assigned an array containing the elements in the group.
.IP
.nf
\f[C]
const result = inventory.group(({ type }) => type);
console.log(result.vegetables);
// [{ name: \[dq]asparagus\[dq], type: \[dq]vegetables\[dq] }]
\f[R]
.fi
.PP
Note that the returned object references the \f[I]same\f[R] elements as
the original array (not deep copies).
Changing the internal structure of these elements will be reflected in
both the original array and the returned object.
.PP
If you can\[cq]t use a string as the key, for example, if the
information to group is associated with an object that might change,
then you can instead use \f[V]Array.prototype.groupToMap()\f[R].
This is very similar to \f[V]group\f[R] except that it groups the
elements of the array into a \f[V]Map\f[R] that can use an arbitrary
value (object or primitive) as a key.
.SS Creating a two-dimensional array
.PP
The following creates a chessboard as a two-dimensional array of
strings.
The first move is made by copying the \f[V]\[aq]p\[aq]\f[R] in
\f[V]board[6][4]\f[R] to \f[V]board[4][4]\f[R].
The old position at \f[V][6][4]\f[R] is made blank.
.IP
.nf
\f[C]
const board = [
  [\[dq]R\[dq], \[dq]N\[dq], \[dq]B\[dq], \[dq]Q\[dq], \[dq]K\[dq], \[dq]B\[dq], \[dq]N\[dq], \[dq]R\[dq]],
  [\[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq]],
  [\[dq]r\[dq], \[dq]n\[dq], \[dq]b\[dq], \[dq]q\[dq], \[dq]k\[dq], \[dq]b\[dq], \[dq]n\[dq], \[dq]r\[dq]],
];

console.log(\[ga]${board.join(\[dq]\[rs]n\[dq])}\[rs]n\[rs]n\[ga]);

// Move King\[aq]s Pawn forward 2
board[4][4] = board[6][4];
board[6][4] = \[dq] \[dq];
console.log(board.join(\[dq]\[rs]n\[dq]));
\f[R]
.fi
.PP
Here is the output:
.IP
.nf
\f[C]
R,N,B,Q,K,B,N,R
P,P,P,P,P,P,P,P
 , , , , , , ,
 , , , , , , ,
 , , , , , , ,
 , , , , , , ,
p,p,p,p,p,p,p,p
r,n,b,q,k,b,n,r

R,N,B,Q,K,B,N,R
P,P,P,P,P,P,P,P
 , , , , , , ,
 , , , , , , ,
 , , , ,p, , ,
 , , , , , , ,
p,p,p,p, ,p,p,p
r,n,b,q,k,b,n,r
\f[R]
.fi
.SS Using an array to tabulate a set of values
.IP
.nf
\f[C]
const values = [];
for (let x = 0; x < 10; x++) {
  values.push([2 ** x, 2 * x ** 2]);
}
console.table(values);
\f[R]
.fi
.PP
Results in
.IP
.nf
\f[C]
// The first column is the index
0  1    0
1  2    2
2  4    8
3  8    18
4  16   32
5  32   50
6  64   72
7  128  98
8  256  128
9  512  162
\f[R]
.fi
.SS Creating an array using the result of a match
.PP
The result of a match between a \f[V]RegExp\f[R] and a string can create
a JavaScript array that has properties and elements which provide
information about the match.
Such an array is returned by \f[V]RegExp.prototype.exec()\f[R] and
\f[V]String.prototype.match()\f[R].
.PP
For example:
.IP
.nf
\f[C]
// Match one d followed by one or more b\[aq]s followed by one d
// Remember matched b\[aq]s and the following d
// Ignore case

const myRe = /d(b+)(d)/i;
const execResult = myRe.exec(\[dq]cdbBdbsbz\[dq]);

console.log(execResult.input); // \[aq]cdbBdbsbz\[aq]
console.log(execResult.index); // 1
console.log(execResult); // [ \[dq]dbBd\[dq], \[dq]bB\[dq], \[dq]d\[dq] ]
\f[R]
.fi
.PP
For more information about the result of a match, see the
\f[V]RegExp.prototype.exec()\f[R] and \f[V]String.prototype.match()\f[R]
pages.
.SH See also
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]TypedArray\f[R]
.IP \[bu] 2
\f[V]ArrayBuffer\f[R]
