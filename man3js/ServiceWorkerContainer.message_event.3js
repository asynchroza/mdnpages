.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ServiceWorkerContainer.message_event" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerContainer.message_event \- ServiceWorkerContainer: message
event
.SH SYNOPSIS
The \f[B]\f[CB]message\f[B]\f[R] event is used in a page controlled by a
service worker to receive messages from the service worker.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) => {});

onmessage = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
In this example the service worker get the client\[cq]s ID from a
\f[CR]fetch\f[R] event and then sends it a message using
\f[CR]Client.postMessage\f[R]:
.IP
.EX
// service\-worker.js
async function messageClient(clientId) {
  const client = await clients.get(clientId);
  client.postMessage(\[dq]Hi client!\[dq]);
}

addEventListener(\[dq]fetch\[dq], (event) => {
  messageClient(event.clientId);
  event.respondWith(() => {
    // \&...
  });
});
.EE
.PP
The client can receive the message by listening to the
\f[CR]message\f[R] event:
.IP
.EX
// main.js
navigator.serviceWorker.addEventListener(\[dq]message\[dq], (message) => {
  console.log(message);
});
.EE
.PP
Alternatively, the client can receive the message with the
\f[CR]onmessage\f[R] event handler:
.IP
.EX
// main.js
navigator.serviceWorker.onmessage = (message) => {
  console.log(message);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR
https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using web workers
