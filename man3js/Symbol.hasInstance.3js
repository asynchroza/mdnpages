'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.hasInstance" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Symbol.hasInstance\f[B]\f[R] static data property
represents the well-known symbol \f[V]\[at]\[at]hasInstance\f[R].
The \f[V]instanceof\f[R] operator looks up this symbol on its right-hand
operand for the method used to determine if the constructor object
recognizes an object as its instance.
.SH Value
.PP
The well-known symbol \f[V]\[at]\[at]hasInstance\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH Description
.PP
The \f[V]instanceof\f[R] operator uses the following algorithm to
calculate the return value of \f[V]object instanceof constructor\f[R]:
.IP "1." 3
If \f[V]constructor\f[R] has a \f[V]\[at]\[at]hasInstance\f[R] method,
then call it with \f[V]object\f[R] as the first argument and return the
result, coerced to a boolean.
Throw a \f[V]TypeError\f[R] if \f[V]constructor\f[R] is not an object,
or if \f[V]constructor[\[at]\[at]hasInstance]\f[R] is not one of
\f[V]null\f[R], \f[V]undefined\f[R], or a function.
.IP "2." 3
Otherwise, if \f[V]constructor\f[R] doesn\[cq]t have a
\f[V]\[at]\[at]hasInstance\f[R] method
(\f[V]constructor[\[at]\[at]hasInstance]\f[R] is \f[V]null\f[R] or
\f[V]undefined\f[R]), then determine the result using the same algorithm
as \f[V]Function.prototype[\[at]\[at]hasInstance]\f[R].
Throw a \f[V]TypeError\f[R] if \f[V]constructor\f[R] is not a function.
.PP
Because all functions inherit from \f[V]Function.prototype\f[R] by
default, most of the time, the
\f[V]Function.prototype[\[at]\[at]hasInstance]\f[R] method specifies the
behavior of \f[V]instanceof\f[R] when the right-hand side is a function.
.SH Examples
.SS Custom instanceof behavior
.PP
You could implement your custom \f[V]instanceof\f[R] behavior like this,
for example:
.IP
.nf
\f[C]
class MyArray {
  static [Symbol.hasInstance](instance) {
    return Array.isArray(instance);
  }
}
console.log([] instanceof MyArray); // true
\f[R]
.fi
.IP
.nf
\f[C]
function MyArray() {}
Object.defineProperty(MyArray, Symbol.hasInstance, {
  value(instance) {
    return Array.isArray(instance);
  },
});
console.log([] instanceof MyArray); // true
\f[R]
.fi
.SS Checking the instance of an object
.PP
Just in the same manner at which you can check if an object is an
instance of a class using the \f[V]instanceof\f[R] keyword, we can also
use \f[V]Symbol.hasInstance\f[R] for such checks.
.IP
.nf
\f[C]
class Animal {
  constructor() {}
}

const cat = new Animal();

console.log(Animal[Symbol.hasInstance](cat)); // true
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]instanceof\f[R]
.IP \[bu] 2
\f[V]Function.prototype[\[at]\[at]hasInstance]()\f[R]
