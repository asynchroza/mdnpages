.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Response.error_static" "JS" "June 16, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.error_static \- Response: error() static method
.SH SYNOPSIS
The \f[B]\f[CB]error()\f[B]\f[R] static method of the
\f[CR]Response\f[R] interface returns a new \f[CR]Response\f[R] object
associated with a network error.
.PP
This is mainly useful when writing service workers: it enables a service
worker to send a response from a \f[CR]fetch\f[R] event handler that
will cause the \f[CR]fetch()\f[R] call in the main app code to reject
the promise.
.PP
An error response has its \f[CR]type\f[R] set to \f[CR]error\f[R].
.SH SYNTAX
.IP
.EX
Response.error()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Response\f[R] object.
.SH EXAMPLES
.SS Returning a network error from a service worker
Suppose a web app has a service worker, which contains the following
\f[CR]fetch\f[R] event handler:
.IP
.EX
// service\-worker.js

self.addEventListener(\[dq]fetch\[dq], (event) => {
  const url = new URL(event.request.url);
  if (url.pathname === \[dq]/salamander.jpg\[dq]) {
    event.respondWith(Response.error());
  }
});
.EE
.PP
With this service worker, all fetch requests from the app will pass
through the service worker to the network, except for requests to fetch
\[lq]salamander.jpg\[rq], which will reject.
This means that the following main thread code would throw an error, and
the \f[CR]catch\f[R] handler will run.
.IP
.EX
// main.js

const image = document.querySelector(\[dq]#image\[dq]);

try {
  const response = await fetch(\[dq]salamander.jpg\[dq]);
  const blob = await response.blob();
  const objectURL = URL.createObjectURL(blob);
  image.src = objectURL;
} catch (e) {
  console.error(e);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
