.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.codePointAt" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
String.codePointAt - String.prototype.codePointAt()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]codePointAt()\f[B]\f[R] method returns a non-negative
integer that is the Unicode code point value at the given position.
Note that this function does not give the nth code point in a string,
but the code point starting at the specified string index.
.SH SYNTAX
.IP
.nf
\f[C]
codePointAt(pos)
\f[R]
.fi
.SS Parameters
.TP
\f[B]pos\f[R]
Position of an element in \f[V]str\f[R] to return the code point value
from.
.SS Return value
.PP
A decimal number representing the code point value of the character at
the given \f[V]pos\f[R].
.IP \[bu] 2
If there is no element at \f[V]pos\f[R], returns \f[V]undefined\f[R].
.IP \[bu] 2
If the element at \f[V]pos\f[R] is a UTF-16 high surrogate, returns the
code point of the surrogate \f[I]pair\f[R].
.IP \[bu] 2
If the element at \f[V]pos\f[R] is a UTF-16 low surrogate, returns
\f[I]only\f[R] the low surrogate code point.
.SH EXAMPLES
.SS Using codePointAt()
.IP
.nf
\f[C]
\[dq]ABC\[dq].codePointAt(0); // 65
\[dq]ABC\[dq].codePointAt(0).toString(16); // 41

\[dq]üòç\[dq].codePointAt(0); // 128525
\[dq]\[rs]ud83d\[rs]ude0d\[dq].codePointAt(0); // 128525
\[dq]\[rs]ud83d\[rs]ude0d\[dq].codePointAt(0).toString(16); // 1f60d

\[dq]üòç\[dq].codePointAt(1); // 56845
\[dq]\[rs]ud83d\[rs]ude0d\[dq].codePointAt(1); // 56845
\[dq]\[rs]ud83d\[rs]ude0d\[dq].codePointAt(1).toString(16); // de0d

\[dq]ABC\[dq].codePointAt(42); // undefined
\f[R]
.fi
.SS Looping with codePointAt()
.PP
Because indexing to a \f[V]pos\f[R] whose element is a UTF-16 low
surrogate, returns \f[I]only\f[R] the low surrogate, it\[cq]s better not
to index directly into a UTF-16 string.
.PP
Instead, use a \f[V]for...of\f[R] statement or an Array\[cq]s
\f[V]forEach()\f[R] method (or anything which correctly iterates UTF-16
surrogates) to iterate the string, using \f[V]codePointAt(0)\f[R] to get
the code point of each element.
.IP
.nf
\f[C]
for (const codePoint of \[dq]\[rs]ud83d\[rs]udc0e\[rs]ud83d\[rs]udc71\[rs]u2764\[dq]) {
  console.log(codePoint.codePointAt(0).toString(16));
}
// \[aq]1f40e\[aq], \[aq]1f471\[aq], \[aq]2764\[aq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]String.prototype.codePointAt\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[V]String.fromCodePoint()\f[R]
.IP \[bu] 2
\f[V]String.fromCharCode()\f[R]
.IP \[bu] 2
\f[V]String.prototype.charCodeAt()\f[R]
.IP \[bu] 2
\f[V]String.prototype.charAt()\f[R]
