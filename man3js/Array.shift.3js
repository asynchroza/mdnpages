.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.shift" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]shift()\f[B]\f[R] method removes the \f[B]first\f[R]
element from an array and returns that removed element.
This method changes the length of the array.
.SH Syntax
.IP
.nf
\f[C]
shift()
\f[R]
.fi
.SS Return value
.PP
The removed element from the array; \f[V]undefined\f[R] if the array is
empty.
.SH Description
.PP
The \f[V]shift()\f[R] method removes the element at the zeroth index and
shifts the values at consecutive indexes down, then returns the removed
value.
If the \f[V]length\f[R] property is 0, \f[V]undefined\f[R] is returned.
.PP
The \f[V]pop()\f[R] method has similar behavior to \f[V]shift()\f[R],
but applied to the last element in an array.
.PP
The \f[V]shift()\f[R] method is a mutating method.
It changes the length and the content of \f[V]this\f[R].
In case you want the value of \f[V]this\f[R] to be the same, but return
a new array with the first element removed, you can use
\f[V]arr.slice(1)\f[R] instead.
.PP
The \f[V]shift()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
Although strings are also array-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH Examples
.SS Removing an element from an array
.PP
The following code displays the \f[V]myFish\f[R] array before and after
removing its first element.
It also displays the removed element:
.IP
.nf
\f[C]
const myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]mandarin\[dq], \[dq]surgeon\[dq]];

console.log(\[dq]myFish before:\[dq], myFish);
// myFish before: [\[aq]angel\[aq], \[aq]clown\[aq], \[aq]mandarin\[aq], \[aq]surgeon\[aq]]

const shifted = myFish.shift();

console.log(\[dq]myFish after:\[dq], myFish);
// myFish after: [\[aq]clown\[aq], \[aq]mandarin\[aq], \[aq]surgeon\[aq]]

console.log(\[dq]Removed this element:\[dq], shifted);
// Removed this element: angel
\f[R]
.fi
.SS Using shift() method in while loop
.PP
The shift() method is often used in condition inside while loop.
In the following example every iteration will remove the next element
from an array, until it is empty:
.IP
.nf
\f[C]
const names = [\[dq]Andrew\[dq], \[dq]Tyrone\[dq], \[dq]Paul\[dq], \[dq]Maria\[dq], \[dq]Gayatri\[dq]];

while (typeof (i = names.shift()) !== \[dq]undefined\[dq]) {
  console.log(i);
}
// Andrew, Tyrone, Paul, Maria, Gayatri
\f[R]
.fi
.SS Calling shift() on non-array objects
.PP
The \f[V]shift()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R].
If the normalized length is 0, \f[V]length\f[R] is set to \f[V]0\f[R]
again (whereas it may be negative or \f[V]undefined\f[R] before).
Otherwise, the property at \f[V]0\f[R] is returned, and the rest of the
properties are shifted left by one.
The \f[V]length\f[R] property is decremented by one.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  2: 4,
};
console.log(Array.prototype.shift.call(arrayLike));
// undefined, because it is an empty slot
console.log(arrayLike);
// { \[aq]1\[aq]: 4, length: 2, unrelated: \[aq]foo\[aq] }

const plainObj = {};
// There\[aq]s no length property, so the length is 0
Array.prototype.shift.call(plainObj);
console.log(plainObj);
// { length: 0 }
\f[R]
.fi
.SH See also
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.push()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.pop()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.unshift()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.concat()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.splice()\f[R]
