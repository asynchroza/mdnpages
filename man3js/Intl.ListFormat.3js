.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Intl.ListFormat" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Intl.ListFormat\f[B]\f[R] object enables
language-sensitive list formatting.
.SH Constructor
.IP \[bu] 2
\f[V]Intl.ListFormat()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]Intl.ListFormat\f[R] object.
.RE
.SH Static methods
.IP \[bu] 2
\f[V]Intl.ListFormat.supportedLocalesOf()\f[R]
.RS 2
.IP \[bu] 2
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]Intl.ListFormat.prototype\f[R] and
shared by all \f[V]Intl.ListFormat\f[R] instances.
.IP \[bu] 2
\f[V]Intl.ListFormat.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]Intl.ListFormat\f[R] instances, the initial value is the
\f[V]Intl.ListFormat\f[R] constructor.
.RE
.IP \[bu] 2
\f[V]Intl.ListFormat.prototype[\[at]\[at]toStringTag]\f[R]
.RS 2
.IP \[bu] 2
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]Intl.ListFormat\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]Intl.ListFormat.prototype.format()\f[R]
.RS 2
.IP \[bu] 2
Returns a language-specific formatted string representing the elements
of the list.
.RE
.IP \[bu] 2
\f[V]Intl.ListFormat.prototype.formatToParts()\f[R]
.RS 2
.IP \[bu] 2
Returns an array of objects representing the different components that
can be used to format a list of values in a locale-aware fashion.
.RE
.IP \[bu] 2
\f[V]Intl.ListFormat.prototype.resolvedOptions()\f[R]
.RS 2
.IP \[bu] 2
Returns a new object with properties reflecting the locale and style
formatting options computed during the construction of the current
\f[V]Intl.ListFormat\f[R] object.
.RE
.SH Examples
.SS Using format
.PP
The following example shows how to create a List formatter using the
English language.
.IP
.nf
\f[C]
const list = [\[dq]Motorcycle\[dq], \[dq]Bus\[dq], \[dq]Car\[dq]];

console.log(
  new Intl.ListFormat(\[dq]en-GB\[dq], { style: \[dq]long\[dq], type: \[dq]conjunction\[dq] }).format(
    list,
  ),
);
// Motorcycle, Bus and Car

console.log(
  new Intl.ListFormat(\[dq]en-GB\[dq], { style: \[dq]short\[dq], type: \[dq]disjunction\[dq] }).format(
    list,
  ),
);
// Motorcycle, Bus or Car

console.log(
  new Intl.ListFormat(\[dq]en-GB\[dq], { style: \[dq]narrow\[dq], type: \[dq]unit\[dq] }).format(list),
);
// Motorcycle Bus Car
\f[R]
.fi
.SS Using formatToParts
.PP
The following example shows how to create a List formatter returning
formatted parts
.IP
.nf
\f[C]
const list = [\[dq]Motorcycle\[dq], \[dq]Bus\[dq], \[dq]Car\[dq]];
console.log(
  new Intl.ListFormat(\[dq]en-GB\[dq], {
    style: \[dq]long\[dq],
    type: \[dq]conjunction\[dq],
  }).formatToParts(list),
);

// [ { \[dq]type\[dq]: \[dq]element\[dq], \[dq]value\[dq]: \[dq]Motorcycle\[dq] },
//   { \[dq]type\[dq]: \[dq]literal\[dq], \[dq]value\[dq]: \[dq], \[dq] },
//   { \[dq]type\[dq]: \[dq]element\[dq], \[dq]value\[dq]: \[dq]Bus\[dq] },
//   { \[dq]type\[dq]: \[dq]literal\[dq], \[dq]value\[dq]: \[dq], and \[dq] },
//   { \[dq]type\[dq]: \[dq]element\[dq], \[dq]value\[dq]: \[dq]Car\[dq] } ];
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Intl\f[R]
.IP \[bu] 2
A polyfill of \f[V]Intl.ListFormat\f[R] in
FormatJS (https://formatjs.io/docs/polyfills/intl-listformat/)
