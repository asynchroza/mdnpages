.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Boolean.Boolean" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Boolean.Boolean - Boolean() constructor
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Boolean()\f[B]\f[R] constructor creates \f[V]Boolean\f[R]
objects.
When called as a function, it returns primitive values of type Boolean.
.SH SYNTAX
.IP
.nf
\f[C]
new Boolean(value)
Boolean(value)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]Boolean()\f[R] can be called with or without
\f[V]new\f[R], but with different effects.
See Return value.
.RE
.SS Parameters
.TP
\f[B]value\f[R]
The initial value of the \f[V]Boolean\f[R] object.
.SS Return value
.PP
When \f[V]Boolean()\f[R] is called as a constructor (with
\f[V]new\f[R]), it creates a \f[V]Boolean\f[R] object, which is
\f[B]not\f[R] a primitive.
.PP
When \f[V]Boolean()\f[R] is called as a function (without
\f[V]new\f[R]), it coerces the parameter to a boolean primitive.
.RS
.PP
\f[B]Warning:\f[R] You should rarely find yourself using
\f[V]Boolean\f[R] as a constructor.
.RE
.SH DESCRIPTION
.PP
The value passed as the first parameter is converted to a boolean value.
If the value is omitted or is \f[V]0\f[R], \f[V]-0\f[R], \f[V]0n\f[R],
\f[V]null\f[R], \f[V]false\f[R], \f[V]NaN\f[R], \f[V]undefined\f[R], or
the empty string (\f[V]\[dq]\[dq]\f[R]), then the object has an initial
value of \f[V]false\f[R].
All other values, including any object, an empty array (\f[V][]\f[R]),
or the string \f[V]\[dq]false\[dq]\f[R], create an object with an
initial value of \f[V]true\f[R].
.RS
.PP
\f[B]Note:\f[R] When the non-standard property \f[V]document.all\f[R] is
used as an argument for this constructor, the result is a
\f[V]Boolean\f[R] object with the value \f[V]false\f[R].
This property is legacy and non-standard and should not be used.
.RE
.SH EXAMPLES
.SS Creating Boolean objects with an initial value of false
.IP
.nf
\f[C]
const bZero = new Boolean(0);
const bNull = new Boolean(null);
const bEmptyString = new Boolean(\[dq]\[dq]);
const bfalse = new Boolean(false);

typeof bfalse; // \[dq]object\[dq]
Boolean(bfalse); // true
\f[R]
.fi
.PP
Note how converting a \f[V]Boolean\f[R] object to a primitive with
\f[V]Boolean()\f[R] always yields \f[V]true\f[R], even if the object
holds a value of \f[V]false\f[R].
You are therefore always advised to avoid constructing \f[V]Boolean\f[R]
wrapper objects.
.PP
If you need to take the primitive value out from the wrapper object,
instead of using the \f[V]Boolean()\f[R] function, use the object\[cq]s
\f[V]valueOf()\f[R] method instead.
.IP
.nf
\f[C]
const bfalse = new Boolean(false);

bfalse.valueOf(); // false
\f[R]
.fi
.SS Creating \f[V]Boolean\f[R] objects with an initial value of \f[V]true\f[R]
.IP
.nf
\f[C]
const btrue = new Boolean(true);
const btrueString = new Boolean(\[dq]true\[dq]);
const bfalseString = new Boolean(\[dq]false\[dq]);
const bSuLin = new Boolean(\[dq]Su Lin\[dq]);
const bArrayProto = new Boolean([]);
const bObjProto = new Boolean({});
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Boolean
