.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.at" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.at - Array.prototype.at()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]at()\f[B]\f[R] method takes an integer value and returns
the item at that index, allowing for positive and negative integers.
Negative integers count back from the last item in the array.
.SH SYNTAX
.IP
.nf
\f[C]
at(index)
\f[R]
.fi
.SS Parameters
.TP
\f[B]index\f[R]
Zero-based index of the array element to be returned, converted to an
integer.
Negative index counts back from the end of the array \[em] if
\f[V]index < 0\f[R], \f[V]index + array.length\f[R] is accessed.
.SS Return value
.PP
The element in the array matching the given index.
Always returns \f[V]undefined\f[R] if \f[V]index < -array.length\f[R] or
\f[V]index >= array.length\f[R] without attempting to access the
corresponding property.
.SH DESCRIPTION
.PP
The \f[V]at()\f[R] method is equivalent to the bracket notation when
\f[V]index\f[R] is non-negative.
For example, \f[V]array[0]\f[R] and \f[V]array.at(0)\f[R] both return
the first item.
However, when counting elements from the end of the array, you cannot
use \f[V]array[-1]\f[R] like you may in Python or R, because all values
inside the square brackets are treated literally as string properties,
so you will end up reading \f[V]array[\[dq]-1\[dq]]\f[R], which is just
a normal string property instead of an array index.
.PP
The usual practice is to access \f[V]length\f[R] and calculate the index
from that \[em] for example, \f[V]array[array.length - 1]\f[R].
The \f[V]at()\f[R] method allows relative indexing, so this can be
shortened to \f[V]array.at(-1)\f[R].
.PP
The \f[V]at()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Return the last value of an array
.PP
The following example provides a function which returns the last element
found in a specified array.
.IP
.nf
\f[C]
// Our array with items
const cart = [\[dq]apple\[dq], \[dq]banana\[dq], \[dq]pear\[dq]];

// A function which returns the last item of a given array
function returnLast(arr) {
  return arr.at(-1);
}

// Get the last item of our array \[aq]cart\[aq]
const item1 = returnLast(cart);
console.log(item1); // \[aq]pear\[aq]

// Add an item to our \[aq]cart\[aq] array
cart.push(\[dq]orange\[dq]);
const item2 = returnLast(cart);
console.log(item2); // \[aq]orange\[aq]
\f[R]
.fi
.SS Comparing methods
.PP
This example compares different ways to select the penultimate (last but
one) item of an \f[V]Array\f[R].
While all the methods shown below are valid, this example highlights the
succinctness and readability of the \f[V]at()\f[R] method.
.IP
.nf
\f[C]
// Our array with items
const colors = [\[dq]red\[dq], \[dq]green\[dq], \[dq]blue\[dq]];

// Using length property
const lengthWay = colors[colors.length - 2];
console.log(lengthWay); // \[aq]green\[aq]

// Using slice() method. Note an array is returned
const sliceWay = colors.slice(-2, -1);
console.log(sliceWay[0]); // \[aq]green\[aq]

// Using at() method
const atWay = colors.at(-2);
console.log(atWay); // \[aq]green\[aq]
\f[R]
.fi
.SS Calling at() on non-array objects
.PP
The \f[V]at()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and calculates the index to access.
.IP
.nf
\f[C]
const arrayLike = {
  length: 2,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
};
console.log(Array.prototype.at.call(arrayLike, -1)); // \[dq]b\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.at\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#relative-indexing-method)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.at()\f[R]
.IP \[bu] 2
\f[V]String.prototype.at()\f[R]
