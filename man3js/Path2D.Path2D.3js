.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Path2D.Path2D" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Path2D.Path2D \- Path2D: Path2D() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Path2D()\f[B]\f[R] constructor returns a newly
instantiated \f[CR]Path2D\f[R] object, optionally with another path as
an argument (creates a copy), or optionally with a string consisting of
SVG path data.
.SH SYNTAX
.IP
.EX
new Path2D()
new Path2D(path)
new Path2D(d)
.EE
.SS Parameters
.TP
\f[B]path\f[R] \f[I](optional)\f[R]
When invoked with another \f[CR]Path2D\f[R] object, a copy of the
\f[CR]path\f[R] argument is created.
.TP
\f[B]d\f[R] \f[I](optional)\f[R]
When invoked with a string consisting of SVG path data, a new path is
created from that description.
.SH EXAMPLES
.SS Creating and copying paths
This example creates and copies a \f[CR]Path2D\f[R] path.
.PP
\f[CR]html hidden <canvas id=\[dq]canvas\[dq]></canvas>\f[R]
.IP
.EX
const canvas = document.getElementById(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

let path1 = new Path2D();
path1.rect(10, 10, 100, 100);

let path2 = new Path2D(path1);
path2.moveTo(220, 60);
path2.arc(170, 60, 50, 0, 2 * Math.PI);

ctx.stroke(path2);
.EE
.SS Using SVG paths
This example creates a \f[CR]Path2D\f[R] path using SVG path data.
The path will move to point (\f[CR]M10 10\f[R]) and then move
horizontally 80 points to the right (\f[CR]h 80\f[R]), then 80 points
down (\f[CR]v 80\f[R]), then 80 points to the left (\f[CR]h \-80\f[R]),
and then back to the start (\f[CR]Z\f[R]).
.PP
\f[CR]html hidden <canvas id=\[dq]canvas\[dq]></canvas>\f[R]
.IP
.EX
const canvas = document.getElementById(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

let p = new Path2D(\[dq]M10 10 h 80 v 80 h \-80 Z\[dq]);
ctx.fill(p);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Path2D\f[R], the interface this constructor belongs to
