.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Object.defineProperties" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Object.defineProperties()\f[B]\f[R] static method defines
new or modifies existing properties directly on an object, returning the
object.
.SH Syntax
.IP
.nf
\f[C]
Object.defineProperties(obj, props)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]obj\f[R]
.RS 2
.IP \[bu] 2
The object on which to define or modify properties.
.RE
.IP \[bu] 2
\f[V]props\f[R]
.RS 2
.IP \[bu] 2
An object whose keys represent the names of properties to be defined or
modified and whose values are objects describing those properties.
Each value in \f[V]props\f[R] must be either a data descriptor or an
accessor descriptor; it cannot be both (see
\f[V]Object.defineProperty()\f[R] for more details).
.RS 2
.PP
Data descriptors and accessor descriptors may optionally contain the
following keys:
.IP \[bu] 2
\f[V]configurable\f[R]
.RS 2
.IP \[bu] 2
\f[V]true\f[R] if and only if the type of this property descriptor may
be changed and if the property may be deleted from the corresponding
object.
\f[B]Defaults to \f[VB]false\f[B].\f[R]
.RE
.IP \[bu] 2
\f[V]enumerable\f[R]
.RS 2
.IP \[bu] 2
\f[V]true\f[R] if and only if this property shows up during enumeration
of the properties on the corresponding object.
\f[B]Defaults to \f[VB]false\f[B].\f[R]
.RE
.PP
A data descriptor also has the following optional keys:
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
The value associated with the property.
Can be any valid JavaScript value (number, object, function, etc.).
\f[B]Defaults to \f[VB]undefined\f[B].\f[R]
.RE
.IP \[bu] 2
\f[V]writable\f[R]
.RS 2
.IP \[bu] 2
\f[V]true\f[R] if and only if the value associated with the property may
be changed with an \f[V]assignment operator\f[R].
\f[B]Defaults to \f[VB]false\f[B].\f[R]
.RE
.PP
An accessor descriptor also has the following optional keys:
.IP \[bu] 2
\f[V]get\f[R]
.RS 2
.IP \[bu] 2
A function which serves as a getter for the property, or
\f[V]undefined\f[R] if there is no getter.
The function\[cq]s return value will be used as the value of the
property.
\f[B]Defaults to \f[VB]undefined\f[B].\f[R]
.RE
.IP \[bu] 2
\f[V]set\f[R]
.RS 2
.IP \[bu] 2
A function which serves as a setter for the property, or
\f[V]undefined\f[R] if there is no setter.
The function will receive as its only argument the new value being
assigned to the property.
\f[B]Defaults to \f[VB]undefined\f[B].\f[R]
.RE
.PP
If a descriptor has neither of \f[V]value\f[R], \f[V]writable\f[R],
\f[V]get\f[R] and \f[V]set\f[R] keys, it is treated as a data
descriptor.
If a descriptor has both \f[V]value\f[R] or \f[V]writable\f[R] and
\f[V]get\f[R] or \f[V]set\f[R] keys, an exception is thrown.
.RE
.RE
.SS Return value
.PP
The object that was passed to the function.
.SH Examples
.SS Using Object.defineProperties
.IP
.nf
\f[C]
const obj = {};
Object.defineProperties(obj, {
  property1: {
    value: true,
    writable: true,
  },
  property2: {
    value: \[dq]Hello\[dq],
    writable: false,
  },
  // etc. etc.
});
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Object.defineProperties\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
\f[V]Object.defineProperty()\f[R]
.IP \[bu] 2
\f[V]Object.keys()\f[R]
.IP \[bu] 2
Enumerability and ownership of properties
