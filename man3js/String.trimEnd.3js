.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "String.trimEnd" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]trimEnd()\f[B]\f[R] method removes whitespace from the
end of a string and returns a new string, without modifying the original
string.
\f[V]trimRight()\f[R] is an alias of this method.
.SH Syntax
.IP
.nf
\f[C]
trimEnd()

trimRight()
\f[R]
.fi
.SS Return value
.PP
A new string representing \f[V]str\f[R] stripped of whitespace from its
end (right side).
Whitespace is defined as white space characters plus line terminators.
.PP
If the end of \f[V]str\f[R] has no whitespace, a new string is still
returned (essentially a copy of \f[V]str\f[R]).
.SS Aliasing
.PP
After \f[V]trim()\f[R] was standardized, engines also implemented the
non-standard method \f[V]trimRight\f[R].
However, for consistency with \f[V]padEnd()\f[R], when the method got
standardized, its name was chosen as \f[V]trimEnd\f[R].
For web compatibility reasons, \f[V]trimRight\f[R] remains as an alias
to \f[V]trimEnd\f[R], and they refer to the exact same function object.
In some engines this means:
.IP
.nf
\f[C]
String.prototype.trimRight.name === \[dq]trimEnd\[dq];
\f[R]
.fi
.SH Examples
.SS Using trimEnd()
.PP
The following example trims whitespace from the end of \f[V]str\f[R],
but not from its start.
.IP
.nf
\f[C]
let str = \[dq]   foo  \[dq];

console.log(str.length); // 8

str = str.trimEnd();
console.log(str.length); // 6
console.log(str); // \[aq]   foo\[aq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]String.prototype.trimEnd\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
\f[V]String.prototype.trim()\f[R]
.IP \[bu] 2
\f[V]String.prototype.trimStart()\f[R]
