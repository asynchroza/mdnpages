.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "URLSearchParams.URLSearchParams" "JS" "December 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
URLSearchParams.URLSearchParams \- URLSearchParams: URLSearchParams()
constructor
.SH SYNOPSIS
The \f[B]\f[CB]URLSearchParams()\f[B]\f[R] constructor creates and
returns a new \f[CR]URLSearchParams\f[R] object.
.PP
This feature is available in Web Workers.
.SH SYNTAX
.IP
.EX
new URLSearchParams()
new URLSearchParams(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
One of:
.RS
.IP \[bu] 2
A string, which will be parsed from
\f[CR]application/x\-www\-form\-urlencoded\f[R] format.
A leading \f[CR]\[aq]?\[aq]\f[R] character is ignored.
.IP \[bu] 2
A literal sequence of name\-value string pairs, or any object \[em] such
as a \f[CR]FormData\f[R] object \[em] with an iterator that produces a
sequence of string pairs.
Note that \f[CR]File\f[R] entries will be serialized as
\f[CR][object File]\f[R] rather than as their filename (as they would in
an \f[CR]application/x\-www\-form\-urlencoded\f[R] form).
.IP \[bu] 2
A record of string keys and string values.
Note that nesting is not supported.
.RE
.SS Return value
A \f[CR]URLSearchParams\f[R] object instance.
.SH EXAMPLES
The following example shows how to create a \f[CR]URLSearchParams\f[R]
object from various inputs.
.IP
.EX
// Retrieve params via url.search, passed into constructor
const url = new URL(\[dq]https://example.com?foo=1&bar=2\[dq]);
const params1 = new URLSearchParams(url.search);

// Get the URLSearchParams object directly from a URL object
const params1a = url.searchParams;

// Pass in a string literal
const params2 = new URLSearchParams(\[dq]foo=1&bar=2\[dq]);
const params2a = new URLSearchParams(\[dq]?foo=1&bar=2\[dq]);

// Pass in a sequence of pairs
const params3 = new URLSearchParams([
  [\[dq]foo\[dq], \[dq]1\[dq]],
  [\[dq]bar\[dq], \[dq]2\[dq]],
]);

// Pass in a record
const params4 = new URLSearchParams({ foo: \[dq]1\[dq], bar: \[dq]2\[dq] });
.EE
.PP
This example shows how to build a new URL with an object of search
parameters from an existing URL that has search parameters.
.IP
.EX
const url = new URL(\[dq]https://example.com/?a=hello&b=world\[dq]);

console.log(url.href);
// https://example.com/?a=hello&b=world

console.log(url.origin);
// https://example.com

const add_params = {
  c: \[dq]a\[dq],
  d: new String(2),
  e: false.toString(),
};

const new_params = new URLSearchParams([
  ...Array.from(url.searchParams.entries()), // [[\[dq]a\[dq],\[dq]hello\[dq]],[\[dq]b\[dq],\[dq]world\[dq]]]
  ...Object.entries(add_params), // [[\[dq]c\[dq],\[dq]a\[dq]],[\[dq]d\[dq],\[dq]2\[dq]],[\[dq]e\[dq],\[dq]false\[dq]]]
]).toString();
console.log(new_params);
// a=hello&b=world&c=a&d=2&e=false

const new_url = new URL(\[ga]${url.origin}${url.pathname}?${new_params}\[ga]);

console.log(new_url.href);
// https://example.com/?a=hello&b=world&c=a&d=2&e=false

// Here it is as a function that accepts (URL, Record<string, string>)
const addSearchParams = (url, params = {}) =>
  new URL(
    \[ga]${url.origin}${url.pathname}?${new URLSearchParams([
      ...Array.from(url.searchParams.entries()),
      ...Object.entries(params),
    ])}\[ga],
  );
.EE
