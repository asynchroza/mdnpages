.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "WebGLRenderingContext.blendFunc" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.blendFunc \- WebGLRenderingContext: blendFunc()
method
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext.blendFunc()\f[B]\f[R] method of the
WebGL API defines which function is used for blending pixel arithmetic.
.SH SYNTAX
.IP
.EX
blendFunc(sfactor, dfactor)
.EE
.SS Parameters
.TP
\f[B]sfactor\f[R]
A \f[CR]WebGL_API.Types\f[R] specifying a multiplier for the source
blending factors.
The default value is \f[CR]gl.ONE\f[R].
For possible values, see below.
.TP
\f[B]dfactor\f[R]
A \f[CR]WebGL_API.Types\f[R] specifying a multiplier for the destination
blending factors.
The default value is \f[CR]gl.ZERO\f[R].
For possible values, see below.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
If \f[I]sfactor\f[R] or \f[I]dfactor\f[R] is not one of the listed
possible values, a \f[CR]gl.INVALID_ENUM\f[R] error is thrown.
.IP \[bu] 2
If a constant color and a constant alpha value are used together as
source and destination factors, a \f[CR]gl.INVALID_ENUM\f[R] error is
thrown.
.SH CONSTANTS
The following constants can be used for \f[I]sfactor\f[R] and
\f[I]dfactor\f[R].
.PP
The formula for the blending color can be described like this:
color(RGBA) = (sourceColor * \f[I]sfactor\f[R]) + (destinationColor *
\f[I]dfactor\f[R]).
The RGBA values are between 0 and 1.
.PP
In the following table, RS, GS, BS, AS represent respectively the
\f[I]red\f[R], \f[I]green\f[R], \f[I]blue\f[R] and \f[I]alpha\f[R]
component of the source, while RD, GD, BD, AD represent respectively the
\f[I]red\f[R], \f[I]green\f[R], \f[I]blue\f[R] and \f[I]alpha\f[R]
component of the destination.
Similarly, RC, GC, BC, AC represent respectively the \f[I]red\f[R],
\f[I]green\f[R], \f[I]blue\f[R] and \f[I]alpha\f[R] component of a
constant color.
They are all values between 0 and 1, included.
Constant
Factor
Description
gl.ZERO
0,0,0,0
Multiplies all colors by 0.
gl.ONE
1,1,1,1
Multiplies all colors by 1.
gl.SRC_COLOR
RS, GS, BS, AS
Multiplies all colors by the source colors.
gl.ONE_MINUS_SRC_COLOR
1\-RS, 1\-GS, 1\-BS, 1\-AS
Multiplies all colors by 1 minus each source color.
gl.DST_COLOR
RD, GD, BD, AD
Multiplies all colors by the destination color.
gl.ONE_MINUS_DST_COLOR
1\-RD, 1\-GD, 1\-BD, 1\-AD
Multiplies all colors by 1 minus each destination color.
gl.SRC_ALPHA
AS, AS, AS, AS
Multiplies all colors by the source alpha value.
gl.ONE_MINUS_SRC_ALPHA
1\-AS, 1\-AS, 1\-AS, 1\-AS
Multiplies all colors by 1 minus the source alpha value.
gl.DST_ALPHA
AD, AD, AD, AD
Multiplies all colors by the destination alpha value.
gl.ONE_MINUS_DST_ALPHA
1\-AD, 1\-AD, 1\-AD, 1\-AD
Multiplies all colors by 1 minus the destination alpha value.
gl.CONSTANT_COLOR
RC, GC, BC, AC
Multiplies all colors by a constant color.
gl.ONE_MINUS_CONSTANT_COLOR
1\-RC, 1\-GC, 1\-BC, 1\-AC
Multiplies all colors by 1 minus a constant color.
gl.CONSTANT_ALPHA
AC, AC, AC, AC
Multiplies all colors by a constant alpha value.
gl.ONE_MINUS_CONSTANT_ALPHA
1\-AC, 1\-AC, 1\-AC, 1\-AC
Multiplies all colors by 1 minus a constant alpha value.
gl.SRC_ALPHA_SATURATE
min(AS, 1 \- AD), min(AS, 1 \- AD), min(AS, 1 \- AD), 1
Multiplies the RGB colors by the smaller of either the source alpha
value or the value of 1 minus the destination alpha value.
The alpha value is multiplied by 1.
.SH EXAMPLES
To use the blend function, you first have to activate blending with
\f[CR]WebGLRenderingContext.enable()\f[R] with the argument
\f[CR]gl.BLEND\f[R].
.IP
.EX
gl.enable(gl.BLEND);
gl.blendFunc(gl.SRC_COLOR, gl.DST_COLOR);
.EE
.PP
To get the current blend function, query the \f[CR]BLEND_SRC_RGB\f[R],
\f[CR]BLEND_SRC_ALPHA\f[R], \f[CR]BLEND_DST_RGB\f[R], and
\f[CR]BLEND_DST_ALPHA\f[R] constants which return one of the blend
function constants.
.IP
.EX
gl.enable(gl.BLEND);
gl.blendFunc(gl.SRC_COLOR, gl.DST_COLOR);
gl.getParameter(gl.BLEND_SRC_RGB) === gl.SRC_COLOR;
// true
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.blendColor()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.blendEquation()\f[R]
