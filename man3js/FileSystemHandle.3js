.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FileSystemHandle" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemHandle \- FileSystemHandle
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]FileSystemHandle\f[B]\f[R] interface of the
\f[CR]File System API\f[R] is an object which represents a file or
directory entry.
Multiple handles can represent the same entry.
For the most part you do not work with \f[CR]FileSystemHandle\f[R]
directly but rather its child interfaces \f[CR]FileSystemFileHandle\f[R]
and \f[CR]FileSystemDirectoryHandle\f[R].
.SH INTERFACES BASED ON FILESYSTEMHANDLE
Below is a list of interfaces based on the FileSystemHandle interface.
.TP
\f[B]FileSystemFileHandle\f[R]
Represents a handle to a file entry.
.TP
\f[B]FileSystemDirectoryHandle\f[R]
Provides a handle to a directory entry.
.SH INSTANCE PROPERTIES
.TP
\f[B]kind\f[R] \f[I](read\-only)\f[R]
Returns the type of entry.
This is \f[CR]\[aq]file\[aq]\f[R] if the associated entry is a file or
\f[CR]\[aq]directory\[aq]\f[R].
.TP
\f[B]name\f[R] \f[I](read\-only)\f[R]
Returns the name of the associated entry.
.SH INSTANCE METHODS
.TP
\f[B]isSameEntry()\f[R]
Compares two \f[CR]handles\f[R] to see if the associated entries (either
a file or directory) match.
.TP
\f[B]queryPermission()\f[R] \f[I](experimental)\f[R]
Queries the current permission state of the current handle.
.TP
\f[B]remove()\f[R] \f[I](experimental)\f[R] \f[I](non\-standard)\f[R]
Requests removal of the entry represented by the handle from the
underlying file system.
.TP
\f[B]requestPermission()\f[R] \f[I](experimental)\f[R]
Requests read or readwrite permissions for the file handle.
.SH EXAMPLES
.SS Checking Type
The below code allows the user to choose a file from the file picker and
then tests to see whether the handle returned is a file or directory
.IP
.EX
// store a reference to our file handle
let fileHandle;

async function getFile() {
  // open file picker
  [fileHandle] = await window.showOpenFilePicker();

  if (fileHandle.kind === \[dq]file\[dq]) {
    // run file code
  } else if (fileHandle.kind === \[dq]directory\[dq]) {
    // run directory code
  }
}
.EE
.SS Query/Request Permissions
The following asynchronous function returns true if user has granted
read or readwrite permissions to the file handle.
Permission is requested if not.
.IP
.EX
// fileHandle is a FileSystemFileHandle
// withWrite is a boolean set to true if write

async function verifyPermission(fileHandle, withWrite) {
  const opts = {};
  if (withWrite) {
    opts.mode = \[dq]readwrite\[dq];
  }

  // Check if we already have permission, if so, return true.
  if ((await fileHandle.queryPermission(opts)) === \[dq]granted\[dq]) {
    return true;
  }

  // Request permission to the file, if the user grants permission, return true.
  if ((await fileHandle.requestPermission(opts)) === \[dq]granted\[dq]) {
    return true;
  }

  // The user did not grant permission, return false.
  return false;
}
.EE
.SS Comparing Entries
The following function compares a single entry with an array of entries,
and returns a new array with any matching entries removed.
.IP
.EX
function removeMatches(fileEntry, entriesArr) {
  const newArr = entriesArr.filter((entry) => !fileEntry.isSameEntry(entry));

  return newArr;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR
https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
