.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "IDBRequest.error_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBRequest.error_event \- IDBRequest: error event
.SH SYNOPSIS
The \f[CR]error\f[R] handler is executed when an error caused a request
to fail.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]error\[dq], (event) => {});

onerror = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example opens a database and tries to add a record, listening for
the \f[CR]error\f[R] event for the \f[CR]add()\f[R] operation (this will
occur if, for example, a record with the given \f[CR]taskTitle\f[R]
already exists):
.IP
.EX
// Open the database
const DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.addEventListener(\[dq]upgradeneeded\[dq], (event) => {
  const db = event.target.result;

  db.onerror = () => {
    console.log(\[dq]Error creating database\[dq]);
  };

  // Create an objectStore for this database
  const objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  // define what data items the objectStore will contain
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: false });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: false });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: false });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: false });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: false });
});

DBOpenRequest.addEventListener(\[dq]success\[dq], (event) => {
  const db = DBOpenRequest.result;

  // open a read/write db transaction, ready for adding the data
  const transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);
  const objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
  const newItem = {
    taskTitle: \[dq]my task\[dq],
    hours: 10,
    minutes: 10,
    day: 10,
    month: \[dq]January\[dq],
    year: 2020,
  };

  const objectStoreRequest = objectStore.add(newItem);
  objectStoreRequest.addEventListener(\[dq]error\[dq], () => {
    console.log(\[ga]Error adding new item: ${newItem.taskTitle}\[ga]);
  });
});
.EE
.PP
The same example, using the \f[CR]onerror\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
// Open the database
const DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onupgradeneeded = (event) => {
  const db = event.target.result;

  db.onerror = () => {
    console.log(\[dq]Error creating database\[dq]);
  };

  // Create an objectStore for this database
  const objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  // define what data items the objectStore will contain
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: false });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: false });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: false });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: false });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: false });
};

DBOpenRequest.onsuccess = (event) => {
  const db = DBOpenRequest.result;

  // open a read/write db transaction, ready for adding the data
  const transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);
  const objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
  const newItem = {
    taskTitle: \[dq]my task\[dq],
    hours: 10,
    minutes: 10,
    day: 10,
    month: \[dq]January\[dq],
    year: 2020,
  };

  const objectStoreRequest = objectStore.add(newItem);
  objectStoreRequest.onerror = () => {
    console.log(\[ga]Error adding new item: ${newItem.taskTitle}\[ga]);
  };
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
