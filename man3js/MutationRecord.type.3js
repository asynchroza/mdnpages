.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MutationRecord.type" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.type \- MutationRecord: type property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]type\f[B]\f[R] is the type of the \f[CR]MutationRecord\f[R]
observed by a \f[CR]MutationObserver\f[R].
.SH VALUE
The property is set to the type of the mutation as a string.
The value can be one of the following:
.IP \[bu] 2
\f[CR]attributes\f[R] if the mutation was an attribute mutation.
.IP \[bu] 2
\f[CR]characterData\f[R] if it was a mutation to a
\f[CR]CharacterData\f[R] node.
.IP \[bu] 2
\f[CR]childList\f[R] if the mutation a mutation to the tree of nodes.
.SH EXAMPLES
.SS Log the type of a mutation
The following example gives you two buttons to manipulate the DOM.
The first button adds a new node to the example, and the second button
changes the \f[CR]color\f[R] attribute of all the added nodes.
A \f[CR]MutationObserver\f[R] is created to observe it all, and the
observer is set to log the \f[CR]type\f[R] of the mutation record to
\f[CR]#log\f[R].
.PP
You\[cq]ll notice the when you add a node, the \f[CR]type\f[R] is
\f[CR]childList\f[R], and when you change the \f[CR]color\f[R]
attribute, the \f[CR]type\f[R] is \f[CR]attributes\f[R].
.SS HTML
.IP
.EX
<button id=\[dq]add\-nodes\[dq]>Add a node</button>
<button id=\[dq]set\-attribute\[dq]>Change the color</button>

<button id=\[dq]reset\[dq]>Reset</button>

<pre id=\[dq]log\[dq]>Mutation type:</pre>
<div id=\[dq]target\[dq]><p>Node #0</p></div>
.EE
.PP
\[ga]\[ga]\[ga]css hidden log { border: 1px dotted black; padding:
0.5rem; }
.PP
\&.blue { color: blue; }
.PP
\&.red { color: red; }
.IP
.EX

### JavaScript

\[ga]\[ga]\[ga]js
const addNodes = document.querySelector(\[dq]#add\-nodes\[dq]);
const setAttribute = document.querySelector(\[dq]#set\-attribute\[dq]);
const reset = document.querySelector(\[dq]#reset\[dq]);
const log = document.querySelector(\[dq]#log\[dq]);
const target = document.querySelector(\[dq]#target\[dq]);
let nodeNumber = 1;

addNodes.addEventListener(\[dq]click\[dq], () => {
  const newPara = document.createElement(\[dq]p\[dq]);
  newPara.textContent = \[ga]Node #${nodeNumber}\[ga];
  nodeNumber++;
  target.appendChild(newPara);
});

setAttribute.addEventListener(\[dq]click\[dq], () => {
  if (target.getAttribute(\[dq]class\[dq]) === \[dq]red\[dq]) {
    target.setAttribute(\[dq]class\[dq], \[dq]blue\[dq]);
  } else {
    target.setAttribute(\[dq]class\[dq], \[dq]red\[dq]);
  }
});

reset.addEventListener(\[dq]click\[dq], () => self.location.reload());

function logMutationType(records) {
  for (const record of records) {
    log.textContent = \[ga]Mutation type: ${record.type}\[ga];
  }
}

const observer = new MutationObserver(logMutationType);
observer.observe(target, { childList: true, attributes: true, subtree: true });
.EE
.SS Result
