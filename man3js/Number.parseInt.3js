.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.parseInt" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Number.parseInt()\f[B]\f[R] static method parses a string
argument and returns an integer of the specified radix or base.
.SH Syntax
.IP
.nf
\f[C]
Number.parseInt(string)
Number.parseInt(string, radix)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]string\f[R]
.RS 2
.IP \[bu] 2
The value to parse, coerced to a string.
Leading whitespace in this argument is ignored.
.RE
.IP \[bu] 2
\f[V]radix\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An integer between \f[V]2\f[R] and \f[V]36\f[R] that represents the
\f[I]radix\f[R] (the base in mathematical numeral systems) of the
\f[V]string\f[R].
.RS 2
.PP
If \f[V]radix\f[R] is undefined or \f[V]0\f[R], it is assumed to be
\f[V]10\f[R] except when the number begins with the code unit pairs
\f[V]0x\f[R] or \f[V]0X\f[R], in which case a radix of \f[V]16\f[R] is
assumed.
.RE
.RE
.SS Return value
.PP
An integer parsed from the given \f[V]string\f[R].
.PP
If the \f[V]radix\f[R] is smaller than \f[V]2\f[R] or bigger than
\f[V]36\f[R], or the first non-whitespace character cannot be converted
to a number, \f[V]NaN\f[R] is returned.
.SH Examples
.SS Number.parseInt vs.\ parseInt
.PP
This method has the same functionality as the global
\f[V]parseInt()\f[R] function:
.IP
.nf
\f[C]
Number.parseInt === parseInt; // true
\f[R]
.fi
.PP
Its purpose is modularization of globals.
Please see \f[V]parseInt()\f[R] for more detail and examples.
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Number.parseInt\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-number)
.IP \[bu] 2
The \f[V]Number\f[R] object it belongs to.
.IP \[bu] 2
The global \f[V]parseInt()\f[R] method.
