.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Reflect - Reflect
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Reflect\f[B]\f[R] namespace object contains static
methods for invoking interceptable JavaScript object internal methods.
The methods are the same as those of proxy handlers.
.SH DESCRIPTION
.PP
Unlike most global objects, \f[V]Reflect\f[R] is not a constructor.
You cannot use it with the \f[V]new\f[R] operator or invoke the
\f[V]Reflect\f[R] object as a function.
All properties and methods of \f[V]Reflect\f[R] are static (just like
the \f[V]Math\f[R] object).
.PP
The \f[V]Reflect\f[R] object provides a collection of static functions
which have the same names as the proxy handler methods.
.PP
The major use case of \f[V]Reflect\f[R] is to provide default forwarding
behavior in \f[V]Proxy\f[R] handler traps.
A trap is used to intercept an operation on an object \[em] it provides
a custom implementation for an object internal method.
The \f[V]Reflect\f[R] API is used to invoke the corresponding internal
method.
For example, the code below creates a proxy \f[V]p\f[R] with a
\f[V]deleteProperty\f[R] trap that intercepts the \f[V][[Delete]]\f[R]
internal method.
\f[V]Reflect.deleteProperty()\f[R] is used to invoke the default
\f[V][[Delete]]\f[R] behavior on \f[V]targetObject\f[R] directly.
You can replace it with \f[V]delete\f[R], but using \f[V]Reflect\f[R]
saves you from having to remember the syntax that each internal method
corresponds to.
.IP
.nf
\f[C]
const p = new Proxy(
  {},
  {
    deleteProperty(targetObject, property) {
      // Custom functionality: log the deletion
      console.log(\[dq]Deleting property:\[dq], property);

      // Execute the default introspection behavior
      return Reflect.deleteProperty(targetObject, property);
    },
  },
);
\f[R]
.fi
.PP
The \f[V]Reflect\f[R] methods also allow finer control of how the
internal method is invoked.
For example, \f[V]Reflect.construct()\f[R] is the only way to construct
a target function with a specific \f[V]new.target\f[R] value.
If you use the \f[V]new\f[R] operator to invoke a function, the
\f[V]new.target\f[R] value is always the function itself.
This has important effects with subclassing.
For another example, \f[V]Reflect.get()\f[R] allows you to run a getter
with a custom \f[V]this\f[R] value, while property accessors always use
the current object as the \f[V]this\f[R] value.
.PP
Nearly every \f[V]Reflect\f[R] method\[cq]s behavior can be done with
some other syntax or method.
Some of these methods have corresponding static methods of the same name
on \f[V]Object\f[R], although they do have some subtle differences.
For the exact differences, see the description for each
\f[V]Reflect\f[R] method.
.SH STATIC PROPERTIES
.TP
\f[B]Reflect[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]Reflect\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.SH STATIC METHODS
.TP
\f[B]Reflect.apply()\f[R]
Calls a \f[V]target\f[R] function with arguments as specified by the
\f[V]argumentsList\f[R] parameter.
See also \f[V]Function.prototype.apply()\f[R].
.TP
\f[B]Reflect.construct()\f[R]
The \f[V]new\f[R] operator as a function.
Equivalent to calling \f[V]new target(...argumentsList)\f[R].
Also provides the option to specify a different prototype.
.TP
\f[B]Reflect.defineProperty()\f[R]
Similar to \f[V]Object.defineProperty()\f[R].
Returns a boolean that is \f[V]true\f[R] if the property was
successfully defined.
.TP
\f[B]Reflect.deleteProperty()\f[R]
The \f[V]delete\f[R] operator as a function.
Equivalent to calling \f[V]delete target[propertyKey]\f[R].
.TP
\f[B]Reflect.get()\f[R]
Returns the value of the property.
Works like getting a property from an object
(\f[V]target[propertyKey]\f[R]) as a function.
.TP
\f[B]Reflect.getOwnPropertyDescriptor()\f[R]
Similar to \f[V]Object.getOwnPropertyDescriptor()\f[R].
Returns a property descriptor of the given property if it exists on the
object, \f[V]undefined\f[R] otherwise.
.TP
\f[B]Reflect.getPrototypeOf()\f[R]
Same as \f[V]Object.getPrototypeOf()\f[R].
.TP
\f[B]Reflect.has()\f[R]
Returns a boolean indicating whether the target has the property.
Either as own or inherited.
Works like the \f[V]in\f[R] operator as a function.
.TP
\f[B]Reflect.isExtensible()\f[R]
Same as \f[V]Object.isExtensible()\f[R].
Returns a boolean that is \f[V]true\f[R] if the target is extensible.
.TP
\f[B]Reflect.ownKeys()\f[R]
Returns an array of the target object\[cq]s own (not inherited) property
keys.
.TP
\f[B]Reflect.preventExtensions()\f[R]
Similar to \f[V]Object.preventExtensions()\f[R].
Returns a boolean that is \f[V]true\f[R] if the update was successful.
.TP
\f[B]Reflect.set()\f[R]
A function that assigns values to properties.
Returns a boolean that is \f[V]true\f[R] if the update was successful.
.TP
\f[B]Reflect.setPrototypeOf()\f[R]
A function that sets the prototype of an object.
Returns a boolean that is \f[V]true\f[R] if the update was successful.
.SH EXAMPLES
.SS Detecting whether an object contains certain properties
.IP
.nf
\f[C]
const duck = {
  name: \[dq]Maurice\[dq],
  color: \[dq]white\[dq],
  greeting() {
    console.log(\[ga]Quaaaack! My name is ${this.name}\[ga]);
  },
};

Reflect.has(duck, \[dq]color\[dq]);
// true
Reflect.has(duck, \[dq]haircut\[dq]);
// false
\f[R]
.fi
.SS Returning the object\[cq]s own keys
.IP
.nf
\f[C]
Reflect.ownKeys(duck);
// [ \[dq]name\[dq], \[dq]color\[dq], \[dq]greeting\[dq] ]
\f[R]
.fi
.SS Adding a new property to the object
.IP
.nf
\f[C]
Reflect.set(duck, \[dq]eyes\[dq], \[dq]black\[dq]);
// returns \[dq]true\[dq] if successful
// \[dq]duck\[dq] now contains the property \[dq]eyes: \[aq]black\[aq]\[dq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
The \f[V]Proxy\f[R] global object
.IP \[bu] 2
The \f[V]Proxy()\f[R] constructor
