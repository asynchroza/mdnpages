.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RangeError.RangeError" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
RangeError.RangeError - RangeError() constructor
.SH SYNOPSIS
.PP
The \f[B]\f[VB]RangeError()\f[B]\f[R] constructor creates
\f[V]RangeError\f[R] objects.
.SH SYNTAX
.IP
.nf
\f[C]
new RangeError()
new RangeError(message)
new RangeError(message, options)
new RangeError(message, fileName)
new RangeError(message, fileName, lineNumber)

RangeError()
RangeError(message)
RangeError(message, options)
RangeError(message, fileName)
RangeError(message, fileName, lineNumber)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]RangeError()\f[R] can be called with or without
\f[V]new\f[R].
Both create a new \f[V]RangeError\f[R] instance.
.RE
.SS Parameters
.TP
\f[B]message\f[R] \f[I](optional)\f[R]
Human-readable description of the error.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that has the following properties:
.RS
.TP
\f[B]cause\f[R] \f[I](optional)\f[R]
A property indicating the specific cause of the error.
When catching and re-throwing an error with a more-specific or useful
error message, this property can be used to pass the original error.
.RE
.TP
\f[B]fileName\f[R] \f[I](optional)\f[R] \f[I](non-standard)\f[R]
The name of the file containing the code that caused the exception
.TP
\f[B]lineNumber\f[R] \f[I](optional)\f[R] \f[I](non-standard)\f[R]
The line number of the code that caused the exception
.SH EXAMPLES
.SS Using RangeError (for numeric values)
.IP
.nf
\f[C]
function check(n) {
  if (!(n >= -500 && n <= 500)) {
    throw new RangeError(\[dq]The argument must be between -500 and 500.\[dq]);
  }
}

try {
  check(2000);
} catch (error) {
  if (error instanceof RangeError) {
    // Handle the error
  }
}
\f[R]
.fi
.SS Using RangeError (for non-numeric values)
.IP
.nf
\f[C]
function check(value) {
  if (![\[dq]apple\[dq], \[dq]banana\[dq], \[dq]carrot\[dq]].includes(value)) {
    throw new RangeError(
      \[aq]The argument must be an \[dq]apple\[dq], \[dq]banana\[dq], or \[dq]carrot\[dq].\[aq],
    );
  }
}

try {
  check(\[dq]cabbage\[dq]);
} catch (error) {
  if (error instanceof RangeError) {
    // Handle the error
  }
}
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Error\f[R]
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toPrecision()\f[R]
.IP \[bu] 2
\f[V]String.prototype.normalize()\f[R]
