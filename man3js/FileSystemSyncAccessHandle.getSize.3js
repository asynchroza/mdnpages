.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FileSystemSyncAccessHandle.getSize" "JS" "December 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemSyncAccessHandle.getSize \- FileSystemSyncAccessHandle:
getSize() method
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]getSize()\f[B]\f[R] method of the
\f[CR]FileSystemSyncAccessHandle\f[R] interface returns the size of the
file associated with the handle in bytes.
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH SYNTAX
.IP
.EX
getSize()
.EE
.SS Parameters
None.
.SS Return value
A number representing the size of the file in bytes.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the associated access handle is already closed.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP \[bu] 2
Creates a synchronous file access handle.
.IP \[bu] 2
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP \[bu] 2
Reads the file contents into the buffer.
.IP \[bu] 2
Encodes the message and writes it to the end of the file.
.IP \[bu] 2
Persists the changes to disk and closes the access handle.
.IP
.EX
onmessage = async (e) => {
  // Retrieve message sent to work from main script
  const message = e.data;

  // Get handle to draft file
  const root = await navigator.storage.getDirectory();
  const draftHandle = await root.getFileHandle(\[dq]draft.txt\[dq], { create: true });
  // Get sync access handle
  const accessHandle = await draftHandle.createSyncAccessHandle();

  // Get size of the file.
  const fileSize = accessHandle.getSize();
  // Read file content to a buffer.
  const buffer = new DataView(new ArrayBuffer(fileSize));
  const readBuffer = accessHandle.read(buffer, { at: 0 });

  // Write the message to the end of the file.
  const encoder = new TextEncoder();
  const encodedMessage = encoder.encode(message);
  const writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  // Persist changes to disk.
  accessHandle.flush();

  // Always close FileSystemSyncAccessHandle if done.
  accessHandle.close();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR
https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
