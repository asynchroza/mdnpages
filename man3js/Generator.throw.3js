.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Generator.throw" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Generator.throw - Generator.prototype.throw()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]throw()\f[B]\f[R] method of \f[V]Generator\f[R] instances
acts as if a \f[V]throw\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which informs
the generator of an error condition and allows it to handle the error,
or perform cleanup and close itself.
.SH SYNTAX
.IP
.nf
\f[C]
generatorObject.throw(exception)
\f[R]
.fi
.SS Parameters
.TP
\f[B]exception\f[R]
The exception to throw.
For debugging purposes, it is useful to make it an \f[V]instanceof\f[R]
\f[V]Error\f[R].
.SS Return value
.PP
If the thrown exception is caught by a \f[V]try...catch\f[R] and the
generator resumes to yield more values, it will return an
\f[V]Object\f[R] with two properties:
.TP
\f[B]done\f[R]
A boolean value:
.RS
.IP \[bu] 2
\f[V]true\f[R] if the generator function\[cq]s control flow has reached
the end.
.IP \[bu] 2
\f[V]false\f[R] if the generator function is able to produce more
values.
.RE
.TP
\f[B]value\f[R]
The value yielded from the next \f[V]yield\f[R] expression.
.SS Exceptions
.PP
If the thrown exception is not caught by a \f[V]try...catch\f[R], the
\f[V]exception\f[R] passed to \f[V]throw()\f[R] will be thrown out from
the generator function.
.SH DESCRIPTION
.PP
The \f[V]throw()\f[R] method, when called, can be seen as if a
\f[V]throw exception;\f[R] statement is inserted in the generator\[cq]s
body at the current suspended position, where \f[V]exception\f[R] is the
exception passed to the \f[V]throw()\f[R] method.
Therefore, in a typical flow, calling \f[V]throw(exception)\f[R] will
cause the generator to throw.
However, if the \f[V]yield\f[R] expression is wrapped in a
\f[V]try...catch\f[R] block, the error may be caught and control flow
can either resume after error handling, or exit gracefully.
.SH EXAMPLES
.SS Using throw()
.PP
The following example shows a simple generator and an error that is
thrown using the \f[V]throw\f[R] method.
An error can be caught by a \f[V]try...catch\f[R] block as usual.
.IP
.nf
\f[C]
function* gen() {
  while (true) {
    try {
      yield 42;
    } catch (e) {
      console.log(\[dq]Error caught!\[dq]);
    }
  }
}

const g = gen();
g.next();
// { value: 42, done: false }
g.throw(new Error(\[dq]Something went wrong\[dq]));
// \[dq]Error caught!\[dq]
// { value: 42, done: false }
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]function*\f[R]
