.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Object.defineSetter" "JS" "April 5, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.defineSetter - Object.prototype.__defineSetter__()
.SH SYNOPSIS
\f[I](deprecated)\f[R]
.RS
.PP
\f[B]Note:\f[R] This feature is deprecated in favor of defining setters
using the object initializer syntax or the
\f[CR]Object.defineProperty()\f[R] API.
This method\[cq]s behavior is only specified for web compatibility, and
is not required to be implemented in any platform.
It may not work everywhere.
.RE
.PP
The \f[B]\f[CB]__defineSetter__()\f[B]\f[R] method binds an object\[cq]s
property to a function to be called when an attempt is made to set that
property.
.SH SYNTAX
.IP
.EX
__defineSetter__(prop, func)
.EE
.SS Parameters
.TP
\f[B]prop\f[R]
A string containing the name of the property that the setter
\f[CR]func\f[R] is bound to.
.TP
\f[B]func\f[R]
A function to be called when there is an attempt to set the specified
property.
This function receives the following parameter:
.RS
.TP
\f[B]val\f[R]
The value attempted to be assigned to \f[CR]prop\f[R].
.RE
.SS Return value
\f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]func\f[R] is not a function.
.SH DESCRIPTION
All objects that inherit from \f[CR]Object.prototype\f[R] (that is, all
except \f[CR]null\f[R]-prototype objects) inherit the
\f[CR]__defineSetter__()\f[R] method.
This method allows a setter to be defined on a pre-existing object.
This is equivalent to
\f[CR]Object.defineProperty(obj, prop, { set: func, configurable: true, enumerable: true })\f[R],
which means the property is enumerable and configurable, and any
existing getter, if present, is preserved.
.PP
\f[CR]__defineSetter__()\f[R] is defined in the spec as \[lq]normative
optional\[rq], which means no implementation is required to implement
this.
However, all major browsers implement it, and due to its continued
usage, it\[cq]s unlikely to be removed.
If a browser implements \f[CR]__defineSetter__()\f[R], it also needs to
implement the \f[CR]__lookupGetter__()\f[R],
\f[CR]__lookupSetter__()\f[R], and \f[CR]__defineGetter__()\f[R]
methods.
.SH EXAMPLES
.SS Using __defineSetter__()
.IP
.EX
const o = {};
o.__defineSetter__(\[dq]value\[dq], function (val) {
  this.anotherValue = val;
});
o.value = 5;
console.log(o.value); // undefined
console.log(o.anotherValue); // 5
.EE
.SS Defining a setter property in standard ways
You can use the \f[CR]set\f[R] syntax to define a setter when the object
is first initialized.
.IP
.EX
const o = {
  set value(val) {
    this.anotherValue = val;
  },
};
o.value = 5;
console.log(o.value); // undefined
console.log(o.anotherValue); // 5
.EE
.PP
You may also use \f[CR]Object.defineProperty()\f[R] to define a setter
on an object after it\[cq]s been created.
Compared to \f[CR]__defineSetter__()\f[R], this method allows you to
control the setter\[cq]s enumerability and configurability, as well as
defining symbol properties.
The \f[CR]Object.defineProperty()\f[R] method also works with
\f[CR]null\f[R]-prototype objects, which don\[cq]t inherit from
\f[CR]Object.prototype\f[R] and therefore don\[cq]t have the
\f[CR]__defineSetter__()\f[R] method.
.IP
.EX
const o = {};
Object.defineProperty(o, \[dq]value\[dq], {
  set(val) {
    this.anotherValue = val;
  },
  configurable: true,
  enumerable: true,
});
o.value = 5;
console.log(o.value); // undefined
console.log(o.anotherValue); // 5
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Object.prototype.__defineSetter__\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-object)
.IP \[bu] 2
\f[CR]Object.prototype.__defineGetter__()\f[R]
.IP \[bu] 2
\f[CR]set\f[R] syntax
.IP \[bu] 2
\f[CR]Object.defineProperty()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.__lookupGetter__()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.__lookupSetter__()\f[R]
.IP \[bu] 2
JS Guide: Defining Getters and Setters
.IP \[bu] 2
[Blog Post] Deprecation of __defineGetter__ and
__defineSetter__ (https://whereswalden.com/2010/04/16/more-spidermonkey-changes-ancient-esoteric-very-rarely-used-syntax-for-creating-getters-and-setters-is-being-removed/)
.IP \[bu] 2
Firefox bug 647423 (https://bugzil.la/647423)
