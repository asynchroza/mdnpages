.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "BaseAudioContext.createGain" "JS" "November 28, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BaseAudioContext.createGain \- BaseAudioContext: createGain() method
.SH SYNOPSIS
The \f[CR]createGain()\f[R] method of the \f[CR]BaseAudioContext\f[R]
interface creates a \f[CR]GainNode\f[R], which can be used to control
the overall gain (or volume) of the audio graph.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]GainNode()\f[R] constructor is the recommended
way to create a \f[CR]GainNode\f[R]; see Creating an AudioNode.
.RE
.SH SYNTAX
.IP
.EX
createGain()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]GainNode\f[R] which takes as input one or more audio sources and
outputs audio whose volume has been adjusted in gain (volume) to a level
specified by the node\[cq]s \f[CR]GainNode.gain\f[R] a\-rate parameter.
.SH EXAMPLES
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
create a \f[CR]GainNode\f[R], which is then used to mute and unmute the
audio when a Mute button is clicked by changing the \f[CR]gain\f[R]
property value.
.PP
The below snippet wouldn\[cq]t work as is \[em] for a complete working
example, check out our \c
.UR https://mdn.github.io/webaudio-examples/voice-change-o-matic/
Voice\-change\-O\-matic
.UE \c
\ demo (\c
.UR
https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic/scripts/app.js
view source
.UE \c
\&.)
.IP
.EX
<div>
  <button class=\[dq]mute\[dq]>Mute button</button>
</div>
.EE
.IP
.EX
const audioCtx = new AudioContext();
const gainNode = audioCtx.createGain();
const mute = document.querySelector(\[dq].mute\[dq]);
let source;

if (navigator.mediaDevices.getUserMedia) {
  navigator.mediaDevices.getUserMedia(
    // constraints \- only audio needed for this app
    {
      audio: true,
    },

    // Success callback
    (stream) => {
      source = audioCtx.createMediaStreamSource(stream);
    },

    // Error callback
    (err) => {
      console.error(\[ga]The following gUM error occurred: ${err}\[ga]);
    },
  );
} else {
  console.error(\[dq]getUserMedia not supported on your browser!\[dq]);
}

source.connect(gainNode);
gainNode.connect(audioCtx.destination);

// \&...

mute.onclick = () => {
  if (mute.id === \[dq]\[dq]) {
    // 0 means mute. If you still hear something, make sure you haven\[aq]t
    // connected your source into the output in addition to using the GainNode.
    gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
    mute.id = \[dq]activated\[dq];
    mute.textContent = \[dq]Unmute\[dq];
  } else {
    gainNode.gain.setValueAtTime(1, audioCtx.currentTime);
    mute.id = \[dq]\[dq];
    mute.textContent = \[dq]Mute\[dq];
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
