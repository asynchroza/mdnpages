.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "AsyncGenerator.next" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]next()\f[B]\f[R] method returns the next value in the
sequence.
.SH Syntax
.IP
.nf
\f[C]
asyncGeneratorObject.next()
asyncGeneratorObject.next(value)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]value\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An optional value used to modify the internal state of the generator.
A value passed to the \f[V]next()\f[R] method will be received by
\f[V]yield\f[R]
.RE
.SS Return value
.PP
A \f[V]Promise\f[R] which when resolved returns an \f[V]Object\f[R] with
two properties:
.IP \[bu] 2
\f[V]done\f[R]
.RS 2
.IP \[bu] 2
A boolean value:
.RS 2
.IP \[bu] 2
\f[V]true\f[R] if the generator is past the end of its control flow.
In this case \f[V]value\f[R] specifies the \f[I]return value\f[R] of the
generator (which may be undefined).
.IP \[bu] 2
\f[V]false\f[R] if the generator is able to produce more values.
.RE
.RE
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
Any JavaScript value yielded or returned by the generator.
.RE
.SH Examples
.SS Using next()
.PP
The following example shows a simple generator and the object that the
\f[V]next\f[R] method returns:
.IP
.nf
\f[C]
// An async task. Pretend it\[aq]s doing something more useful
// in practice.
function delayedValue(time, value) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(value), time);
  });
}

async function* createAsyncGenerator() {
  yield delayedValue(500, 1);
  yield delayedValue(500, 2);
  yield delayedValue(500, 3);
}

const asyncGen = createAsyncGenerator();
asyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }
asyncGen.next().then((res) => console.log(res)); // { value: 2, done: false }
asyncGen.next().then((res) => console.log(res)); // { value: 3, done: false }
asyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true }
\f[R]
.fi
.SS Sending values to the generator
.PP
In this example, \f[V]next\f[R] is called with a value.
.RS
.PP
\f[B]Note:\f[R] The first call does not log anything, because the
generator was not yielding anything initially.
.RE
.IP
.nf
\f[C]
// An async task. Pretend it\[aq]s doing something more useful
// in practice.
function sleep(time) {
  return new Promise((resolve, reject) => {
    setTimeout(resolve, time);
  });
}

async function* createAsyncGenerator() {
  while (true) {
    await sleep(500);
    const value = yield;
    console.log(value);
  }
}

async function main() {
  const asyncGen = createAsyncGenerator();
  // No log at this step: the first value sent through \[ga]next\[ga] is lost
  console.log(await asyncGen.next(1)); // { value: undefined, done: false }
  // Logs 2: the value sent through \[ga]next\[ga]
  console.log(await asyncGen.next(2)); // { value: undefined, done: false }
}

main();
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]async function*\f[R]
.IP \[bu] 2
Iterators and generators
