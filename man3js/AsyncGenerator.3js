.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "AsyncGenerator" "JS" "April 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AsyncGenerator - AsyncGenerator
.SH SYNOPSIS
The \f[B]\f[CB]AsyncGenerator\f[B]\f[R] object is returned by an
\f[CR]async generator function\f[R] and it conforms to both the async
iterable protocol and the async iterator protocol.
.PP
Async generator methods always yield \f[CR]Promise\f[R] objects.
.PP
\f[CR]AsyncGenerator\f[R] is a subclass of the hidden
\f[CR]AsyncIterator\f[R] class.
.SH CONSTRUCTOR
The \f[CR]AsyncGenerator\f[R] constructor is not available globally.
Instances of \f[CR]AsyncGenerator\f[R] must be returned from async
generator functions
.IP
.EX
async function* createAsyncGenerator() {
  yield await Promise.resolve(1);
  yield await Promise.resolve(2);
  yield await Promise.resolve(3);
}
const asyncGen = createAsyncGenerator();
asyncGen.next().then((res) => console.log(res.value)); // 1
asyncGen.next().then((res) => console.log(res.value)); // 2
asyncGen.next().then((res) => console.log(res.value)); // 3
.EE
.PP
In fact, there\[cq]s no JavaScript entity that corresponds to the
\f[CR]AsyncGenerator\f[R] constructor.
There\[cq]s only a hidden object which is the prototype object shared by
all objects created by async generator functions.
This object is often stylized as \f[CR]AsyncGenerator.prototype\f[R] to
make it look like a class, but it should be more appropriately called
\f[CR]AsyncGeneratorFunction.prototype.prototype\f[R], because
\f[CR]AsyncGeneratorFunction\f[R] is an actual JavaScript entity.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]AsyncGenerator.prototype\f[R] and
shared by all \f[CR]AsyncGenerator\f[R] instances.
.TP
\f[B]AsyncGenerator.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]AsyncGenerator\f[R] instances, the initial value is
\f[CR]AsyncGeneratorFunction.prototype\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] \f[CR]AsyncGenerator\f[R] objects do not store a
reference to the async generator function that created them.
.RE
.RE
.TP
\f[B]AsyncGenerator.prototype[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[CR]\[at]\[at]toStringTag\f[R] property is
the string \f[CR]\[dq]AsyncGenerator\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
\f[I]Also inherits instance methods from its parent
\f[CI]AsyncIterator\f[I]\f[R].
.TP
\f[B]AsyncGenerator.prototype.next()\f[R]
Returns a \f[CR]Promise\f[R] which will be resolved with the given value
yielded by the \f[CR]yield\f[R] expression.
.TP
\f[B]AsyncGenerator.prototype.return()\f[R]
Acts as if a \f[CR]return\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which finishes
the generator and allows the generator to perform any cleanup tasks when
combined with a \f[CR]try...finally\f[R] block.
.TP
\f[B]AsyncGenerator.prototype.throw()\f[R]
Acts as if a \f[CR]throw\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which informs
the generator of an error condition and allows it to handle the error,
or perform cleanup and close itself.
.SH EXAMPLES
.SS Async generator iteration
The following example iterates over an async generator, logging values
1\[en]6 to the console at decreasing time intervals.
Notice how each time a Promise is yielded, but it\[cq]s automatically
resolved within the \f[CR]for await...of\f[R] loop.
.IP
.EX
// An async task. Pretend it\[aq]s doing something more useful
// in practice.
function delayedValue(time, value) {
  return new Promise((resolve /*, reject*/) => {
    setTimeout(() => resolve(value), time);
  });
}

async function* generate() {
  yield delayedValue(2000, 1);
  yield delayedValue(100, 2);
  yield delayedValue(500, 3);
  yield delayedValue(250, 4);
  yield delayedValue(125, 5);
  yield delayedValue(50, 6);
  console.log(\[dq]All done!\[dq]);
}

async function main() {
  for await (const value of generate()) {
    console.log(\[dq]value\[dq], value);
  }
}

main().catch((e) => console.error(e));
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]function*\f[R]
.IP \[bu] 2
\f[CR]async function*\f[R]
.IP \[bu] 2
\f[CR]function*\f[R] expression
.IP \[bu] 2
\f[CR]Generator Function\f[R]
.IP \[bu] 2
\f[CR]Async Generator Function\f[R]
.IP \[bu] 2
Iterators and generators
