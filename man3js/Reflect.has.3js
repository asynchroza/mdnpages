.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.has" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Reflect.has - Reflect.has()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Reflect.has()\f[B]\f[R] static method is like the
\f[V]in\f[R] operator, but as a function.
.SH SYNTAX
.IP
.nf
\f[C]
Reflect.has(target, propertyKey)
\f[R]
.fi
.SS Parameters
.TP
\f[B]target\f[R]
The target object in which to look for the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to check.
.SS Return value
.PP
A \f[V]Boolean\f[R] indicating whether or not the \f[V]target\f[R] has
the property.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[V]target\f[R] is not an object.
.SH DESCRIPTION
.PP
\f[V]Reflect.has()\f[R] provides the reflective semantic of checking if
a property is in an object.
That is, \f[V]Reflect.has(target, propertyKey)\f[R] is semantically
equivalent to:
.IP
.nf
\f[C]
propertyKey in target;
\f[R]
.fi
.PP
\f[V]Reflect.has()\f[R] invokes the \f[V][[HasProperty]]\f[R] object
internal method of \f[V]target\f[R].
.SH EXAMPLES
.SS Using Reflect.has()
.IP
.nf
\f[C]
Reflect.has({ x: 0 }, \[dq]x\[dq]); // true
Reflect.has({ x: 0 }, \[dq]y\[dq]); // false

// returns true for properties in the prototype chain
Reflect.has({ x: 0 }, \[dq]toString\[dq]);

// Proxy with .has() handler method
obj = new Proxy(
  {},
  {
    has(t, k) {
      return k.startsWith(\[dq]door\[dq]);
    },
  },
);
Reflect.has(obj, \[dq]doorbell\[dq]); // true
Reflect.has(obj, \[dq]dormitory\[dq]); // false
\f[R]
.fi
.PP
\f[V]Reflect.has\f[R] returns \f[V]true\f[R] for any inherited
properties, like the \f[V]in\f[R] operator:
.IP
.nf
\f[C]
const a = { foo: 123 };
const b = { __proto__: a };
const c = { __proto__: b };
// The prototype chain is: c -> b -> a
Reflect.has(c, \[dq]foo\[dq]); // true
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Reflect.has\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]in\f[R] operator
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]has\f[R] handler
