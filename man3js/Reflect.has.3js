.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Reflect.has" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.has - Reflect.has()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.has()\f[B]\f[R] static method is like the
\f[CR]in\f[R] operator, but as a function.
.SH SYNTAX
.IP
.EX
Reflect.has(target, propertyKey)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object in which to look for the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to check.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the \f[CR]target\f[R] has
the property.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.has()\f[R] provides the reflective semantic of checking if
a property is in an object.
That is, \f[CR]Reflect.has(target, propertyKey)\f[R] is semantically
equivalent to:
.IP
.EX
propertyKey in target;
.EE
.PP
\f[CR]Reflect.has()\f[R] invokes the \f[CR][[HasProperty]]\f[R] object
internal method of \f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.has()
.IP
.EX
Reflect.has({ x: 0 }, \[dq]x\[dq]); // true
Reflect.has({ x: 0 }, \[dq]y\[dq]); // false

// returns true for properties in the prototype chain
Reflect.has({ x: 0 }, \[dq]toString\[dq]);

// Proxy with .has() handler method
obj = new Proxy(
  {},
  {
    has(t, k) {
      return k.startsWith(\[dq]door\[dq]);
    },
  },
);
Reflect.has(obj, \[dq]doorbell\[dq]); // true
Reflect.has(obj, \[dq]dormitory\[dq]); // false
.EE
.PP
\f[CR]Reflect.has\f[R] returns \f[CR]true\f[R] for any inherited
properties, like the \f[CR]in\f[R] operator:
.IP
.EX
const a = { foo: 123 };
const b = { __proto__: a };
const c = { __proto__: b };
// The prototype chain is: c -> b -> a
Reflect.has(c, \[dq]foo\[dq]); // true
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Reflect.has\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[CR]Reflect\f[R]
.IP \[bu] 2
\f[CR]in\f[R]
.IP \[bu] 2
\f[CR]handler.has()\f[R]
