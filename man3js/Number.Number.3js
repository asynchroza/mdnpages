.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Number.Number" "JS" "August 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.Number \- Number() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Number()\f[B]\f[R] constructor creates \f[CR]Number\f[R]
objects.
When called as a function, it returns primitive values of type Number.
.SH SYNTAX
.IP
.EX
new Number(value)
Number(value)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Number()\f[R] can be called with or without
\f[CR]new\f[R], but with different effects.
See Return value.
.RE
.SS Parameters
.TP
\f[B]value\f[R]
The numeric value of the object being created.
.SS Return value
When \f[CR]Number\f[R] is called as a constructor (with \f[CR]new\f[R]),
it creates a \f[CR]Number\f[R] object, which is \f[B]not\f[R] a
primitive.
.PP
When \f[CR]Number\f[R] is called as a function, it coerces the parameter
to a number primitive.
BigInts are converted to numbers.
If the value can\[cq]t be converted, it returns \f[CR]NaN\f[R].
.RS
.PP
\f[B]Warning:\f[R] You should rarely find yourself using
\f[CR]Number\f[R] as a constructor.
.RE
.SH EXAMPLES
.SS Creating Number objects
.IP
.EX
const a = new Number(\[dq]123\[dq]); // a === 123 is false
const b = Number(\[dq]123\[dq]); // b === 123 is true
a instanceof Number; // is true
b instanceof Number; // is false
typeof a; // \[dq]object\[dq]
typeof b; // \[dq]number\[dq]
.EE
.SS Using Number() to convert a BigInt to a number
\f[CR]Number()\f[R] is the only case where a BigInt can be converted to
a number without throwing, because it\[cq]s very explicit.
.PP
\f[B]Bad\f[R]
.IP
.EX
+1n; // TypeError: Cannot convert a BigInt value to a number
0 + 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
Number(1n); // 1
.EE
.PP
Note that this may result in loss of precision, if the BigInt is too
large to be safely represented.
.IP
.EX
BigInt(Number(2n ** 54n + 1n)) === 2n ** 54n + 1n; // false
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-number
Polyfill of modern \f[CR]Number\f[R] behavior (with support binary and
octal literals) in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]NaN\f[R]
.IP \[bu] 2
\f[CR]Math\f[R]
.IP \[bu] 2
\f[CR]BigInt\f[R]
