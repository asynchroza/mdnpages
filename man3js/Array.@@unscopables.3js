'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.\[at]\[at]unscopables" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.\[at]\[at]unscopables - Array.prototype[\[at]\[at]unscopables]
.SH SYNOPSIS
.PP
The \f[B]\f[VB]\[at]\[at]unscopables\f[B]\f[R] data property of
\f[V]Array.prototype\f[R] is shared by all \f[V]Array\f[R] instances.
It contains property names that were not included in the ECMAScript
standard prior to the ES2015 version and that are ignored for
\f[V]with\f[R] statement-binding purposes.
.SH VALUE
.PP
A \f[V]null\f[R]-prototype object with property names given below and
their values set to \f[V]true\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
yes
T}
.TE
.SH DESCRIPTION
.PP
The default \f[V]Array\f[R] properties that are ignored for
\f[V]with\f[R] statement-binding purposes are:
.IP \[bu] 2
\f[V]at()\f[R]
.IP \[bu] 2
\f[V]copyWithin()\f[R]
.IP \[bu] 2
\f[V]entries()\f[R]
.IP \[bu] 2
\f[V]fill()\f[R]
.IP \[bu] 2
\f[V]find()\f[R]
.IP \[bu] 2
\f[V]findIndex()\f[R]
.IP \[bu] 2
\f[V]findLast()\f[R]
.IP \[bu] 2
\f[V]findLastIndex()\f[R]
.IP \[bu] 2
\f[V]flat()\f[R]
.IP \[bu] 2
\f[V]flatMap()\f[R]
.IP \[bu] 2
\f[V]includes()\f[R]
.IP \[bu] 2
\f[V]keys()\f[R]
.IP \[bu] 2
\f[V]toReversed()\f[R]
.IP \[bu] 2
\f[V]toSorted()\f[R]
.IP \[bu] 2
\f[V]toSpliced()\f[R]
.IP \[bu] 2
\f[V]values()\f[R]
.PP
\f[V]Array.prototype[\[at]\[at]unscopables]\f[R] is an empty object only
containing all the above property names with the value \f[V]true\f[R].
Its prototype is \f[V]null\f[R], so \f[V]Object.prototype\f[R]
properties like \f[V]toString\f[R] won\[cq]t accidentally be made
unscopable, and a \f[V]toString()\f[R] within the \f[V]with\f[R]
statement will continue to be called on the array.
.PP
See \f[V]Symbol.unscopables\f[R] for how to set unscopable properties
for your own objects.
.SH EXAMPLES
.PP
Imagine the \f[V]keys.push(\[aq]something\[aq])\f[R] call below is in
code that was written prior to ECMAScript 2015.
.IP
.nf
\f[C]
var keys = [];

with (Array.prototype) {
  keys.push(\[dq]something\[dq]);
}
\f[R]
.fi
.PP
When ECMAScript 2015 introduced the \f[V]Array.prototype.keys()\f[R]
method, if the \f[V]\[at]\[at]unscopables\f[R] data property had not
also been introduced, that \f[V]keys.push(\[aq]something\[aq])\f[R] call
would break \[em] because the JavaScript runtime would have interpreted
\f[V]keys\f[R] as being the \f[V]Array.prototype.keys()\f[R] method,
rather than the \f[V]keys\f[R] array defined in the example code.
.PP
So the \f[V]\[at]\[at]unscopables\f[R] data property for
\f[V]Array.prototype\f[R] causes the \f[V]Array\f[R] properties
introduced in ECMAScript 2015 to be ignored for \f[V]with\f[R]
statement-binding purposes \[em] allowing code that was written prior to
ECMAScript 2015 to continue working as expected, rather than breaking.
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype[\[at]\[at]unscopables]\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]with\f[R]
.IP \[bu] 2
\f[V]Symbol.unscopables\f[R]
