.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.map" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]map()\f[B]\f[R] method creates a new typed array with the
results of calling a provided function on every element in this typed
array.
This method has the same algorithm as \f[V]Array.prototype.map()\f[R].
\f[I]TypedArray\f[R] is one of the typed array types here.
.SH Syntax
.IP
.nf
\f[C]
map(callbackFn)
map(callbackFn, thisArg)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]callbackFn\f[R]
.RS 2
.IP \[bu] 2
A function to execute for each element in the typed array.
Its return value is added as a single element in the new typed array.
The function is called with the following arguments:
.RS 2
.IP \[bu] 2
\f[V]element\f[R]
.RS 2
.IP \[bu] 2
The current element being processed in the typed array.
.RE
.IP \[bu] 2
\f[V]index\f[R]
.RS 2
.IP \[bu] 2
The index of the current element being processed in the typed array.
.RE
.IP \[bu] 2
\f[V]array\f[R]
.RS 2
.IP \[bu] 2
The typed array \f[V]map()\f[R] was called upon.
.RE
.RE
.RE
.IP \[bu] 2
\f[V]thisArg\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A value to use as \f[V]this\f[R] when executing \f[V]callbackFn\f[R].
See iterative methods.
.RE
.SS Return value
.PP
A new typed array.
.SH Description
.PP
The \f[V]map()\f[R] method calls a provided callback function
(\f[V]callbackFn\f[R]) once for each element in a typed array, in order,
and constructs a new typed array from the results.
.PP
\f[V]callbackFn\f[R] is invoked only for indexes of the typed array
which have assigned values; it is not invoked for indexes that are
\f[V]undefined\f[R], those which have been deleted, or which have never
been assigned values.
.PP
\f[V]callbackFn\f[R] is invoked with three arguments: the value of the
element, the index of the element, and the typed array object being
traversed.
.PP
If a \f[V]thisArg\f[R] parameter is provided to \f[V]map()\f[R], it will
be passed to \f[V]callbackFn\f[R] when invoked, for use as its
\f[V]this\f[R] value.
Otherwise, the value \f[V]undefined\f[R] will be passed for use as its
\f[V]this\f[R] value.
The \f[V]this\f[R] value ultimately observable by \f[V]callbackFn\f[R]
is determined according to the usual rules for determining the
\f[V]this\f[R] seen by a function.
.PP
\f[V]map()\f[R] does not mutate the typed array on which it is called
(although \f[V]callbackFn\f[R], if invoked, may do so).
.PP
The range of elements processed by \f[V]map()\f[R] is set before the
first invocation of \f[V]callbackFn\f[R].
Elements which are appended to the array after the call to
\f[V]map()\f[R] begins will not be visited by \f[V]callbackFn\f[R].
If existing elements of the typed array are changed, or deleted, their
value as passed to \f[V]callbackFn\f[R] will be the value at the time
\f[V]map()\f[R] visits them; elements that are deleted are not visited.
.SH Examples
.SS Mapping a typed array to a typed array of square roots
.PP
The following code takes a typed array and creates a new typed array
containing the square roots of the numbers in the first typed array.
.IP
.nf
\f[C]
const numbers = new Uint8Array([1, 4, 9]);
const roots = numbers.map(Math.sqrt);
// roots is now: Uint8Array [1, 2, 3],
// numbers is still Uint8Array [1, 4, 9]
\f[R]
.fi
.SS Mapping a typed array of numbers using a function containing an argument
.PP
The following code shows how \f[V]map()\f[R] works when a function
requiring one argument is used with it.
The argument will automatically be assigned to each element of the typed
array as \f[V]map()\f[R] loops through the original typed array.
.IP
.nf
\f[C]
const numbers = new Uint8Array([1, 4, 9]);
const doubles = numbers.map((num) => num * 2);
// doubles is now Uint8Array [2, 8, 18]
// numbers is still Uint8Array [1, 4, 9]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]TypedArray.prototype.map\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
\f[V]TypedArray.prototype.filter()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.map()\f[R]
