.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.toPrecision" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Number.toPrecision - Number.prototype.toPrecision()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toPrecision()\f[B]\f[R] method returns a string
representing the \f[V]Number\f[R] object to the specified precision.
.SH SYNTAX
.IP
.nf
\f[C]
toPrecision()
toPrecision(precision)
\f[R]
.fi
.SS Parameters
.TP
\f[B]precision\f[R] \f[I](optional)\f[R]
An integer specifying the number of significant digits.
.SS Return value
.PP
A string representing a \f[V]Number\f[R] object in fixed-point or
exponential notation rounded to \f[V]precision\f[R] significant digits.
See the discussion of rounding in the description of the
\f[V]Number.prototype.toFixed()\f[R] method, which also applies to
\f[V]toPrecision()\f[R].
.PP
If the \f[V]precision\f[R] argument is omitted, behaves as
\f[V]Number.prototype.toString()\f[R].
If the \f[V]precision\f[R] argument is a non-integer value, it is
rounded to the nearest integer.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[V]precision\f[R] is not between \f[V]1\f[R] and
\f[V]100\f[R] (inclusive).
.SH EXAMPLES
.SS Using \f[V]toPrecision\f[R]
.IP
.nf
\f[C]
let num = 5.123456;

console.log(num.toPrecision()); // \[aq]5.123456\[aq]
console.log(num.toPrecision(5)); // \[aq]5.1235\[aq]
console.log(num.toPrecision(2)); // \[aq]5.1\[aq]
console.log(num.toPrecision(1)); // \[aq]5\[aq]

num = 0.000123;

console.log(num.toPrecision()); // \[aq]0.000123\[aq]
console.log(num.toPrecision(5)); // \[aq]0.00012300\[aq]
console.log(num.toPrecision(2)); // \[aq]0.00012\[aq]
console.log(num.toPrecision(1)); // \[aq]0.0001\[aq]

// note that exponential notation might be returned in some circumstances
console.log((1234.5).toPrecision(2)); // \[aq]1.2e+3\[aq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[V]Number.prototype.toString()\f[R]
