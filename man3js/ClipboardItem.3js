.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ClipboardItem" "JS" "January 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem \- ClipboardItem
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]ClipboardItem\f[B]\f[R] interface of the
\f[CR]Clipboard API\f[R] represents a single item format, used when
reading or writing data via the \f[CR]Clipboard API\f[R].
That is \f[CR]clipboard.read()\f[R] and \f[CR]clipboard.write()\f[R]
respectively.
.PP
The benefit of having the \f[B]\f[CB]ClipboardItem\f[B]\f[R] interface
to represent data, is that it enables developers to cope with the
varying scope of file types and data easily.
.PP
Access to the contents of the clipboard is gated behind the Permissions
API: The \f[CR]clipboard\-write\f[R] permission is granted automatically
to pages when they are in the active tab.
The \f[CR]clipboard\-read\f[R] permission must be requested, which you
can do by trying to read data from the clipboard.
.RS
.PP
\f[B]Note:\f[R] To work with text see the
\f[CR]Clipboard.readText()\f[R] and \f[CR]Clipboard.writeText()\f[R]
methods of the \f[CR]Clipboard\f[R] interface.
.RE
.RS
.PP
\f[B]Note:\f[R] You can only pass in one clipboard item at a time.
.RE
.SH CONSTRUCTOR
.TP
\f[B]ClipboardItem()\f[R]
Creates a new \f[B]\f[CB]ClipboardItem\f[B]\f[R] object, with the MIME
type as the key and \f[CR]Blob\f[R] as the value.
.SH INSTANCE PROPERTIES
\f[I]This interface provides the following properties.\f[R]
.TP
\f[B]types\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]Array\f[R] of MIME types available within the
\f[B]\f[CB]ClipboardItem\f[B]\f[R].
.TP
\f[B]presentationStyle\f[R] \f[I](read\-only)\f[R]
Returns one of the following: \f[CR]\[dq]unspecified\[dq]\f[R],
\f[CR]\[dq]inline\[dq]\f[R] or \f[CR]\[dq]attachment\[dq]\f[R].
.SH INSTANCE METHODS
\f[I]This interface defines the following methods.\f[R]
.TP
\f[B]getType()\f[R]
Returns a \f[CR]Promise\f[R] that resolves with a \f[CR]Blob\f[R] of the
requested MIME type, or an error if the MIME type is not found.
.SH EXAMPLES
.SS Writing To Clipboard
Here we\[cq]re writing a new \f[CR]ClipboardItem()\f[R] to the
\f[CR]clipboard\f[R] by requesting a png image using the
\f[CR]Fetch API\f[R], and in turn, the \f[CR]responses\[aq] blob()\f[R]
method, to create the new \f[CR]ClipboardItem\f[R].
.IP
.EX
async function writeClipImg() {
  try {
    const imgURL = \[dq]/myimage.png\[dq];
    const data = await fetch(imgURL);
    const blob = await data.blob();

    await navigator.clipboard.write([
      new ClipboardItem({
        [blob.type]: blob,
      }),
    ]);
    console.log(\[dq]Fetched image copied.\[dq]);
  } catch (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SS Reading From The Clipboard
Here we\[cq]re returning all items on the clipboard via the
\f[CR]clipboard.read()\f[R] method.
Then utilizing the \f[CR]ClipboardItem.types\f[R] property to set the
\f[CR]getType()\f[R] argument and return the corresponding blob object.
.IP
.EX
async function getClipboardContents() {
  try {
    const clipboardItems = await navigator.clipboard.read();

    for (const clipboardItem of clipboardItems) {
      for (const type of clipboardItem.types) {
        const blob = await clipboardItem.getType(type);
        // we can now use blob here
      }
    }
  } catch (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
