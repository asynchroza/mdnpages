.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.findLast" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.findLast - Array.prototype.findLast()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]findLast()\f[B]\f[R] method iterates the array in reverse
order and returns the value of the first element that satisfies the
provided testing function.
If no elements satisfy the testing function, \f[V]undefined\f[R] is
returned.
.PP
If you need to find:
.IP \[bu] 2
the \f[I]first\f[R] element that matches, use \f[V]find()\f[R].
.IP \[bu] 2
the \f[I]index\f[R] of the last matching element in the array, use
\f[V]findLastIndex()\f[R].
.IP \[bu] 2
the \f[I]index of a value\f[R], use \f[V]indexOf()\f[R].
(It\[cq]s similar to \f[V]findIndex()\f[R], but checks each element for
equality with the value instead of using a testing function.)
.IP \[bu] 2
whether a value \f[I]exists\f[R] in an array, use \f[V]includes()\f[R].
Again, it checks each element for equality with the value instead of
using a testing function.
.IP \[bu] 2
if any element satisfies the provided testing function, use
\f[V]some()\f[R].
.SH SYNTAX
.IP
.nf
\f[C]
findLast(callbackFn)
findLast(callbackFn, thisArg)
\f[R]
.fi
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[V]findLast()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[V]this\f[R] when executing \f[V]callbackFn\f[R].
See iterative methods.
.SS Return value
.PP
The value of the element in the array with the highest index value that
satisfies the provided testing function; \f[V]undefined\f[R] if no
matching element is found.
.SH DESCRIPTION
.PP
The \f[V]findLast()\f[R] method is an iterative method.
It calls a provided \f[V]callbackFn\f[R] function once for each element
in an array in descending-index order, until \f[V]callbackFn\f[R]
returns a truthy value.
\f[V]findLast()\f[R] then returns that element and stops iterating
through the array.
If \f[V]callbackFn\f[R] never returns a truthy value,
\f[V]findLast()\f[R] returns \f[V]undefined\f[R].
.PP
\f[V]callbackFn\f[R] is invoked for \f[I]every\f[R] index of the array,
not just those with assigned values.
Empty slots in sparse arrays behave the same as \f[V]undefined\f[R].
.PP
\f[V]findLast()\f[R] does not mutate the array on which it is called,
but the function provided as \f[V]callbackFn\f[R] can.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[V]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[V]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[V]findLast()\f[R] began.
.IP \[bu] 2
Changes to already-visited indexes do not cause \f[V]callbackFn\f[R] to
be invoked on them again.
.IP \[bu] 2
If an existing, yet-unvisited element of the array is changed by
\f[V]callbackFn\f[R], its value passed to the \f[V]callbackFn\f[R] will
be the value at the time that element gets visited.
Deleted elements are visited as if they were \f[V]undefined\f[R].
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard-to-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The \f[V]findLast()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS Find last object in an array matching on element properties
.PP
This example shows how you might create a test based on the properties
of array elements.
.IP
.nf
\f[C]
const inventory = [
  { name: \[dq]apples\[dq], quantity: 2 },
  { name: \[dq]bananas\[dq], quantity: 0 },
  { name: \[dq]fish\[dq], quantity: 1 },
  { name: \[dq]cherries\[dq], quantity: 5 },
];

// return true inventory stock is low
function isNotEnough(item) {
  return item.quantity < 2;
}

console.log(inventory.findLast(isNotEnough));
// { name: \[dq]fish\[dq], quantity: 1 }
\f[R]
.fi
.SS Using arrow function and destructuring
.PP
The previous example might be written using an arrow function and object
destructuring:
.IP
.nf
\f[C]
const inventory = [
  { name: \[dq]apples\[dq], quantity: 2 },
  { name: \[dq]bananas\[dq], quantity: 0 },
  { name: \[dq]fish\[dq], quantity: 1 },
  { name: \[dq]cherries\[dq], quantity: 5 },
];

const result = inventory.findLast(({ quantity }) => quantity < 2);

console.log(result);
// { name: \[dq]fish\[dq], quantity: 1 }
\f[R]
.fi
.SS Find last prime number in an array
.PP
The following example finds the last element in the array that is a
prime number (or returns \f[V]undefined\f[R] if there is no prime
number):
.IP
.nf
\f[C]
function isPrime(element) {
  if (element % 2 === 0 || element < 2) {
    return false;
  }
  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {
    if (element % factor === 0) {
      return false;
    }
  }
  return true;
}

console.log([4, 6, 8, 12].findLast(isPrime)); // undefined, not found
console.log([4, 5, 7, 8, 9, 11, 12].findLast(isPrime)); // 11
\f[R]
.fi
.SS Using findLast() on sparse arrays
.PP
Empty slots in sparse arrays \f[I]are\f[R] visited, and are treated the
same as \f[V]undefined\f[R].
.IP
.nf
\f[C]
// Declare array with no elements at indexes 2, 3, and 4
const array = [0, 1, , , , 5, 6];

// Shows all indexes, not just those with assigned values
array.findLast((value, index) => {
  console.log(\[ga]Visited index ${index} with value ${value}\[ga]);
});
// Visited index 6 with value 6
// Visited index 5 with value 5
// Visited index 4 with value undefined
// Visited index 3 with value undefined
// Visited index 2 with value undefined
// Visited index 1 with value 1
// Visited index 0 with value 0

// Shows all indexes, including deleted
array.findLast((value, index) => {
  // Delete element 5 on first iteration
  if (index === 6) {
    console.log(\[ga]Deleting array[5] with value ${array[5]}\[ga]);
    delete array[5];
  }
  // Element 5 is still visited even though deleted
  console.log(\[ga]Visited index ${index} with value ${value}\[ga]);
});
// Deleting array[5] with value 5
// Visited index 6 with value 6
// Visited index 5 with value undefined
// Visited index 4 with value undefined
// Visited index 3 with value undefined
// Visited index 2 with value undefined
// Visited index 1 with value 1
// Visited index 0 with value 0
\f[R]
.fi
.SS Calling findLast() on non-array objects
.PP
The \f[V]findLast()\f[R] method reads the \f[V]length\f[R] property of
\f[V]this\f[R] and then accesses each integer index.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: 2,
  1: 7.3,
  2: 4,
};
console.log(
  Array.prototype.findLast.call(arrayLike, (x) => Number.isInteger(x)),
); // 4
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.findLast\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.findLastIndex()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.includes()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.filter()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.every()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.some()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.findLast()\f[R]
