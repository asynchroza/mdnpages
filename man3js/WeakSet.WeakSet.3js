.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "WeakSet.WeakSet" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]WeakSet()\f[B]\f[R] constructor creates \f[V]WeakSet\f[R]
objects.
.SH Syntax
.IP
.nf
\f[C]
new WeakSet()
new WeakSet(iterable)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]WeakSet()\f[R] can only be constructed with
\f[V]new\f[R].
Attempting to call it without \f[V]new\f[R] throws a
\f[V]TypeError\f[R].
.RE
.SS Parameters
.IP \[bu] 2
\f[V]iterable\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
If an iterable object is passed, all of its elements will be added to
the new \f[V]WeakSet\f[R].
null is treated as undefined.
.RE
.SH Examples
.SS Using the WeakSet object
.IP
.nf
\f[C]
const ws = new WeakSet();
const foo = {};
const bar = {};

ws.add(foo);
ws.add(bar);

ws.has(foo); // true
ws.has(bar); // true

ws.delete(foo); // removes foo from the set
ws.has(foo); // false, foo has been removed
ws.has(bar); // true, bar is retained
\f[R]
.fi
.PP
Note that \f[V]foo !== bar\f[R].
While they are similar objects, \f[I]they are not \f[BI]the same
object\f[I]\f[R].
And so they are both added to the set.
.SH See also
.IP \[bu] 2
Polyfill of \f[V]WeakSet\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#weakset)
.IP \[bu] 2
\f[V]WeakSet\f[R]
