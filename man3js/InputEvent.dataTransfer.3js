.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "InputEvent.dataTransfer" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
InputEvent.dataTransfer \- InputEvent: dataTransfer property
.SH SYNOPSIS
The \f[B]\f[CB]dataTransfer\f[B]\f[R] read\-only property of the
\f[CR]InputEvent\f[R] interface returns a \f[CR]DataTransfer\f[R] object
containing information about richtext or plaintext data being added to
or removed from editable content.
.SH VALUE
A \f[CR]DataTransfer\f[R] object.
.SH EXAMPLES
In the following simple example we\[cq]ve set up an event listener on
the input event so that when any content is pasted into the
contenteditable \f[CR]<p>\f[R] element, its HTML source is retrieved via
the \f[CR]InputEvent.dataTransfer.getData()\f[R] method and reported in
the paragraph below the input.
.PP
Try copying and pasting some of the content provided to see the effects.
.IP
.EX
<p><span style=\[dq]font\-weight: bold; color: blue\[dq]>Whoa, bold blue text!</span></p>
<p>
  <span style=\[dq]font\-style: italic; color: red\[dq]>Exciting: italic red text!</span>
</p>
<p>Boring normal text ;\-(</p>

<hr />

<p contenteditable=\[dq]true\[dq]>
  Go on, try pasting some content into this editable paragraph and see what
  happens!
</p>

<p class=\[dq]result\[dq]></p>
.EE
.IP
.EX
const editable = document.querySelector(\[dq]p[contenteditable]\[dq]);
const result = document.querySelector(\[dq].result\[dq]);

editable.addEventListener(\[dq]input\[dq], (e) => {
  result.textContent = e.dataTransfer.getData(\[dq]text/html\[dq]);
});
.EE
