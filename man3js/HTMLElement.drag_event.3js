.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "HTMLElement.drag_event" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLElement.drag_event \- HTMLElement: drag event
.SH SYNOPSIS
The \f[CR]drag\f[R] event is fired every few hundred milliseconds as an
element or text selection is being dragged by the user.
.PP
This event is cancelable and may bubble up to the \f[CR]Document\f[R]
and \f[CR]Window\f[R] objects.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]drag\[dq], (event) => {});

ondrag = (event) => {};
.EE
.SH EVENT TYPE
A \f[CR]DragEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]DragEvent.dataTransfer\f[R] \f[I](read\-only)\f[R]
The data that is transferred during a drag and drop interaction.
.SH EXAMPLES
.SS Drag and drop example
.SS HTML
.IP
.EX
<div class=\[dq]dropzone\[dq]>
  <div id=\[dq]draggable\[dq] draggable=\[dq]true\[dq]>This div is draggable</div>
</div>
<div class=\[dq]dropzone\[dq] id=\[dq]droptarget\[dq]></div>
.EE
.SS CSS
.IP
.EX
body {
  /* Prevent the user selecting text in the example */
  user\-select: none;
}

draggable {
  text\-align: center;
  background: white;
}

\&.dropzone {
  width: 200px;
  height: 20px;
  background: blueviolet;
  margin: 10px;
  padding: 10px;
}

\&.dropzone.dragover {
  background\-color: purple;
}

\&.dragging {
  opacity: 0.5;
}
.EE
.SS JavaScript
.IP
.EX
let dragged;

/* events fired on the draggable target */
const source = document.getElementById(\[dq]draggable\[dq]);
source.addEventListener(\[dq]drag\[dq], (event) => {
  console.log(\[dq]dragging\[dq]);
});

source.addEventListener(\[dq]dragstart\[dq], (event) => {
  // store a ref. on the dragged elem
  dragged = event.target;
  // make it half transparent
  event.target.classList.add(\[dq]dragging\[dq]);
});

source.addEventListener(\[dq]dragend\[dq], (event) => {
  // reset the transparency
  event.target.classList.remove(\[dq]dragging\[dq]);
});

/* events fired on the drop targets */
const target = document.getElementById(\[dq]droptarget\[dq]);
target.addEventListener(
  \[dq]dragover\[dq],
  (event) => {
    // prevent default to allow drop
    event.preventDefault();
  },
  false,
);

target.addEventListener(\[dq]dragenter\[dq], (event) => {
  // highlight potential drop target when the draggable element enters it
  if (event.target.classList.contains(\[dq]dropzone\[dq])) {
    event.target.classList.add(\[dq]dragover\[dq]);
  }
});

target.addEventListener(\[dq]dragleave\[dq], (event) => {
  // reset background of potential drop target when the draggable element leaves it
  if (event.target.classList.contains(\[dq]dropzone\[dq])) {
    event.target.classList.remove(\[dq]dragover\[dq]);
  }
});

target.addEventListener(\[dq]drop\[dq], (event) => {
  // prevent default action (open as link for some elements)
  event.preventDefault();
  // move dragged element to the selected drop target
  if (event.target.classList.contains(\[dq]dropzone\[dq])) {
    event.target.classList.remove(\[dq]dragover\[dq]);
    event.target.appendChild(dragged);
  }
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]dragstart\f[R]
.IP \[bu] 2
\f[CR]dragend\f[R]
.IP \[bu] 2
\f[CR]dragover\f[R]
.IP \[bu] 2
\f[CR]dragenter\f[R]
.IP \[bu] 2
\f[CR]dragleave\f[R]
.IP \[bu] 2
\f[CR]drop\f[R]
