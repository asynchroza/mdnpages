.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "CanvasRenderingContext2D.arc" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.arc \- CanvasRenderingContext2D: arc() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.arc()\f[B]\f[R] method of the
Canvas 2D API adds a circular arc to the current sub\-path.
.SH SYNTAX
.IP
.EX
arc(x, y, radius, startAngle, endAngle)
arc(x, y, radius, startAngle, endAngle, counterclockwise)
.EE
.PP
The \f[CR]arc()\f[R] method creates a circular arc centered at
\f[CR](x, y)\f[R] with a radius of \f[CR]radius\f[R].
The path starts at \f[CR]startAngle\f[R], ends at \f[CR]endAngle\f[R],
and travels in the direction given by \f[CR]counterclockwise\f[R]
(defaulting to clockwise).
.SS Parameters
.TP
\f[B]x\f[R]
The horizontal coordinate of the arc\[cq]s center.
.TP
\f[B]y\f[R]
The vertical coordinate of the arc\[cq]s center.
.TP
\f[B]radius\f[R]
The arc\[cq]s radius.
Must be positive.
.TP
\f[B]startAngle\f[R]
The angle at which the arc starts in radians, measured from the positive
x\-axis.
.TP
\f[B]endAngle\f[R]
The angle at which the arc ends in radians, measured from the positive
x\-axis.
.TP
\f[B]counterclockwise\f[R] \f[I](optional)\f[R]
An optional boolean value.
If \f[CR]true\f[R], draws the arc counter\-clockwise between the start
and end angles.
The default is \f[CR]false\f[R] (clockwise).
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Drawing a full circle
This example draws a complete circle with the \f[CR]arc()\f[R] method.
.SS HTML
.IP
.EX
<canvas></canvas>
.EE
.SS JavaScript
The arc is given an x\-coordinate of 100, a y\-coordinate of 75, and a
radius of 50.
To make a full circle, the arc begins at an angle of 0 radians
(0\f[B]°\f[R]), and ends at an angle of 2π radians (360\f[B]°\f[R]).
.IP
.EX
const canvas = document.querySelector(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

ctx.beginPath();
ctx.arc(100, 75, 50, 0, 2 * Math.PI);
ctx.stroke();
.EE
.SS Result
.SS Different shapes demonstrated
This example draws various shapes to show what is possible with
\f[CR]arc()\f[R].
.PP
\f[CR]html hidden <canvas width=\[dq]150\[dq] height=\[dq]200\[dq]></canvas>\f[R]
.IP
.EX
const canvas = document.querySelector(\[dq]canvas\[dq]);
const ctx = canvas.getContext(\[dq]2d\[dq]);

// Draw shapes
for (let i = 0; i <= 3; i++) {
  for (let j = 0; j <= 2; j++) {
    ctx.beginPath();
    let x = 25 + j * 50; // x coordinate
    let y = 25 + i * 50; // y coordinate
    let radius = 20; // Arc radius
    let startAngle = 0; // Starting point on circle
    let endAngle = Math.PI + (Math.PI * j) / 2; // End point on circle
    let counterclockwise = i % 2 === 1; // Draw counterclockwise

    ctx.arc(x, y, radius, startAngle, endAngle, counterclockwise);

    if (i > 1) {
      ctx.fill();
    } else {
      ctx.stroke();
    }
  }
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
Use \f[CR]CanvasRenderingContext2D.ellipse()\f[R] to draw an elliptical
arc.
