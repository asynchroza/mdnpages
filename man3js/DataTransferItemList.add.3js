.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransferItemList.add" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.add \- DataTransferItemList: add() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransferItemList.add()\f[B]\f[R] method creates a new
\f[CR]DataTransferItem\f[R] using the specified data and adds it to the
drag data list.
The item may be a \f[CR]File\f[R] or a string of a given type.
If the item is successfully added to the list, the newly\-created
\f[CR]DataTransferItem\f[R] object is returned.
.SH SYNTAX
.IP
.EX
add(data, type)
add(file)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
A string representing the drag item\[cq]s data.
.TP
\f[B]type\f[R]
A string of the drag item\[cq]s type.
Some example types are \f[CR]text/html\f[R] and \f[CR]text/plain\f[R].
.TP
\f[B]file\f[R]
A \f[CR]File\f[R] object.
No type needs to be given in this case.
.SS Return value
A \f[CR]DataTransferItem\f[R] containing the specified data.
If the drag item couldn\[cq]t be created (for example, if the associated
\f[CR]DataTransfer\f[R] object has no data store), \f[CR]null\f[R] is
returned.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the string \f[CR]data\f[R] parameter was provided, and the
list already contains an item whose \f[CR]kind\f[R] is
\f[CR]\[dq]Plain Unicode string\[dq]\f[R] and whose type is equal to the
specified type parameter.
.SH EXAMPLES
This example shows the use of the \f[CR]add()\f[R] method.
.SS HTML
.IP
.EX
<div>
  <p
    id=\[dq]source\[dq]
    ondragstart=\[dq]dragstart_handler(event);\[dq]
    ondragend=\[dq]dragend_handler(event);\[dq]
    draggable=\[dq]true\[dq]>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </p>
</div>
<div
  id=\[dq]target\[dq]
  ondrop=\[dq]drop_handler(event);\[dq]
  ondragover=\[dq]dragover_handler(event);\[dq]>
  Drop Zone
</div>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0em;
  padding: 2em;
}
source {
  color: blue;
  border: 1px solid black;
}
target {
  border: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
function dragstart_handler(ev) {
  console.log(\[dq]dragStart\[dq]);
  // Add this element\[aq]s id to the drag payload so the drop handler will
  // know which element to add to its tree
  const dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \[dq]text/plain\[dq]);
  // Add some other items to the drag payload
  dataList.add(\[dq]<p>Paragraph\&...</p>\[dq], \[dq]text/html\[dq]);
  dataList.add(\[dq]http://www.example.org\[dq], \[dq]text/uri\-list\[dq]);
}

function drop_handler(ev) {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();
  const data = event.dataTransfer.items;
  // Loop through the dropped items and log their data
  for (let i = 0; i < data.length; i++) {
    if (data[i].kind === \[dq]string\[dq] && data[i].type.match(\[dq]\[ha]text/plain\[dq])) {
      // This item is the target node
      data[i].getAsString((s) => {
        ev.target.appendChild(document.getElementById(s));
      });
    } else if (data[i].kind === \[dq]string\[dq] && data[i].type.match(\[dq]\[ha]text/html\[dq])) {
      // Drag data item is HTML
      data[i].getAsString((s) => {
        console.log(\[ga]\&... Drop: HTML = ${s}\[ga]);
      });
    } else if (
      data[i].kind === \[dq]string\[dq] &&
      data[i].type.match(\[dq]\[ha]text/uri\-list\[dq])
    ) {
      // Drag data item is URI
      data[i].getAsString((s) => {
        console.log(\[ga]\&... Drop: URI = ${s}\[ga]);
      });
    }
  }
}

function dragover_handler(ev) {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();
  // Set the dropEffect to move
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

function dragend_handler(ev) {
  console.log(\[dq]dragEnd\[dq]);
  const dataList = ev.dataTransfer.items;
  for (let i = 0; i < dataList.length; i++) {
    dataList.remove(i);
  }
  // Clear any remaining drag data
  dataList.clear();
}
.EE
.SS Result
Result link
