.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "BigUint64Array" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BigUint64Array \- BigUint64Array
.SH SYNOPSIS
The \f[B]\f[CB]BigUint64Array\f[B]\f[R] typed array represents an array
of 64\-bit unsigned integers in the platform byte order.
If control over byte order is needed, use \f[CR]DataView\f[R] instead.
The contents are initialized to \f[CR]0n\f[R].
Once established, you can reference elements in the array using the
object\[cq]s methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[CR]BigUint64Array\f[R] is a subclass of the hidden
\f[CR]TypedArray\f[R] class.
.SH CONSTRUCTOR
.TP
\f[B]BigUint64Array()\f[R]
Creates a new \f[CR]BigUint64Array\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits static properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]BigUint64Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]8\f[R] in the case of \f[CR]BigUint64Array\f[R].
.SH STATIC METHODS
\f[I]Inherits static methods from its parent \f[CI]TypedArray\f[I]\f[R].
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[CR]BigUint64Array.prototype\f[R] and
shared by all \f[CR]BigUint64Array\f[R] instances.
.TP
\f[B]BigUint64Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]8\f[R] in the case of a \f[CR]BigUint64Array\f[R].
.TP
\f[B]BigUint64Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]BigUint64Array\f[R] instances, the initial value is the
\f[CR]BigUint64Array\f[R] constructor.
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent
\f[CI]TypedArray\f[I]\f[R].
.SH EXAMPLES
.SS Different ways to create a BigUint64Array
.IP
.EX
// From a length
const biguint64 = new BigUint64Array(2);
biguint64[0] = 42n;
console.log(biguint64[0]); // 42n
console.log(biguint64.length); // 2
console.log(biguint64.BYTES_PER_ELEMENT); // 8

// From an array
const x = new BigUint64Array([21n, 31n]);
console.log(x[1]); // 31n

// From another TypedArray
const y = new BigUint64Array(x);
console.log(y[0]); // 21n

// From an ArrayBuffer
const buffer = new ArrayBuffer(64);
const z = new BigUint64Array(buffer, 8, 4);
console.log(z.byteOffset); // 8

// From an iterable
const iterable = (function* () {
  yield* [1n, 2n, 3n];
})();
const biguint64FromIterable = new BigUint64Array(iterable);
console.log(biguint64FromIterable);
// BigUint64Array [1n, 2n, 3n]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
