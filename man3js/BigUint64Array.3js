.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "BigUint64Array" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]BigUint64Array\f[B]\f[R] typed array represents an array
of 64-bit unsigned integers in the platform byte order.
If control over byte order is needed, use \f[V]DataView\f[R] instead.
The contents are initialized to \f[V]0n\f[R].
Once established, you can reference elements in the array using the
object\[cq]s methods, or by using standard array index syntax (that is,
using bracket notation).
.PP
\f[V]BigUint64Array\f[R] is a subclass of the hidden
\f[V]TypedArray\f[R] class.
.SH Constructor
.IP \[bu] 2
\f[V]BigUint64Array()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]BigUint64Array\f[R] object.
.RE
.SH Static properties
.PP
\f[I]Also inherits static properties from its parent
\f[VI]TypedArray\f[I]\f[R].
.IP \[bu] 2
\f[V]BigUint64Array.BYTES_PER_ELEMENT\f[R]
.RS 2
.IP \[bu] 2
Returns a number value of the element size.
\f[V]8\f[R] in the case of \f[V]BigUint64Array\f[R].
.RE
.SH Static methods
.PP
\f[I]Inherits static methods from its parent \f[VI]TypedArray\f[I]\f[R].
.SH Instance properties
.PP
\f[I]Also inherits instance properties from its parent
\f[VI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[V]BigUint64Array.prototype\f[R] and
shared by all \f[V]BigUint64Array\f[R] instances.
.IP \[bu] 2
\f[V]BigUint64Array.prototype.BYTES_PER_ELEMENT\f[R]
.RS 2
.IP \[bu] 2
Returns a number value of the element size.
\f[V]8\f[R] in the case of a \f[V]BigUint64Array\f[R].
.RE
.IP \[bu] 2
\f[V]BigUint64Array.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]BigUint64Array\f[R] instances, the initial value is the
\f[V]BigUint64Array\f[R] constructor.
.RE
.SH Instance methods
.PP
\f[I]Inherits instance methods from its parent
\f[VI]TypedArray\f[I]\f[R].
.SH Examples
.SS Different ways to create a \f[V]BigUint64Array\f[R]
.IP
.nf
\f[C]
// From a length
const biguint64 = new BigUint64Array(2);
biguint64[0] = 42n;
console.log(biguint64[0]); // 42n
console.log(biguint64.length); // 2
console.log(biguint64.BYTES_PER_ELEMENT); // 8

// From an array
const x = new BigUint64Array([21n, 31n]);
console.log(x[1]); // 31n

// From another TypedArray
const y = new BigUint64Array(x);
console.log(y[0]); // 21n

// From an ArrayBuffer
const buffer = new ArrayBuffer(64);
const z = new BigUint64Array(buffer, 8, 4);
console.log(z.byteOffset); // 8

// From an iterable
const iterable = (function* () {
  yield* [1n, 2n, 3n];
})();
const biguint64FromIterable = new BigUint64Array(iterable);
console.log(biguint64FromIterable);
// BigUint64Array [1n, 2n, 3n]
\f[R]
.fi
.SH See also
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]BigInt64Array\f[R]
.IP \[bu] 2
\f[V]DataView\f[R]
