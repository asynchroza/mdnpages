.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DataView.byteLength" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
DataView.byteLength - DataView.prototype.byteLength
.SH SYNOPSIS
.PP
The \f[B]\f[VB]byteLength\f[B]\f[R] accessor property of
\f[V]DataView\f[R] instances returns the length (in bytes) of this view.
.SH DESCRIPTION
.PP
The \f[V]byteLength\f[R] property is an accessor property whose set
accessor function is \f[V]undefined\f[R], meaning that you can only read
this property.
The value is established when an \f[V]DataView\f[R] is constructed and
cannot be changed.
If the \f[V]DataView\f[R] is not specifying an offset or a
\f[V]byteLength\f[R], the \f[V]byteLength\f[R] of the referenced
\f[V]ArrayBuffer\f[R] or \f[V]SharedArrayBuffer\f[R] will be returned.
.SH EXAMPLES
.SS Using the byteLength property
.IP
.nf
\f[C]
const buffer = new ArrayBuffer(8);
const dataview = new DataView(buffer);
dataview.byteLength; // 8 (matches the byteLength of the buffer)

const dataview2 = new DataView(buffer, 1, 5);
dataview2.byteLength; // 5 (as specified when constructing the DataView)

const dataview3 = new DataView(buffer, 2);
dataview3.byteLength; // 6 (due to the offset of the constructed DataView)
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]DataView\f[R]
.IP \[bu] 2
\f[V]ArrayBuffer\f[R]
.IP \[bu] 2
\f[V]SharedArrayBuffer\f[R]
