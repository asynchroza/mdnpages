.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "StylePropertyMapReadOnly.get" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
StylePropertyMapReadOnly.get \- StylePropertyMapReadOnly: get() method
.SH SYNOPSIS
The \f[B]\f[CB]get()\f[B]\f[R] method of the
\f[CR]StylePropertyMapReadOnly\f[R] interface returns a
\f[CR]CSSStyleValue\f[R] object for the first value of the specified
property.
.SH SYNTAX
.IP
.EX
get(property)
.EE
.SS Parameters
.TP
\f[B]property\f[R]
The name of the property to retrieve the value of.
.SS Return value
A \f[CR]CSSStyleValue\f[R] object.
.SH EXAMPLES
Let\[cq]s get just a few properties and values.
Let\[cq]s start by creating a link inside a paragraph in our HTML, and
adding a definition list which we will populate with JavaScript:
.IP
.EX
<p>
  <a href=\[dq]https://example.com\[dq]>Link</a>
</p>
<dl id=\[dq]results\[dq]></dl>
.EE
.PP
We add a bit of CSS, including a custom property and an inheritable
property:
.IP
.EX
p {
  font\-weight: bold;
}
a {
  \-\-color: red;
  color: var(\-\-color);
}
.EE
.PP
We use the Element\[cq]s \f[CR]computedStyleMap()\f[R] to return a
\f[I]StylePropertyMapReadOnly\f[R] object.
We create an array of properties of interest and use the
StylePropertyMapReadOnly\[cq]s \f[CR]get()\f[R] method to get only those
values.
.IP
.EX
// get the element
const myElement = document.querySelector(\[dq]a\[dq]);

// Retrieve all computed styles with computedStyleMap()
const styleMap = myElement.computedStyleMap();

// get the <dl> we\[aq]ll be populating
const stylesList = document.querySelector(\[dq]#results\[dq]);

// array of properties we\[aq]re interested in
const ofInterest = [\[dq]font\-weight\[dq], \[dq]border\-left\-color\[dq], \[dq]color\[dq], \[dq]\-\-color\[dq]];

// iterate over our properties of interest
for (const property of ofInterest) {
  // properties
  const cssProperty = document.createElement(\[dq]dt\[dq]);
  cssProperty.innerText = property;
  stylesList.appendChild(cssProperty);

  // values
  const cssValue = document.createElement(\[dq]dd\[dq]);
  // use get() to find the value
  cssValue.innerText = styleMap.get(property);
  stylesList.appendChild(cssValue);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
CSS Typed Object Model API
.IP \[bu] 2
Learning Houdini: the CSS Typed Object Model
