.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.toString" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]toString()\f[B]\f[R] method returns a string representing
the specified array and its elements.
.SH Syntax
.IP
.nf
\f[C]
toString()
\f[R]
.fi
.SS Return value
.PP
A string representing the elements of the array.
.SH Description
.PP
The \f[V]Array\f[R] object overrides the \f[V]toString\f[R] method of
\f[V]Object\f[R].
The \f[V]toString\f[R] method of arrays calls \f[V]join()\f[R]
internally, which joins the array and returns one string containing each
array element separated by commas.
If the \f[V]join\f[R] method is unavailable or is not a function,
\f[V]Object.prototype.toString\f[R] is used instead, returning
\f[V][object Array]\f[R].
.IP
.nf
\f[C]
const arr = [];
arr.join = 1; // re-assign \[ga]join\[ga] with a non-function
console.log(arr.toString()); // [object Array]

console.log(Array.prototype.toString.call({ join: () => 1 })); // 1
\f[R]
.fi
.PP
JavaScript calls the \f[V]toString\f[R] method automatically when an
array is to be represented as a text value or when an array is referred
to in a string concatenation.
.SH Examples
.SS Using toString()
.IP
.nf
\f[C]
const array1 = [1, 2, \[dq]a\[dq], \[dq]1a\[dq]];

console.log(array1.toString()); // \[dq]1,2,a,1a\[dq]
\f[R]
.fi
.SS Using toString() on sparse arrays
.PP
Following the behavior of \f[V]join()\f[R], \f[V]toString()\f[R] treats
empty slots the same as \f[V]undefined\f[R] and produces an extra
separator:
.IP
.nf
\f[C]
console.log([1, , 3].toString()); // \[aq]1,,3\[aq]
\f[R]
.fi
.SS Calling toString() on non-array objects
.PP
\f[V]toString()\f[R] is generic.
It expects \f[V]this\f[R] to have a \f[V]join()\f[R] method; or, failing
that, uses \f[V]Object.prototype.toString()\f[R] instead.
.IP
.nf
\f[C]
console.log(Array.prototype.toString.call({ join: () => 1 }));
// 1; a number
console.log(Array.prototype.toString.call({ join: () => undefined }));
// undefined
console.log(Array.prototype.toString.call({ join: \[dq]not function\[dq] }));
// \[dq][object Object]\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.join()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.toString()\f[R]
.IP \[bu] 2
\f[V]String.prototype.toString()\f[R]
