.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.animationend_event" "JS" "January 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.animationend_event \- Element: animationend event
.SH SYNOPSIS
The \f[B]\f[CB]animationend\f[B]\f[R] event is fired when a CSS
Animation has completed.
If the animation aborts before reaching completion, such as if the
element is removed from the DOM or the animation is removed from the
element, the \f[CR]animationend\f[R] event is not fired.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]animationend\[dq], (event) => {});

onanimationend = (event) => {};
.EE
.SH EVENT TYPE
An \f[CR]AnimationEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]AnimationEvent.animationName\f[R] \f[I](read\-only)\f[R]
A string containing the value of the \f[CR]animation\-name\f[R] that
generated the animation.
.TP
\f[B]AnimationEvent.elapsedTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]float\f[R] giving the amount of time the animation has been
running, in seconds, when this event fired, excluding any time the
animation was paused.
For an \f[CR]animationstart\f[R] event, \f[CR]elapsedTime\f[R] is
\f[CR]0.0\f[R] unless there was a negative value for
\f[CR]animation\-delay\f[R], in which case the event will be fired with
\f[CR]elapsedTime\f[R] containing \f[CR](\-1 * delay)\f[R].
.TP
\f[B]AnimationEvent.pseudoElement\f[R] \f[I](read\-only)\f[R]
A string, starting with \f[CR]\[aq]::\[aq]\f[R], containing the name of
the pseudo\-element the animation runs on.
If the animation doesn\[cq]t run on a pseudo\-element but on the
element, an empty string: \f[CR]\[aq]\[aq]\f[R].
.SH EXAMPLES
This example gets an element that\[cq]s being animated and listens for
the \f[CR]animationend\f[R] event:
.IP
.EX
const animated = document.querySelector(\[dq].animated\[dq]);

animated.addEventListener(\[dq]animationend\[dq], () => {
  console.log(\[dq]Animation ended\[dq]);
});
.EE
.PP
The same, but using the \f[CR]onanimationend\f[R] event handler
property:
.IP
.EX
const animated = document.querySelector(\[dq].animated\[dq]);

animated.onanimationend = () => {
  console.log(\[dq]Animation ended\[dq]);
};
.EE
.SS Live example
.SS HTML
.IP
.EX
<div class=\[dq]animation\-example\[dq]>
  <div class=\[dq]container\[dq]>
    <p class=\[dq]animation\[dq]>You chose a cold night to visit our planet.</p>
  </div>
  <button class=\[dq]activate\[dq] type=\[dq]button\[dq]>Activate animation</button>
  <div class=\[dq]event\-log\[dq]></div>
</div>
.EE
.SS CSS
.IP
.EX
\&.container {
  height: 3rem;
}

\&.event\-log {
  width: 25rem;
  height: 2rem;
  border: 1px solid black;
  margin: 0.2rem;
  padding: 0.2rem;
}

\&.animation.active {
  animation\-duration: 2s;
  animation\-name: slidein;
  animation\-iteration\-count: 2;
}

\[at]keyframes slidein {
  from {
    transform: translateX(100%) scaleX(3);
  }

  to {
    transform: translateX(0) scaleX(1);
  }
}
.EE
.SS JavaScript
.IP
.EX
const animation = document.querySelector(\[dq]p.animation\[dq]);
const animationEventLog = document.querySelector(
  \[dq].animation\-example>.event\-log\[dq],
);
const applyAnimation = document.querySelector(
  \[dq].animation\-example>button.activate\[dq],
);
let iterationCount = 0;

animation.addEventListener(\[dq]animationstart\[dq], () => {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation started\[aq] \[ga];
});

animation.addEventListener(\[dq]animationiteration\[dq], () => {
  iterationCount++;
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation iterations: ${iterationCount}\[aq] \[ga];
});

animation.addEventListener(\[dq]animationend\[dq], () => {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation ended\[aq]\[ga];
  animation.classList.remove(\[dq]active\[dq]);
  applyAnimation.textContent = \[dq]Activate animation\[dq];
});

animation.addEventListener(\[dq]animationcancel\[dq], () => {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation canceled\[aq]\[ga];
});

applyAnimation.addEventListener(\[dq]click\[dq], () => {
  animation.classList.toggle(\[dq]active\[dq]);
  animationEventLog.textContent = \[dq]\[dq];
  iterationCount = 0;
  const active = animation.classList.contains(\[dq]active\[dq]);
  applyAnimation.textContent = active
    ? \[dq]Cancel animation\[dq]
    : \[dq]Activate animation\[dq];
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
CSS Animations
.IP \[bu] 2
Using CSS Animations
.IP \[bu] 2
\f[CR]AnimationEvent\f[R]
.IP \[bu] 2
Related events: \f[CR]animationstart\f[R], \f[CR]animationcancel\f[R],
\f[CR]animationiteration\f[R]
