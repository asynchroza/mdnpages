.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]RegExp\f[B]\f[R] object is used for matching text with a
pattern.
.PP
For an introduction to regular expressions, read the Regular expressions
chapter in the JavaScript guide.
For detailed information of regular expression syntax, read the regular
expression reference.
.SH Description
.SS Literal notation and constructor
.PP
There are two ways to create a \f[V]RegExp\f[R] object: a \f[I]literal
notation\f[R] and a \f[I]constructor\f[R].
.IP \[bu] 2
The \f[I]literal notation\f[R] takes a pattern between two slashes,
followed by optional flags, after the second slash.
.IP \[bu] 2
The \f[I]constructor function\f[R] takes either a string or a
\f[V]RegExp\f[R] object as its first parameter and a string of optional
flags as its second parameter.
.PP
The following three expressions create the same regular expression
object:
.IP
.nf
\f[C]
const re = /ab+c/i; // literal notation
// OR
const re = new RegExp(\[dq]ab+c\[dq], \[dq]i\[dq]); // constructor with string pattern as first argument
// OR
const re = new RegExp(/ab+c/, \[dq]i\[dq]); // constructor with regular expression literal as first argument
\f[R]
.fi
.PP
Before regular expressions can be used, they have to be compiled.
This process allows them to perform matches more efficiently.
More about the process can be found in dotnet
docs (https://docs.microsoft.com/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions).
.PP
The literal notation results in compilation of the regular expression
when the expression is evaluated.
On the other hand, the constructor of the \f[V]RegExp\f[R] object,
\f[V]new RegExp(\[aq]ab+c\[aq])\f[R], results in runtime compilation of
the regular expression.
.PP
Use a string as the first argument to the \f[V]RegExp()\f[R] constructor
when you want to build the regular expression from dynamic input.
.SS Flags in constructor
.PP
The expression \f[V]new RegExp(/ab+c/, flags)\f[R] will create a new
\f[V]RegExp\f[R] using the source of the first parameter and the flags
provided by the second.
.PP
When using the constructor function, the normal string escape rules
(preceding special characters with \f[V]\[rs]\f[R] when included in a
string) are necessary.
.PP
For example, the following are equivalent:
.IP
.nf
\f[C]
const re = /\[rs]w+/;
// OR
const re = new RegExp(\[dq]\[rs]\[rs]w+\[dq]);
\f[R]
.fi
.SS Special handling for regexes
.RS
.PP
\f[B]Note:\f[R] Whether something is a \[lq]regex\[rq] can be
duck-typed (https://en.wikipedia.org/wiki/Duck_typing).
It doesn\[cq]t have to be a \f[V]RegExp\f[R]!
.RE
.PP
Some built-in methods would treat regexes specially.
They decide whether \f[V]x\f[R] is a regex through multiple
steps (https://tc39.es/ecma262/#sec-isregexp):
.IP "1." 3
\f[V]x\f[R] must be an object (not a primitive).
.IP "2." 3
If \f[V]x[Symbol.match]\f[R] is not \f[V]undefined\f[R], check if
it\[cq]s truthy.
.IP "3." 3
Otherwise, if \f[V]x[Symbol.match]\f[R] is \f[V]undefined\f[R], check if
\f[V]x\f[R] had been created with the \f[V]RegExp\f[R] constructor.
(This step should rarely happen, since if \f[V]x\f[R] is a
\f[V]RegExp\f[R] object that have not been tampered with, it should have
a \f[V]Symbol.match\f[R] property.)
.PP
Note that in most cases, it would go through the \f[V]Symbol.match\f[R]
check, which means:
.IP \[bu] 2
An actual \f[V]RegExp\f[R] object whose \f[V]Symbol.match\f[R]
property\[cq]s value is falsy but not \f[V]undefined\f[R] (even with
everything else intact, like \f[V]exec\f[R] and
\f[V]\[at]\[at]replace\f[R]) can be used as if it\[cq]s not a regex.
.IP \[bu] 2
A non-\f[V]RegExp\f[R] object with a \f[V]Symbol.match\f[R] property
will be treated as if it\[cq]s a regex.
.PP
This choice was made because \f[V]\[at]\[at]match\f[R] is the most
indicative property that something is intended to be used for matching.
(\f[V]exec\f[R] could also be used, but because it\[cq]s not a symbol
property, there would be too many false positives.)
The places that treat regexes specially include:
.IP \[bu] 2
\f[V]String.prototype.endsWith()\f[R], \f[V]startsWith()\f[R], and
\f[V]includes()\f[R] throw a \f[V]TypeError\f[R] if the first argument
is a regex.
.IP \[bu] 2
\f[V]String.prototype.matchAll()\f[R] and \f[V]replaceAll()\f[R] check
whether the global flag is set if the first argument is a regex before
invoking its \f[V]\[at]\[at]matchAll\f[R] or \f[V]\[at]\[at]replace\f[R]
method.
.IP \[bu] 2
The \f[V]RegExp()\f[R] constructor directly returns the
\f[V]pattern\f[R] argument only if \f[V]pattern\f[R] is a regex (among a
few other conditions).
If \f[V]pattern\f[R] is a regex, it would also interrogate
\f[V]pattern\f[R]\[cq]s \f[V]source\f[R] and \f[V]flags\f[R] properties
instead of coercing \f[V]pattern\f[R] to a string.
.PP
For example, \f[V]String.prototype.endsWith()\f[R] would coerce all
inputs to strings, but it would throw if the argument is a regex,
because it\[cq]s only designed to match strings, and using a regex is
likely a developer mistake.
.IP
.nf
\f[C]
\[dq]foobar\[dq].endsWith({ toString: () => \[dq]bar\[dq] }); // true
\[dq]foobar\[dq].endsWith(/bar/); // TypeError: First argument to String.prototype.endsWith must not be a regular expression
\f[R]
.fi
.PP
You can get around the check by setting \f[V]\[at]\[at]match\f[R] to a
falsy value that\[cq]s not \f[V]undefined\f[R].
This would mean that the regex cannot be used for
\f[V]String.prototype.match()\f[R] (since without
\f[V]\[at]\[at]match\f[R], \f[V]match()\f[R] would construct a new
\f[V]RegExp\f[R] object with the two enclosing slashes added by
\f[V]re.toString()\f[R]), but it can be used for virtually everything
else.
.IP
.nf
\f[C]
const re = /bar/g;
re[Symbol.match] = false;
\[dq]/bar/g\[dq].endsWith(re); // true
re.exec(\[dq]bar\[dq]); // [ \[aq]bar\[aq], index: 0, input: \[aq]bar\[aq], groups: undefined ]
\[dq]bar & bar\[dq].replace(re, \[dq]foo\[dq]); // \[aq]foo & foo\[aq]
\f[R]
.fi
.SS Perl-like RegExp properties
.PP
Note that several of the \f[V]RegExp\f[R] properties have both long and
short (Perl-like) names.
Both names always refer to the same value.
(Perl is the programming language from which JavaScript modeled its
regular expressions.)
See also deprecated \f[V]RegExp\f[R] properties.
.SH Constructor
.IP \[bu] 2
\f[V]RegExp()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]RegExp\f[R] object.
.RE
.SH Static properties
.IP \[bu] 2
\f[V]RegExp.$1, \&..., RegExp.$9\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
Static read-only properties that contain parenthesized substring
matches.
.RE
.IP \[bu] 2
\f[V]RegExp.input ($_)\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
A static property that contains the last string against which a regular
expression was successfully matched.
.RE
.IP \[bu] 2
\f[V]RegExp.lastMatch ($&)\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
A static read-only property that contains the last matched substring.
.RE
.IP \[bu] 2
\f[V]RegExp.lastParen ($+)\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
A static read-only property that contains the last parenthesized
substring match.
.RE
.IP \[bu] 2
\f[V]RegExp.leftContext ($\f[R])\[ga] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
A static read-only property that contains the substring preceding the
most recent match.
.RE
.IP \[bu] 2
\f[V]RegExp.rightContext ($\[aq])\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
A static read-only property that contains the substring following the
most recent match.
.RE
.IP \[bu] 2
\f[V]RegExp[\[at]\[at]species]\f[R]
.RS 2
.IP \[bu] 2
The constructor function that is used to create derived objects.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]RegExp.prototype\f[R] and shared by
all \f[V]RegExp\f[R] instances.
.IP \[bu] 2
\f[V]RegExp.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]RegExp\f[R] instances, the initial value is the
\f[V]RegExp\f[R] constructor.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.dotAll\f[R]
.RS 2
.IP \[bu] 2
Whether \f[V].\f[R] matches newlines or not.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.flags\f[R]
.RS 2
.IP \[bu] 2
A string that contains the flags of the \f[V]RegExp\f[R] object.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.global\f[R]
.RS 2
.IP \[bu] 2
Whether to test the regular expression against all possible matches in a
string, or only against the first.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.hasIndices\f[R]
.RS 2
.IP \[bu] 2
Whether the regular expression result exposes the start and end indices
of captured substrings.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.ignoreCase\f[R]
.RS 2
.IP \[bu] 2
Whether to ignore case while attempting a match in a string.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.multiline\f[R]
.RS 2
.IP \[bu] 2
Whether or not to search in strings across multiple lines.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.source\f[R]
.RS 2
.IP \[bu] 2
The text of the pattern.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.sticky\f[R]
.RS 2
.IP \[bu] 2
Whether or not the search is sticky.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.unicode\f[R]
.RS 2
.IP \[bu] 2
Whether or not Unicode features are enabled.
.RE
.PP
These properties are own properties of each \f[V]RegExp\f[R] instance.
.IP \[bu] 2
\f[V]lastIndex\f[R]
.RS 2
.IP \[bu] 2
The index at which to start the next match.
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]RegExp.prototype.compile()\f[R] \f[I](deprecated)\f[R]
.RS 2
.IP \[bu] 2
(Re-)compiles a regular expression during execution of a script.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.exec()\f[R]
.RS 2
.IP \[bu] 2
Executes a search for a match in its string parameter.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.test()\f[R]
.RS 2
.IP \[bu] 2
Tests for a match in its string parameter.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype.toString()\f[R]
.RS 2
.IP \[bu] 2
Returns a string representing the specified object.
Overrides the \f[V]Object.prototype.toString()\f[R] method.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype[\[at]\[at]match]()\f[R]
.RS 2
.IP \[bu] 2
Performs match to given string and returns match result.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype[\[at]\[at]matchAll]()\f[R]
.RS 2
.IP \[bu] 2
Returns all matches of the regular expression against a string.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype[\[at]\[at]replace]()\f[R]
.RS 2
.IP \[bu] 2
Replaces matches in given string with new substring.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype[\[at]\[at]search]()\f[R]
.RS 2
.IP \[bu] 2
Searches the match in given string and returns the index the pattern
found in the string.
.RE
.IP \[bu] 2
\f[V]RegExp.prototype[\[at]\[at]split]()\f[R]
.RS 2
.IP \[bu] 2
Splits given string into an array by separating the string into
substrings.
.RE
.SH Examples
.SS Using a regular expression to change data format
.PP
The following script uses the \f[V]replace()\f[R] method of the
\f[V]String\f[R] instance to match a name in the format \f[I]first
last\f[R] and output it in the format \f[I]last, first\f[R].
.PP
In the replacement text, the script uses \f[V]$1\f[R] and \f[V]$2\f[R]
to indicate the results of the corresponding matching parentheses in the
regular expression pattern.
.IP
.nf
\f[C]
const re = /(\[rs]w+)\[rs]s(\[rs]w+)/;
const str = \[dq]Maria Cruz\[dq];
const newstr = str.replace(re, \[dq]$2, $1\[dq]);
console.log(newstr);
\f[R]
.fi
.PP
This displays \f[V]\[dq]Cruz, Maria\[dq]\f[R].
.SS Using regular expression to split lines with different line endings/ends of line/line breaks
.PP
The default line ending varies depending on the platform (Unix, Windows,
etc.).
The line splitting provided in this example works on all platforms.
.IP
.nf
\f[C]
const text = \[dq]Some text\[rs]nAnd some more\[rs]r\[rs]nAnd yet\[rs]rThis is the end\[dq];
const lines = text.split(/\[rs]r\[rs]n|\[rs]r|\[rs]n/);
console.log(lines); // [ \[aq]Some text\[aq], \[aq]And some more\[aq], \[aq]And yet\[aq], \[aq]This is the end\[aq] ]
\f[R]
.fi
.PP
Note that the order of the patterns in the regular expression matters.
.SS Using regular expression on multiple lines
.IP
.nf
\f[C]
const s = \[dq]Please yes\[rs]nmake my day!\[dq];

s.match(/yes.*day/);
// Returns null

s.match(/yes[\[ha]]*day/);
// Returns [\[dq]yes\[rs]nmake my day\[dq]]
\f[R]
.fi
.SS Using a regular expression with the sticky flag
.PP
The \f[V]sticky\f[R] flag indicates that the regular expression performs
sticky matching in the target string by attempting to match starting at
\f[V]RegExp.prototype.lastIndex\f[R].
.IP
.nf
\f[C]
const str = \[dq]#foo#\[dq];
const regex = /foo/y;

regex.lastIndex = 1;
regex.test(str); // true
regex.lastIndex = 5;
regex.test(str); // false (lastIndex is taken into account with sticky flag)
regex.lastIndex; // 0 (reset after match failure)
\f[R]
.fi
.SS The difference between the sticky flag and the global flag
.PP
With the sticky flag \f[V]y\f[R], the next match has to happen at the
\f[V]lastIndex\f[R] position, while with the global flag \f[V]g\f[R],
the match can happen at the \f[V]lastIndex\f[R] position or later:
.IP
.nf
\f[C]
const re = /\[rs]d/y;
let r;
while ((r = re.exec(\[dq]123 456\[dq]))) {
  console.log(r, \[dq]AND re.lastIndex\[dq], re.lastIndex);
}

// [ \[aq]1\[aq], index: 0, input: \[aq]123 456\[aq], groups: undefined ] AND re.lastIndex 1
// [ \[aq]2\[aq], index: 1, input: \[aq]123 456\[aq], groups: undefined ] AND re.lastIndex 2
// [ \[aq]3\[aq], index: 2, input: \[aq]123 456\[aq], groups: undefined ] AND re.lastIndex 3
//  \&... and no more match.
\f[R]
.fi
.PP
With the global flag \f[V]g\f[R], all 6 digits would be matched, not
just 3.
.SS Regular expression and Unicode characters
.PP
\f[V]\[rs]w\f[R] and \f[V]\[rs]W\f[R] only matches ASCII based
characters; for example, \f[V]a\f[R] to \f[V]z\f[R], \f[V]A\f[R] to
\f[V]Z\f[R], \f[V]0\f[R] to \f[V]9\f[R], and \f[V]_\f[R].
.PP
To match characters from other languages such as Cyrillic or Hebrew, use
\f[V]\[rs]uhhhh\f[R], where \f[V]hhhh\f[R] is the character\[cq]s
Unicode value in hexadecimal.
.PP
This example demonstrates how one can separate out Unicode characters
from a word.
.IP
.nf
\f[C]
const text = \[dq]Образец text на русском языке\[dq];
const regex = /[\[rs]u0400-\[rs]u04FF]+/g;

const match = regex.exec(text);
console.log(match[0]); // \[aq]Образец\[aq]
console.log(regex.lastIndex); // 7

const match2 = regex.exec(text);
console.log(match2[0]); // \[aq]на\[aq] (did not log \[aq]text\[aq])
console.log(regex.lastIndex); // 15

// and so on
\f[R]
.fi
.PP
The Unicode property escapes feature provides a simpler way to target
particular Unicode ranges, by allowing for statements like
\f[V]\[rs]p{scx=Cyrl}\f[R] (to match any Cyrillic letter), or
\f[V]\[rs]p{L}/u\f[R] (to match a letter from any language).
.SS Extracting subdomain name from URL
.IP
.nf
\f[C]
const url = \[dq]http://xxx.domain.com\[dq];
console.log(/\[ha]https?:\[rs]/\[rs]/(.+?)\[rs]./.exec(url)[1]); // \[aq]xxx\[aq]
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] Instead of using regular expressions for parsing URLs,
it is usually better to use the browsers built-in URL parser by using
the URL API.
.RE
.SS Building a regular expression from dynamic inputs
.IP
.nf
\f[C]
const breakfasts = [\[dq]bacon\[dq], \[dq]eggs\[dq], \[dq]oatmeal\[dq], \[dq]toast\[dq], \[dq]cereal\[dq]];
const order = \[dq]Let me get some bacon and eggs, please\[dq];

order.match(new RegExp(\[ga]\[rs]\[rs]b(${breakfasts.join(\[dq]|\[dq])})\[rs]\[rs]b\[ga], \[dq]g\[dq]));
// Returns [\[aq]bacon\[aq], \[aq]eggs\[aq]]
\f[R]
.fi
.SS Firefox-specific notes
.PP
Starting with Firefox 34, in the case of a capturing group with
quantifiers preventing its exercise, the matched text for a capturing
group is now \f[V]undefined\f[R] instead of an empty string:
.IP
.nf
\f[C]
// Firefox 33 or older
\[dq]x\[dq].replace(/x(.)?/g, (m, group) => {
  console.log(\[ga]group: ${JSON.stringify(group)}\[ga]);
});
// group: \[dq]\[dq]

// Firefox 34 or newer
\[dq]x\[dq].replace(/x(.)?/g, (m, group) => {
  console.log(\[ga]group: ${group}\[ga]);
});
// group: undefined
\f[R]
.fi
.PP
Note that due to web compatibility, \f[V]RegExp.$N\f[R] will still
return an empty string instead of \f[V]undefined\f[R] (bug
1053944 (https://bugzil.la/1053944)).
.SH See also
.IP \[bu] 2
Polyfill of many modern \f[V]RegExp\f[R] features (\f[V]dotAll\f[R],
\f[V]sticky\f[R] flags, named capture groups, etc.)
in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-string-and-regexp)
.IP \[bu] 2
Regular expressions guide
.IP \[bu] 2
Regular expressions reference
.IP \[bu] 2
\f[V]String.prototype.match()\f[R]
.IP \[bu] 2
\f[V]String.prototype.replace()\f[R]
.IP \[bu] 2
\f[V]String.prototype.split()\f[R]
