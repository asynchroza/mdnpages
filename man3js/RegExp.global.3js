.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.global" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
RegExp.global - RegExp.prototype.global
.SH SYNOPSIS
.PP
The \f[B]\f[VB]global\f[B]\f[R] accessor property of \f[V]RegExp\f[R]
instances returns whether or not the \f[V]g\f[R] flag is used with this
regular expression.
.SH DESCRIPTION
.PP
\f[V]RegExp.prototype.global\f[R] has the value \f[V]true\f[R] if the
\f[V]g\f[R] flag was used; otherwise, \f[V]false\f[R].
The \f[V]g\f[R] flag indicates that the regular expression should be
tested against all possible matches in a string.
Each call to \f[V]exec()\f[R] will update its \f[V]lastIndex\f[R]
property, so that the next call to \f[V]exec()\f[R] will start at the
next character.
.PP
Some methods, such as \f[V]String.prototype.matchAll()\f[R] and
\f[V]String.prototype.replaceAll()\f[R], will validate that, if the
parameter is a regex, it is global.
The regex\[cq]s \f[V]\[at]\[at]match\f[R] and
\f[V]\[at]\[at]replace\f[R] methods (called by
\f[V]String.prototype.match()\f[R] and
\f[V]String.prototype.replace()\f[R]) would also have different
behaviors when the regex is global.
.PP
The set accessor of \f[V]global\f[R] is \f[V]undefined\f[R].
You cannot change this property directly.
.SH EXAMPLES
.SS Using global
.IP
.nf
\f[C]
const regex = /foo/g;
console.log(regex.global); // true

const str = \[dq]fooexamplefoo\[dq];
const str1 = str.replace(regex, \[dq]\[dq]);
console.log(str1); // example

const regex1 = /foo/;
const str2 = str.replace(regex1, \[dq]\[dq]);
console.log(str2); // examplefoo
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.dotAll\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.hasIndices\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.ignoreCase\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.unicode\f[R]
