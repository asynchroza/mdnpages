.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "AbortSignal" "JS" "December 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AbortSignal \- AbortSignal
.SH SYNOPSIS
The \f[B]\f[CB]AbortSignal\f[B]\f[R] interface represents a signal
object that allows you to communicate with a DOM request (such as a
fetch request) and abort it if required via an
\f[CR]AbortController\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]AbortSignal.aborted\f[R] \f[I](read\-only)\f[R]
A Boolean that indicates whether the request(s) the signal is
communicating with is/are aborted (\f[CR]true\f[R]) or not
(\f[CR]false\f[R]).
.TP
\f[B]AbortSignal.reason\f[R] \f[I](read\-only)\f[R]
A JavaScript value providing the abort reason, once the signal has
aborted.
.SH STATIC METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]AbortSignal.abort()\f[R]
Returns an \f[CR]AbortSignal\f[R] instance that is already set as
aborted.
.TP
\f[B]AbortSignal.any()\f[R]
Returns an \f[CR]AbortSignal\f[R] that aborts when any of the given
abort signals abort.
.TP
\f[B]AbortSignal.timeout()\f[R]
Returns an \f[CR]AbortSignal\f[R] instance that will automatically abort
after a specified time.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]AbortSignal.throwIfAborted()\f[R]
Throws the signal\[cq]s abort \f[CR]reason\f[R] if the signal has been
aborted; otherwise it does nothing.
.SH EVENTS
\f[I]Also inherits events from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.PP
Listen to this event using \f[CR]addEventListener()\f[R] or by assigning
an event listener to the \f[CR]oneventname\f[R] property of this
interface.
.TP
\f[B]abort\f[R]
Invoked when the DOM requests the signal is communicating with is/are
aborted.
Also available via the \f[CR]onabort\f[R] property.
.SH EXAMPLES
.SS Aborting a fetch operation using an explicit signal
The following snippet shows how we might use a signal to abort
downloading a video using the Fetch API.
.PP
We first create an abort controller using the
\f[CR]AbortController()\f[R] constructor, then grab a reference to its
associated \f[CR]AbortSignal\f[R] object using the
\f[CR]AbortController.signal\f[R] property.
.PP
When the fetch request is initiated, we pass in the
\f[CR]AbortSignal\f[R] as an option inside the request\[cq]s options
object (the \f[CR]{signal}\f[R] below).
This associates the signal and controller with the fetch request, and
allows us to abort it by calling \f[CR]AbortController.abort()\f[R].
Below you can see that the fetch operation is aborted in the second
event listener, which triggered when the abort button
(\f[CR]abortBtn\f[R]) is clicked.
.IP
.EX
const controller = new AbortController();
const signal = controller.signal;

const url = \[dq]video.mp4\[dq];
const downloadBtn = document.querySelector(\[dq].download\[dq]);
const abortBtn = document.querySelector(\[dq].abort\[dq]);

downloadBtn.addEventListener(\[dq]click\[dq], fetchVideo);

abortBtn.addEventListener(\[dq]click\[dq], () => {
  controller.abort();
  console.log(\[dq]Download aborted\[dq]);
});

function fetchVideo() {
  fetch(url, { signal })
    .then((response) => {
      console.log(\[dq]Download complete\[dq], response);
    })
    .catch((err) => {
      console.error(\[ga]Download error: ${err.message}\[ga]);
    });
}
.EE
.RS
.PP
\f[B]Note:\f[R] When \f[CR]abort()\f[R] is called, the
\f[CR]fetch()\f[R] promise rejects with an
\[lq]\f[CR]AbortError\f[R]\[rq] \f[CR]DOMException\f[R].
.RE
.PP
You can find a \c
.UR https://github.com/mdn/dom-examples/tree/main/abort-api
full working example on GitHub
.UE \c
; you can also see it \c
.UR https://mdn.github.io/dom-examples/abort-api/
running live
.UE \c
\&.
.SS Aborting a fetch operation with a timeout
If you need to abort the operation on timeout then you can use the
static \f[CR]AbortSignal.timeout()\f[R] method.
This returns an \f[CR]AbortSignal\f[R] that will automatically timeout
after a certain number of milliseconds.
.PP
The code snippet below shows how you would either succeed in downloading
a file, or handle a timeout error after 5 seconds.
Note that when there is a timeout the \f[CR]fetch()\f[R] promise rejects
with a \[lq]\f[CR]TimeoutError\f[R]\[rq] \f[CR]DOMException\f[R].
This allows code to differentiate between timeouts (for which user
notification is probably required), and user aborts.
.IP
.EX
const url = \[dq]video.mp4\[dq];

try {
  const res = await fetch(url, { signal: AbortSignal.timeout(5000) });
  const result = await res.blob();
  // \&...
} catch (err) {
  if (err.name === \[dq]TimeoutError\[dq]) {
    console.error(\[dq]Timeout: It took more than 5 seconds to get the result!\[dq]);
  } else if (err.name === \[dq]AbortError\[dq]) {
    console.error(
      \[dq]Fetch aborted by user action (browser stop button, closing tab, etc.\[dq],
    );
  } else if (err.name === \[dq]TypeError\[dq]) {
    console.error(\[dq]AbortSignal.timeout() method is not supported\[dq]);
  } else {
    // A network error, or some other problem.
    console.error(\[ga]Error: type: ${err.name}, message: ${err.message}\[ga]);
  }
}
.EE
.SS Aborting a fetch with timeout or explicit abort
If you want to abort from multiple signals, you can use
\f[CR]AbortSignal.any()\f[R] to combine them into a single signal.
The following example shows this using \f[CR]fetch\f[R]:
.IP
.EX
try {
  const controller = new AbortController();
  const timeoutSignal = AbortSignal.timeout(5000);
  const res = await fetch(url, {
    // This will abort the fetch when either signal is aborted
    signal: AbortSignal.any([controller.signal, timeoutSignal]),
  });
  const body = await res.json();
} catch (e) {
  if (e.name === \[dq]AbortError\[dq]) {
    // Notify the user of abort.
  } else if (e.name === \[dq]TimeoutError\[dq]) {
    // Notify the user of timeout
  } else {
    // A network error, or some other problem.
    console.log(\[ga]Type: ${e.name}, Message: ${e.message}\[ga]);
  }
}
.EE
.RS
.PP
\f[B]Note:\f[R] Unlike when using \f[CR]AbortSignal.timeout()\f[R],
there is no way to tell whether the final abort was caused by a timeout.
.RE
.SS Implementing an abortable API
An API that needs to support aborting can accept an
\f[CR]AbortSignal\f[R] object, and use its state to trigger abort signal
handling when needed.
.PP
A \f[CR]Promise\f[R]\-based API should respond to the abort signal by
rejecting any unsettled promise with the \f[CR]AbortSignal\f[R] abort
\f[CR]reason\f[R].
For example, consider the following \f[CR]myCoolPromiseAPI\f[R], which
takes a signal and returns a promise.
The promise is rejected immediately if the signal is already aborted, or
if the abort event is detected.
Otherwise it completes normally and then resolves the promise.
.IP
.EX
function myCoolPromiseAPI(/* \&..., */ { signal }) {
  return new Promise((resolve, reject) => {
    // If the signal is already aborted, immediately throw in order to reject the promise.
    if (signal.aborted) {
      reject(signal.reason);
    }

    // Perform the main purpose of the API
    // Call resolve(result) when done.

    // Watch for \[aq]abort\[aq] signals
    signal.addEventListener(\[dq]abort\[dq], () => {
      // Stop the main operation
      // Reject the promise with the abort reason.
      reject(signal.reason);
    });
  });
}
.EE
.PP
The API might then be used as shown.
Note that \f[CR]AbortController.abort()\f[R] is called to abort the
operation.
.IP
.EX
const controller = new AbortController();
const signal = controller.signal;

startSpinner();

myCoolPromiseAPI({ /* \&..., */ signal })
  .then((result) => {})
  .catch((err) => {
    if (err.name === \[dq]AbortError\[dq]) return;
    showUserErrorMessage();
  })
  .then(() => stopSpinner());

controller.abort();
.EE
.PP
APIs that do not return promises might react in a similar manner.
In some cases it may make sense to absorb the signal.
.SH SEE ALSO
.IP \[bu] 2
Fetch API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/blog/abortable-fetch/
Abortable Fetch
.UE \c
\ by Jake Archibald
