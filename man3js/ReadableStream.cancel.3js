.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ReadableStream.cancel" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStream.cancel \- ReadableStream: cancel() method
.SH SYNOPSIS
The \f[B]\f[CB]cancel()\f[B]\f[R] method of the
\f[CR]ReadableStream\f[R] interface returns a \f[CR]Promise\f[R] that
resolves when the stream is canceled.
.PP
Cancel is used when you\[cq]ve completely finished with the stream and
don\[cq]t need any more data from it, even if there are chunks enqueued
waiting to be read.
That data is lost after cancel is called, and the stream is not readable
any more.
To read those chunks still and not completely get rid of the stream,
you\[cq]d use \f[CR]ReadableStreamDefaultController.close()\f[R].
.SH SYNTAX
.IP
.EX
cancel()
cancel(reason)
.EE
.SS Parameters
.TP
\f[B]reason\f[R] \f[I](optional)\f[R]
A human\-readable reason for the cancellation.
The underlying source may or may not use it.
.SS Return value
A \f[CR]Promise\f[R], which fulfills with the value given in the
\f[CR]reason\f[R] parameter.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The stream you are trying to cancel is not a \f[CR]ReadableStream\f[R],
or it is locked.
.SH EXAMPLES
In Jake Archibald\[cq]s \c
.UR https://jsbin.com/gameboy/edit?js,console
cancelling a fetch
.UE \c
\ example, a stream is used to fetch the WHATWG HTML spec chunk by
chunk; each chunk is searched for the string \[lq]service workers\[rq].
When the search terms is found, \f[CR]cancel()\f[R] is used to cancel
the stream \[em] the job is finished so it is no longer needed.
.IP
.EX
const searchTerm = \[dq]service workers\[dq];
// Chars to show either side of the result in the match
const contextBefore = 30;
const contextAfter = 30;
const caseInsensitive = true;
const url = \[dq]https://html.spec.whatwg.org/\[dq];

console.log(\[ga]Searching \[aq]${url}\[aq] for \[aq]${searchTerm}\[aq]\[ga]);

fetch(url)
  .then((response) => {
    console.log(\[dq]Received headers\[dq]);

    const decoder = new TextDecoder();
    const reader = response.body.getReader();
    const toMatch = caseInsensitive ? searchTerm.toLowerCase() : searchTerm;
    const bufferSize = Math.max(toMatch.length \- 1, contextBefore);

    let bytesReceived = 0;
    let buffer = \[dq]\[dq];
    let matchFoundAt = \-1;

    return reader.read().then(function process(result) {
      if (result.done) {
        console.log(\[dq]Failed to find match\[dq]);
        return;
      }

      bytesReceived += result.value.length;
      console.log(\[ga]Received ${bytesReceived} bytes of data so far\[ga]);

      buffer += decoder.decode(result.value, { stream: true });

      // already found match & just context\-gathering?
      if (matchFoundAt === \-1) {
        matchFoundAt = (
          caseInsensitive ? buffer.toLowerCase() : buffer
        ).indexOf(toMatch);
      }

      if (matchFoundAt === \-1) {
        buffer = buffer.slice(\-bufferSize);
      } else if (
        buffer.slice(matchFoundAt + toMatch.length).length >= contextAfter
      ) {
        console.log(\[dq]Here\[aq]s the match:\[dq]);
        console.log(
          buffer.slice(
            Math.max(0, matchFoundAt \- contextBefore),
            matchFoundAt + toMatch.length + contextAfter,
          ),
        );
        console.log(\[dq]Cancelling fetch\[dq]);
        reader.cancel();
        return;
      } else {
        console.log(\[dq]Found match, but need more context\&...\[dq]);
      }

      // keep reading
      return reader.read().then(process);
    });
  })
  .catch((err) => {
    console.error(
      \[dq]Something went wrong. See devtools for details. Does the response lack CORS headers?\[dq],
    );
    throw err;
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReadableStream()\f[R] constructor
.IP \[bu] 2
Using readable streams
