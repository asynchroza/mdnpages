.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MutationRecord.nextSibling" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.nextSibling \- MutationRecord: nextSibling property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]nextSibling\f[B]\f[R] is the next sibling of an added or
removed child node of the \f[CR]target\f[R] of a
\f[CR]MutationObserver\f[R].
.SH VALUE
If a node is added to or removed from the \f[CR]target\f[R] of a
\f[CR]MutationObserver\f[R], the value is the \f[CR]Node\f[R] that is
the next sibling of the added or removed node: that is, the node
immediately following this one in the parent\[cq]s \f[CR]childNodes\f[R]
list.
.PP
The value is \f[CR]null\f[R] if there are no added or removed nodes, or
if the node is the last child of its parent.
.SH EXAMPLES
.SS Log the next sibling of a mutation
This adds a node every time you click the button, but it adds the node
at the \f[I]start of the target\f[R], not the end.
Then the observer logs the \f[CR]textContent\f[R] of the
\f[CR]nextSibling\f[R] of the added node.
.SS HTML
.IP
.EX
<button id=\[dq]add\-nodes\[dq]>Add a node</button>
<button id=\[dq]reset\[dq]>Reset</button>

<pre id=\[dq]log\[dq] class=\[dq]log\[dq]>Next sibling of added node:</pre>
<div id=\[dq]target\[dq]><p>Node #0</p></div>
.EE
.PP
\f[CR]css hidden .log {   border: 1px dotted black;   padding: 0.5rem; }\f[R]
.SS JavaScript
.IP
.EX
const addNodes = document.querySelector(\[dq]#add\-nodes\[dq]);
const reset = document.querySelector(\[dq]#reset\[dq]);
const target = document.querySelector(\[dq]#target\[dq]);
let nodeNumber = 1;

addNodes.addEventListener(\[dq]click\[dq], () => {
  const newPara = document.createElement(\[dq]p\[dq]);
  newPara.textContent = \[ga]Node #${nodeNumber}\[ga];
  nodeNumber++;
  target.insertBefore(newPara, target.firstChild);
});

reset.addEventListener(\[dq]click\[dq], () => self.location.reload());

function logNextSibling(records) {
  for (const record of records) {
    if (record.type === \[dq]childList\[dq]) {
      for (const newNode of record.addedNodes) {
        log.textContent = \[ga]Next sibling of added node: ${record.nextSibling?.textContent}\[ga];
      }
    }
  }
}

const observer = new MutationObserver(logNextSibling);
observer.observe(target, { childList: true });
.EE
.SS Result
