.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Function.displayName" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Function.displayName - Function: displayName
.SH SYNOPSIS
.PP
\f[I](non-standard)\f[R]
.PP
The optional \f[B]\f[VB]displayName\f[B]\f[R] property of a
\f[V]Function\f[R] instance specifies the display name of the function.
.SH VALUE
.PP
The \f[V]displayName\f[R] property is not initially present on any
function \[em] it\[cq]s added by the code authors.
For the purpose of display, it should be a string.
.SH DESCRIPTION
.PP
The \f[V]displayName\f[R] property, if present, may be preferred by
consoles and profilers over the \f[V]name\f[R] property to be displayed
as the name of a function.
.PP
Among browsers, only the Firefox console utilizes this property.
React devtools also use the
\f[V]displayName\f[R] (https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging)
property when displaying the component tree.
.PP
Firefox does some basic attempts to decode the \f[V]displayName\f[R]
that\[cq]s possibly generated by the anonymous JavaScript functions
naming convention (http://johnjbarton.github.io/nonymous/index.html)
algorithm.
The following patterns are detected:
.IP \[bu] 2
If \f[V]displayName\f[R] ends with a sequence of alphanumeric
characters, \f[V]_\f[R], and \f[V]$\f[R], the longest such suffix is
displayed.
.IP \[bu] 2
If \f[V]displayName\f[R] ends with a sequence of \f[V][]\f[R]-enclosed
characters, that sequence is displayed without the square brackets.
.IP \[bu] 2
If \f[V]displayName\f[R] ends with a sequence of alphanumeric characters
and \f[V]_\f[R] followed by some \f[V]/\f[R], \f[V].\f[R], or
\f[V]<\f[R], the sequence is returned without the trailing \f[V]/\f[R],
\f[V].\f[R], or \f[V]<\f[R] characters.
.IP \[bu] 2
If \f[V]displayName\f[R] ends with a sequence of alphanumeric characters
and \f[V]_\f[R] followed by \f[V](\[ha])\f[R], the sequence is displayed
without the \f[V](\[ha])\f[R].
.PP
If none of the above patterns match, the entire \f[V]displayName\f[R] is
displayed.
.SH EXAMPLES
.SS Setting a displayName
.PP
By entering the following in a Firefox console, it should display as
something like \f[V]function MyFunction()\f[R]:
.IP
.nf
\f[C]
const a = function () {};
a.displayName = \[dq]MyFunction\[dq];

a; // function MyFunction()
\f[R]
.fi
.SS Changing displayName dynamically
.PP
You can dynamically change the \f[V]displayName\f[R] of a function:
.IP
.nf
\f[C]
const object = {
  // anonymous
  someMethod: function someMethod(value) {
    someMethod.displayName = \[ga]someMethod (${value})\[ga];
  },
};

console.log(object.someMethod.displayName); // undefined

object.someMethod(\[dq]123\[dq]);
console.log(object.someMethod.displayName); // \[dq]someMethod (123)\[dq]
\f[R]
.fi
.SS Cleaning of displayName
.PP
Firefox devtools would clean up a few common patterns in the
\f[V]displayName\f[R] property before displaying it.
.IP
.nf
\f[C]
function foo() {}

function testName(name) {
  foo.displayName = name;
  console.log(foo);
}

testName(\[dq]$foo$\[dq]); // function $foo$()
testName(\[dq]foo bar\[dq]); // function bar()
testName(\[dq]Foo.prototype.add\[dq]); // function add()
testName(\[dq]foo .\[dq]); // function foo .()
testName(\[dq]foo <\[dq]); // function foo <()
testName(\[dq]foo?\[dq]); // function foo?()
testName(\[dq]foo()\[dq]); // function foo()()

testName(\[dq][...]\[dq]); // function ...()
testName(\[dq]foo<\[dq]); // function foo()
testName(\[dq]foo...\[dq]); // function foo()
testName(\[dq]foo(\[ha])\[dq]); // function foo()
\f[R]
.fi
