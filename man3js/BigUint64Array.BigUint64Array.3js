.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "BigUint64Array.BigUint64Array" "JS" "May 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BigUint64Array.BigUint64Array - BigUint64Array() constructor
.SH SYNOPSIS
The \f[B]\f[CB]BigUint64Array()\f[B]\f[R] constructor creates
\f[CR]BigUint64Array\f[R] objects.
The contents are initialized to \f[CR]0n\f[R].
.SH SYNTAX
.IP
.EX
new BigUint64Array()
new BigUint64Array(length)
new BigUint64Array(typedArray)
new BigUint64Array(object)

new BigUint64Array(buffer)
new BigUint64Array(buffer, byteOffset)
new BigUint64Array(buffer, byteOffset, length)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]BigUint64Array()\f[R] can only be constructed with
\f[CR]new\f[R].
Attempting to call it without \f[CR]new\f[R] throws a
\f[CR]TypeError\f[R].
.RE
.SS Parameters
See \f[CR]TypedArray\f[R].
.SS Exceptions
See \f[CR]TypedArray\f[R].
.SH EXAMPLES
.SS Different ways to create a BigUint64Array
.IP
.EX
// From a length
const biguint64 = new BigUint64Array(2);
biguint64[0] = 42n;
console.log(biguint64[0]); // 42n
console.log(biguint64.length); // 2
console.log(biguint64.BYTES_PER_ELEMENT); // 8

// From an array
const x = new BigUint64Array([21n, 31n]);
console.log(x[1]); // 31n

// From another TypedArray
const y = new BigUint64Array(x);
console.log(y[0]); // 21n

// From an ArrayBuffer
const buffer = new ArrayBuffer(64);
const z = new BigUint64Array(buffer, 8, 4);
console.log(z.byteOffset); // 8

// From an iterable
const iterable = (function* () {
  yield* [1n, 2n, 3n];
})();
const biguint64FromIterable = new BigUint64Array(iterable);
console.log(biguint64FromIterable);
// BigUint64Array [1n, 2n, 3n]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[CR]BigInt64Array\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
