.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Object.Object" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Object()\f[B]\f[R] constructor turns the input into an
object.
Its behavior depends on the input\[cq]s type.
.SH Syntax
.IP
.nf
\f[C]
new Object(value)
Object(value)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]Object()\f[R] can be called with or without
\f[V]new\f[R], but sometimes with different effects.
See Return value.
.RE
.SS Parameters
.IP \[bu] 2
\f[V]value\f[R]
.RS 2
.IP \[bu] 2
Any value.
.RE
.SS Return value
.PP
When the \f[V]Object()\f[R] constructor itself is called or constructed,
its return value is an object:
.IP \[bu] 2
If the value is \f[V]null\f[R] or \f[V]undefined\f[R], it creates and
returns an empty object.
.IP \[bu] 2
If the value is an object already, it returns the value.
.IP \[bu] 2
Otherwise, it returns an object of a type that corresponds to the given
value.
For example, passing a \f[V]BigInt\f[R] primitive returns a
\f[V]BigInt\f[R] wrapper object.
.PP
When \f[V]Object()\f[R] is implicitly called via \f[V]super()\f[R] in
the constructor of a class that extends \f[V]Object\f[R], it initializes
a new object with \f[V]new.target.prototype\f[R] as its prototype.
Any value passed to \f[V]super()\f[R] is ignored \[em] for example, even
if you pass a number, the \f[V]this\f[R] value inside the constructor
does not become a \f[V]Number\f[R] instance.
.SH Examples
.SS Creating a new Object
.IP
.nf
\f[C]
const o = new Object();
o.foo = 42;

console.log(o);
// { foo: 42 }
\f[R]
.fi
.SS Using Object given undefined and null types
.PP
The following examples store an empty \f[V]Object\f[R] object in
\f[V]o\f[R]:
.IP
.nf
\f[C]
const o = new Object();
\f[R]
.fi
.IP
.nf
\f[C]
const o = new Object(undefined);
\f[R]
.fi
.IP
.nf
\f[C]
const o = new Object(null);
\f[R]
.fi
.SS Obtaining wrapper objects for BigInt and Symbol
.PP
The \f[V]BigInt()\f[R] and \f[V]Symbol()\f[R] constructors throw an
error when called with \f[V]new\f[R], to prevent the common mistake of
creating a wrapper object instead of the primitive value.
The only way to create a wrapper object for these types is to call
\f[V]Object()\f[R] with them:
.IP
.nf
\f[C]
const numberObj = new Number(1);
console.log(typeof numberObj); // \[dq]object\[dq]

const bigintObj = Object(1n);
console.log(typeof bigintObj); // \[dq]object\[dq]

const symbolObj = Object(Symbol(\[dq]foo\[dq]));
console.log(typeof symbolObj); // \[dq]object\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Object initializer
