.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.isExtensible" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Reflect.isExtensible()\f[B]\f[R] static method is like
\f[V]Object.isExtensible()\f[R].
It determines if an object is extensible (whether it can have new
properties added to it).
.SH Syntax
.IP
.nf
\f[C]
Reflect.isExtensible(target)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
The target object which to check if it is extensible.
.RE
.SS Return value
.PP
A \f[V]Boolean\f[R] indicating whether or not the target is extensible.
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]target\f[R] is not an object.
.RE
.SH Description
.PP
\f[V]Reflect.isExtensible()\f[R] provides the reflective semantic of
checking if an object is extensible.
The only difference with \f[V]Object.isExtensible()\f[R] is how
non-object targets are handled.
\f[V]Reflect.isExtensible()\f[R] throws a \f[V]TypeError\f[R] if the
target is not an object, while \f[V]Object.isExtensible()\f[R] always
returns \f[V]false\f[R] for non-object targets.
.PP
\f[V]Reflect.isExtensible()\f[R] invokes the \f[V][[IsExtensible]]\f[R]
object internal method of \f[V]target\f[R].
.SH Examples
.SS Using Reflect.isExtensible()
.PP
See also \f[V]Object.isExtensible()\f[R].
.IP
.nf
\f[C]
// New objects are extensible.
const empty = {};
Reflect.isExtensible(empty); // true

// ...but that can be changed.
Reflect.preventExtensions(empty);
Reflect.isExtensible(empty); // false

// Sealed objects are by definition non-extensible.
const sealed = Object.seal({});
Reflect.isExtensible(sealed); // false

// Frozen objects are also by definition non-extensible.
const frozen = Object.freeze({});
Reflect.isExtensible(frozen); // false
\f[R]
.fi
.SS Difference with Object.isExtensible()
.PP
If the \f[V]target\f[R] argument to this method is not an object (a
primitive), then it will cause a \f[V]TypeError\f[R].
With \f[V]Object.isExtensible()\f[R], a non-object \f[V]target\f[R] will
return false without any errors.
.IP
.nf
\f[C]
Reflect.isExtensible(1);
// TypeError: 1 is not an object

Object.isExtensible(1);
// false
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Reflect.isExtensible\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]Object.isExtensible()\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]isExtensible\f[R] handler
