.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Reflect.isExtensible" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.isExtensible - Reflect.isExtensible()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.isExtensible()\f[B]\f[R] static method is like
\f[CR]Object.isExtensible()\f[R].
It determines if an object is extensible (whether it can have new
properties added to it).
.SH SYNTAX
.IP
.EX
Reflect.isExtensible(target)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object which to check if it is extensible.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the target is extensible.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.isExtensible()\f[R] provides the reflective semantic of
checking if an object is extensible.
The only difference with \f[CR]Object.isExtensible()\f[R] is how
non-object targets are handled.
\f[CR]Reflect.isExtensible()\f[R] throws a \f[CR]TypeError\f[R] if the
target is not an object, while \f[CR]Object.isExtensible()\f[R] always
returns \f[CR]false\f[R] for non-object targets.
.PP
\f[CR]Reflect.isExtensible()\f[R] invokes the
\f[CR][[IsExtensible]]\f[R] object internal method of \f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.isExtensible()
See also \f[CR]Object.isExtensible()\f[R].
.IP
.EX
// New objects are extensible.
const empty = {};
Reflect.isExtensible(empty); // true

// ...but that can be changed.
Reflect.preventExtensions(empty);
Reflect.isExtensible(empty); // false

// Sealed objects are by definition non-extensible.
const sealed = Object.seal({});
Reflect.isExtensible(sealed); // false

// Frozen objects are also by definition non-extensible.
const frozen = Object.freeze({});
Reflect.isExtensible(frozen); // false
.EE
.SS Difference with Object.isExtensible()
If the \f[CR]target\f[R] argument to this method is not an object (a
primitive), then it will cause a \f[CR]TypeError\f[R].
With \f[CR]Object.isExtensible()\f[R], a non-object \f[CR]target\f[R]
will return false without any errors.
.IP
.EX
Reflect.isExtensible(1);
// TypeError: 1 is not an object

Object.isExtensible(1);
// false
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Reflect.isExtensible\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[CR]Reflect\f[R]
.IP \[bu] 2
\f[CR]Object.isExtensible()\f[R]
.IP \[bu] 2
\f[CR]handler.isExtensible()\f[R]
