.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransfer.setData" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.setData \- DataTransfer: setData() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.setData()\f[B]\f[R] method sets the drag
operation\[cq]s \f[CR]drag data\f[R] to the specified data and type.
If data for the given type does not exist, it is added at the end of the
drag data store, such that the last item in the \f[CR]types\f[R] list
will be the new type.
If data for the given type already exists, the existing data is replaced
in the same position.
That is, the order of the \f[CR]types\f[R] list is not changed when
replacing data of the same type.
.PP
Example data types are \f[CR]text/plain\f[R] and
\f[CR]text/uri\-list\f[R].
.SH SYNTAX
.IP
.EX
setData(format, data)
.EE
.SS Parameters
.TP
\f[B]format\f[R]
A string representing the type of the drag data to add to the
\f[CR]drag object\f[R].
.TP
\f[B]data\f[R]
A string representing the data to add to the \f[CR]drag object\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Dragging an element
In this example we can drag a \f[CR]<p>\f[R] element into a target
\f[CR]<div>\f[R] element.
.IP \[bu] 2
In the \f[CR]dragstart\f[R] handler, we use \f[CR]setData()\f[R] to add
the \f[CR]id\f[R] of the \f[CR]<p>\f[R] element to the
\f[CR]DataTransfer\f[R] object.
.IP \[bu] 2
In the \f[CR]drop\f[R] handler we retrieve the \f[CR]id\f[R] and use it
to move the \f[CR]<p>\f[R] element into the target.
.SS HTML
.IP
.EX
<div>
  <p id=\[dq]source\[dq] draggable=\[dq]true\[dq]>
    Select this element, drag it to the drop zone and then release the selection
    to move the element.
  </p>
</div>
<div id=\[dq]target\[dq]>Drop Zone</div>

<button id=\[dq]reset\[dq]>Reset example</button>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0.5em 0;
  padding: 2em;
}

target,
source {
  border: 1px solid black;
  padding: 0.5rem;
}

\&.dragging {
  background\-color: pink;
}
.EE
.SS JavaScript
.IP
.EX
const source = document.querySelector(\[dq]#source\[dq]);
source.addEventListener(\[dq]dragstart\[dq], (ev) => {
  console.log(\[dq]dragStart\[dq]);
  // Change the source element\[aq]s background color
  // to show that drag has started
  ev.currentTarget.classList.add(\[dq]dragging\[dq]);
  // Clear the drag data cache (for all formats/types)
  ev.dataTransfer.clearData();
  // Set the drag\[aq]s format and data.
  // Use the event target\[aq]s id for the data
  ev.dataTransfer.setData(\[dq]text/plain\[dq], ev.target.id);
});
source.addEventListener(\[dq]dragend\[dq], (ev) =>
  ev.target.classList.remove(\[dq]dragging\[dq]),
);

const target = document.querySelector(\[dq]#target\[dq]);
target.addEventListener(\[dq]dragover\[dq], (ev) => {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();
});
target.addEventListener(\[dq]drop\[dq], (ev) => {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();
  // Get the data, which is the id of the source element
  const data = ev.dataTransfer.getData(\[dq]text\[dq]);
  const source = document.getElementById(data);
  ev.target.appendChild(source);
});

const reset = document.querySelector(\[dq]#reset\[dq]);
reset.addEventListener(\[dq]click\[dq], () => document.location.reload());
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Drag and drop
.IP \[bu] 2
Drag Operations
.IP \[bu] 2
Recommended Drag Types
.IP \[bu] 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
