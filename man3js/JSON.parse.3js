.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "JSON.parse" "JS" "September 13, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
JSON.parse \- JSON.parse()
.SH SYNOPSIS
The \f[B]\f[CB]JSON.parse()\f[B]\f[R] static method parses a JSON
string, constructing the JavaScript value or object described by the
string.
An optional \f[I]reviver\f[R] function can be provided to perform a
transformation on the resulting object before it is returned.
.SH SYNTAX
.IP
.EX
JSON.parse(text)
JSON.parse(text, reviver)
.EE
.SS Parameters
.TP
\f[B]text\f[R]
The string to parse as JSON.
See the \f[CR]JSON\f[R] object for a description of JSON syntax.
.TP
\f[B]reviver\f[R] \f[I](optional)\f[R]
If a function, this prescribes how each value originally produced by
parsing is transformed before being returned.
Non\-callable values are ignored.
The function is called with the following arguments:
.RS
.TP
\f[B]key\f[R]
The key associated with the value.
.TP
\f[B]value\f[R]
The value produced by parsing.
.RE
.SS Return value
The \f[CR]Object\f[R], \f[CR]Array\f[R], string, number, boolean, or
\f[CR]null\f[R] value corresponding to the given JSON \f[CR]text\f[R].
.SS Exceptions
.TP
\f[B]SyntaxError\f[R]
Thrown if the string to parse is not valid JSON.
.SH DESCRIPTION
\f[CR]JSON.parse()\f[R] parses a JSON string according to the JSON
grammar, then evaluates the string as if it\[cq]s a JavaScript
expression.
The only instance where a piece of JSON text represents a different
value from the same JavaScript expression is when dealing with the
\f[CR]\[dq]__proto__\[dq]\f[R] key \[em] see Object literal syntax
vs.\ JSON.
.SS The reviver parameter
If a \f[CR]reviver\f[R] is specified, the value computed by parsing is
\f[I]transformed\f[R] before being returned.
Specifically, the computed value and all its properties (in a \c
.UR https://en.wikipedia.org/wiki/Depth-first_search
depth\-first
.UE \c
\ fashion, beginning with the most nested properties and proceeding to
the original value itself) are individually run through the
\f[CR]reviver\f[R].
.PP
The \f[CR]reviver\f[R] is called with the object containing the property
being processed as \f[CR]this\f[R] (unless you define the
\f[CR]reviver\f[R] as an arrow function, in which case there\[cq]s no
separate \f[CR]this\f[R] binding) and two arguments: \f[CR]key\f[R] and
\f[CR]value\f[R], representing the property name as a string (even for
arrays) and the property value.
If the \f[CR]reviver\f[R] function returns \f[CR]undefined\f[R] (or
returns no value \[em] for example, if execution falls off the end of
the function), the property is deleted from the object.
Otherwise, the property is redefined to be the return value.
If the \f[CR]reviver\f[R] only transforms some values and not others, be
certain to return all untransformed values as\-is \[em] otherwise, they
will be deleted from the resulting object.
.PP
Similar to the \f[CR]replacer\f[R] parameter of
\f[CR]JSON.stringify()\f[R], for arrays and objects, \f[CR]reviver\f[R]
will be last called on the root value with an empty string as the
\f[CR]key\f[R] and the root object as the \f[CR]value\f[R].
For other valid JSON values, \f[CR]reviver\f[R] works similarly and is
called once with an empty string as the \f[CR]key\f[R] and the value
itself as the \f[CR]value\f[R].
.PP
If you return another value from \f[CR]reviver\f[R], that value will
completely replace the originally parsed value.
This even applies to the root value.
For example:
.IP
.EX
const transformedObj1 = JSON.parse(\[aq][1,5,{\[dq]s\[dq]:1}]\[aq], (key, value) => {
  return typeof value === \[dq]object\[dq] ? undefined : value;
});

console.log(transformedObj1); // undefined
.EE
.PP
There is no way to work around this generically.
You cannot specially handle the case where \f[CR]key\f[R] is an empty
string, because JSON objects can also contain keys that are empty
strings.
You need to know very precisely what kind of transformation is needed
for each key when implementing the reviver.
.PP
Note that \f[CR]reviver\f[R] is run after the value is parsed.
So, for example, numbers in JSON text will have already been converted
to JavaScript numbers, and may lose precision in the process.
To transfer large numbers without loss of precision, serialize them as
strings, and revive them to BigInts, or other appropriate arbitrary
precision formats.
.SH EXAMPLES
.SS Using JSON.parse()
.IP
.EX
JSON.parse(\[dq]{}\[dq]); // {}
JSON.parse(\[dq]true\[dq]); // true
JSON.parse(\[aq]\[dq]foo\[dq]\[aq]); // \[dq]foo\[dq]
JSON.parse(\[aq][1, 5, \[dq]false\[dq]]\[aq]); // [1, 5, \[dq]false\[dq]]
JSON.parse(\[dq]null\[dq]); // null
.EE
.SS Using the reviver parameter
.IP
.EX
JSON.parse(
  \[aq]{\[dq]p\[dq]: 5}\[aq],
  (key, value) =>
    typeof value === \[dq]number\[dq]
      ? value * 2 // return value * 2 for numbers
      : value, // return everything else unchanged
);
// { p: 10 }

JSON.parse(\[aq]{\[dq]1\[dq]: 1, \[dq]2\[dq]: 2, \[dq]3\[dq]: {\[dq]4\[dq]: 4, \[dq]5\[dq]: {\[dq]6\[dq]: 6}}}\[aq], (key, value) => {
  console.log(key);
  return value;
});
// 1
// 2
// 4
// 6
// 5
// 3
// \[dq]\[dq]
.EE
.SS Using reviver when paired with the replacer of JSON.stringify()
In order for a value to properly round\-trip (that is, it gets
deserialized to the same original object), the serialization process
must preserve the type information.
For example, you can use the \f[CR]replacer\f[R] parameter of
\f[CR]JSON.stringify()\f[R] for this purpose:
.IP
.EX
// Maps are normally serialized as objects with no properties.
// We can use the replacer to specify the entries to be serialized.
const map = new Map([
  [1, \[dq]one\[dq]],
  [2, \[dq]two\[dq]],
  [3, \[dq]three\[dq]],
]);

const jsonText = JSON.stringify(map, (key, value) =>
  value instanceof Map ? Array.from(value.entries()) : value,
);

console.log(jsonText);
// [[1,\[dq]one\[dq]],[2,\[dq]two\[dq]],[3,\[dq]three\[dq]]]

const map2 = JSON.parse(jsonText, (key, value) =>
  Array.isArray(value) ? new Map(value) : value,
);

console.log(map2);
// Map { 1 => \[dq]one\[dq], 2 => \[dq]two\[dq], 3 => \[dq]three\[dq] }
.EE
.PP
Because JSON has no syntax space for annotating type metadata, in order
to revive values that are not plain objects, you have to consider one of
the following:
.IP \[bu] 2
Serialize the entire object to a string and prefix it with a type tag.
.IP \[bu] 2
\[lq]Guess\[rq] based on the structure of the data (for example, an
array of two\-member arrays)
.IP \[bu] 2
If the shape of the payload is fixed, based on the property name (for
example, all properties called \f[CR]registry\f[R] hold \f[CR]Map\f[R]
objects).
.SS JSON.parse() does not allow trailing commas
\f[B]Bad\f[R]
.IP
.EX
// both will throw a SyntaxError
JSON.parse(\[dq][1, 2, 3, 4, ]\[dq]);
JSON.parse(\[aq]{\[dq]foo\[dq] : 1, }\[aq]);
.EE
.SS JSON.parse() does not allow single quotes
\f[B]Bad\f[R]
.IP
.EX
// will throw a SyntaxError
JSON.parse(\[dq]{\[aq]foo\[aq]: 1}\[dq]);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]JSON.stringify()\f[R]
