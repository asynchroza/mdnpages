.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "RTCIceTransport.gatheringstatechange_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCIceTransport.gatheringstatechange_event \- RTCIceTransport:
gatheringstatechange event
.SH SYNOPSIS
A \f[B]\f[CB]gatheringstatechange\f[B]\f[R] event is sent to an
\f[CR]RTCIceTransport\f[R] when its ICE candidate gathering state
changes.
.PP
The gathering state, whose actual status can be found in the transport
object\[cq]s \f[CR]gatheringState\f[R] property, indicates whether or
not the ICE agent has begun gathering candidates, and if so, if it has
finished doing so.
.PP
The key difference between \f[CR]gatheringstatechange\f[R] and
\f[CR]icegatheringstatechange\f[R] is that the latter represents the
overall state of the connection including every
\f[CR]RTCIceTransport\f[R] used by every \f[CR]RTCRtpSender\f[R] and
every \f[CR]RTCRtpReceiver\f[R] on the entire connection.
In contrast, \f[CR]gatheringstatechange\f[R] represents changes to the
candidate gathering state for a single transport.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]gatheringstatechange\[dq], (event) => {});

ongatheringstatechange = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example creates a handler for \f[CR]gatheringstatechange\f[R]
events on each \f[CR]RTCRtpSender\f[R] associated with a given
\f[CR]RTCPeerConnection\f[R].
Here, the \f[CR]addEventListener()\f[R] method is called to add a
listener for \f[CR]gatheringstatechange\f[R] events:
.IP
.EX
pc.getSenders().forEach((sender) => {
  sender.transport.iceTransport.addEventListener(
    \[dq]gatheringstatechange\[dq],
    (ev) => {
      let transport = ev.target;

      if (transport.gatheringState === \[dq]complete\[dq]) {
        /* this transport has finished gathering candidates,
        but others may still be working on it */
      }
    },
    false,
  );
});
.EE
.PP
Likewise, you can use the \f[CR]ongatheringstatechange\f[R] event
handler property:
.IP
.EX
pc.getSenders().forEach((sender) => {
  sender.transport.iceTransport.ongatheringstatechange = (ev) => {
    let transport = ev.target;

    if (transport.gatheringState === \[dq]complete\[dq]) {
      /* this transport has finished gathering candidates,
         but others may still be working on it */
    }
  };
});
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
WebRTC connectivity
.SS Related RTCIceTransport events
.IP \[bu] 2
\f[CR]statechange\f[R]
.IP \[bu] 2
\f[CR]selectedcandidatepairchange\f[R]
.SS Related RTCPeerConnection events
.IP \[bu] 2
\f[CR]negotiationneeded\f[R]
.IP \[bu] 2
\f[CR]signalingstatechange\f[R]
.IP \[bu] 2
\f[CR]iceconnectionstatechange\f[R]
.IP \[bu] 2
\f[CR]icegatheringstatechange\f[R]
.IP \[bu] 2
\f[CR]connectionstatechange\f[R]
