.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MediaDeviceInfo.groupId" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaDeviceInfo.groupId \- MediaDeviceInfo: groupId property
.SH SYNOPSIS
The \f[B]\f[CB]groupId\f[B]\f[R] readonly property of the
\f[CR]MediaDeviceInfo\f[R] interface returns a string that is a group
identifier.
.PP
Two devices have the same group identifier if they belong to the same
physical device; for example, a monitor with both a built\-in camera and
microphone.
.SH VALUE
A string which uniquely identifies the group of related devices to which
this device belongs.
.SH EXAMPLES
In this example, we assemble a list of the devices which are part of the
same group as a given device.
This might be used to produce a user interface that gathers associated
devices together for presentation purposes, or to make it easy for the
user to choose to use the built\-in camera and microphone on the same
display at the same time.
.IP
.EX
const getDeviceGroup = (mainDevInfo) => {
  let devList = [];

  navigator.mediaDevices.enumerateDevices().then((devices) => {
    devices.forEach((device) => {
      if (device.groupId === mainDevInfo.groupId) {
        devList.push(device);
      }
    });
  });

  return devList;
};
.EE
.PP
The \f[CR]getDeviceGroup()\f[R] function takes as input the
\f[CR]MediaDeviceInfo\f[R] object describing the device for which a
group list is to be built.
The function starts by initializing the result array,
\f[CR]devList\f[R], to be an empty array.
.PP
Then \f[CR]navigator.mediaDevices.enumerateDevices()\f[R] is called to
get the list of all media devices.
Once the promise resolves, we walk the list using \f[CR]forEach()\f[R].
For each device, if its \f[CR]groupId\f[R] matches the main device\[cq]s
\f[CR]groupId\f[R], we push the \f[CR]MediaDeviceInfo\f[R] object onto
the list.
.PP
Finally, the list, which now contains a \f[CR]MediaDeviceInfo\f[R]
object for each device in the same group, is returned to the caller.
.PP
This could be altered easily to either leave out the passed\-in device
from the returned list, or to place it at the top of the list, by
comparing the two objects\[cq] \f[CR]deviceId\f[R] values, only pushing
the device onto the result list if it doesn\[cq]t match.
.PP
This version of the example puts the passed\-in device at the top of the
result list, then adds any other members of the group that are found:
.IP
.EX
const getDeviceGroup = (mainDevInfo) => {
  let devList = [mainDevInfo];

  navigator.mediaDevices.enumerateDevices().then((devices) => {
    devices.forEach((device) => {
      if (
        device.groupId === mainDevInfo.groupId &&
        device.deviceId !== mainDevInfo.deviceId
      ) {
        devList.push(device);
      }
    });
  });

  return devList;
};
.EE
