.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "IDBTransaction.db" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.db \- IDBTransaction: db property
.SH SYNOPSIS
The \f[B]\f[CB]db\f[B]\f[R] read\-only property of the
\f[CR]IDBTransaction\f[R] interface returns the database connection with
which this transaction is associated.
.PP
This feature is available in Web Workers.
.SH VALUE
An \f[CR]IDBDatabase\f[R] object.
.SH EXAMPLES
In the following code snippet, we open a read/write transaction on our
database and add some data to an object store.
Note also the functions attached to transaction event handlers to report
on the outcome of the transaction opening in the event of success or
failure.
At the end, we return the associated database connection using
\f[CR]db\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
const note = document.getElementById(\[dq]notifications\[dq]);

// an instance of a db object for us to store the IDB data in
let db;

// Let us open our database
const DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) => {
  note.innerHTML += \[dq]<li>Database initialized.</li>\[dq];

  // store the result of opening the database in the db variable.
  // This is used a lot below
  db = DBOpenRequest.result;

  // Run the addData() function to add the data to the database
  addData();
};

function addData() {
  // Create a new object ready for being inserted into the IDB
  const newItem = [
    {
      taskTitle: \[dq]Walk dog\[dq],
      hours: 19,
      minutes: 30,
      day: 24,
      month: \[dq]December\[dq],
      year: 2013,
      notified: \[dq]no\[dq],
    },
  ];

  // open a read/write db transaction, ready for adding the data
  const transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  // report on the success of opening the transaction
  transaction.oncomplete = (event) => {
    note.innerHTML +=
      \[dq]<li>Transaction completed: database modification finished.</li>\[dq];
  };

  transaction.onerror = (event) => {
    note.innerHTML +=
      \[dq]<li>Transaction not opened due to error. Duplicate items not allowed.</li>\[dq];
  };

  // create an object store on the transaction
  const objectStore = transaction.objectStore(\[dq]toDoList\[dq]);

  // add our newItem object to the object store
  const objectStoreRequest = objectStore.add(newItem[0]);

  objectStoreRequest.onsuccess = (event) => {
    // report the success of the request (this does not mean the item
    // has been stored successfully in the DB \- for that you need transaction.onsuccess)
    note.innerHTML += \[dq]<li>Request successful.</li>\[dq];
  };

  // Return the database (IDBDatabase) connection with which this transaction is associated
  transaction.db;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
