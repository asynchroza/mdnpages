'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.iterator" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Symbol.iterator - Symbol.iterator
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Symbol.iterator\f[B]\f[R] static data property represents
the well-known symbol \f[V]\[at]\[at]iterator\f[R].
The iterable protocol looks up this symbol for the method that returns
the iterator for an object.
In order for an object to be iterable, it must have an
\f[V]\[at]\[at]iterator\f[R] key.
.SH VALUE
.PP
The well-known symbol \f[V]\[at]\[at]iterator\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
.PP
Whenever an object needs to be iterated (such as at the beginning of a
\f[V]for...of\f[R] loop), its \f[V]\[at]\[at]iterator\f[R] method is
called with no arguments, and the returned \f[B]iterator\f[R] is used to
obtain the values to be iterated.
.PP
Some built-in types have a default iteration behavior, while other types
(such as \f[V]Object\f[R]) do not.
Some built-in types with a \f[V]\[at]\[at]iterator\f[R] method are:
.IP \[bu] 2
\f[V]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]String.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]Map.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]Set.prototype[\[at]\[at]iterator]()\f[R]
.PP
See also Iteration protocols for more information.
.SH EXAMPLES
.SS User-defined iterables
.PP
We can make our own iterables like this:
.IP
.nf
\f[C]
const myIterable = {};
myIterable[Symbol.iterator] = function* () {
  yield 1;
  yield 2;
  yield 3;
};
[...myIterable]; // [1, 2, 3]
\f[R]
.fi
.PP
Or iterables can be defined directly inside a class or object using a
computed property:
.IP
.nf
\f[C]
class Foo {
  *[Symbol.iterator]() {
    yield 1;
    yield 2;
    yield 3;
  }
}

const someObj = {
  *[Symbol.iterator]() {
    yield \[dq]a\[dq];
    yield \[dq]b\[dq];
  },
};

console.log(...new Foo()); // 1, 2, 3
console.log(...someObj); // \[aq]a\[aq], \[aq]b\[aq]
\f[R]
.fi
.SS Non-well-formed iterables
.PP
If an iterable\[cq]s \f[V]\[at]\[at]iterator\f[R] method does not return
an iterator object, then it is a non-well-formed iterable.
Using it as such is likely to result in runtime exceptions or buggy
behavior:
.PP
\f[B]Bad\f[R]
.IP
.nf
\f[C]
const nonWellFormedIterable = {};
nonWellFormedIterable[Symbol.iterator] = () => 1;
[...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Symbol.iterator\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-symbol)
.IP \[bu] 2
Iteration protocols
.IP \[bu] 2
\f[V]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]String.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]Map.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]Set.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]arguments[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[V]Segments.prototype[\[at]\[at]iterator]()\f[R]
