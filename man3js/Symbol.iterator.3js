'\" t
.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Symbol.iterator" "JS" "April 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.iterator - Symbol.iterator
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.iterator\f[B]\f[R] static data property represents
the well-known symbol \f[CR]\[at]\[at]iterator\f[R].
The iterable protocol looks up this symbol for the method that returns
the iterator for an object.
In order for an object to be iterable, it must have an
\f[CR]\[at]\[at]iterator\f[R] key.
.SH VALUE
The well-known symbol \f[CR]\[at]\[at]iterator\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
Whenever an object needs to be iterated (such as at the beginning of a
\f[CR]for...of\f[R] loop), its \f[CR]\[at]\[at]iterator\f[R] method is
called with no arguments, and the returned \f[B]iterator\f[R] is used to
obtain the values to be iterated.
.PP
Some built-in types have a default iteration behavior, while other types
(such as \f[CR]Object\f[R]) do not.
Some built-in types with a \f[CR]\[at]\[at]iterator\f[R] method are:
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]String.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype[\[at]\[at]iterator]()\f[R]
.PP
See also Iteration protocols for more information.
.SH EXAMPLES
.SS User-defined iterables
We can make our own iterables like this:
.IP
.EX
const myIterable = {};
myIterable[Symbol.iterator] = function* () {
  yield 1;
  yield 2;
  yield 3;
};
[...myIterable]; // [1, 2, 3]
.EE
.PP
Or iterables can be defined directly inside a class or object using a
computed property:
.IP
.EX
class Foo {
  *[Symbol.iterator]() {
    yield 1;
    yield 2;
    yield 3;
  }
}

const someObj = {
  *[Symbol.iterator]() {
    yield \[dq]a\[dq];
    yield \[dq]b\[dq];
  },
};

console.log(...new Foo()); // 1, 2, 3
console.log(...someObj); // \[aq]a\[aq], \[aq]b\[aq]
.EE
.SS Non-well-formed iterables
If an iterable\[cq]s \f[CR]\[at]\[at]iterator\f[R] method does not
return an iterator object, then it is a non-well-formed iterable.
Using it as such is likely to result in runtime exceptions or buggy
behavior:
.PP
\f[B]Bad\f[R]
.IP
.EX
const nonWellFormedIterable = {};
nonWellFormedIterable[Symbol.iterator] = () => 1;
[...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value
.EE
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[CR]Symbol.iterator\f[R] in
\f[CR]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-symbol)
.IP \[bu] 2
Iteration protocols
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]String.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]arguments[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Segments.prototype[\[at]\[at]iterator]()\f[R]
