.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "Set.\[at]\[at]iterator" "JS" "May 13, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.\[at]\[at]iterator - Set.prototype\[at]\[at]iterator
.SH SYNOPSIS
The \f[B]\f[CB][\[at]\[at]iterator]()\f[B]\f[R] method of \f[CR]Set\f[R]
instances implements the iterable protocol and allows sets to be
consumed by most syntaxes expecting iterables, such as the spread syntax
and \f[CR]for...of\f[R] loops.
It returns an set iterator object that yields the values of the set in
insertion order.
.PP
The initial value of this property is the same function object as the
initial value of the \f[CR]Set.prototype.values\f[R] property.
.SH SYNTAX
.IP
.EX
set[Symbol.iterator]()
.EE
.SS Return value
The same return value as \f[CR]Set.prototype.values()\f[R]: a new
iterable iterator object that yields the values of the set.
.SH EXAMPLES
.SS Iteration using for\&...of loop
Note that you seldom need to call this method directly.
The existence of the \f[CR]\[at]\[at]iterator\f[R] method makes
\f[CR]Set\f[R] objects iterable, and iterating syntaxes like the
\f[CR]for...of\f[R] loop automatically calls this method to obtain the
iterator to loop over.
.IP
.EX
const mySet = new Set();
mySet.add(\[dq]0\[dq]);
mySet.add(1);
mySet.add({});

for (const v of mySet) {
  console.log(v);
}
.EE
.SS Manually hand-rolling the iterator
You may still manually call the \f[CR]next()\f[R] method of the returned
iterator object to achieve maximum control over the iteration process.
.IP
.EX
const mySet = new Set();
mySet.add(\[dq]0\[dq]);
mySet.add(1);
mySet.add({});

const setIter = mySet[Symbol.iterator]();

console.log(setIter.next().value); // \[dq]0\[dq]
console.log(setIter.next().value); // 1
console.log(setIter.next().value); // Object
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Set.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.values()\f[R]
