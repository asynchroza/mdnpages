.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.toLocaleString" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]toLocaleString()\f[B]\f[R] method returns a string with a
language-sensitive representation of this date.
In implementations with \f[V]Intl.DateTimeFormat\f[R] API support, this
method simply calls \f[V]Intl.DateTimeFormat\f[R].
.SH Syntax
.IP
.nf
\f[C]
toLocaleString()
toLocaleString(locales)
toLocaleString(locales, options)
\f[R]
.fi
.SS Parameters
.PP
The \f[V]locales\f[R] and \f[V]options\f[R] arguments customize the
behavior of the function and let applications specify the language whose
formatting conventions should be used.
.PP
In implementations that support the \f[V]Intl.DateTimeFormat\f[R] API,
these parameters correspond exactly to the
\f[V]Intl.DateTimeFormat()\f[R] constructor\[cq]s parameters.
Implementations without \f[V]Intl.DateTimeFormat\f[R] support are asked
to ignore both parameters, making the locale used and the form of the
string returned entirely implementation-dependent.
.IP \[bu] 2
\f[V]locales\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A string with a BCP 47 language tag, or an array of such strings.
Corresponds to the \f[V]locales\f[R] parameter of the
\f[V]Intl.DateTimeFormat()\f[R] constructor.
.RS 2
.PP
In implementations without \f[V]Intl.DateTimeFormat\f[R] support, this
parameter is ignored and the host\[cq]s locale is usually used.
.RE
.RE
.IP \[bu] 2
\f[V]options\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
An object adjusting the output format.
Corresponds to the \f[V]options\f[R] parameter of the
\f[V]Intl.DateTimeFormat()\f[R] constructor.
If \f[V]weekday\f[R], \f[V]year\f[R], \f[V]month\f[R], \f[V]day\f[R],
\f[V]dayPeriod\f[R], \f[V]hour\f[R], \f[V]minute\f[R], \f[V]second\f[R],
and \f[V]fractionalSecondDigits\f[R] are all undefined, then
\f[V]year\f[R], \f[V]month\f[R], \f[V]day\f[R], \f[V]hour\f[R],
\f[V]minute\f[R], \f[V]second\f[R] will be set to
\f[V]\[dq]numeric\[dq]\f[R].
.RS 2
.PP
In implementations without \f[V]Intl.DateTimeFormat\f[R] support, this
parameter is ignored.
.RE
.RE
.PP
See the \f[V]Intl.DateTimeFormat()\f[R] constructor for details on these
parameters and how to use them.
.SS Return value
.PP
A string representing the given date according to language-specific
conventions.
.PP
In implementations with \f[V]Intl.DateTimeFormat\f[R], this is
equivalent to
\f[V]new Intl.DateTimeFormat(locales, options).format(date)\f[R].
.RS
.PP
\f[B]Note:\f[R] Most of the time, the formatting returned by
\f[V]toLocaleString()\f[R] is consistent.
However, the output may vary with time, language, and implementation
\[em] output variations are by design and allowed by the specification.
You should not compare the results of \f[V]toLocaleString()\f[R] to
static values.
.RE
.SH Examples
.SS Using toLocaleString()
.PP
In basic use without specifying a locale, a formatted string in the
default locale and with default options is returned.
.IP
.nf
\f[C]
const date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));

// toLocaleString() without arguments depends on the
// implementation, the default locale, and the default time zone
console.log(date.toLocaleString());
// \[dq]12/11/2012, 7:00:00 PM\[dq] if run in en-US locale with time zone America/Los_Angeles
\f[R]
.fi
.SS Checking for support for locales and options parameters
.PP
The \f[V]locales\f[R] and \f[V]options\f[R] parameters may not be
supported in all implementations, because support for the
internalization API is optional, and some systems may not have the
necessary data.
For implementations without internationalization support,
\f[V]toLocaleString()\f[R] always uses the system\[cq]s locale, which
may not be what you want.
Because any implementation that supports the \f[V]locales\f[R] and
\f[V]options\f[R] parameters must support the \f[V]Intl\f[R] API, you
can check the existence of the latter for support:
.IP
.nf
\f[C]
function toLocaleStringSupportsLocales() {
  return (
    typeof Intl === \[dq]object\[dq] &&
    !!Intl &&
    typeof Intl.DateTimeFormat === \[dq]function\[dq]
  );
}
\f[R]
.fi
.SS Using locales
.PP
This example shows some of the variations in localized date and time
formats.
In order to get the format of the language used in the user interface of
your application, make sure to specify that language (and possibly some
fallback languages) using the \f[V]locales\f[R] argument:
.IP
.nf
\f[C]
const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// Formats below assume the local time zone of the locale;
// America/Los_Angeles for the US

// US English uses month-day-year order and 12-hour time with AM/PM
console.log(date.toLocaleString(\[dq]en-US\[dq]));
// \[dq]12/19/2012, 7:00:00 PM\[dq]

// British English uses day-month-year order and 24-hour time without AM/PM
console.log(date.toLocaleString(\[dq]en-GB\[dq]));
// \[dq]20/12/2012 03:00:00\[dq]

// Korean uses year-month-day order and 12-hour time with AM/PM
console.log(date.toLocaleString(\[dq]ko-KR\[dq]));
// \[dq]2012. 12. 20. 오후 12:00:00\[dq]

// Arabic in most Arabic-speaking countries uses Eastern Arabic numerals
console.log(date.toLocaleString(\[dq]ar-EG\[dq]));
// \[dq]٢٠‏/١٢‏/٢٠١٢ ٥:٠٠:٠٠ ص\[dq]

// For Japanese, applications may want to use the Japanese calendar,
// where 2012 was the year 24 of the Heisei era
console.log(date.toLocaleString(\[dq]ja-JP-u-ca-japanese\[dq]));
// \[dq]24/12/20 12:00:00\[dq]

// When requesting a language that may not be supported, such as
// Balinese, include a fallback language (in this case, Indonesian)
console.log(date.toLocaleString([\[dq]ban\[dq], \[dq]id\[dq]]));
// \[dq]20/12/2012 11.00.00\[dq]
\f[R]
.fi
.SS Using options
.PP
The results provided by \f[V]toLocaleString()\f[R] can be customized
using the \f[V]options\f[R] argument:
.IP
.nf
\f[C]
const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// Request a weekday along with a long date
const options = {
  weekday: \[dq]long\[dq],
  year: \[dq]numeric\[dq],
  month: \[dq]long\[dq],
  day: \[dq]numeric\[dq],
};

console.log(date.toLocaleString(\[dq]de-DE\[dq], options));
// \[dq]Donnerstag, 20. Dezember 2012\[dq]

// An application may want to use UTC and make that visible
options.timeZone = \[dq]UTC\[dq];
options.timeZoneName = \[dq]short\[dq];

console.log(date.toLocaleString(\[dq]en-US\[dq], options));
// \[dq]Thursday, December 20, 2012, GMT\[dq]

// Sometimes even the US needs 24-hour time
console.log(date.toLocaleString(\[dq]en-US\[dq], { hour12: false }));
// \[dq]12/19/2012, 19:00:00\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Intl.DateTimeFormat\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toLocaleDateString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toLocaleTimeString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toString()\f[R]
