.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "RegExp.ignoreCase" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]ignoreCase\f[B]\f[R] accessor property of
\f[V]RegExp\f[R] instances returns whether or not the \f[V]i\f[R] flag
is used with this regular expression.
.SH Description
.PP
\f[V]RegExp.prototype.ignoreCase\f[R] has the value \f[V]true\f[R] if
the \f[V]i\f[R] flag was used; otherwise, \f[V]false\f[R].
The \f[V]i\f[R] flag indicates that case should be ignored while
attempting a match in a string.
.PP
If the regex has the \f[V]unicode\f[R] flag, the case mapping happens as
specified in
\f[V]CaseFolding.txt\f[R] (https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt).
Otherwise, case mapping uses the Unicode Default Case
Conversion (https://unicode-org.github.io/icu/userguide/transforms/casemappings.html)
\[em] the same algorithm used in
\f[V]String.prototype.toUpperCase()\f[R] and
\f[V]String.prototype.toLowerCase()\f[R].
.PP
The set accessor of \f[V]ignoreCase\f[R] is \f[V]undefined\f[R].
You cannot change this property directly.
.SH Examples
.SS Using ignoreCase
.IP
.nf
\f[C]
const regex = /foo/i;

console.log(regex.ignoreCase); // true
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.dotAll\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.hasIndices\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[V]RegExp.prototype.unicode\f[R]
