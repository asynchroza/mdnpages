.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MediaCapabilities.decodingInfo" "JS" "August 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaCapabilities.decodingInfo \- MediaCapabilities: decodingInfo()
method
.SH SYNOPSIS
The \f[B]\f[CB]MediaCapabilities.decodingInfo()\f[B]\f[R] method, part
of the Media Capabilities API, returns a promise with the tested media
configuration\[cq]s capabilities info.
This contains the three boolean properties \f[CR]supported\f[R],
\f[CR]smooth\f[R], and \f[CR]powerefficient\f[R], which describe whether
decoding the media described would be supported, smooth, and
powerefficient.
.SH SYNTAX
.IP
.EX
decodingInfo(configuration)
.EE
.SS Parameters
.TP
\f[B]configuration\f[R]
An object with a property \f[CR]type\f[R] and \f[I]either\f[R] a
\f[CR]video\f[R] or \f[CR]audio\f[R] property containing a configuration
of the appropriate type:
.RS
.TP
\f[B]type\f[R]
The type of media being tested.
This takes one of three values:
.RS
.TP
\f[B]file\f[R]
Represents a configuration that is meant to be used for a plain file
playback.
.TP
\f[B]media\-source\f[R]
Represents a configuration that is meant to be used for playback of a
\f[CR]MediaSource\f[R].
.TP
\f[B]webrtc\f[R]
Represents a configuration that is meant to be received using
\f[CR]RTCPeerConnection\f[R].
.RE
.TP
\f[B]video\f[R]
Configuration object for a video media source.
This has the following properties:
.RS
.TP
\f[B]contentType\f[R]
String containing a valid video MIME type, and (optionally) a
\f[CR]codecs\f[R] parameter.
.TP
\f[B]width\f[R]
The width of the video.
.TP
\f[B]height\f[R]
The height of the video.
.TP
\f[B]bitrate\f[R]
The number of bits used to encode one second of the video file.
.TP
\f[B]framerate\f[R]
The number of frames making up one second of video playback.
.RE
.TP
\f[B]audio\f[R]
Configuration object for an audio media source.
This has the following properties:
.RS
.TP
\f[B]contentType\f[R]
String containing a valid audio MIME type, and (optionally) a
\f[CR]codecs\f[R] parameter.
.TP
\f[B]channels\f[R]
The number of channels used by the audio track.
.TP
\f[B]bitrate\f[R]
The number of bits used to encode one second of the audio file.
.TP
\f[B]samplerate\f[R]
The number of audio samples making up one second of the audio file.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] fulfilling with an object containing three Boolean
attributes:
.TP
\f[B]supported\f[R]
\f[CR]true\f[R] if the media content can be decoded at all.
Otherwise, it is \f[CR]false\f[R].
.TP
\f[B]smooth\f[R]
\f[CR]true\f[R] if playback of the media will be smooth (of high
quality).
Otherwise it is \f[CR]false\f[R].
.TP
\f[B]powerEfficient\f[R]
\f[CR]true\f[R] if playback of the media will be power efficient.
Otherwise, it is \f[CR]false\f[R].
.PP
Browsers will report a supported media configuration as
\f[CR]smooth\f[R] and \f[CR]powerEfficient\f[R] until stats on this
device have been recorded.
All supported audio codecs are reported to be power efficient.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the \f[CR]configuration\f[R] passed to the
\f[CR]decodingInfo()\f[R] method is invalid, either because the type is
not video or audio, the \f[CR]contentType\f[R] is not a valid codec MIME
type, the media decoding configuration is not a valid value for the
\f[CR]type\f[R] (file, media\-source, or webrtc), or any other error in
the media configuration passed to the method, including omitting any
values.
.SH EXAMPLES
This example shows how to create a media configuration for an audio file
and then use it in \f[CR]MediaCapabilities.decodingInfo()\f[R].
.IP
.EX
//Create media configuration to be tested
const mediaConfig = {
  type: \[dq]file\[dq], // or \[aq]media\-source\[aq] or \[aq]webrtc\[aq]
  audio: {
    contentType: \[dq]audio/ogg; codecs=vorbis\[dq], // valid content type
    channels: 2, // audio channels used by the track
    bitrate: 132700, // number of bits used to encode 1s of audio
    samplerate: 5200, // number of audio samples making up that 1s.
  },
};

// check support and performance
navigator.mediaCapabilities.decodingInfo(mediaConfig).then((result) => {
  console.log(
    \[ga]This configuration is ${result.supported ? \[dq]\[dq] : \[dq]not \[dq]}supported,\[ga],
  );
  console.log(\[ga]${result.smooth ? \[dq]\[dq] : \[dq]not \[dq]}smooth, and\[ga]);
  console.log(\[ga]${result.powerEfficient ? \[dq]\[dq] : \[dq]not \[dq]}power efficient.\[ga]);
});
.EE
.PP
Similarly, the code below shows the configuration for a video file.
.IP
.EX
const mediaConfig = {
  type: \[dq]file\[dq],
  video: {
    contentType: \[dq]video/webm;codecs=vp8\[dq], // valid content type
    width: 800, // width of the video
    height: 600, // height of the video
    bitrate: 10000, // number of bits used to encode 1s of video
    framerate: 30, // number of frames making up that 1s.
  },
};
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MediaCapabilities.encodingInfo()\f[R]
.IP \[bu] 2
\f[CR]HTMLMediaElement.canPlayType()\f[R] for file
.IP \[bu] 2
\f[CR]MediaSource.isTypeSupported()\f[R] for media\-source
