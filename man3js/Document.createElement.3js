.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Document.createElement" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.createElement \- Document: createElement() method
.SH SYNOPSIS
In an HTML document, the \f[B]\f[CB]document.createElement()\f[B]\f[R]
method creates the HTML element specified by \f[I]tagName\f[R], or an
\f[CR]HTMLUnknownElement\f[R] if \f[I]tagName\f[R] isn\[cq]t recognized.
.SH SYNTAX
.IP
.EX
createElement(tagName)
createElement(tagName, options)
.EE
.SS Parameters
.TP
\f[B]tagName\f[R]
A string that specifies the type of element to be created.
The \f[CR]nodeName\f[R] of the created element is initialized with the
value of \f[I]tagName\f[R].
Don\[cq]t use qualified names (like \[lq]html:a\[rq]) with this method.
When called on an HTML document, \f[CR]createElement()\f[R] converts
\f[I]tagName\f[R] to lower case before creating the element.
In Firefox, Opera, and Chrome, \f[CR]createElement(null)\f[R] works like
\f[CR]createElement(\[dq]null\[dq])\f[R].
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.TP
\f[B]is\f[R]
The tag name of a custom element previously defined via
\f[CR]customElements.define()\f[R].
See Web component example for more details.
.RE
.SS Return value
The new \f[CR]Element\f[R].
.RS
.PP
\f[B]Note:\f[R] A new HTMLElement is returned if the document is an
HTMLDocument, which is the most common case.
Otherwise a new Element is returned.
.RE
.SH EXAMPLES
.SS Basic example
This creates a new \f[CR]<div>\f[R] and inserts it before the element
with the ID \[lq]\f[CR]div1\f[R]\[rq].
.SS HTML
.IP
.EX
<!doctype html>
<html lang=\[dq]en\-US\[dq]>
  <head>
    <meta charset=\[dq]UTF\-8\[dq] />
    <title>Working with elements</title>
  </head>
  <body>
    <div id=\[dq]div1\[dq]>The text above has been created dynamically.</div>
  </body>
</html>
.EE
.SS JavaScript
.IP
.EX
document.body.onload = addElement;

function addElement() {
  // create a new div element
  const newDiv = document.createElement(\[dq]div\[dq]);

  // and give it some content
  const newContent = document.createTextNode(\[dq]Hi there and greetings!\[dq]);

  // add the text node to the newly created div
  newDiv.appendChild(newContent);

  // add the newly created element and its content into the DOM
  const currentDiv = document.getElementById(\[dq]div1\[dq]);
  document.body.insertBefore(newDiv, currentDiv);
}
.EE
.SS Result
.SS Web component example
The following example snippet is taken from our \c
.UR
https://github.com/mdn/web-components-examples/tree/main/expanding-list-web-component
expanding\-list\-web\-component
.UE \c
\ example (\c
.UR
https://mdn.github.io/web-components-examples/expanding-list-web-component/
see it live also
.UE \c
).
In this case, our custom element extends the
\f[CR]HTMLUListElement\f[R], which represents the \f[CR]<ul>\f[R]
element.
.IP
.EX
// Create a class for the element
class ExpandingList extends HTMLUListElement {
  constructor() {
    // Always call super first in constructor
    super();

    // constructor definition left out for brevity
    // \&...
  }
}

// Define the new element
customElements.define(\[dq]expanding\-list\[dq], ExpandingList, { extends: \[dq]ul\[dq] });
.EE
.PP
If we wanted to create an instance of this element programmatically,
we\[cq]d use a call along the following lines:
.IP
.EX
let expandingList = document.createElement(\[dq]ul\[dq], { is: \[dq]expanding\-list\[dq] });
.EE
.PP
The new element will be given an \f[CR]is\f[R] attribute whose value is
the custom element\[cq]s tag name.
.RS
.PP
\f[B]Note:\f[R] For backwards compatibility with previous versions of
the \c
.UR https://www.w3.org/TR/custom-elements/
Custom Elements specification
.UE \c
, some browsers will allow you to pass a string here instead of an
object, where the string\[cq]s value is the custom element\[cq]s tag
name.
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Node.removeChild()\f[R]
.IP \[bu] 2
\f[CR]Node.replaceChild()\f[R]
.IP \[bu] 2
\f[CR]Node.appendChild()\f[R]
.IP \[bu] 2
\f[CR]Node.insertBefore()\f[R]
.IP \[bu] 2
\f[CR]Node.hasChildNodes()\f[R]
.IP \[bu] 2
\f[CR]document.createElementNS()\f[R] \[em] to explicitly specify the
namespace URI for the element.
