.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Symbol.Symbol" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Symbol()\f[B]\f[R] function returns primitive values of
type Symbol.
.SH Syntax
.IP
.nf
\f[C]
Symbol()
Symbol(description)
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] \f[V]Symbol()\f[R] can only be called without
\f[V]new\f[R].
Attempting to construct it with \f[V]new\f[R] throws a
\f[V]TypeError\f[R].
.RE
.SS Parameters
.IP \[bu] 2
\f[V]description\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
A string.
A description of the symbol which can be used for debugging but not to
access the symbol itself.
.RE
.SH Examples
.SS Creating symbols
.PP
To create a new primitive symbol, you write \f[V]Symbol()\f[R] with an
optional string as its description:
.IP
.nf
\f[C]
const sym1 = Symbol();
const sym2 = Symbol(\[dq]foo\[dq]);
const sym3 = Symbol(\[dq]foo\[dq]);
\f[R]
.fi
.PP
The above code creates three new symbols.
Note that \f[V]Symbol(\[dq]foo\[dq])\f[R] does not coerce the string
\f[V]\[dq]foo\[dq]\f[R] into a symbol.
It creates a new symbol each time:
.IP
.nf
\f[C]
Symbol(\[dq]foo\[dq]) === Symbol(\[dq]foo\[dq]); // false
\f[R]
.fi
.SS new Symbol()
.PP
The following syntax with the \f[V]new\f[R] operator will throw a
\f[V]TypeError\f[R]:
.PP
\f[B]Bad\f[R]
.IP
.nf
\f[C]
const sym = new Symbol(); // TypeError
\f[R]
.fi
.PP
This prevents authors from creating an explicit \f[V]Symbol\f[R] wrapper
object instead of a new symbol value and might be surprising as creating
explicit wrapper objects around primitive data types is generally
possible (for example, \f[V]new Boolean\f[R], \f[V]new String\f[R] and
\f[V]new Number\f[R]).
.PP
If you really want to create a \f[V]Symbol\f[R] wrapper object, you can
use the \f[V]Object()\f[R] function:
.IP
.nf
\f[C]
const sym = Symbol(\[dq]foo\[dq]);
const symObj = Object(sym);
typeof sym; // \[dq]symbol\[dq]
typeof symObj; // \[dq]object\[dq]
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Symbol\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-symbol)
