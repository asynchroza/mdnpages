.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "BroadcastChannel.message_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BroadcastChannel.message_event \- BroadcastChannel: message event
.SH SYNOPSIS
The \f[CR]message\f[R] event is fired on a \f[CR]BroadcastChannel\f[R]
object when a message arrives on that channel.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) => { })
onmessage = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]source\f[R] \f[I](read\-only)\f[R]
A \f[I]message event source\f[R], which is either a WindowProxy, a
\f[CR]MessagePort\f[R], or a \f[CR]ServiceWorker\f[R] object
representing the message emitter.
.TP
\f[B]ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
In this example there\[cq]s a \[lq]sender\[rq] \f[CR]<iframe>\f[R] that
broadcasts the contents of a \f[CR]<textarea>\f[R] when the user clicks
a button.
There are two \[lq]receiver\[rq] iframes that listen to the broadcast
message and write the result into a \f[CR]<div>\f[R] element.
.SS Sender
\f[CR]html hidden <h1>Sender</h1> <label for=\[dq]message\[dq]>Type a message to broadcast:</label><br /> <textarea id=\[dq]message\[dq] name=\[dq]message\[dq] rows=\[dq]1\[dq] cols=\[dq]40\[dq]>Hello</textarea> <button id=\[dq]broadcast\-message\[dq] type=\[dq]button\[dq]>Broadcast message</button>\f[R]
.PP
\[ga]\[ga]\[ga]css hidden body { border: 1px solid black; padding:
0.5rem; height: 150px; font\-family: \[lq]Fira Sans\[rq], sans\-serif; }
.PP
h1 { font: 1.6em \[lq]Fira Sans\[rq], sans\-serif; margin\-bottom: 1rem;
}
.PP
textarea { padding: 0.2rem; }
.PP
label, br { margin: 0.5rem 0; }
.PP
button { vertical\-align: top; height: 1.5rem; }
.IP
.EX

\[ga]\[ga]\[ga]js
const channel = new BroadcastChannel(\[dq]example\-channel\[dq]);
const messageControl = document.querySelector(\[dq]#message\[dq]);
const broadcastMessageButton = document.querySelector(\[dq]#broadcast\-message\[dq]);

broadcastMessageButton.addEventListener(\[dq]click\[dq], () => {
  channel.postMessage(messageControl.value);
});
.EE
.SS Receiver 1
\f[CR]html hidden <h1>Receiver 1</h1> <div id=\[dq]received\[dq]></div>\f[R]
.PP
\[ga]\[ga]\[ga]css hidden body { border: 1px solid black; padding:
0.5rem; height: 100px; font\-family: \[lq]Fira Sans\[rq], sans\-serif; }
.PP
h1 { font: 1.6em \[lq]Fira Sans\[rq], sans\-serif; margin\-bottom: 1rem;
}
.IP
.EX

\[ga]\[ga]\[ga]js
const channel = new BroadcastChannel(\[dq]example\-channel\[dq]);
channel.addEventListener(\[dq]message\[dq], (event) => {
  received.textContent = event.data;
});
.EE
.SS Receiver 2
\f[CR]html hidden <h1>Receiver 2</h1> <div id=\[dq]received\[dq]></div>\f[R]
.PP
\[ga]\[ga]\[ga]css hidden body { border: 1px solid black; padding:
0.5rem; height: 100px; font\-family: \[lq]Fira Sans\[rq], sans\-serif; }
.PP
h1 { font: 1.6em \[lq]Fira Sans\[rq], sans\-serif; margin\-bottom: 1rem;
}
.IP
.EX

\[ga]\[ga]\[ga]js
const channel = new BroadcastChannel(\[dq]example\-channel\[dq]);
channel.addEventListener(\[dq]message\[dq], (event) => {
  received.textContent = event.data;
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]messageerror\f[R].
