.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "DataTransferItemList.length" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.length \- DataTransferItemList: length property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]length\f[B]\f[R] property of the
\f[CR]DataTransferItemList\f[R] interface returns the number of items
currently in the drag item list.
.SH VALUE
The number of drag data items in the list, or 0 if the list is empty or
disabled.
The drag item list is considered to be disabled if the item list\[cq]s
\f[CR]DataTransfer\f[R] object is not associated with a drag data store.
.SH EXAMPLES
This example shows the use of the \f[CR]length\f[R] property.
.SS JavaScript
.IP
.EX
function dragstart_handler(ev) {
  console.log(\[dq]dragStart\[dq]);
  // Add this element\[aq]s id to the drag payload so the drop handler will
  // know which element to add to its tree
  const dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \[dq]text/plain\[dq]);
  // Add some other items to the drag payload
  dataList.add(\[dq]<p>Paragraph\&...</p>\[dq], \[dq]text/html\[dq]);
  dataList.add(\[dq]http://www.example.org\[dq], \[dq]text/uri\-list\[dq]);
}

function drop_handler(ev) {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();
  const data = ev.dataTransfer.items;
  // Loop through the dropped items and log their data
  for (let i = 0; i < data.length; i++) {
    if (data[i].kind === \[dq]string\[dq] && data[i].type.match(\[dq]\[ha]text/plain\[dq])) {
      // This item is the target node
      data[i].getAsString((s) => {
        ev.target.appendChild(document.getElementById(s));
      });
    } else if (data[i].kind === \[dq]string\[dq] && data[i].type.match(\[dq]\[ha]text/html\[dq])) {
      // Drag data item is HTML
      data[i].getAsString((s) => {
        console.log(\[ga]\&... Drop: HTML = ${s}\[ga]);
      });
    } else if (
      data[i].kind === \[dq]string\[dq] &&
      data[i].type.match(\[dq]\[ha]text/uri\-list\[dq])
    ) {
      // Drag data item is URI
      data[i].getAsString((s) => {
        console.log(\[ga]\&... Drop: URI = ${s}\[ga]);
      });
    }
  }
}

function dragover_handler(ev) {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();
  // Set the dropEffect to move
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

function dragend_handler(ev) {
  console.log(\[dq]dragEnd\[dq]);
  const dataList = ev.dataTransfer.items;
  // Clear any remaining drag data
  dataList.clear();
}
.EE
.SS HTML
.IP
.EX
<div>
  <p
    id=\[dq]source\[dq]
    ondragstart=\[dq]dragstart_handler(event);\[dq]
    ondragend=\[dq]dragend_handler(event);\[dq]
    draggable=\[dq]true\[dq]>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </p>
</div>
<div
  id=\[dq]target\[dq]
  ondrop=\[dq]drop_handler(event);\[dq]
  ondragover=\[dq]dragover_handler(event);\[dq]>
  Drop Zone
</div>
.EE
.SS CSS
.IP
.EX
div {
  margin: 0em;
  padding: 2em;
}

source {
  color: blue;
  border: 1px solid black;
}

target {
  border: 1px solid black;
}
.EE
.SS Result
