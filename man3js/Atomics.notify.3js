.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Atomics.notify" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Atomics.notify - Atomics.notify()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Atomics.notify()\f[B]\f[R] static method notifies up some
agents that are sleeping in the wait queue.
.RS
.PP
\f[B]Note:\f[R] This operation works with a shared \f[V]Int32Array\f[R]
only.
It will return \f[V]0\f[R] on non-shared \f[V]ArrayBuffer\f[R] objects.
.RE
.SH SYNTAX
.IP
.nf
\f[C]
Atomics.notify(typedArray, index, count)
\f[R]
.fi
.SS Parameters
.TP
\f[B]typedArray\f[R]
A shared \f[V]Int32Array\f[R].
.TP
\f[B]index\f[R]
The position in the \f[V]typedArray\f[R] to wake up on.
.TP
\f[B]count\f[R] \f[I](optional)\f[R]
The number of sleeping agents to notify.
Defaults to \f[V]+Infinity\f[R].
.SS Return value
.IP \[bu] 2
Returns the number of woken up agents.
.IP \[bu] 2
Returns \f[V]0\f[R], if a non-shared \f[V]ArrayBuffer\f[R] object is
used.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[V]typedArray\f[R] is not a \f[V]Int32Array\f[R].
.TP
\f[B]RangeError\f[R]
Thrown if \f[V]index\f[R] is out of bounds in the \f[V]typedArray\f[R].
.SH EXAMPLES
.SS Using \f[V]notify\f[R]
.PP
Given a shared \f[V]Int32Array\f[R]:
.IP
.nf
\f[C]
const sab = new SharedArrayBuffer(1024);
const int32 = new Int32Array(sab);
\f[R]
.fi
.PP
A reading thread is sleeping and waiting on location 0 which is expected
to be 0.
As long as that is true, it will not go on.
However, once the writing thread has stored a new value, it will be
notified by the writing thread and return the new value (123).
.IP
.nf
\f[C]
Atomics.wait(int32, 0, 0);
console.log(int32[0]); // 123
\f[R]
.fi
.PP
A writing thread stores a new value and notifies the waiting thread once
it has written:
.IP
.nf
\f[C]
console.log(int32[0]); // 0;
Atomics.store(int32, 0, 123);
Atomics.notify(int32, 0, 1);
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Atomics\f[R]
.IP \[bu] 2
\f[V]Atomics.wait()\f[R]
