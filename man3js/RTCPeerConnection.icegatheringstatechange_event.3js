.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "RTCPeerConnection.icegatheringstatechange_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.icegatheringstatechange_event \- RTCPeerConnection:
icegatheringstatechange event
.SH SYNOPSIS
The \f[B]\f[CB]icegatheringstatechange\f[B]\f[R] event is sent to the
\f[CR]onicegatheringstatechange\f[R] event handler on an
\f[CR]RTCPeerConnection\f[R] when the state of the ICE candidate
gathering process changes.
This signifies that the value of the connection\[cq]s
\f[CR]iceGatheringState\f[R] property has changed.
.PP
When ICE first starts to gather connection candidates, the value changes
from \f[CR]new\f[R] to \f[CR]gathering\f[R] to indicate that the process
of collecting candidate configurations for the connection has begun.
When the value changes to \f[CR]complete\f[R], all of the transports
that make up the \f[CR]RTCPeerConnection\f[R] have finished gathering
ICE candidates.
.RS
.PP
\f[B]Note:\f[R] While you can determine that ICE candidate gathering is
complete by watching for \f[CR]icegatheringstatechange\f[R] events and
checking for the value of \f[CR]iceGatheringState\f[R] to become
\f[CR]complete\f[R], you can also have your handler for the
\f[CR]icecandidate\f[R] event look to see if its \f[CR]candidate\f[R]
property is \f[CR]null\f[R].
This also indicates that collection of candidates is finished.
.RE
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]icegatheringstatechange\[dq], (event) => {});

onicegatheringstatechange = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example creates a handler for \f[CR]icegatheringstatechange\f[R]
events.
.IP
.EX
pc.onicegatheringstatechange = (ev) => {
  let connection = ev.target;

  switch (connection.iceGatheringState) {
    case \[dq]gathering\[dq]:
      /* collection of candidates has begun */
      break;
    case \[dq]complete\[dq]:
      /* collection of candidates is finished */
      break;
  }
};
.EE
.PP
Likewise, you can use \f[CR]addEventListener()\f[R] to add a listener
for \f[CR]icegatheringstatechange\f[R] events:
.IP
.EX
pc.addEventListener(
  \[dq]icegatheringstatechange\[dq],
  (ev) => {
    let connection = ev.target;

    switch (connection.iceGatheringState) {
      case \[dq]gathering\[dq]:
        // collection of candidates has begun
        break;
      case \[dq]complete\[dq]:
        // collection of candidates is finished
        break;
    }
  },
  false,
);
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Signaling and video calling
.IP \[bu] 2
WebRTC connectivity
.IP \[bu] 2
Lifetime of a WebRTC session
