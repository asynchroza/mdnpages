.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.ownKeys" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Reflect.ownKeys()\f[B]\f[R] static method returns an
array of the \f[V]target\f[R] object\[cq]s own property keys.
.SH Syntax
.IP
.nf
\f[C]
Reflect.ownKeys(target)
\f[R]
.fi
.SS Parameters
.IP \[bu] 2
\f[V]target\f[R]
.RS 2
.IP \[bu] 2
The target object from which to get the own keys.
.RE
.SS Return value
.PP
An \f[V]Array\f[R] of the \f[V]target\f[R] object\[cq]s own property
keys, including strings and symbols.
For most objects, the array will be in the order of:
.IP "1." 3
Non-negative integer indexes in increasing numeric order (but as
strings)
.IP "2." 3
Other string keys in the order of property creation
.IP "3." 3
Symbol keys in the order of property creation.
.SS Exceptions
.IP \[bu] 2
\f[V]TypeError\f[R]
.RS 2
.IP \[bu] 2
Thrown if \f[V]target\f[R] is not an object.
.RE
.SH Description
.PP
\f[V]Reflect.ownKeys()\f[R] provides the reflective semantic of
retrieving all property keys of an object.
It is the only way to get all own properties \[en] enumerable and not
enumerable, strings and symbols \[em] in one call, without extra
filtering logic.
For example, \f[V]Object.getOwnPropertyNames()\f[R] takes the return
value of \f[V]Reflect.ownKeys()\f[R] and filters to only string values,
while \f[V]Object.getOwnPropertySymbols()\f[R] filters to only symbol
values.
Because normal objects implement \f[V][[OwnPropertyKeys]]\f[R] to return
all string keys before symbol keys, \f[V]Reflect.ownKeys(target)\f[R] is
usually equivalent to
\f[V]Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))\f[R].
However, if the object has a custom \f[V][[OwnPropertyKeys]]\f[R] method
(such as through a proxy\[cq]s \f[V]ownKeys\f[R] handler), the order of
the keys may be different.
.PP
\f[V]Reflect.ownKeys()\f[R] invokes the \f[V][[OwnPropertyKeys]]\f[R]
object internal method of \f[V]target\f[R].
.SH Examples
.SS Using Reflect.ownKeys()
.IP
.nf
\f[C]
Reflect.ownKeys({ z: 3, y: 2, x: 1 }); // [ \[dq]z\[dq], \[dq]y\[dq], \[dq]x\[dq] ]
Reflect.ownKeys([]); // [\[dq]length\[dq]]

const sym = Symbol.for(\[dq]comet\[dq]);
const sym2 = Symbol.for(\[dq]meteor\[dq]);
const obj = {
  [sym]: 0,
  str: 0,
  773: 0,
  0: 0,
  [sym2]: 0,
  \[dq]-1\[dq]: 0,
  8: 0,
  \[dq]second str\[dq]: 0,
};
Reflect.ownKeys(obj);
// [ \[dq]0\[dq], \[dq]8\[dq], \[dq]773\[dq], \[dq]str\[dq], \[dq]-1\[dq], \[dq]second str\[dq], Symbol(comet), Symbol(meteor) ]
// Indexes in numeric order,
// strings in insertion order,
// symbols in insertion order
\f[R]
.fi
.SH See also
.IP \[bu] 2
Polyfill of \f[V]Reflect.ownKeys\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
\f[V]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[V]Object.getOwnPropertySymbols()\f[R]
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]ownKeys\f[R] handler
