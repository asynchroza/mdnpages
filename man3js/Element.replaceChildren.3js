.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Element.replaceChildren" "JS" "August 4, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.replaceChildren \- Element: replaceChildren() method
.SH SYNOPSIS
The \f[B]\f[CB]Element.replaceChildren()\f[B]\f[R] method replaces the
existing children of a \f[CR]Node\f[R] with a specified new set of
children.
These can be string or \f[CR]Node\f[R] objects.
.SH SYNTAX
.IP
.EX
replaceChildren(param1)
replaceChildren(param1, param2)
replaceChildren(param1, param2, /* \&..., */ paramN)
.EE
.SS Parameters
.TP
\f[B]param1\f[R], \&..., \f[B]paramN\f[R]
A set of \f[CR]Node\f[R] or string objects to replace the
\f[CR]Element\f[R]\[cq]s existing children with.
If no replacement objects are specified, then the \f[CR]Element\f[R] is
emptied of all child nodes.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]HierarchyRequestError\f[R] \f[B]DOMException\f[R]
Thrown when the \c
.UR https://dom.spec.whatwg.org/#concept-node-tree
constraints of the node tree
.UE \c
\ are violated.
.SH EXAMPLES
.SS Emptying a node
\f[CR]replaceChildren()\f[R] provides a very convenient mechanism for
emptying a node of all its children.
You call it on the parent node without any argument specified:
.IP
.EX
myNode.replaceChildren();
.EE
.SS Transferring nodes between elements
\f[CR]replaceChildren()\f[R] enables you to easily transfer nodes
between elements, without having to resort to verbose looping code.
For example, say we have a simple application allowing you to choose
what food you want for your party.
This HTML might look something like this:
.IP
.EX
<h2>Party food option list</h2>

<main>
  <div>
    <label for=\[dq]no\[dq]>No thanks!</label>

    <select id=\[dq]no\[dq] multiple size=\[dq]10\[dq]>
      <option>Apples</option>
      <option>Oranges</option>
      <option>Grapes</option>
      <option>Bananas</option>
      <option>Kiwi fruits</option>
      <option>Chocolate cookies</option>
      <option>Peanut cookies</option>
      <option>Chocolate bars</option>
      <option>Ham Sandwiches</option>
      <option>Cheese Sandwiches</option>
      <option>Falafel sandwiches</option>
      <option>Ice cream</option>
      <option>Jelly</option>
      <option>Carrot sticks and hummus</option>
      <option>Margherita pizza</option>
      <option>Pepperoni pizza</option>
      <option>Vegan veggie pizza</option>
    </select>
  </div>

  <div class=\[dq]buttons\[dq]>
    <button id=\[dq]to\-yes\[dq]>Transfer to \[dq]Yes\[dq] \-\-&gt;</button>
    <button id=\[dq]to\-no\[dq]>&lt;\-\- Transfer to \[dq]No\[dq]</button>
  </div>

  <div>
    <label for=\[dq]yes\[dq]>Yes please!</label>

    <select id=\[dq]yes\[dq] multiple size=\[dq]10\[dq]></select>
  </div>
</main>
.EE
.PP
It would make sense to use some simple CSS to lay out the two select
lists in a line alongside one another, with the control buttons in
between them:
.IP
.EX
main {
  display: flex;
}

div {
  margin\-right: 20px;
}

label,
button {
  display: block;
}

\&.buttons {
  display: flex;
  flex\-flow: column;
  justify\-content: center;
}

select {
  width: 200px;
}
.EE
.PP
What we want to do is transfer any selected options in the \[lq]no\[rq]
list over to the \[lq]yes\[rq] list when the \[lq]yes\[rq] button is
pressed, and transfer any selected options in the \[lq]yes\[rq] list
over to the \[lq]no\[rq] list when the \[lq]no\[rq] button is pressed.
.PP
To do this, we give each of the buttons a click event handler, which
collects together the selected options you want to transfer in one
constant, and the existing options in the list you are transferring to
in another constant.
It then calls \f[CR]replaceChildren()\f[R] on the list to transfer the
options to, using the spread operator to pass in all the options
contained in both constants.
.IP
.EX
const noSelect = document.getElementById(\[dq]no\[dq]);
const yesSelect = document.getElementById(\[dq]yes\[dq]);
const noBtn = document.getElementById(\[dq]to\-no\[dq]);
const yesBtn = document.getElementById(\[dq]to\-yes\[dq]);

yesBtn.addEventListener(\[dq]click\[dq], () => {
  const selectedTransferOptions =
    document.querySelectorAll(\[dq]#no option:checked\[dq]);
  const existingYesOptions = document.querySelectorAll(\[dq]#yes option\[dq]);
  yesSelect.replaceChildren(...selectedTransferOptions, ...existingYesOptions);
});

noBtn.addEventListener(\[dq]click\[dq], () => {
  const selectedTransferOptions = document.querySelectorAll(
    \[dq]#yes option:checked\[dq],
  );
  const existingNoOptions = document.querySelectorAll(\[dq]#no option\[dq]);
  noSelect.replaceChildren(...selectedTransferOptions, ...existingNoOptions);
});
.EE
.PP
The end result looks like this:
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Element.prepend()\f[R]
.IP \[bu] 2
\f[CR]Element.append()\f[R]
.IP \[bu] 2
\f[CR]NodeList\f[R]
