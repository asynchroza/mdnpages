.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "Response.arrayBuffer" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.arrayBuffer \- Response: arrayBuffer() method
.SH SYNOPSIS
The \f[B]\f[CB]arrayBuffer()\f[B]\f[R] method of the \f[CR]Response\f[R]
interface takes a \f[CR]Response\f[R] stream and reads it to completion.
It returns a promise that resolves with an \f[CR]ArrayBuffer\f[R].
.SH SYNTAX
.IP
.EX
arrayBuffer()
.EE
.SS Parameters
None.
.SS Return value
A promise that resolves with an \f[CR]ArrayBuffer\f[R].
.SH EXAMPLES
.SS Playing music
In our \c
.UR
https://github.com/mdn/dom-examples/tree/main/fetch/fetch-array-buffer
fetch array buffer live
.UE \c
, we have a Play button.
When pressed, the \f[CR]getData()\f[R] function is run.
Note that before playing full audio file will be downloaded.
If you need to play ogg during downloading (stream it) \- consider
\f[CR]HTMLAudioElement\f[R]:
.IP
.EX
new Audio(\[dq]music.ogg\[dq]).play();
.EE
.PP
In \f[CR]getData()\f[R] we create a new request using the
\f[CR]Request()\f[R] constructor, then use it to fetch an OGG music
track.
We also use \f[CR]AudioContext.createBufferSource\f[R] to create an
audio buffer source.
When the fetch is successful, we read an \f[CR]ArrayBuffer\f[R] out of
the response using \f[CR]arrayBuffer()\f[R], decode the audio data using
\f[CR]AudioContext.decodeAudioData()\f[R], set the decoded data as the
audio buffer source\[cq]s buffer (\f[CR]source.buffer\f[R]), then
connect the source up to the \f[CR]AudioContext.destination\f[R].
.PP
Once \f[CR]getData()\f[R] has finished running, we start the audio
source playing with \f[CR]start(0)\f[R], then disable the play button so
it can\[cq]t be clicked again when it is already playing (this would
cause an error.)
.IP
.EX
function getData() {
  const audioCtx = new AudioContext();

  return fetch(\[dq]viper.ogg\[dq])
    .then((response) => {
      if (!response.ok) {
        throw new Error(\[ga]HTTP error, status = ${response.status}\[ga]);
      }
      return response.arrayBuffer();
    })
    .then((buffer) => audioCtx.decodeAudioData(buffer))
    .then((decodedData) => {
      const source = new AudioBufferSourceNode();
      source.buffer = decodedData;
      source.connect(audioCtx.destination);
      return source;
    });
}

// wire up buttons to stop and play audio

play.onclick = () => {
  getData().then((source) => {
    source.start(0);
    play.setAttribute(\[dq]disabled\[dq], \[dq]disabled\[dq]);
  });
};
.EE
.SS Reading files
The \f[CR]Response()\f[R] constructor accepts \f[CR]File\f[R]s and
\f[CR]Blob\f[R]s, so it may be used to read a \f[CR]File\f[R] into other
formats.
.IP
.EX
function readFile(file) {
  return new Response(file).arrayBuffer();
}
.EE
.IP
.EX
<input type=\[dq]file\[dq] onchange=\[dq]readFile(this.files[0])\[dq] />
.EE
.SH SEE ALSO
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
