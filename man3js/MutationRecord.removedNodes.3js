.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MutationRecord.removedNodes" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.removedNodes \- MutationRecord: removedNodes property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]removedNodes\f[B]\f[R] is a \f[CR]NodeList\f[R] of nodes
removed from a target node by a mutation observed with a
\f[CR]MutationObserver\f[R].
.SH VALUE
A \f[CR]NodeList\f[R] containing the nodes removed from the target of
the mutation observed by the \f[CR]MutationObserver\f[R].
.SH EXAMPLES
.SS Observing removed nodes
In the following example, there are two buttons: one to add new nodes to
a target node, and one to remove them.
A \f[CR]MutationObserver\f[R] is used to observe the target node for
changes; when a change is detected, the observer calls a function,
\f[CR]logRemovedNodes()\f[R].
.PP
The \f[CR]logRemovedNodes()\f[R] function checks that the
MutationRecord\[cq]s \f[CR]type\f[R] is \f[CR]childList\f[R], which
means that the target node\[cq]s children have changed.
If the type is \f[CR]childlist\f[R] the function updates the total
number of nodes that have been removed.
However, note that clicking the \[lq]Add a node\[rq] button will not
increment the total number of removed nodes, because in this case
\f[CR]record.removedNodes\f[R] will have a length of \f[CR]0\f[R].
.SS HTML
.IP
.EX
<button id=\[dq]add\-nodes\[dq]>Add a node</button>
<button id=\[dq]remove\-nodes\[dq]>Remove a node</button>
<button id=\[dq]reset\[dq]>Reset</button>

<pre id=\[dq]counter\[dq]>Total removed nodes: 0</pre>
<div id=\[dq]target\[dq]></div>
.EE
.PP
\f[CR]css hidden counter {   border: 1px dotted black;   padding: 0.5rem; }\f[R]
.SS JavaScript
.IP
.EX
const addNodes = document.querySelector(\[dq]#add\-nodes\[dq]);
const removeNodes = document.querySelector(\[dq]#remove\-nodes\[dq]);
const reset = document.querySelector(\[dq]#reset\[dq]);
const counter = document.querySelector(\[dq]#counter\[dq]);
const target = document.querySelector(\[dq]#target\[dq]);
let totalRemovedNodes = 0;

addNodes.addEventListener(\[dq]click\[dq], () => {
  const newPara = document.createElement(\[dq]p\[dq]);
  newPara.textContent = \[ga]Current time: ${Date.now()}\[ga];
  target.appendChild(newPara);
});

removeNodes.addEventListener(\[dq]click\[dq], () => {
  const lastChild = target.lastChild;
  if (lastChild) {
    target.removeChild(lastChild);
  }
});

reset.addEventListener(\[dq]click\[dq], () => self.location.reload());

function logRemovedNodes(records) {
  for (const record of records) {
    // Check if the childlist of the target node has been mutated
    if (record.type === \[dq]childList\[dq]) {
      totalRemovedNodes = totalRemovedNodes + record.removedNodes.length;
      // Log the number of nodes added
      counter.textContent = \[ga]Total removed nodes: ${totalRemovedNodes}\[ga];
    }
  }
}

const observer = new MutationObserver(logRemovedNodes);
observer.observe(target, { childList: true });
.EE
.SS Result
