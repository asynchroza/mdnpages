.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Int8Array" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Int8Array - Int8Array
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Int8Array\f[B]\f[R] typed array represents an array of
twos-complement 8-bit signed integers.
The contents are initialized to \f[V]0\f[R].
Once established, you can reference elements in the array using the
object\[cq]s methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[V]Int8Array\f[R] is a subclass of the hidden \f[V]TypedArray\f[R]
class.
.SH CONSTRUCTOR
.TP
\f[B]Int8Array()\f[R]
Creates a new \f[V]Int8Array\f[R] object.
.SH STATIC PROPERTIES
.PP
\f[I]Also inherits static properties from its parent
\f[VI]TypedArray\f[I]\f[R].
.TP
\f[B]Int8Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[V]1\f[R] in the case of \f[V]Int8Array\f[R].
.SH STATIC METHODS
.PP
\f[I]Inherits static methods from its parent \f[VI]TypedArray\f[I]\f[R].
.SH INSTANCE PROPERTIES
.PP
\f[I]Also inherits instance properties from its parent
\f[VI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[V]Int8Array.prototype\f[R] and shared
by all \f[V]Int8Array\f[R] instances.
.TP
\f[B]Int8Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[V]1\f[R] in the case of a \f[V]Int8Array\f[R].
.TP
\f[B]Int8Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[V]Int8Array\f[R] instances, the initial value is the
\f[V]Int8Array\f[R] constructor.
.SH INSTANCE METHODS
.PP
\f[I]Inherits instance methods from its parent
\f[VI]TypedArray\f[I]\f[R].
.SH EXAMPLES
.SS Different ways to create an Int8Array
.IP
.nf
\f[C]
// From a length
const int8 = new Int8Array(2);
int8[0] = 42;
console.log(int8[0]); // 42
console.log(int8.length); // 2
console.log(int8.BYTES_PER_ELEMENT); // 1

// From an array
const x = new Int8Array([21, 31]);
console.log(x[1]); // 31

// From another TypedArray
const y = new Int8Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
const buffer = new ArrayBuffer(8);
const z = new Int8Array(buffer, 1, 4);
console.log(z.byteOffset); // 1

// From an iterable
const iterable = (function* () {
  yield* [1, 2, 3];
})();
const int8FromIterable = new Int8Array(iterable);
console.log(int8FromIterable);
// Int8Array [1, 2, 3]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Int8Array\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-typed-arrays)
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]ArrayBuffer\f[R]
.IP \[bu] 2
\f[V]DataView\f[R]
