.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "ClipboardItem.getType" "JS" "January 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem.getType \- ClipboardItem: getType() method
.SH SYNOPSIS
The \f[B]\f[CB]getType()\f[B]\f[R] method of the
\f[CR]ClipboardItem\f[R] interface returns a \f[CR]Promise\f[R] that
resolves with a \f[CR]Blob\f[R] of the requested MIME type or an error
if the MIME type is not found.
.SH SYNTAX
.IP
.EX
getType(type)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A valid MIME type.
.SS Return value
A \f[CR]Promise\f[R] that resolves with a \f[CR]Blob\f[R] object.
.SS Exceptions
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
The \f[CR]type\f[R] does not match a known MIME type.
.TP
\f[B]TypeError\f[R]
No parameter is specified or the \f[CR]type\f[R] is not that of the
\f[CR]ClipboardItem\f[R].
.SH EXAMPLES
In the following example, we\[cq]re returning all items on the clipboard
via the \f[CR]clipboard.read()\f[R] method.
Then utilizing the \f[CR]ClipboardItem.types\f[R] property to set the
\f[CR]getType()\f[R] argument and return the corresponding blob object.
.IP
.EX
async function getClipboardContents() {
  try {
    const clipboardItems = await navigator.clipboard.read();

    for (const clipboardItem of clipboardItems) {
      for (const type of clipboardItem.types) {
        const blob = await clipboardItem.getType(type);
        // we can now use blob here
      }
    }
  } catch (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
