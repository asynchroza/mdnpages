'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Date.toUTCString" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Date.toUTCString - Date.prototype.toUTCString()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]toUTCString()\f[B]\f[R] method of \f[V]Date\f[R]
instances returns a string representing this date in the RFC
7231 (https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.1)
format, with negative years allowed.
The timezone is always UTC.
\f[V]toGMTString()\f[R] is an alias of this method.
.SH SYNTAX
.IP
.nf
\f[C]
toUTCString()
\f[R]
.fi
.SS Return value
.PP
A string representing the given date using the UTC time zone (see
description for the format).
Returns \f[V]\[dq]Invalid Date\[dq]\f[R] if the date is invalid.
.SH DESCRIPTION
.PP
The value returned by \f[V]toUTCString()\f[R] is a string in the form
\f[V]Www, dd Mmm yyyy hh:mm:ss GMT\f[R], where:
.PP
.TS
tab(@);
lw(12.5n) lw(57.5n).
T{
Format String
T}@T{
Description
T}
_
T{
\f[V]Www\f[R]
T}@T{
Day of week, as three letters (e.g.\ \f[V]Sun\f[R], \f[V]Mon\f[R])
T}
T{
\f[V]dd\f[R]
T}@T{
Day of month, as two digits with leading zero if required
T}
T{
\f[V]Mmm\f[R]
T}@T{
Month, as three letters (e.g.\ \f[V]Jan\f[R], \f[V]Feb\f[R])
T}
T{
\f[V]yyyy\f[R]
T}@T{
Year, as four or more digits with leading zeroes if required
T}
T{
\f[V]hh\f[R]
T}@T{
Hour, as two digits with leading zero if required
T}
T{
\f[V]mm\f[R]
T}@T{
Minute, as two digits with leading zero if required
T}
T{
\f[V]ss\f[R]
T}@T{
Seconds, as two digits with leading zero if required
T}
.TE
.SS Aliasing
.PP
JavaScript\[cq]s \f[V]Date\f[R] API was inspired by Java\[cq]s
\f[V]java.util.Date\f[R] library (while the latter had become de facto
legacy since Java 1.1 in 1997).
In particular, the Java \f[V]Date\f[R] class had a method called
\f[V]toGMTString\f[R] \[em] which was poorly named, because the
Greenwich Mean Time (https://en.wikipedia.org/wiki/Greenwich_Mean_Time)
is not equivalent to the Coordinated Universal
Time (https://en.wikipedia.org/wiki/Coordinated_Universal_Time), while
JavaScript dates always operate by UTC time.
For web compatibility reasons, \f[V]toGMTString\f[R] remains as an alias
to \f[V]toUTCString\f[R], and they refer to the exact same function
object.
This means:
.IP
.nf
\f[C]
Date.prototype.toGMTString.name === \[dq]toUTCString\[dq];
\f[R]
.fi
.SH EXAMPLES
.SS Using toUTCString()
.IP
.nf
\f[C]
const d = new Date(0);
console.log(d.toUTCString()); // \[aq]Thu, 01 Jan 1970 00:00:00 GMT\[aq]
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Date.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toString()\f[R]
.IP \[bu] 2
\f[V]Date.prototype.toISOString()\f[R]
