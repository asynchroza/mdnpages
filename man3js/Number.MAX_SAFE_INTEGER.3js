'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.MAX_SAFE_INTEGER" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Number.MAX_SAFE_INTEGER - Number.MAX_SAFE_INTEGER
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Number.MAX_SAFE_INTEGER\f[B]\f[R] static data property
represents the maximum safe integer in JavaScript (253 \[en] 1).
.PP
For larger integers, consider using \f[V]BigInt\f[R].
.SH VALUE
.PP
\f[V]9007199254740991\f[R] (9,007,199,254,740,991, or \[ti]9
quadrillion).
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
.PP
Double precision floating point
format (https://en.wikipedia.org/wiki/Double_precision_floating-point_format)
only has 52 bits to represent the mantissa, so it can only safely
represent integers between -(253 \[en] 1) and 253 \[en] 1.
\[lq]Safe\[rq] in this context refers to the ability to represent
integers exactly and to compare them correctly.
For example,
\f[V]Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2\f[R]
will evaluate to true, which is mathematically incorrect.
See \f[V]Number.isSafeInteger()\f[R] for more information.
.PP
Because \f[V]MAX_SAFE_INTEGER\f[R] is a static property of
\f[V]Number\f[R], you always use it as
\f[V]Number.MAX_SAFE_INTEGER\f[R], rather than as a property of a number
value.
.SH EXAMPLES
.SS Return value of MAX_SAFE_INTEGER
.IP
.nf
\f[C]
Number.MAX_SAFE_INTEGER; // 9007199254740991
\f[R]
.fi
.SS Relationship between MAX_SAFE_INTEGER and EPSILON
.PP
\f[V]Number.EPSILON\f[R] is 2-52, while \f[V]MAX_SAFE_INTEGER\f[R] is
253 \[en] 1 \[em] both of them are derived from the width of the
mantissa, which is 53 bits (with the highest bit always being 1).
Multiplying them will give a value very close \[em] but not equal \[em]
to 2.
.IP
.nf
\f[C]
Number.MAX_SAFE_INTEGER * Number.EPSILON; // 1.9999999999999998
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Number.MAX_SAFE_INTEGER\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-number)
.IP \[bu] 2
\f[V]Number.MIN_SAFE_INTEGER\f[R]
.IP \[bu] 2
\f[V]Number.isSafeInteger()\f[R]
.IP \[bu] 2
\f[V]BigInt\f[R]
