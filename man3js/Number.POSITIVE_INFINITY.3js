'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Number.POSITIVE_INFINITY" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Number.POSITIVE_INFINITY\f[B]\f[R] static data property
represents the positive Infinity value.
.SH Value
.PP
The same as the value of the global \f[V]Infinity\f[R] property.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH Description
.PP
The \f[V]Number.POSITIVE_INFINITY\f[R] value behaves slightly
differently than mathematical infinity:
.IP \[bu] 2
Any positive value, including \f[V]POSITIVE_INFINITY\f[R], multiplied by
\f[V]POSITIVE_INFINITY\f[R] is \f[V]POSITIVE_INFINITY\f[R].
.IP \[bu] 2
Any negative value, including \f[V]NEGATIVE_INFINITY\f[R], multiplied by
\f[V]POSITIVE_INFINITY\f[R] is \f[V]NEGATIVE_INFINITY\f[R].
.IP \[bu] 2
Any positive number divided by \f[V]POSITIVE_INFINITY\f[R] is positive
zero (https://en.wikipedia.org/wiki/Signed_zero) (as defined in IEEE
754 (https://en.wikipedia.org/wiki/IEEE_754)).
.IP \[bu] 2
Any negative number divided by \f[V]POSITIVE_INFINITY\f[R] is negative
zero (https://en.wikipedia.org/wiki/Signed_zero) (as defined in IEEE
754 (https://en.wikipedia.org/wiki/IEEE_754).
.IP \[bu] 2
Zero multiplied by \f[V]POSITIVE_INFINITY\f[R] is \f[V]NaN\f[R].
.IP \[bu] 2
\f[V]NaN\f[R] multiplied by \f[V]POSITIVE_INFINITY\f[R] is
\f[V]NaN\f[R].
.IP \[bu] 2
\f[V]POSITIVE_INFINITY\f[R], divided by any negative value except
\f[V]NEGATIVE_INFINITY\f[R], is \f[V]NEGATIVE_INFINITY\f[R].
.IP \[bu] 2
\f[V]POSITIVE_INFINITY\f[R], divided by any positive value except
\f[V]POSITIVE_INFINITY\f[R], is \f[V]POSITIVE_INFINITY\f[R].
.IP \[bu] 2
\f[V]POSITIVE_INFINITY\f[R], divided by either
\f[V]NEGATIVE_INFINITY\f[R] or \f[V]POSITIVE_INFINITY\f[R], is
\f[V]NaN\f[R].
.IP \[bu] 2
\f[V]Number.POSITIVE_INFINITY > x\f[R] is true for any number
\f[I]x\f[R] that isn\[cq]t \f[V]POSITIVE_INFINITY\f[R].
.PP
You might use the \f[V]Number.POSITIVE_INFINITY\f[R] property to
indicate an error condition that returns a finite number in case of
success.
Note, however, that \f[V]NaN\f[R] would be more appropriate in such a
case.
.PP
Because \f[V]POSITIVE_INFINITY\f[R] is a static property of
\f[V]Number\f[R], you always use it as
\f[V]Number.POSITIVE_INFINITY\f[R], rather than as a property of a
number value.
.SH Examples
.SS Using POSITIVE_INFINITY
.PP
In the following example, the variable \f[V]bigNumber\f[R] is assigned a
value that is larger than the maximum value.
When the \f[V]if\f[R] statement executes, \f[V]bigNumber\f[R] has the
value \f[V]Infinity\f[R], so \f[V]bigNumber\f[R] is set to a more
manageable value before continuing.
.IP
.nf
\f[C]
let bigNumber = Number.MAX_VALUE * 2;

if (bigNumber === Number.POSITIVE_INFINITY) {
  bigNumber = returnFinite();
}
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]Number.NEGATIVE_INFINITY\f[R]
.IP \[bu] 2
\f[V]Number.isFinite()\f[R]
.IP \[bu] 2
\f[V]Infinity\f[R]
.IP \[bu] 2
\f[V]isFinite()\f[R]
