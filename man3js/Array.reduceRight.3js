'\" t
.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Array.reduceRight" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Array.reduceRight - Array.prototype.reduceRight()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]reduceRight()\f[B]\f[R] method applies a function against
an accumulator and each value of the array (from right-to-left) to
reduce it to a single value.
.PP
See also \f[V]Array.prototype.reduce()\f[R] for left-to-right.
.SH SYNTAX
.IP
.nf
\f[C]
reduceRight(callbackFn)
reduceRight(callbackFn, initialValue)
\f[R]
.fi
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
Its return value becomes the value of the \f[V]accumulator\f[R]
parameter on the next invocation of \f[V]callbackFn\f[R].
For the last invocation, the return value becomes the return value of
\f[V]reduceRight()\f[R].
The function is called with the following arguments:
.RS
.TP
\f[B]accumulator\f[R]
The value resulting from the previous call to \f[V]callbackFn\f[R].
On first call, \f[V]initialValue\f[R] if specified, otherwise the
array\[cq]s last element\[cq]s value.
.TP
\f[B]currentValue\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[V]reduceRight()\f[R] was called upon.
.RE
.TP
\f[B]initialValue\f[R] \f[I](optional)\f[R]
Value to use as accumulator to the first call of the
\f[V]callbackFn\f[R].
If no initial value is supplied, the last element in the array will be
used and skipped.
Calling \f[V]reduceRight()\f[R] on an empty array without an initial
value creates a \f[V]TypeError\f[R].
.SS Return value
.PP
The value that results from the reduction.
.SH DESCRIPTION
.PP
The \f[V]reduceRight()\f[R] method is an iterative method.
It runs a \[lq]reducer\[rq] callback function over all elements in the
array, in descending-index order, and accumulates them into a single
value.
.PP
\f[V]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
Unlike other iterative methods, \f[V]reduceRight()\f[R] does not accept
a \f[V]thisArg\f[R] argument.
\f[V]callbackFn\f[R] is always called with \f[V]undefined\f[R] as
\f[V]this\f[R], which gets substituted with \f[V]globalThis\f[R] if
\f[V]callbackFn\f[R] is non-strict.
.PP
\f[V]reduceRight()\f[R] does not mutate the array on which it is called,
but the function provided as \f[V]callbackFn\f[R] can.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[V]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[V]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[V]reduceRight()\f[R]
began.
.IP \[bu] 2
Changes to already-visited indexes do not cause \f[V]callbackFn\f[R] to
be invoked on them again.
.IP \[bu] 2
If an existing, yet-unvisited element of the array is changed by
\f[V]callbackFn\f[R], its value passed to the \f[V]callbackFn\f[R] will
be the value at the time that element gets visited.
Deleted elements are not visited.
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard-to-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The \f[V]reduceRight()\f[R] method is generic.
It only expects the \f[V]this\f[R] value to have a \f[V]length\f[R]
property and integer-keyed properties.
.SH EXAMPLES
.SS How reduceRight() works without an initial value
.PP
The call to the reduceRight \f[V]callbackFn\f[R] would look something
like this:
.IP
.nf
\f[C]
arr.reduceRight((accumulator, currentValue, index, array) => {
  // \&...
});
\f[R]
.fi
.PP
The first time the function is called, the \f[V]accumulator\f[R] and
\f[V]currentValue\f[R] can be one of two values.
If an \f[V]initialValue\f[R] was provided in the call to
\f[V]reduceRight\f[R], then \f[V]accumulator\f[R] will be equal to
\f[V]initialValue\f[R] and \f[V]currentValue\f[R] will be equal to the
last value in the array.
If no \f[V]initialValue\f[R] was provided, then \f[V]accumulator\f[R]
will be equal to the last value in the array and \f[V]currentValue\f[R]
will be equal to the second-to-last value.
.PP
If the array is empty and no \f[V]initialValue\f[R] was provided,
\f[V]TypeError\f[R] would be thrown.
If the array has only one element (regardless of position) and no
\f[V]initialValue\f[R] was provided, or if \f[V]initialValue\f[R] is
provided but the array is empty, the solo value would be returned
without calling \f[V]callbackFn\f[R].
.PP
Some example run-throughs of the function would look like this:
.IP
.nf
\f[C]
[0, 1, 2, 3, 4].reduceRight(
  (accumulator, currentValue, index, array) => accumulator + currentValue,
);
\f[R]
.fi
.PP
The callback would be invoked four times, with the arguments and return
values in each call being as follows:
.PP
.TS
tab(@);
lw(13.5n) lw(16.0n) lw(17.2n) lw(8.6n) lw(14.7n).
T{
T}@T{
\f[V]accumulator\f[R]
T}@T{
\f[V]currentValue\f[R]
T}@T{
\f[V]index\f[R]
T}@T{
Return value
T}
_
T{
First call
T}@T{
\f[V]4\f[R]
T}@T{
\f[V]3\f[R]
T}@T{
\f[V]3\f[R]
T}@T{
\f[V]7\f[R]
T}
T{
Second call
T}@T{
\f[V]7\f[R]
T}@T{
\f[V]2\f[R]
T}@T{
\f[V]2\f[R]
T}@T{
\f[V]9\f[R]
T}
T{
Third call
T}@T{
\f[V]9\f[R]
T}@T{
\f[V]1\f[R]
T}@T{
\f[V]1\f[R]
T}@T{
\f[V]10\f[R]
T}
T{
Fourth call
T}@T{
\f[V]10\f[R]
T}@T{
\f[V]0\f[R]
T}@T{
\f[V]0\f[R]
T}@T{
\f[V]10\f[R]
T}
.TE
.PP
The \f[V]array\f[R] parameter never changes through the process \[em]
it\[cq]s always \f[V][0, 1, 2, 3, 4]\f[R].
The value returned by \f[V]reduceRight\f[R] would be that of the last
callback invocation (\f[V]10\f[R]).
.SS How reduceRight() works with an initial value
.PP
Here we reduce the same array using the same algorithm, but with an
\f[V]initialValue\f[R] of \f[V]10\f[R] passed as the second argument to
\f[V]reduceRight()\f[R]:
.IP
.nf
\f[C]
[0, 1, 2, 3, 4].reduceRight(
  (accumulator, currentValue, index, array) => accumulator + currentValue,
  10,
);
\f[R]
.fi
.PP
.TS
tab(@);
lw(13.5n) lw(16.0n) lw(17.2n) lw(8.6n) lw(14.7n).
T{
T}@T{
\f[V]accumulator\f[R]
T}@T{
\f[V]currentValue\f[R]
T}@T{
\f[V]index\f[R]
T}@T{
Return value
T}
_
T{
First call
T}@T{
\f[V]10\f[R]
T}@T{
\f[V]4\f[R]
T}@T{
\f[V]4\f[R]
T}@T{
\f[V]14\f[R]
T}
T{
Second call
T}@T{
\f[V]14\f[R]
T}@T{
\f[V]3\f[R]
T}@T{
\f[V]3\f[R]
T}@T{
\f[V]17\f[R]
T}
T{
Third call
T}@T{
\f[V]17\f[R]
T}@T{
\f[V]2\f[R]
T}@T{
\f[V]2\f[R]
T}@T{
\f[V]19\f[R]
T}
T{
Fourth call
T}@T{
\f[V]19\f[R]
T}@T{
\f[V]1\f[R]
T}@T{
\f[V]1\f[R]
T}@T{
\f[V]20\f[R]
T}
T{
Fifth call
T}@T{
\f[V]20\f[R]
T}@T{
\f[V]0\f[R]
T}@T{
\f[V]0\f[R]
T}@T{
\f[V]20\f[R]
T}
.TE
.PP
The value returned by \f[V]reduceRight\f[R] this time would be, of
course, \f[V]20\f[R].
.SS Sum up all values within an array
.IP
.nf
\f[C]
const sum = [0, 1, 2, 3].reduceRight((a, b) => a + b);
// sum is 6
\f[R]
.fi
.SS Run a list of asynchronous functions with callbacks in series each passing their results to the next
.IP
.nf
\f[C]
const waterfall =
  (...functions) =>
  (callback, ...args) =>
    functions.reduceRight(
      (composition, fn) =>
        (...results) =>
          fn(composition, ...results),
      callback,
    )(...args);

const randInt = (max) => Math.floor(Math.random() * max);

const add5 = (callback, x) => {
  setTimeout(callback, randInt(1000), x + 5);
};
const mult3 = (callback, x) => {
  setTimeout(callback, randInt(1000), x * 3);
};
const sub2 = (callback, x) => {
  setTimeout(callback, randInt(1000), x - 2);
};
const split = (callback, x) => {
  setTimeout(callback, randInt(1000), x, x);
};
const add = (callback, x, y) => {
  setTimeout(callback, randInt(1000), x + y);
};
const div4 = (callback, x) => {
  setTimeout(callback, randInt(1000), x / 4);
};

const computation = waterfall(add5, mult3, sub2, split, add, div4);
computation(console.log, 5); // Logs 14

// same as:

const computation2 = (input, callback) => {
  const f6 = (x) => div4(callback, x);
  const f5 = (x, y) => add(f6, x, y);
  const f4 = (x) => split(f5, x);
  const f3 = (x) => sub2(f4, x);
  const f2 = (x) => mult3(f3, x);
  add5(f2, input);
};
\f[R]
.fi
.SS Difference between reduce and reduceRight
.IP
.nf
\f[C]
const a = [\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq], \[dq]4\[dq], \[dq]5\[dq]];
const left = a.reduce((prev, cur) => prev + cur);
const right = a.reduceRight((prev, cur) => prev + cur);

console.log(left); // \[dq]12345\[dq]
console.log(right); // \[dq]54321\[dq]
\f[R]
.fi
.SS Defining composable functions
.PP
Function composition is a mechanism for combining functions, in which
the output of each function is passed into the next one, and the output
of the last function is the final result.
In this example we use \f[V]reduceRight()\f[R] to implement function
composition.
.PP
See also Function
composition (https://en.wikipedia.org/wiki/Function_composition_(computer_science))
on Wikipedia.
.IP
.nf
\f[C]
const compose =
  (...args) =>
  (value) =>
    args.reduceRight((acc, fn) => fn(acc), value);

// Increment passed number
const inc = (n) => n + 1;

// Doubles the passed value
const double = (n) => n * 2;

// using composition function
console.log(compose(double, inc)(2)); // 6

// using composition function
console.log(compose(inc, double)(2)); // 5
\f[R]
.fi
.SS Using reduceRight() with sparse arrays
.PP
\f[V]reduceRight()\f[R] skips missing elements in sparse arrays, but it
does not skip \f[V]undefined\f[R] values.
.IP
.nf
\f[C]
console.log([1, 2, , 4].reduceRight((a, b) => a + b)); // 7
console.log([1, 2, undefined, 4].reduceRight((a, b) => a + b)); // NaN
\f[R]
.fi
.SS Calling reduceRight() on non-array objects
.PP
The \f[V]reduceRight()\f[R] method reads the \f[V]length\f[R] property
of \f[V]this\f[R] and then accesses each integer index.
.IP
.nf
\f[C]
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
};
console.log(Array.prototype.reduceRight.call(arrayLike, (x, y) => x - y));
// -1, which is 4 - 3 - 2
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Array.prototype.reduceRight\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-array)
.IP \[bu] 2
Indexed collections
.IP \[bu] 2
\f[V]Array\f[R]
.IP \[bu] 2
\f[V]Array.prototype.group()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.groupToMap()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.map()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.flat()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.flatMap()\f[R]
.IP \[bu] 2
\f[V]Array.prototype.reduce()\f[R]
.IP \[bu] 2
\f[V]TypedArray.prototype.reduceRight()\f[R]
