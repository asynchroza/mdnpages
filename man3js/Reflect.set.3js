.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Reflect.set" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Reflect.set - Reflect.set()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Reflect.set()\f[B]\f[R] static method is like the
property accessor and assignment syntax, but as a function.
.SH SYNTAX
.IP
.nf
\f[C]
Reflect.set(target, propertyKey, value)
Reflect.set(target, propertyKey, value, receiver)
\f[R]
.fi
.SS Parameters
.TP
\f[B]target\f[R]
The target object on which to set the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to set.
.TP
\f[B]value\f[R]
The value to set.
.TP
\f[B]receiver\f[R] \f[I](optional)\f[R]
The value of \f[V]this\f[R] provided for the call to the setter for
\f[V]propertyKey\f[R] on \f[V]target\f[R].
If provided and \f[V]target\f[R] does not have a setter for
\f[V]propertyKey\f[R], the property will be set on \f[V]receiver\f[R]
instead.
.SS Return value
.PP
A \f[V]Boolean\f[R] indicating whether or not setting the property was
successful.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[V]target\f[R] is not an object.
.SH DESCRIPTION
.PP
\f[V]Reflect.set()\f[R] provides the reflective semantic of a property
access.
That is, \f[V]Reflect.set(target, propertyKey, value, receiver)\f[R] is
semantically equivalent to:
.IP
.nf
\f[C]
target[propertyKey] = value;
\f[R]
.fi
.PP
Note that in a normal property access, \f[V]target\f[R] and
\f[V]receiver\f[R] would observably be the same object.
.PP
\f[V]Reflect.set()\f[R] invokes the \f[V][[Set]]\f[R] object internal
method of \f[V]target\f[R].
.SH EXAMPLES
.SS Using Reflect.set()
.IP
.nf
\f[C]
// Object
let obj = {};
Reflect.set(obj, \[dq]prop\[dq], \[dq]value\[dq]); // true
obj.prop; // \[dq]value\[dq]

// Array
let arr = [\[dq]duck\[dq], \[dq]duck\[dq], \[dq]duck\[dq]];
Reflect.set(arr, 2, \[dq]goose\[dq]); // true
arr[2]; // \[dq]goose\[dq]

// It can truncate an array.
Reflect.set(arr, \[dq]length\[dq], 1); // true
arr; // [\[dq]duck\[dq]]

// With just one argument, propertyKey and value are \[dq]undefined\[dq].
let obj = {};
Reflect.set(obj); // true
Reflect.getOwnPropertyDescriptor(obj, \[dq]undefined\[dq]);
// { value: undefined, writable: true, enumerable: true, configurable: true }
\f[R]
.fi
.SS Different target and receiver
.PP
When the \f[V]target\f[R] and \f[V]receiver\f[R] are different,
\f[V]Reflect.set\f[R] will use the property descriptor of
\f[V]target\f[R] (to find the setter or determine if the property is
writable), but set the property on \f[V]receiver\f[R].
.IP
.nf
\f[C]
const target = {};
const receiver = {};
Reflect.set(target, \[dq]a\[dq], 2, receiver); // true
// target is {}; receiver is { a: 2 }

const target = { a: 1 };
const receiver = {};
Reflect.set(target, \[dq]a\[dq], 2, receiver); // true
// target is { a: 1 }; receiver is { a: 2 }

const target = {
  set a(v) {
    this.b = v;
  },
};
const receiver = {};
Reflect.set(target, \[dq]a\[dq], 2, receiver); // true
// target is { a: [Setter] }; receiver is { b: 2 }
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
Polyfill of \f[V]Reflect.set\f[R] in
\f[V]core-js\f[R] (https://github.com/zloirock/core-js#ecmascript-reflect)
.IP \[bu] 2
\f[V]Reflect\f[R]
.IP \[bu] 2
Property accessors
.IP \[bu] 2
\f[V]Proxy\f[R]\[cq]s \f[V]set\f[R] handler
