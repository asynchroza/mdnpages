.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "FontFaceSet.check" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FontFaceSet.check \- FontFaceSet: check() method
.SH SYNOPSIS
The \f[CR]check()\f[R] method of the \f[CR]FontFaceSet\f[R] returns
\f[CR]true\f[R] if you can render some text using the given font
specification without attempting to use any fonts in this
\f[CR]FontFaceSet\f[R] that are not yet fully loaded.
This means you can use the font specification without causing a font
swap.
.SH SYNTAX
.IP
.EX
check(font)
check(font, text)
.EE
.SS Parameters
.TP
\f[B]font\f[R]
a font specification using the syntax for the CSS \f[CR]font\f[R]
property, for example \f[CR]\[dq]italic bold 16px Roboto\[dq]\f[R]
.TP
\f[B]text\f[R]
limit the font faces to those whose Unicode range contains at least one
of the characters in text.
This \c
.UR https://lists.w3.org/Archives/Public/www-style/2015Aug/0330.html
does not check for individual glyph coverage
.UE \c
\&.
.SS Return value
A \f[CR]Boolean\f[R] value that is \f[CR]true\f[R] if rendering text
with the given font specification will not attempt to use any fonts in
this \f[CR]FontFaceSet\f[R] that are not yet fully loaded.
.PP
This means that all fonts in this \f[CR]FontFaceSet\f[R] that are
matched by the given font specification have a \f[CR]status\f[R]
property set to \f[CR]\[dq]loaded\[dq]\f[R].
.PP
Otherwise, this function returns \f[CR]false\f[R].
.SH EXAMPLES
In the following example, we create a new \f[CR]FontFace\f[R] and add it
to the \f[CR]FontFaceSet\f[R]:
.IP
.EX
const font = new FontFace(
  \[dq]molot\[dq],
  \[dq]url(https://interactive\-examples.mdn.mozilla.net/media/fonts/molot.woff2)\[dq],
  {
    style: \[dq]normal\[dq],
    weight: \[dq]400\[dq],
    stretch: \[dq]condensed\[dq],
  },
);

document.fonts.add(font);
.EE
.SS Unloaded fonts
The font is not yet loaded, so \f[CR]check(\[dq]12px molot\[dq])\f[R]
returns \f[CR]false\f[R], indicating that if we try to use the given
font specification, we will trigger a font load:
.IP
.EX
console.log(document.fonts.check(\[dq]12px molot\[dq]));
// false: the matching font is in the set, but is not yet loaded
.EE
.SS System fonts
If we specify only a system font in the argument to \f[CR]check()\f[R],
it returns \f[CR]true\f[R], because we can use the system font without
loading any fonts from the set:
.IP
.EX
console.log(document.fonts.check(\[dq]12px Courier\[dq]));
// true: the matching font is a system font
.EE
.SS Nonexistent fonts
If we specify a font that is not in the \f[CR]FontFaceSet\f[R] and is
not a system font, \f[CR]check()\f[R] returns \f[CR]true\f[R], because
in this situation we will not rely on any fonts from the set:
.IP
.EX
console.log(document.fonts.check(\[dq]12px i\-dont\-exist\[dq]));
// true: the matching font is a nonexistent font
.EE
.RS
.PP
\f[B]Note:\f[R] In this situation Chrome incorrectly returns
\f[CR]false\f[R].
This can make fingerprinting easier, because an attacker can easily test
which system fonts the browser has.
.RE
.SS System and unloaded fonts
If we specify both a system font and a font in the set that is not yet
loaded, then \f[CR]check()\f[R] returns \f[CR]false\f[R]:
.IP
.EX
console.log(document.fonts.check(\[dq]12px molot, Courier\[dq]));
// false: \[ga]molot\[ga] is in the set but not yet loaded
.EE
.SS Fonts that are loading
If we specify a font from the set that is still loading,
\f[CR]check()\f[R] returns \f[CR]false\f[R]:
.IP
.EX
function check() {
  font.load();
  console.log(document.fonts.check(\[dq]12px molot\[dq]));
  // false: font is still loading
  console.log(font.status);
  // \[dq]loading\[dq]
}

check();
.EE
.SS Fonts that have loaded
If we specify a font from the set that has loaded, \f[CR]check()\f[R]
returns \f[CR]true\f[R]:
.IP
.EX
async function check() {
  await font.load();
  console.log(document.fonts.check(\[dq]12px molot\[dq]));
  // true: font has finished loading
  console.log(font.status);
  // \[dq]loaded\[dq]
}

check();
.EE
