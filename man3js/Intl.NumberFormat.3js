.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Intl.NumberFormat" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]Intl.NumberFormat\f[B]\f[R] object enables
language-sensitive number formatting.
.SH Constructor
.IP \[bu] 2
\f[V]Intl.NumberFormat()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]NumberFormat\f[R] object.
.RE
.SH Static methods
.IP \[bu] 2
\f[V]Intl.NumberFormat.supportedLocalesOf()\f[R]
.RS 2
.IP \[bu] 2
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]Intl.NumberFormat.prototype\f[R]
and shared by all \f[V]Intl.NumberFormat\f[R] instances.
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype.constructor\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]Intl.NumberFormat\f[R] instances, the initial value is the
\f[V]Intl.NumberFormat\f[R] constructor.
.RE
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype[\[at]\[at]toStringTag]\f[R]
.RS 2
.IP \[bu] 2
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]Intl.NumberFormat\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype.format()\f[R]
.RS 2
.IP \[bu] 2
Getter function that formats a number according to the locale and
formatting options of this \f[V]Intl.NumberFormat\f[R] object.
.RE
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype.formatRange()\f[R]
.RS 2
.IP \[bu] 2
Getter function that formats a range of numbers according to the locale
and formatting options of the \f[V]Intl.NumberFormat\f[R] object from
which the method is called.
.RE
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype.formatRangeToParts()\f[R]
.RS 2
.IP \[bu] 2
Returns an \f[V]Array\f[R] of objects representing the range of number
strings in parts that can be used for custom locale-aware formatting.
.RE
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype.formatToParts()\f[R]
.RS 2
.IP \[bu] 2
Returns an \f[V]Array\f[R] of objects representing the number string in
parts that can be used for custom locale-aware formatting.
.RE
.IP \[bu] 2
\f[V]Intl.NumberFormat.prototype.resolvedOptions()\f[R]
.RS 2
.IP \[bu] 2
Returns a new object with properties reflecting the locale and collation
options computed during initialization of the object.
.RE
.SH Examples
.SS Basic usage
.PP
In basic use without specifying a locale, a formatted string in the
default locale and with default options is returned.
.IP
.nf
\f[C]
const number = 3500;

console.log(new Intl.NumberFormat().format(number));
// \[aq]3,500\[aq] if in US English locale
\f[R]
.fi
.SS Using locales
.PP
This example shows some of the variations in localized number formats.
In order to get the format of the language used in the user interface of
your application, make sure to specify that language (and possibly some
fallback languages) using the \f[V]locales\f[R] argument:
.IP
.nf
\f[C]
const number = 123456.789;

// German uses comma as decimal separator and period for thousands
console.log(new Intl.NumberFormat(\[dq]de-DE\[dq]).format(number));
// 123.456,789

// Arabic in most Arabic speaking countries uses real Arabic digits
console.log(new Intl.NumberFormat(\[dq]ar-EG\[dq]).format(number));
// ١٢٣٤٥٦٫٧٨٩

// India uses thousands/lakh/crore separators
console.log(new Intl.NumberFormat(\[dq]en-IN\[dq]).format(number));
// 1,23,456.789

// the nu extension key requests a numbering system, e.g. Chinese decimal
console.log(new Intl.NumberFormat(\[dq]zh-Hans-CN-u-nu-hanidec\[dq]).format(number));
// 一二三,四五六.七八九

// when requesting a language that may not be supported, such as
// Balinese, include a fallback language, in this case Indonesian
console.log(new Intl.NumberFormat([\[dq]ban\[dq], \[dq]id\[dq]]).format(number));
// 123.456,789
\f[R]
.fi
.SS Using options
.PP
The results can be customized using the \f[V]options\f[R] argument:
.IP
.nf
\f[C]
const number = 123456.789;

// request a currency format
console.log(
  new Intl.NumberFormat(\[dq]de-DE\[dq], { style: \[dq]currency\[dq], currency: \[dq]EUR\[dq] }).format(
    number,
  ),
);
// 123.456,79 €

// the Japanese yen doesn\[aq]t use a minor unit
console.log(
  new Intl.NumberFormat(\[dq]ja-JP\[dq], { style: \[dq]currency\[dq], currency: \[dq]JPY\[dq] }).format(
    number,
  ),
);
// ￥123,457

// limit to three significant digits
console.log(
  new Intl.NumberFormat(\[dq]en-IN\[dq], { maximumSignificantDigits: 3 }).format(
    number,
  ),
);
// 1,23,000

// Formatting with units
console.log(
  new Intl.NumberFormat(\[dq]pt-PT\[dq], {
    style: \[dq]unit\[dq],
    unit: \[dq]kilometer-per-hour\[dq],
  }).format(50),
);
// 50 km/h

console.log(
  (16).toLocaleString(\[dq]en-GB\[dq], {
    style: \[dq]unit\[dq],
    unit: \[dq]liter\[dq],
    unitDisplay: \[dq]long\[dq],
  }),
);
// 16 litres
\f[R]
.fi
.PP
For an exhaustive list of options, see the \f[V]Intl.NumberFormat()\f[R]
constructor page.
.SH See also
.IP \[bu] 2
\f[V]Intl\f[R]
.IP \[bu] 2
A polyfill of \f[V]Intl.NumberFormat\f[R] in
FormatJS (https://formatjs.io/docs/polyfills/intl-numberformat/)
