.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "IDBDatabase.versionchange_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase.versionchange_event \- IDBDatabase: versionchange event
.SH SYNOPSIS
The \f[CR]versionchange\f[R] event is fired when a database structure
change (\f[CR]upgradeneeded\f[R] event send on an
\f[CR]IDBOpenDBRequest\f[R] or \f[CR]IDBFactory.deleteDatabase\f[R]) was
requested elsewhere (most probably in another window/tab on the same
computer).
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]versionchange\[dq], (event) => {});
onversionchange = (event) => {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example opens a database and, on success, adds a listener to
\f[CR]versionchange\f[R]:
.IP
.EX
// Open the database
const dBOpenRequest = window.indexedDB.open(\[dq]Nonexistent\[dq], 4);

dBOpenRequest.onupgradeneeded = (event) => {
  const db = event.target.result;
  // Create an objectStore for this database
  const objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  // define what data items the objectStore will contain
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: false });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: false });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: false });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: false });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: false });
};

dBOpenRequest.addEventListener(\[dq]success\[dq], (event) => {
  const db = event.target.result;
  db.addEventListener(\[dq]versionchange\[dq], (event) => {
    console.log(\[dq]The version of this database has changed\[dq]);
  });
});
.EE
.PP
The same example, using the \f[CR]onversionchange\f[R] event handler
property:
.IP
.EX
// Open the database
const dBOpenRequest = window.indexedDB.open(\[dq]Nonexistent\[dq], 4);

dBOpenRequest.onupgradeneeded = (event) => {
  const db = event.target.result;
  // Create an objectStore for this database
  const objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  // define what data items the objectStore will contain
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: false });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: false });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: false });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: false });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: false });
};

dBOpenRequest.onsuccess = (event) => {
  const db = event.target.result;
  db.onversionchange = (event) => {
    console.log(\[dq]The version of this database has changed\[dq]);
  };
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
