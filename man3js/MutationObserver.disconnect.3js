.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "MutationObserver.disconnect" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationObserver.disconnect \- MutationObserver: disconnect() method
.SH SYNOPSIS
The \f[CR]MutationObserver\f[R] method \f[B]\f[CB]disconnect()\f[B]\f[R]
tells the observer to stop watching for mutations.
.PP
The observer can be reused by calling its \f[CR]observe()\f[R] method
again.
.SH SYNTAX
.IP
.EX
disconnect()
.EE
.SS Parameters
None.
.SS Return value
\f[CR]undefined\f[R].
.RS
.PP
\f[B]Note:\f[R] All notifications of mutations that have already been
\f[I]detected\f[R], but \f[I]not yet reported\f[R] to the observer, are
discarded.
To hold on to and handle the detected but unreported mutations, use the
\f[CR]takeRecords()\f[R] method.
.RE
.SH USAGE NOTES
If the element being observed is removed from the DOM, and then
subsequently released by the browser\[cq]s garbage collection mechanism,
the \f[CR]MutationObserver\f[R] will stop observing the removed element.
However, the \f[CR]MutationObserver\f[R] itself can continue to exist to
observe other existing elements.
.SH EXAMPLES
This example creates an observer, then disconnects from it, leaving it
available for possible reuse.
.IP
.EX
const targetNode = document.querySelector(\[dq]#someElement\[dq]);
const observerOptions = {
  childList: true,
  attributes: true,
};

const observer = new MutationObserver(callback);
observer.observe(targetNode, observerOptions);

/* some time later\&... */

observer.disconnect();
.EE
