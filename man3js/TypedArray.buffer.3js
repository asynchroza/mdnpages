.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "TypedArray.buffer" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
The \f[B]\f[VB]buffer\f[B]\f[R] accessor property of
\f[V]TypedArray\f[R] instances returns the \f[V]ArrayBuffer\f[R] or
\f[V]SharedArrayBuffer\f[R] referenced by this typed array at
construction time.
.SH Description
.PP
The \f[V]buffer\f[R] property is an accessor property whose set accessor
function is \f[V]undefined\f[R], meaning that you can only read this
property.
The value is established when the \f[I]TypedArray\f[R] is constructed
and cannot be changed.
\f[I]TypedArray\f[R] is one of the TypedArray objects.
.PP
Because a typed array is a \f[I]view\f[R] of a buffer, the underlying
buffer may be longer than the typed array itself.
.SH Examples
.SS Using the buffer property
.IP
.nf
\f[C]
const buffer = new ArrayBuffer(8);
const uint16 = new Uint16Array(buffer);
uint16.buffer; // ArrayBuffer { byteLength: 8 }
\f[R]
.fi
.SS Accessing the underlying buffer from a sliced array view
.IP
.nf
\f[C]
const buffer = new ArrayBuffer(1024);
const arr = new Uint8Array(buffer, 64, 128);
console.log(arr.byteLength); // 128
console.log(arr.buffer.byteLength); // 1024
console.log(arr.buffer === buffer); // true
\f[R]
.fi
.SH See also
.IP \[bu] 2
JavaScript typed arrays
.IP \[bu] 2
\f[V]TypedArray\f[R]
