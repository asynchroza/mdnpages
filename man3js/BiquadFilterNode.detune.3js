.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "BiquadFilterNode.detune" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BiquadFilterNode.detune \- BiquadFilterNode: detune property
.SH SYNOPSIS
The \f[CR]detune\f[R] property of the \f[CR]BiquadFilterNode\f[R]
interface is an a\-rate \f[CR]AudioParam\f[R] representing detuning of
the frequency in \c
.UR https://en.wikipedia.org/wiki/Cent_%28music%29
cents
.UE \c
\&.
.SH VALUE
An a\-rate \f[CR]AudioParam\f[R].
.RS
.PP
\f[B]Note:\f[R] Though the \f[CR]AudioParam\f[R] returned is read\-only,
the value it represents is not.
.RE
.SH EXAMPLES
The following example shows basic usage of an AudioContext to create a
Biquad filter node.
For more complete applied examples/information, check out our \c
.UR
https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR
https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\[en]193
.UE \c
\ for relevant code).
.IP
.EX
const audioCtx = new AudioContext();

//set up the different audio nodes we will use for the app
const analyser = audioCtx.createAnalyser();
const distortion = audioCtx.createWaveShaper();
const gainNode = audioCtx.createGain();
const biquadFilter = audioCtx.createBiquadFilter();
const convolver = audioCtx.createConvolver();

// connect the nodes together

source = audioCtx.createMediaStreamSource(stream);
source.connect(analyser);
analyser.connect(distortion);
distortion.connect(biquadFilter);
biquadFilter.connect(convolver);
convolver.connect(gainNode);
gainNode.connect(audioCtx.destination);

// Manipulate the Biquad filter

biquadFilter.type = \[dq]lowshelf\[dq];
biquadFilter.frequency.value = 1000;
biquadFilter.gain.value = 25;
biquadFilter.detune.value = 100;
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
