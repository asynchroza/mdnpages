.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Intl.supportedValuesOf" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Intl.supportedValuesOf - Intl.supportedValuesOf()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Intl.supportedValuesOf()\f[B]\f[R] static method returns
an array containing the supported calendar, collation, currency,
numbering systems, or unit values supported by the implementation.
.PP
Duplicates are omitted and the array is sorted in ascending alphabetic
order (or more precisely, using \f[V]Array.prototype.sort()\f[R] with an
\f[V]undefined\f[R] compare function)
.PP
The method can be used to feature-test whether values are supported in a
particular implementation and download a polyfill only if necessary.
It can also be used to build UIs that allow users to select their
preferred localized values, for example when the UI is created from
WebGL or server-side.
.SH SYNTAX
.IP
.nf
\f[C]
Intl.supportedValuesOf(key)
\f[R]
.fi
.SS Parameters
.TP
\f[B]key\f[R]
A key string indicating the category of values to be returned.
This is one of: \f[V]\[dq]calendar\[dq]\f[R],
\f[V]\[dq]collation\[dq]\f[R], \f[V]\[dq]currency\[dq]\f[R],
\f[V]\[dq]numberingSystem\[dq]\f[R], \f[V]\[dq]timeZone\[dq]\f[R],
\f[V]\[dq]unit\[dq]\f[R].
.SS Return value
.PP
A sorted array of unique string values indicating the values supported
by the implementation for the given key.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if an unsupported key was passed as a parameter.
.SH EXAMPLES
.SS Feature testing
.PP
You can check that the method is supported by comparing to
\f[V]undefined\f[R]:
.IP
.nf
\f[C]
if (typeof Intl.supportedValuesOf !== \[dq]undefined\[dq]) {
  // method is supported
}
\f[R]
.fi
.SS Get all values for key
.PP
To get the supported values for calendar you call the method with the
key \f[V]\[dq]calendar\[dq]\f[R].
You can then iterate through the returned array as shown below:
.IP
.nf
\f[C]
Intl.supportedValuesOf(\[dq]calendar\[dq]).forEach((calendar) => {
  // \[dq]buddhist\[dq], \[dq]chinese\[dq], \[dq]coptic\[dq], \[dq]dangi\[dq], etc.
});
\f[R]
.fi
.RS
.PP
\f[B]Note:\f[R] The array returned for calendar values will always
include the value \[lq]gregory\[rq] (gregorian).
.RE
.PP
The other values are all obtained in the same way:
.IP
.nf
\f[C]
Intl.supportedValuesOf(\[dq]collation\[dq]).forEach((collation) => {
  // \[dq]compat\[dq], \[dq]dict\[dq], \[dq]emoji\[dq], etc.
});

Intl.supportedValuesOf(\[dq]currency\[dq]).forEach((currency) => {
  // \[dq]ADP\[dq], \[dq]AED\[dq], \[dq]AFA\[dq], \[dq]AFN\[dq], \[dq]ALK\[dq], \[dq]ALL\[dq], \[dq]AMD\[dq], etc.
});

Intl.supportedValuesOf(\[dq]numberingSystem\[dq]).forEach((numberingSystem) => {
  // \[dq]adlm\[dq], \[dq]ahom\[dq], \[dq]arab\[dq], \[dq]arabext\[dq], \[dq]bali\[dq], etc.
});

Intl.supportedValuesOf(\[dq]timeZone\[dq]).forEach((timeZone) => {
  // \[dq]Africa/Abidjan\[dq], \[dq]Africa/Accra\[dq], \[dq]Africa/Addis_Ababa\[dq], \[dq]Africa/Algiers\[dq], etc.
});

Intl.supportedValuesOf(\[dq]unit\[dq]).forEach((unit) => {
  // \[dq]acre\[dq], \[dq]bit\[dq], \[dq]byte\[dq], \[dq]celsius\[dq], \[dq]centimeter\[dq], etc.
});
\f[R]
.fi
.SS Invalid key throws RangeError
.IP
.nf
\f[C]
try {
  Intl.supportedValuesOf(\[dq]someInvalidKey\[dq]);
} catch (err) {
  //Error: RangeError: invalid key: \[dq]someInvalidKey\[dq]
}
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[V]Intl\f[R]
.IP \[bu] 2
A polyfill of \f[V]Intl.supportedValuesOf\f[R] in
FormatJS (https://github.com/formatjs/formatjs/tree/main/packages/intl-enumerator)
