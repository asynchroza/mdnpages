.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Math.max" "JS" "June 2, 2023" "JavaScript" "JavaScript Reference Manual"
.hy
.SH NAME
.PP
Math.max - Math.max()
.SH SYNOPSIS
.PP
The \f[B]\f[VB]Math.max()\f[B]\f[R] static method returns the largest of
the numbers given as input parameters, or -\f[V]Infinity\f[R] if there
are no parameters.
.SH SYNTAX
.IP
.nf
\f[C]
Math.max()
Math.max(value0)
Math.max(value0, value1)
Math.max(value0, value1, /* \&... ,*/ valueN)
\f[R]
.fi
.SS Parameters
.TP
\f[B]value1\f[R], \f[B]value2\f[R], \&... , \f[B]valueN\f[R]
Zero or more numbers among which the largest value will be selected and
returned.
.SS Return value
.PP
The largest of the given numbers.
Returns \f[V]NaN\f[R] if any of the parameters is or is converted into
\f[V]NaN\f[R].
Returns -\f[V]Infinity\f[R] if no parameters are provided.
.SH DESCRIPTION
.PP
Because \f[V]max()\f[R] is a static method of \f[V]Math\f[R], you always
use it as \f[V]Math.max()\f[R], rather than as a method of a
\f[V]Math\f[R] object you created (\f[V]Math\f[R] is not a constructor).
.PP
\f[V]Math.max.length\f[R] is 2, which weakly signals that it\[cq]s
designed to handle at least two parameters.
.SH EXAMPLES
.SS Using Math.max()
.IP
.nf
\f[C]
Math.max(10, 20); // 20
Math.max(-10, -20); // -10
Math.max(-10, 20); // 20
\f[R]
.fi
.SS Getting the maximum element of an array
.PP
\f[V]Array.prototype.reduce()\f[R] can be used to find the maximum
element in a numeric array, by comparing each value:
.IP
.nf
\f[C]
const arr = [1, 2, 3];
const max = arr.reduce((a, b) => Math.max(a, b), -Infinity);
\f[R]
.fi
.PP
The following function uses \f[V]Function.prototype.apply()\f[R] to get
the maximum of an array.
\f[V]getMaxOfArray([1, 2, 3])\f[R] is equivalent to
\f[V]Math.max(1, 2, 3)\f[R], but you can use \f[V]getMaxOfArray()\f[R]
on programmatically constructed arrays.
This should only be used for arrays with relatively few elements.
.IP
.nf
\f[C]
function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
}
\f[R]
.fi
.PP
The spread syntax is a shorter way of writing the \f[V]apply\f[R]
solution to get the maximum of an array:
.IP
.nf
\f[C]
const arr = [1, 2, 3];
const max = Math.max(...arr);
\f[R]
.fi
.PP
However, both spread (\f[V]...\f[R]) and \f[V]apply\f[R] will either
fail or return the wrong result if the array has too many elements,
because they try to pass the array elements as function parameters.
See Using apply and built-in functions for more details.
The \f[V]reduce\f[R] solution does not have this problem.
.SH SEE ALSO
.IP \[bu] 2
\f[V]Math.min()\f[R]
