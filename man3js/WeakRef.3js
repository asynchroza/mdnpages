.\" Automatically generated by Pandoc 3.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "WeakRef" "JS" "2023-06-02" "JavaScript" "JavaScript Reference Manual"
.hy
.SH Synopsis
.PP
A \f[B]\f[VB]WeakRef\f[B]\f[R] object lets you hold a weak reference to
another object, without preventing that object from getting
garbage-collected.
.SH Description
.PP
A \f[V]WeakRef\f[R] object contains a weak reference to an object, which
is called its \f[I]target\f[R] or \f[I]referent\f[R].
A \f[I]weak reference\f[R] to an object is a reference that does not
prevent the object from being reclaimed by the garbage collector.
In contrast, a normal (or \f[I]strong\f[R]) reference keeps an object in
memory.
When an object no longer has any strong references to it, the JavaScript
engine\[cq]s garbage collector may destroy the object and reclaim its
memory.
If that happens, you can\[cq]t get the object from a weak reference
anymore.
.PP
Because non-registered symbols are also garbage collectable, they can
also be used as the target of a \f[V]WeakRef\f[R] object.
However, the use case of this is limited.
.SS Avoid where possible
.PP
Correct use of \f[V]WeakRef\f[R] takes careful thought, and it\[cq]s
best avoided if possible.
It\[cq]s also important to avoid relying on any specific behaviors not
guaranteed by the specification.
When, how, and whether garbage collection occurs is down to the
implementation of any given JavaScript engine.
Any behavior you observe in one engine may be different in another
engine, in another version of the same engine, or even in a slightly
different situation with the same version of the same engine.
Garbage collection is a hard problem that JavaScript engine implementers
are constantly refining and improving their solutions to.
.PP
Here are some specific points that the authors of the WeakRef proposal
included in its explainer
document (https://github.com/tc39/proposal-weakrefs/blob/master/README.md):
.RS
.PP
Garbage
collectors (https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))
are complicated.
If an application or library depends on GC cleaning up a WeakRef or
calling a finalizer [cleanup callback] in a timely, predictable manner,
it\[cq]s likely to be disappointed: the cleanup may happen much later
than expected, or not at all.
Sources of variability include:
.IP \[bu] 2
One object might be garbage-collected much sooner than another object,
even if they become unreachable at the same time, e.g., due to
generational collection.
.IP \[bu] 2
Garbage collection work can be split up over time using incremental and
concurrent techniques.
.IP \[bu] 2
Various runtime heuristics can be used to balance memory usage,
responsiveness.
.IP \[bu] 2
The JavaScript engine may hold references to things which look like they
are unreachable (e.g., in closures, or inline caches).
.IP \[bu] 2
Different JavaScript engines may do these things differently, or the
same engine may change its algorithms across versions.
.IP \[bu] 2
Complex factors may lead to objects being held alive for unexpected
amounts of time, such as use with certain APIs.
.RE
.SS Notes on WeakRefs
.IP \[bu] 2
If your code has just created a \f[V]WeakRef\f[R] for a target object,
or has gotten a target object from a \f[V]WeakRef\f[R]\[cq]s
\f[V]deref\f[R] method, that target object will not be reclaimed until
the end of the current JavaScript job (https://tc39.es/ecma262/#job)
(including any promise reaction jobs that run at the end of a script
job).
That is, you can only \[lq]see\[rq] an object get reclaimed between
turns of the event loop.
This is primarily to avoid making the behavior of any given JavaScript
engine\[cq]s garbage collector apparent in code \[em] because if it
were, people would write code relying on that behavior, which would
break when the garbage collector\[cq]s behavior changed.
(Garbage collection is a hard problem; JavaScript engine implementers
are constantly refining and improving how it works.)
.IP \[bu] 2
If multiple \f[V]WeakRef\f[R]s have the same target, they\[cq]re
consistent with one another.
The result of calling \f[V]deref\f[R] on one of them will match the
result of calling \f[V]deref\f[R] on another of them (in the same job),
you won\[cq]t get the target object from one of them but
\f[V]undefined\f[R] from another.
.IP \[bu] 2
If the target of a \f[V]WeakRef\f[R] is also in a
\f[V]FinalizationRegistry\f[R], the \f[V]WeakRef\f[R]\[cq]s target is
cleared at the same time or before any cleanup callback associated with
the registry is called; if your cleanup callback calls \f[V]deref\f[R]
on a \f[V]WeakRef\f[R] for the object, it will receive
\f[V]undefined\f[R].
.IP \[bu] 2
You cannot change the target of a \f[V]WeakRef\f[R], it will always only
ever be the original target object or \f[V]undefined\f[R] when that
target has been reclaimed.
.IP \[bu] 2
A \f[V]WeakRef\f[R] might never return \f[V]undefined\f[R] from
\f[V]deref\f[R], even if nothing strongly holds the target, because the
garbage collector may never decide to reclaim the object.
.SH Constructor
.IP \[bu] 2
\f[V]WeakRef()\f[R]
.RS 2
.IP \[bu] 2
Creates a new \f[V]WeakRef\f[R] object.
.RE
.SH Instance properties
.PP
These properties are defined on \f[V]WeakRef.prototype\f[R] and shared
by all \f[V]WeakRef\f[R] instances.
.IP \[bu] 2
\f[V]WeakRef.prototype.constructor\f[R] \f[I](optional)\f[R]
.RS 2
.IP \[bu] 2
The constructor function that created the instance object.
For \f[V]WeakRef\f[R] instances, the initial value is the
\f[V]WeakRef\f[R] constructor.
.RS 2
.RS
.PP
\f[B]Note:\f[R] This property is marked as \[lq]normative optional\[rq]
in the specification, which means a conforming implementation may not
expose the \f[V]constructor\f[R] property.
This prevents arbitrary code from obtaining the \f[V]WeakRef\f[R]
constructor and being able to observe garbage collection.
However, all major engines do expose it by default.
.RE
.RE
.RE
.IP \[bu] 2
\f[V]WeakRef.prototype[\[at]\[at]toStringTag]\f[R]
.RS 2
.IP \[bu] 2
The initial value of the \f[V]\[at]\[at]toStringTag\f[R] property is the
string \f[V]\[dq]WeakRef\[dq]\f[R].
This property is used in \f[V]Object.prototype.toString()\f[R].
.RE
.SH Instance methods
.IP \[bu] 2
\f[V]WeakRef.prototype.deref()\f[R]
.RS 2
.IP \[bu] 2
Returns the \f[V]WeakRef\f[R] object\[cq]s target object, or
\f[V]undefined\f[R] if the target object has been reclaimed.
.RE
.SH Examples
.SS Using a WeakRef object
.PP
This example starts a counter shown in a DOM element, stopping when the
element doesn\[cq]t exist anymore:
.IP
.nf
\f[C]
class Counter {
  constructor(element) {
    // Remember a weak reference to the DOM element
    this.ref = new WeakRef(element);
    this.start();
  }

  start() {
    if (this.timer) {
      return;
    }

    this.count = 0;

    const tick = () => {
      // Get the element from the weak reference, if it still exists
      const element = this.ref.deref();
      if (element) {
        element.textContent = ++this.count;
      } else {
        // The element doesn\[aq]t exist anymore
        console.log(\[dq]The element is gone.\[dq]);
        this.stop();
        this.ref = null;
      }
    };

    tick();
    this.timer = setInterval(tick, 1000);
  }

  stop() {
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = 0;
    }
  }
}

const counter = new Counter(document.getElementById(\[dq]counter\[dq]));
setTimeout(() => {
  document.getElementById(\[dq]counter\[dq]).remove();
}, 5000);
\f[R]
.fi
.SH See also
.IP \[bu] 2
\f[V]FinalizationRegistry\f[R]
.IP \[bu] 2
\f[V]WeakSet\f[R]
.IP \[bu] 2
\f[V]WeakMap\f[R]
