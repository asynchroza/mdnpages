.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "PerformanceNavigationTiming.redirectCount" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceNavigationTiming.redirectCount \-
PerformanceNavigationTiming: redirectCount property
.SH SYNOPSIS
The \f[B]\f[CB]redirectCount\f[B]\f[R] read\-only property returns a
number representing the number of redirects since the last non\-redirect
navigation in the current browsing context.
.PP
The higher the number of redirects on a page, the longer the page load
time.
To improve the performance of your web page, avoid multiple redirects.
.PP
The \f[CR]redirectStart\f[R] and \f[CR]redirectEnd\f[R] properties can
be used to measure redirection time.
Note that they will return \f[CR]0\f[R] for cross\-origin redirects.
.PP
Note that client side redirects, such as
\f[CR]<meta http\-equiv=\[dq]refresh\[dq] content=\[dq]0; url=https://example.com/\[dq]>\f[R]
are not considered here.
.SH VALUE
The \f[CR]redirectCount\f[R] property can have the following values:
.IP \[bu] 2
A number representing the number of redirects since the last
non\-redirect navigation in the current browsing context.
.IP \[bu] 2
\f[CR]0\f[R] if the redirect is cross\-origin.
.SH EXAMPLES
.SS Logging entries with redirects
The \f[CR]redirectCount\f[R] property can be used to check whether there
are one or more redirects.
We log the entry\[cq]s name and the redirection time if it is available.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]navigation\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
const observer = new PerformanceObserver((list) => {
  list.getEntries().forEach((entry) => {
    const name = entry.name;
    const redirectCount = entry.redirectCount;
    const redirectTime = entry.redirectEnd \- entry.redirectStart;
    if (redirectCount > 0) {
      console.log(\[ga]${name}: Redirect count: ${redirectCount}\[ga]);
      if (redirectTime > 0) {
        console.log(\[ga]${name}: Redirect time: ${redirectTime}ms\[ga]);
      }
    }
  });
});

observer.observe({ type: \[dq]navigation\[dq], buffered: true });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]navigation\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
const entries = performance.getEntriesByType(\[dq]navigation\[dq]);
entries.forEach((entry) => {
  const name = entry.name;
  const redirectCount = entry.redirectCount;
  const redirectTime = entry.redirectEnd \- entry.redirectStart;
  if (redirectCount > 0) {
    console.log(\[ga]${name}: Redirect count: ${redirectCount}\[ga]);
    if (redirectTime > 0) {
      console.log(\[ga]${name}: Redirect time: ${redirectTime}ms\[ga]);
    }
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]PerformanceResourceTiming.redirectStart\f[R]
.IP \[bu] 2
\f[CR]PerformanceResourceTiming.redirectEnd\f[R]
