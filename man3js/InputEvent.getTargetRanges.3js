.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "InputEvent.getTargetRanges" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
InputEvent.getTargetRanges \- InputEvent: getTargetRanges() method
.SH SYNOPSIS
The \f[B]\f[CB]getTargetRanges()\f[B]\f[R] method of the
\f[CR]InputEvent\f[R] interface returns an array of static ranges that
will be affected by a change to the DOM if the input event is not
canceled.
.PP
This allows web apps to override text edit behavior before the browser
modifies the DOM tree, and provides more control over input events to
improve performance.
.PP
Depending on the value of \f[CR]inputType\f[R] and the current editing
host, the expected return value of this method varies:
inputType
Editing host
Response of getTargetRanges()
\[lq]historyUndo\[rq] or \[lq]historyRedo\[rq]
Any
empty Array
All remaining
contenteditable
an Array of \f[CR]StaticRange\f[R] objects associated with event
All remaining
input or textarea
an empty Array
.SH SYNTAX
.IP
.EX
getTargetRanges()
.EE
.SS Parameters
None.
.SS Return value
An array of \f[CR]StaticRange\f[R] objects.
.SH EXAMPLES
.SS Feature Detection
The following function returns true if \f[CR]beforeinput\f[R], and thus
\f[CR]getTargetRanges\f[R], is supported.
.IP
.EX
function isBeforeInputEventAvailable() {
  return (
    window.InputEvent &&
    typeof InputEvent.prototype.getTargetRanges === \[dq]function\[dq]
  );
}
.EE
.SS Basic usage
The following example selects a \f[CR]contenteditable\f[R] element and
utilizes the \f[CR]beforeinput\f[R] event to log the result of
\f[CR]getTargetRanges()\f[R].
.IP
.EX
const editableElem = document.querySelector(\[aq][contenteditable=\[dq]true\[dq]]\[aq]);

editableElem.addEventListener(\[dq]beforeinput\[dq], (e) => {
  const targetRanges = e.getTargetRanges();
  console.log(targetRanges);
});
.EE
