#!/bin/sh

set -euo pipefail

get_name() {
	sed -n '/^---$/,/^---$/{
		/^title: Set.prototype.keys()/{
			s/.*/Set.keys/
			p
			q
		}
		/^title: "Function: prototype"/{
			s/.*/Function.prototype/
			p
			q
		}
		/^browser-compat:/{
			s/^browser-compat:[[:space:]]*javascript\.builtins\.//
			p
			q
		}
	}' "$1"
}

get_title() {
	sed -n '/^---$/,/^---$/{
		/^title:/{
			s/^title:[[:space:]]*//
			s/^"//g
			s/"$//g
			p
			q
		}
	}' "$1"
}

get_date() {
	LANG=C ls -og "$1" | awk -v cmonth=$(date +%m) -v cyear=$(date +%Y) '
	BEGIN {
		months["Jan"] =  1; months["Feb"] =  2; months["Mar"] =  3
		months["Apr"] =  4; months["May"] =  5; months["Jun"] =  6
		months["Jul"] =  7; months["Aug"] =  8; months["Sep"] =  9
		months["Oct"] = 10; months["Nov"] = 11; months["Dec"] = 12
	}
	{
		month = months[$4]
		day = $5
		year = ($6 ~ /:/) ? (month > cmonth ? cyear-1 : cyear) : $6
		printf "%d-%02d-%02d\n", year, month, day
	}
	'
}

yn() {
	case $1 in
	0) echo no;;
	1) echo yes;;
	esac
}

js_property_attributes() {
	for i in 0 1; do
	for j in 0 1; do
	for k in 0 1; do
		printf '/^{{js_property_attributes(%d, %d, %d)}}$/c\\\n| | |\\\n|-|-|\\\n|Writable|%s|\\\n|Enumerable|%s|\\\n|Configurable|%s|\\\n\n' \
			"$i" "$j" "$k" "$(yn "$i")" "$(yn "$j")" "$(yn "$k")"
	done
	done
	done
}

clean() {
	sed "
	/^---$/,/^---$/c\\
---\\
title: $(get_name "$1")\\
section: JS\\
header: JavaScript Reference Manual\\
footer: JavaScript\\
date: $(get_date "$1")\\
---\\
# Name\\
$(get_name "$1") - $(get_title "$1")\\
\\
# Synopsis

	/^## Specifications/,/{{Specifications}}/d
	/^## Browser compatibility/,/{{Compat}}/d

	s/\(.*\)\(\`\`\`js\) example-bad/\1**Bad**\n\1\2/
	s/\(.*\)\(\`\`\`js\) example-good/\1**Good**\n\1\2/

	s/^#//

	$(js_property_attributes)

	/{{[^}]*$/N

	s/{{deprecated_header}}/*(deprecated)*/ig
	s/{{Deprecated_Inline}}/*(deprecated)*/ig

	s/{{domxref(\"\([^\"]*\)\")}}/\`\1\`/ig
	s/{{domxref(\"\([^\"]*\)\",[[:space:]]*\"\([^\"]*\)\"[^)]*)}}/\`\2\`/ig

	s/{{EmbedInteractiveExample([^)]*)}}//ig
	s/{{EmbedLiveSample([^)]*)}}//ig

	s/{{Experimental_Inline}}/*(experimental)*/ig

	s/{{Glossary(\"\([^\"]*\)\")}}/\1/ig
	s/{{Glossary(\"\([^\"]*\)\",[[:space:]]*\"\([^\"]*\)\")}}/\2/ig

	s/{{HTMLElement(\"\([^\"]*\)\")}}/\`<\1>\`/ig

	s/{{HTTPHeader(\"\([^\"]*\)\")}}/\`\1\`/ig
	s/{{HTTPMethod(\"\([^\"]*\)\")}}/\`\1\`/ig

	s/{{JSRef}}//ig
	s/{{jsSidebar([^)]*)}}//ig
	s/{{jsxref(\"\([^\"]*\)\")}}/\`\1\`/ig
	s/{{jsxref('\([^']*\)')}}/\`\1\`/ig
	s/{{jsxref(\"\([^\"]*\)\",[[:space:]]*\"\([^\"]*\)\"[^)]*)}}/\`\2\`/ig
	s/{{jsxref('\([^']*\)',[[:space:]]*'\([^']*\)'[^)]*)}}/\`\2\`/ig

	s/{{non-standard_header}}/*(non-standard)*/ig
	s/{{non-standard_inline}}/*(non-standard)*/ig

	s/{{optional_inline}}/*(optional)*/ig

	s/{{rfc(\([^)]*\))}}/RFC \1/ig

	s/{{SeeCompatTable}}//ig
	" "$1"
}

convert() {
	pandoc --lua-filter=filter.lua -s -t man
}

clean "$1" | convert
